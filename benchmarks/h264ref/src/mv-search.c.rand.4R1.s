	.text
	.file	"mv-search.c"
	.globl	InitializeFastFullIntegerSearch # -- Begin function InitializeFastFullIntegerSearch
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch,@function
InitializeFastFullIntegerSearch:        # @InitializeFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_InitializeFastFullIntegerSearch.28
	callq	InitializeFastFullIntegerSearch.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_InitializeFastFullIntegerSearch.56
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_InitializeFastFullIntegerSearch.68
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_InitializeFastFullIntegerSearch.71
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	InitializeFastFullIntegerSearch, .Lfunc_end0-InitializeFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch # -- Begin function ClearFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch,@function
ClearFastFullIntegerSearch:             # @ClearFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_ClearFastFullIntegerSearch.43
	callq	ClearFastFullIntegerSearch.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_ClearFastFullIntegerSearch.52
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_ClearFastFullIntegerSearch.61
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_ClearFastFullIntegerSearch.66
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	ClearFastFullIntegerSearch, .Lfunc_end1-ClearFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch # -- Begin function ResetFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch,@function
ResetFastFullIntegerSearch:             # @ResetFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_ResetFastFullIntegerSearch.2
	callq	ResetFastFullIntegerSearch.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_ResetFastFullIntegerSearch.27
	.cfi_def_cfa %rbp, 16
	callq	ResetFastFullIntegerSearch.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	ResetFastFullIntegerSearch, .Lfunc_end2-ResetFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks       # -- Begin function SetupLargerBlocks
	.p2align	4, 0x90
	.type	SetupLargerBlocks,@function
SetupLargerBlocks:                      # @SetupLargerBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_SetupLargerBlocks.17
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_SetupLargerBlocks.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_SetupLargerBlocks.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_SetupLargerBlocks.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	SetupLargerBlocks, .Lfunc_end3-SetupLargerBlocks
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch  # -- Begin function SetupFastFullPelSearch
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch,@function
SetupFastFullPelSearch:                 # @SetupFastFullPelSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_SetupFastFullPelSearch.10
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_SetupFastFullPelSearch.49
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_SetupFastFullPelSearch.62
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_SetupFastFullPelSearch.67
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	SetupFastFullPelSearch, .Lfunc_end4-SetupFastFullPelSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor # -- Begin function SetMotionVectorPredictor
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor,@function
SetMotionVectorPredictor:               # @SetMotionVectorPredictor
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_SetMotionVectorPredictor.46
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	callq	SetMotionVectorPredictor.46
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_SetMotionVectorPredictor.58
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.58
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_SetMotionVectorPredictor.77
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.77
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_SetMotionVectorPredictor.81
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.81
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	24(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	32(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	SetMotionVectorPredictor, .Lfunc_end5-SetMotionVectorPredictor
	.cfi_endproc
                                        # -- End function
	.globl	Init_Motion_Search_Module # -- Begin function Init_Motion_Search_Module
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module,@function
Init_Motion_Search_Module:              # @Init_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Init_Motion_Search_Module.6
	callq	Init_Motion_Search_Module.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Init_Motion_Search_Module.23
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Init_Motion_Search_Module.25
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Init_Motion_Search_Module.34
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Init_Motion_Search_Module, .Lfunc_end6-Init_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	Clear_Motion_Search_Module # -- Begin function Clear_Motion_Search_Module
	.p2align	4, 0x90
	.type	Clear_Motion_Search_Module,@function
Clear_Motion_Search_Module:             # @Clear_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	max_mvd, %ecx
	movq	mvbits, %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	shlq	$2, %rax
	addq	%rax, %rdx
	movq	%rdx, mvbits
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	jmp	.LBB7_3
.LBB7_2:                                # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
.LBB7_3:                                # %cond.end
	xorl	%ecx, %ecx
	movq	byte_abs, %rdx
	cltq
	subq	%rax, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, byte_abs
	movq	spiral_search_x, %rdi
	callq	free
	movq	spiral_search_y, %rdi
	callq	free
	movq	mvbits, %rdi
	callq	free
	movq	refbits, %rdi
	callq	free
	movq	byte_abs, %rdi
	callq	free
	movq	motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	callq	free_mem4Dint
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB7_5
# %bb.4:                                # %if.then
	callq	ClearFastFullIntegerSearch
.LBB7_5:                                # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	Clear_Motion_Search_Module, .Lfunc_end7-Clear_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionSearch # -- Begin function FullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch,@function
FullPelBlockMotionSearch:               # @FullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_FullPelBlockMotionSearch.14
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionSearch.14
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_FullPelBlockMotionSearch.31
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.31
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_FullPelBlockMotionSearch.33
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.33
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_FullPelBlockMotionSearch.64
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.64
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	FullPelBlockMotionSearch, .Lfunc_end8-FullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FastFullPelBlockMotionSearch # -- Begin function FastFullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch,@function
FastFullPelBlockMotionSearch:           # @FastFullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_FastFullPelBlockMotionSearch.5
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FastFullPelBlockMotionSearch.5
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_FastFullPelBlockMotionSearch.29
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.29
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_FastFullPelBlockMotionSearch.96
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.96
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_FastFullPelBlockMotionSearch.98
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.98
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	FastFullPelBlockMotionSearch, .Lfunc_end9-FastFullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	SATD                    # -- Begin function SATD
	.p2align	4, 0x90
	.type	SATD,@function
SATD:                                   # @SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_SATD.24
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_SATD.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_SATD.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.79
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_SATD.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	SATD, .Lfunc_end10-SATD
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8                 # -- Begin function SATD8X8
	.p2align	4, 0x90
	.type	SATD8X8,@function
SATD8X8:                                # @SATD8X8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SATD8X8.54
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SATD8X8.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SATD8X8.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.70
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SATD8X8.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SATD8X8, .Lfunc_end11-SATD8X8
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD               # -- Begin function find_SATD
	.p2align	4, 0x90
	.type	find_SATD,@function
find_SATD:                              # @find_SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_find_SATD.16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_find_SATD.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_find_SATD.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_find_SATD.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	find_SATD, .Lfunc_end12-find_SATD
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockMotionSearch # -- Begin function SubPelBlockMotionSearch
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch,@function
SubPelBlockMotionSearch:                # @SubPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SubPelBlockMotionSearch.38
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockMotionSearch.38
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SubPelBlockMotionSearch.40
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%r15d, 48(%rsp)
	callq	SubPelBlockMotionSearch.40
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SubPelBlockMotionSearch.42
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.42
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SubPelBlockMotionSearch.69
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.69
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%ebx, %edx
	movw	16(%rbp), %r11w
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	56(%rbp), %r12d
	movl	64(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %ebx
	movl	%r13d, %ecx
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SubPelBlockMotionSearch, .Lfunc_end13-SubPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionBiPred # -- Begin function FullPelBlockMotionBiPred
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred,@function
FullPelBlockMotionBiPred:               # @FullPelBlockMotionBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_FullPelBlockMotionBiPred.1
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	88(%rbp), %eax
	movl	%eax, 72(%rsp)
	movl	96(%rbp), %eax
	movl	%eax, 80(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionBiPred.1
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_FullPelBlockMotionBiPred.26
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.26
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_FullPelBlockMotionBiPred.37
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.37
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_FullPelBlockMotionBiPred.39
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.39
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	%ebx, %edx
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	88(%rbp), %ebx
	movl	96(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	FullPelBlockMotionBiPred, .Lfunc_end14-FullPelBlockMotionBiPred
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockSearchBiPred # -- Begin function SubPelBlockSearchBiPred
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred,@function
SubPelBlockSearchBiPred:                # @SubPelBlockSearchBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_SubPelBlockSearchBiPred.12
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	72(%rbp), %eax
	movl	%eax, 56(%rsp)
	movl	80(%rbp), %eax
	movl	%eax, 64(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockSearchBiPred.12
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_SubPelBlockSearchBiPred.63
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r15d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.63
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_SubPelBlockSearchBiPred.76
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.76
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_SubPelBlockSearchBiPred.85
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.85
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r11w
	movl	%ebx, %edx
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	72(%rbp), %ebx
	movl	80(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %r12d
	movl	%r13d, %ecx
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	SubPelBlockSearchBiPred, .Lfunc_end15-SubPelBlockSearchBiPred
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost      # -- Begin function BPredPartitionCost
	.p2align	4, 0x90
	.type	BPredPartitionCost,@function
BPredPartitionCost:                     # @BPredPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_BPredPartitionCost.7
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BPredPartitionCost.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_BPredPartitionCost.74
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	callq	BPredPartitionCost.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_BPredPartitionCost.75
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_BPredPartitionCost.92
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	BPredPartitionCost, .Lfunc_end16-BPredPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	BlockMotionSearch       # -- Begin function BlockMotionSearch
	.p2align	4, 0x90
	.type	BlockMotionSearch,@function
BlockMotionSearch:                      # @BlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_BlockMotionSearch.21
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	BlockMotionSearch.21
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_BlockMotionSearch.36
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	BlockMotionSearch.36
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_BlockMotionSearch.55
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.55
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_BlockMotionSearch.72
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.72
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	BlockMotionSearch, .Lfunc_end17-BlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB           # -- Begin function GetSkipCostMB
	.p2align	4, 0x90
	.type	GetSkipCostMB,@function
GetSkipCostMB:                          # @GetSkipCostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_GetSkipCostMB.44
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	GetSkipCostMB.44
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_GetSkipCostMB.59
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.59
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_GetSkipCostMB.87
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.87
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_GetSkipCostMB.91
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.91
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	GetSkipCostMB, .Lfunc_end18-GetSkipCostMB
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost        # -- Begin function BIDPartitionCost
	.p2align	4, 0x90
	.type	BIDPartitionCost,@function
BIDPartitionCost:                       # @BIDPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_BIDPartitionCost.41
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_BIDPartitionCost.84
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.84
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_BIDPartitionCost.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.88
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_BIDPartitionCost.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	BIDPartitionCost, .Lfunc_end19-BIDPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector # -- Begin function FindSkipModeMotionVector
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector,@function
FindSkipModeMotionVector:               # @FindSkipModeMotionVector
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_FindSkipModeMotionVector.15
	callq	FindSkipModeMotionVector.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_FindSkipModeMotionVector.45
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_FindSkipModeMotionVector.50
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_FindSkipModeMotionVector.65
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	FindSkipModeMotionVector, .Lfunc_end20-FindSkipModeMotionVector
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8      # -- Begin function Get_Direct_Cost8x8
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8,@function
Get_Direct_Cost8x8:                     # @Get_Direct_Cost8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_Get_Direct_Cost8x8.18
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_Get_Direct_Cost8x8.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_Get_Direct_Cost8x8.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_Get_Direct_Cost8x8.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	Get_Direct_Cost8x8, .Lfunc_end21-Get_Direct_Cost8x8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB       # -- Begin function Get_Direct_CostMB
	.p2align	4, 0x90
	.type	Get_Direct_CostMB,@function
Get_Direct_CostMB:                      # @Get_Direct_CostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_Get_Direct_CostMB.82
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB.82
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_Get_Direct_CostMB.86
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.86
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_Get_Direct_CostMB.89
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.89
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_Get_Direct_CostMB.90
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.90
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	Get_Direct_CostMB, .Lfunc_end22-Get_Direct_CostMB
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch   # -- Begin function PartitionMotionSearch
	.p2align	4, 0x90
	.type	PartitionMotionSearch,@function
PartitionMotionSearch:                  # @PartitionMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_PartitionMotionSearch.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	PartitionMotionSearch.8
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_PartitionMotionSearch.11
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.11
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_PartitionMotionSearch.22
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.22
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_PartitionMotionSearch.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.32
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	PartitionMotionSearch, .Lfunc_end23-PartitionMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors # -- Begin function Get_Direct_Motion_Vectors
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors,@function
Get_Direct_Motion_Vectors:              # @Get_Direct_Motion_Vectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_Get_Direct_Motion_Vectors.4
	callq	Get_Direct_Motion_Vectors.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_Get_Direct_Motion_Vectors.19
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_Get_Direct_Motion_Vectors.60
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_Get_Direct_Motion_Vectors.97
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.97
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	Get_Direct_Motion_Vectors, .Lfunc_end24-Get_Direct_Motion_Vectors
	.cfi_endproc
                                        # -- End function
	.globl	sign                    # -- Begin function sign
	.p2align	4, 0x90
	.type	sign,@function
sign:                                   # @sign
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_sign.3
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_sign.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_sign.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_sign.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	sign, .Lfunc_end25-sign
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.1
.LCPI26_0:
	.quad	4602678819172646912     # double 0.5
.LCPI26_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.1
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.1,@function
FullPelBlockMotionBiPred.1:             # @FullPelBlockMotionBiPred.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$2118736555, -184(%rbp) # imm = 0x7E495AAB
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB26_4
.LBB26_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB26_4
.LBB26_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB26_6
# %bb.5:                                # %cond.true9
	movl	-36(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB26_7
.LBB26_6:                               # %cond.false11
	movl	-36(%rbp), %eax
.LBB26_7:                               # %cond.end12
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -124(%rbp)
	movl	-84(%rbp), %eax
	addl	-36(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -112(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -192(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -140(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-104(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-108(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-104(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB26_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB26_11
.LBB26_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB26_11:                              # %cond.end87
	jmp	.LBB26_13
.LBB26_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB26_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB26_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB26_17
.LBB26_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB26_17:                              # %cond.end114
	jmp	.LBB26_19
.LBB26_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB26_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB26_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB26_23
.LBB26_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB26_23:                              # %cond.end138
	jmp	.LBB26_25
.LBB26_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB26_25
.LBB26_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB26_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB26_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB26_29
.LBB26_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB26_29:                              # %cond.end161
	jmp	.LBB26_31
.LBB26_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB26_31
.LBB26_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB26_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB26_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB26_37
.LBB26_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB26_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB26_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB26_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB26_43
.LBB26_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB26_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB26_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_49 Depth 2
                                        #       Child Loop BB26_51 Depth 3
                                        #     Child Loop BB26_85 Depth 2
                                        #       Child Loop BB26_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-192(%rbp), %eax
	jge	.LBB26_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB26_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-180(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-188(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-172(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB26_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_99
.LBB26_47:                              # %if.end257
                                        #   in Loop: Header=BB26_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB26_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB26_44 Depth=1
	movl	$0, -40(%rbp)
.LBB26_49:                              # %for.cond260
                                        #   Parent Loop BB26_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_51 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB26_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB26_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB26_51:                              # %for.cond271
                                        #   Parent Loop BB26_44 Depth=1
                                        #     Parent Loop BB26_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB26_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB26_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB26_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_58
.LBB26_54:                              # %cond.false296
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB26_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_57
.LBB26_56:                              # %cond.false310
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB26_57:                              # %cond.end320
                                        #   in Loop: Header=BB26_51 Depth=3
.LBB26_58:                              # %cond.end322
                                        #   in Loop: Header=BB26_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB26_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB26_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_64
.LBB26_60:                              # %cond.false354
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB26_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_63
.LBB26_62:                              # %cond.false369
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB26_63:                              # %cond.end379
                                        #   in Loop: Header=BB26_51 Depth=3
.LBB26_64:                              # %cond.end381
                                        #   in Loop: Header=BB26_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB26_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB26_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_70
.LBB26_66:                              # %cond.false413
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB26_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_69
.LBB26_68:                              # %cond.false428
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB26_69:                              # %cond.end438
                                        #   in Loop: Header=BB26_51 Depth=3
.LBB26_70:                              # %cond.end440
                                        #   in Loop: Header=BB26_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB26_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB26_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_76
.LBB26_72:                              # %cond.false472
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB26_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_75
.LBB26_74:                              # %cond.false487
                                        #   in Loop: Header=BB26_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB26_75:                              # %cond.end497
                                        #   in Loop: Header=BB26_51 Depth=3
.LBB26_76:                              # %cond.end499
                                        #   in Loop: Header=BB26_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB26_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB26_51
.LBB26_78:                              # %for.end
                                        #   in Loop: Header=BB26_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB26_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_83
.LBB26_80:                              # %if.end512
                                        #   in Loop: Header=BB26_49 Depth=2
	jmp	.LBB26_81
.LBB26_81:                              # %for.inc513
                                        #   in Loop: Header=BB26_49 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB26_49
.LBB26_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_83
.LBB26_83:                              # %for.end515
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_96
.LBB26_84:                              # %if.else516
                                        #   in Loop: Header=BB26_44 Depth=1
	movl	$0, -40(%rbp)
.LBB26_85:                              # %for.cond517
                                        #   Parent Loop BB26_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_87 Depth 3
	movl	-40(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB26_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB26_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-40(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB26_87:                              # %for.cond529
                                        #   Parent Loop BB26_44 Depth=1
                                        #     Parent Loop BB26_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB26_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB26_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -72(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB26_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB26_87
.LBB26_90:                              # %for.end583
                                        #   in Loop: Header=BB26_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB26_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_95
.LBB26_92:                              # %if.end587
                                        #   in Loop: Header=BB26_85 Depth=2
	jmp	.LBB26_93
.LBB26_93:                              # %for.inc588
                                        #   in Loop: Header=BB26_85 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB26_85
.LBB26_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_95
.LBB26_95:                              # %for.end590
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_96
.LBB26_96:                              # %if.end591
                                        #   in Loop: Header=BB26_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB26_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB26_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB26_98:                              # %if.end595
                                        #   in Loop: Header=BB26_44 Depth=1
	jmp	.LBB26_99
.LBB26_99:                              # %for.inc596
                                        #   in Loop: Header=BB26_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB26_44
.LBB26_100:                             # %for.end598
	cmpl	$0, -112(%rbp)
	je	.LBB26_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-112(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB26_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$2118736555, -184(%rbp) # imm = 0x7E495AAB
	jne	.LBB26_104
.LBB26_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_103
.Lfunc_end26:
	.size	FullPelBlockMotionBiPred.1, .Lfunc_end26-FullPelBlockMotionBiPred.1
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.2 # -- Begin function ResetFastFullIntegerSearch.2
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.2,@function
ResetFastFullIntegerSearch.2:           # @ResetFastFullIntegerSearch.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1397666756, -12(%rbp)  # imm = 0x534EB3C4
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB27_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -8(%rbp)
.LBB27_3:                               # %for.cond1
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB27_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_3
.LBB27_6:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_7
.LBB27_7:                               # %for.inc6
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_8:                               # %for.end8
	cmpl	$1397666756, -12(%rbp)  # imm = 0x534EB3C4
	jne	.LBB27_10
.LBB27_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_9
.Lfunc_end27:
	.size	ResetFastFullIntegerSearch.2, .Lfunc_end27-ResetFastFullIntegerSearch.2
	.cfi_endproc
                                        # -- End function
	.globl	sign.3                  # -- Begin function sign.3
	.p2align	4, 0x90
	.type	sign.3,@function
sign.3:                                 # @sign.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1229378930, -24(%rbp)  # imm = 0x4946D572
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB28_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB28_3
.LBB28_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB28_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB28_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_6
.LBB28_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB28_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$1229378930, -24(%rbp)  # imm = 0x4946D572
	jne	.LBB28_8
.LBB28_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_7
.Lfunc_end28:
	.size	sign.3, .Lfunc_end28-sign.3
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.4 # -- Begin function Get_Direct_Motion_Vectors.4
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.4,@function
Get_Direct_Motion_Vectors.4:            # @Get_Direct_Motion_Vectors.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$863859277, -232(%rbp)  # imm = 0x337D724D
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB29_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB29_5
.LBB29_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB29_5:                               # %if.end
	jmp	.LBB29_7
.LBB29_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB29_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB29_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB29_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB29_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_12
.LBB29_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_12
.LBB29_12:                              # %cond.end
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_15
.LBB29_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_15
.LBB29_15:                              # %cond.end38
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_18
.LBB29_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_18
.LBB29_18:                              # %cond.end54
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_21
.LBB29_20:                              # %cond.false69
	movswl	-52(%rbp), %eax
.LBB29_21:                              # %cond.end71
	movw	%ax, -28(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB29_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_24
.LBB29_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_24
.LBB29_24:                              # %cond.end87
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_27
.LBB29_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_27
.LBB29_27:                              # %cond.end103
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_30
.LBB29_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_30
.LBB29_30:                              # %cond.end119
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_33
.LBB29_32:                              # %cond.false134
	movswl	-50(%rbp), %eax
.LBB29_33:                              # %cond.end136
	movw	%ax, -30(%rbp)
	jmp	.LBB29_150
.LBB29_34:                              # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB29_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_39
.LBB29_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_40
.LBB29_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_40:                              # %cond.end181
	jmp	.LBB29_42
.LBB29_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_42
.LBB29_42:                              # %cond.end184
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_46
.LBB29_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_47
.LBB29_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_47:                              # %cond.end229
	jmp	.LBB29_49
.LBB29_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_49
.LBB29_49:                              # %cond.end232
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_53
.LBB29_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_54
.LBB29_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_54:                              # %cond.end277
	jmp	.LBB29_56
.LBB29_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_56
.LBB29_56:                              # %cond.end280
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_60
.LBB29_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_61
.LBB29_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_61:                              # %cond.end325
	jmp	.LBB29_63
.LBB29_62:                              # %cond.false327
	movswl	-52(%rbp), %eax
.LBB29_63:                              # %cond.end329
	movw	%ax, -28(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB29_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_67
.LBB29_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_68
.LBB29_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_68:                              # %cond.end374
	jmp	.LBB29_70
.LBB29_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_70
.LBB29_70:                              # %cond.end377
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_74
.LBB29_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_75
.LBB29_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_75:                              # %cond.end422
	jmp	.LBB29_77
.LBB29_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_77
.LBB29_77:                              # %cond.end425
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_81
.LBB29_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_82
.LBB29_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_82:                              # %cond.end470
	jmp	.LBB29_84
.LBB29_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_84
.LBB29_84:                              # %cond.end473
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_88
.LBB29_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB29_89
.LBB29_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB29_89:                              # %cond.end518
	jmp	.LBB29_91
.LBB29_90:                              # %cond.false520
	movswl	-50(%rbp), %eax
.LBB29_91:                              # %cond.end522
	movw	%ax, -30(%rbp)
	jmp	.LBB29_149
.LBB29_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB29_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_96
.LBB29_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_97
.LBB29_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_97:                              # %cond.end567
	jmp	.LBB29_99
.LBB29_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_99
.LBB29_99:                              # %cond.end570
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_103
.LBB29_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_104
.LBB29_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_104:                             # %cond.end615
	jmp	.LBB29_106
.LBB29_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_106
.LBB29_106:                             # %cond.end618
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_110
.LBB29_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_111
.LBB29_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_111:                             # %cond.end663
	jmp	.LBB29_113
.LBB29_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_113
.LBB29_113:                             # %cond.end666
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_117
.LBB29_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_118
.LBB29_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_118:                             # %cond.end711
	jmp	.LBB29_120
.LBB29_119:                             # %cond.false713
	movswl	-52(%rbp), %eax
.LBB29_120:                             # %cond.end715
	movw	%ax, -28(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB29_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_124
.LBB29_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_125
.LBB29_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_125:                             # %cond.end760
	jmp	.LBB29_127
.LBB29_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_127
.LBB29_127:                             # %cond.end763
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB29_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_131
.LBB29_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_132
.LBB29_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_132:                             # %cond.end808
	jmp	.LBB29_134
.LBB29_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_134
.LBB29_134:                             # %cond.end811
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB29_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_138
.LBB29_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_139
.LBB29_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_139:                             # %cond.end856
	jmp	.LBB29_141
.LBB29_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB29_141
.LBB29_141:                             # %cond.end859
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB29_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB29_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB29_145
.LBB29_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB29_146
.LBB29_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB29_146:                             # %cond.end904
	jmp	.LBB29_148
.LBB29_147:                             # %cond.false906
	movswl	-50(%rbp), %eax
.LBB29_148:                             # %cond.end908
	movw	%ax, -30(%rbp)
.LBB29_149:                             # %if.end911
	jmp	.LBB29_150
.LBB29_150:                             # %if.end912
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_156
# %bb.151:                              # %land.lhs.true916
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_156
# %bb.152:                              # %cond.true920
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_154
# %bb.153:                              # %cond.true925
	movswl	-32(%rbp), %eax
	jmp	.LBB29_155
.LBB29_154:                             # %cond.false927
	movswl	-22(%rbp), %eax
.LBB29_155:                             # %cond.end929
	jmp	.LBB29_160
.LBB29_156:                             # %cond.false931
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB29_158
# %bb.157:                              # %cond.true936
	movswl	-32(%rbp), %eax
	jmp	.LBB29_159
.LBB29_158:                             # %cond.false938
	movswl	-22(%rbp), %eax
.LBB29_159:                             # %cond.end940
.LBB29_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_166
# %bb.161:                              # %land.lhs.true948
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB29_165
.LBB29_164:                             # %cond.false959
	movswl	-28(%rbp), %eax
.LBB29_165:                             # %cond.end961
	jmp	.LBB29_170
.LBB29_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB29_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB29_169
.LBB29_168:                             # %cond.false970
	movswl	-28(%rbp), %eax
.LBB29_169:                             # %cond.end972
.LBB29_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_176
# %bb.171:                              # %land.lhs.true980
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_176
# %bb.172:                              # %cond.true984
	movswl	-24(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_174
# %bb.173:                              # %cond.true989
	movswl	-24(%rbp), %eax
	jmp	.LBB29_175
.LBB29_174:                             # %cond.false991
	movswl	-26(%rbp), %eax
.LBB29_175:                             # %cond.end993
	jmp	.LBB29_180
.LBB29_176:                             # %cond.false995
	movswl	-24(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB29_178
# %bb.177:                              # %cond.true1000
	movswl	-24(%rbp), %eax
	jmp	.LBB29_179
.LBB29_178:                             # %cond.false1002
	movswl	-26(%rbp), %eax
.LBB29_179:                             # %cond.end1004
.LBB29_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB29_185
.LBB29_184:                             # %cond.false1023
	movswl	-30(%rbp), %eax
.LBB29_185:                             # %cond.end1025
	jmp	.LBB29_190
.LBB29_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB29_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB29_189
.LBB29_188:                             # %cond.false1034
	movswl	-30(%rbp), %eax
.LBB29_189:                             # %cond.end1036
.LBB29_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB29_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB29_194:                             # %if.end1055
	movl	$0, -8(%rbp)
.LBB29_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB29_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB29_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB29_197:                             # %for.cond1061
                                        #   Parent Loop BB29_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB29_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB29_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB29_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB29_203
.LBB29_202:                             # %if.else1102
                                        #   in Loop: Header=BB29_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB29_203:                             # %if.end1128
                                        #   in Loop: Header=BB29_197 Depth=2
	jmp	.LBB29_205
.LBB29_204:                             # %if.else1129
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB29_205:                             # %if.end1151
                                        #   in Loop: Header=BB29_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB29_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB29_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB29_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB29_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB29_210
.LBB29_209:                             # %if.else1187
                                        #   in Loop: Header=BB29_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB29_210:                             # %if.end1213
                                        #   in Loop: Header=BB29_197 Depth=2
	jmp	.LBB29_212
.LBB29_211:                             # %if.else1214
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB29_212:                             # %if.end1236
                                        #   in Loop: Header=BB29_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB29_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB29_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB29_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB29_215:                             # %if.end1255
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB29_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB29_221
.LBB29_217:                             # %if.else1269
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB29_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB29_220
.LBB29_219:                             # %if.else1283
                                        #   in Loop: Header=BB29_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB29_220:                             # %if.end1288
                                        #   in Loop: Header=BB29_197 Depth=2
	jmp	.LBB29_221
.LBB29_221:                             # %if.end1289
                                        #   in Loop: Header=BB29_197 Depth=2
	jmp	.LBB29_222
.LBB29_222:                             # %for.inc
                                        #   in Loop: Header=BB29_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_197
.LBB29_223:                             # %for.end
                                        #   in Loop: Header=BB29_195 Depth=1
	jmp	.LBB29_224
.LBB29_224:                             # %for.inc1290
                                        #   in Loop: Header=BB29_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_195
.LBB29_225:                             # %for.end1292
	jmp	.LBB29_259
.LBB29_226:                             # %if.else1293
	movl	$0, -8(%rbp)
.LBB29_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_229 Depth 2
                                        #       Child Loop BB29_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB29_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB29_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB29_229:                             # %for.cond1304
                                        #   Parent Loop BB29_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB29_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB29_234
.LBB29_233:                             # %cond.false1319
                                        #   in Loop: Header=BB29_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB29_234
.LBB29_234:                             # %cond.end1320
                                        #   in Loop: Header=BB29_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB29_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB29_254
.LBB29_236:                             # %if.else1393
                                        #   in Loop: Header=BB29_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB29_237:                             # %for.cond1394
                                        #   Parent Loop BB29_227 Depth=1
                                        #     Parent Loop BB29_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB29_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB29_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB29_240
.LBB29_239:                             # %cond.false1402
                                        #   in Loop: Header=BB29_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB29_240:                             # %cond.end1406
                                        #   in Loop: Header=BB29_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB29_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB29_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB29_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB29_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB29_247
.LBB29_243:                             # %if.else1425
                                        #   in Loop: Header=BB29_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB29_237 Depth=3
	jmp	.LBB29_245
.LBB29_245:                             # %for.inc1427
                                        #   in Loop: Header=BB29_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB29_237
.LBB29_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB29_229 Depth=2
	jmp	.LBB29_247
.LBB29_247:                             # %for.end1429
                                        #   in Loop: Header=BB29_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB29_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB29_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB29_251
.LBB29_250:                             # %if.else1487
                                        #   in Loop: Header=BB29_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB29_251:                             # %if.end1571
                                        #   in Loop: Header=BB29_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB29_253
.LBB29_252:                             # %if.else1587
                                        #   in Loop: Header=BB29_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB29_253:                             # %if.end1602
                                        #   in Loop: Header=BB29_229 Depth=2
	jmp	.LBB29_254
.LBB29_254:                             # %if.end1603
                                        #   in Loop: Header=BB29_229 Depth=2
	jmp	.LBB29_255
.LBB29_255:                             # %for.inc1604
                                        #   in Loop: Header=BB29_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_229
.LBB29_256:                             # %for.end1606
                                        #   in Loop: Header=BB29_227 Depth=1
	jmp	.LBB29_257
.LBB29_257:                             # %for.inc1607
                                        #   in Loop: Header=BB29_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_227
.LBB29_258:                             # %for.end1609
	jmp	.LBB29_259
.LBB29_259:                             # %if.end1610
	cmpl	$863859277, -232(%rbp)  # imm = 0x337D724D
	jne	.LBB29_261
.LBB29_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_260
.Lfunc_end29:
	.size	Get_Direct_Motion_Vectors.4, .Lfunc_end29-Get_Direct_Motion_Vectors.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.5
.LCPI30_0:
	.quad	4602678819172646912     # double 0.5
.LCPI30_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.5
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.5,@function
FastFullPelBlockMotionSearch.5:         # @FastFullPelBlockMotionSearch.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI30_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI30_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1130518694, -64(%rbp)  # imm = 0x436258A6
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -72(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -60(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB30_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB30_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB30_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB30_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB30_5:                               # %if.end56
	jmp	.LBB30_6
.LBB30_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB30_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB30_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB30_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB30_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB30_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB30_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB30_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB30_11:                              # %if.end85
                                        #   in Loop: Header=BB30_7 Depth=1
	jmp	.LBB30_12
.LBB30_12:                              # %if.end86
                                        #   in Loop: Header=BB30_7 Depth=1
	jmp	.LBB30_13
.LBB30_13:                              # %for.inc
                                        #   in Loop: Header=BB30_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB30_7
.LBB30_14:                              # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1130518694, -64(%rbp)  # imm = 0x436258A6
	jne	.LBB30_16
.LBB30_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_15
.Lfunc_end30:
	.size	FastFullPelBlockMotionSearch.5, .Lfunc_end30-FastFullPelBlockMotionSearch.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.6
.LCPI31_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI31_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.6
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.6,@function
Init_Motion_Search_Module.6:            # @Init_Motion_Search_Module.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1735944616, -60(%rbp)  # imm = 0x677869A8
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB31_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB31_3
.LBB31_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB31_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB31_6
.LBB31_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB31_6:                               # %cond.end19
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB31_9
.LBB31_8:                               # %cond.false24
	movl	-40(%rbp), %eax
	addl	$1, %eax
.LBB31_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI31_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI31_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI31_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI31_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB31_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB31_11:                              # %if.end
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB31_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB31_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB31_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB31_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB31_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB31_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB31_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB31_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB31_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB31_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_22:                              # %for.cond90
                                        #   Parent Loop BB31_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB31_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB31_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_22
.LBB31_25:                              # %for.end
                                        #   in Loop: Header=BB31_20 Depth=1
	jmp	.LBB31_26
.LBB31_26:                              # %for.inc98
                                        #   in Loop: Header=BB31_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_20
.LBB31_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB31_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB31_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB31_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_30:                              # %for.cond111
                                        #   Parent Loop BB31_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB31_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB31_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_30
.LBB31_33:                              # %for.end119
                                        #   in Loop: Header=BB31_28 Depth=1
	jmp	.LBB31_34
.LBB31_34:                              # %for.inc120
                                        #   in Loop: Header=BB31_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_28
.LBB31_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB31_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB31_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB31_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_36
.LBB31_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB31_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_45 Depth 2
                                        #     Child Loop BB31_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB31_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB31_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB31_43
.LBB31_42:                              # %cond.false143
                                        #   in Loop: Header=BB31_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB31_43:                              # %cond.end144
                                        #   in Loop: Header=BB31_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB31_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB31_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB31_45:                              # %for.cond151
                                        #   Parent Loop BB31_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB31_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB31_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB31_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_45
.LBB31_48:                              # %for.end168
                                        #   in Loop: Header=BB31_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB31_49:                              # %for.cond170
                                        #   Parent Loop BB31_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB31_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB31_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB31_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_49
.LBB31_52:                              # %for.end187
                                        #   in Loop: Header=BB31_40 Depth=1
	jmp	.LBB31_53
.LBB31_53:                              # %for.inc188
                                        #   in Loop: Header=BB31_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_40
.LBB31_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB31_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB31_56:                              # %if.end192
	cmpl	$1735944616, -60(%rbp)  # imm = 0x677869A8
	jne	.LBB31_58
.LBB31_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_57
.Lfunc_end31:
	.size	Init_Motion_Search_Module.6, .Lfunc_end31-Init_Motion_Search_Module.6
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.7    # -- Begin function BPredPartitionCost.7
	.p2align	4, 0x90
	.type	BPredPartitionCost.7,@function
BPredPartitionCost.7:                   # @BPredPartitionCost.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1144261261, -112(%rbp) # imm = 0x44340A8D
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB32_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB32_3
.LBB32_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB32_3
.LBB32_3:                               # %cond.end
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB32_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB32_6
.LBB32_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB32_6
.LBB32_6:                               # %cond.end17
	movl	%eax, -108(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB32_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB32_9
.LBB32_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB32_9
.LBB32_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -76(%rbp)
	je	.LBB32_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB32_12
.LBB32_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB32_12:                              # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB32_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB32_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB32_15:                              # %for.cond56
                                        #   Parent Loop BB32_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB32_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB32_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_15
.LBB32_18:                              # %for.end
                                        #   in Loop: Header=BB32_13 Depth=1
	jmp	.LBB32_19
.LBB32_19:                              # %for.inc167
                                        #   in Loop: Header=BB32_13 Depth=1
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_13
.LBB32_20:                              # %for.end169
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB32_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_23 Depth 2
                                        #       Child Loop BB32_25 Depth 3
                                        #         Child Loop BB32_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB32_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB32_23:                              # %for.cond188
                                        #   Parent Loop BB32_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_25 Depth 3
                                        #         Child Loop BB32_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB32_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	-64(%rbp), %edi
	movl	-80(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-76(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB32_25:                              # %for.cond199
                                        #   Parent Loop BB32_21 Depth=1
                                        #     Parent Loop BB32_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB32_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB32_25 Depth=3
	movl	$0, -28(%rbp)
.LBB32_27:                              # %for.cond203
                                        #   Parent Loop BB32_21 Depth=1
                                        #     Parent Loop BB32_23 Depth=2
                                        #       Parent Loop BB32_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB32_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB32_27 Depth=4
	movq	imgY_org, %rax
	movl	-104(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB32_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_27
.LBB32_30:                              # %for.end232
                                        #   in Loop: Header=BB32_25 Depth=3
	jmp	.LBB32_31
.LBB32_31:                              # %for.inc233
                                        #   in Loop: Header=BB32_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_25
.LBB32_32:                              # %for.end235
                                        #   in Loop: Header=BB32_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB32_35
.LBB32_34:                              # %if.then
                                        #   in Loop: Header=BB32_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB32_35:                              # %if.end
                                        #   in Loop: Header=BB32_23 Depth=2
	jmp	.LBB32_36
.LBB32_36:                              # %for.inc240
                                        #   in Loop: Header=BB32_23 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_23
.LBB32_37:                              # %for.end243
                                        #   in Loop: Header=BB32_21 Depth=1
	jmp	.LBB32_38
.LBB32_38:                              # %for.inc244
                                        #   in Loop: Header=BB32_21 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_21
.LBB32_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB32_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB32_58
# %bb.41:                               # %if.then252
	movl	$0, -44(%rbp)
.LBB32_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_44 Depth 2
                                        #       Child Loop BB32_46 Depth 3
                                        #         Child Loop BB32_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB32_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB32_42 Depth=1
	movl	$0, -52(%rbp)
.LBB32_44:                              # %for.cond261
                                        #   Parent Loop BB32_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_46 Depth 3
                                        #         Child Loop BB32_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB32_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB32_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB32_46:                              # %for.cond269
                                        #   Parent Loop BB32_42 Depth=1
                                        #     Parent Loop BB32_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB32_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB32_46 Depth=3
	movl	$0, -32(%rbp)
.LBB32_48:                              # %for.cond273
                                        #   Parent Loop BB32_42 Depth=1
                                        #     Parent Loop BB32_44 Depth=2
                                        #       Parent Loop BB32_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB32_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB32_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB32_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_48
.LBB32_51:                              # %for.end288
                                        #   in Loop: Header=BB32_46 Depth=3
	jmp	.LBB32_52
.LBB32_52:                              # %for.inc289
                                        #   in Loop: Header=BB32_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_46
.LBB32_53:                              # %for.end291
                                        #   in Loop: Header=BB32_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB32_44 Depth=2
	movl	-120(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB32_44
.LBB32_55:                              # %for.end298
                                        #   in Loop: Header=BB32_42 Depth=1
	jmp	.LBB32_56
.LBB32_56:                              # %for.inc299
                                        #   in Loop: Header=BB32_42 Depth=1
	movl	-108(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB32_42
.LBB32_57:                              # %for.end301
	jmp	.LBB32_58
.LBB32_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$1144261261, -112(%rbp) # imm = 0x44340A8D
	jne	.LBB32_60
.LBB32_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_59
.Lfunc_end32:
	.size	BPredPartitionCost.7, .Lfunc_end32-BPredPartitionCost.7
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.8 # -- Begin function PartitionMotionSearch.8
	.p2align	4, 0x90
	.type	PartitionMotionSearch.8,@function
PartitionMotionSearch.8:                # @PartitionMotionSearch.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1492979892, -84(%rbp)  # imm = 0x58FD10B4
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB33_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB33_3
.LBB33_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB33_3
.LBB33_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB33_6
# %bb.5:                                # %if.then20
	movl	$4, -40(%rbp)
	jmp	.LBB33_7
.LBB33_6:                               # %if.else
	movl	$2, -40(%rbp)
.LBB33_7:                               # %if.end
	jmp	.LBB33_9
.LBB33_8:                               # %if.else21
	movl	$0, -40(%rbp)
.LBB33_9:                               # %if.end22
	movl	-64(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB33_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_12 Depth 2
                                        #       Child Loop BB33_29 Depth 3
                                        #         Child Loop BB33_31 Depth 4
                                        #           Child Loop BB33_33 Depth 5
                                        #             Child Loop BB33_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB33_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB33_10 Depth=1
	movw	$0, -2(%rbp)
.LBB33_12:                              # %for.cond27
                                        #   Parent Loop BB33_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_29 Depth 3
                                        #         Child Loop BB33_31 Depth 4
                                        #           Child Loop BB33_33 Depth 5
                                        #             Child Loop BB33_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB33_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB33_28
.LBB33_15:                              # %if.else38
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB33_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB33_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB33_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB33_19
.LBB33_18:                              # %cond.false49
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB33_19
.LBB33_19:                              # %cond.end50
                                        #   in Loop: Header=BB33_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	jmp	.LBB33_27
.LBB33_20:                              # %if.else53
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB33_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB33_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB33_23
.LBB33_22:                              # %cond.false60
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB33_23
.LBB33_23:                              # %cond.end61
                                        #   in Loop: Header=BB33_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB33_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	$2, %edx
	jmp	.LBB33_26
.LBB33_25:                              # %cond.false67
                                        #   in Loop: Header=BB33_12 Depth=2
	movl	-12(%rbp), %edx
.LBB33_26:                              # %cond.end68
                                        #   in Loop: Header=BB33_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
.LBB33_27:                              # %if.end71
                                        #   in Loop: Header=BB33_12 Depth=2
	jmp	.LBB33_28
.LBB33_28:                              # %if.end72
                                        #   in Loop: Header=BB33_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB33_29:                              # %for.cond89
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_31 Depth 4
                                        #           Child Loop BB33_33 Depth 5
                                        #             Child Loop BB33_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB33_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB33_31:                              # %for.cond103
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_12 Depth=2
                                        #       Parent Loop BB33_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB33_33 Depth 5
                                        #             Child Loop BB33_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB33_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-48(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB33_33:                              # %for.cond123
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_12 Depth=2
                                        #       Parent Loop BB33_29 Depth=3
                                        #         Parent Loop BB33_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB33_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB33_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB33_33 Depth=5
	movl	$0, -36(%rbp)
.LBB33_35:                              # %for.cond127
                                        #   Parent Loop BB33_10 Depth=1
                                        #     Parent Loop BB33_12 Depth=2
                                        #       Parent Loop BB33_29 Depth=3
                                        #         Parent Loop BB33_31 Depth=4
                                        #           Parent Loop BB33_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB33_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB33_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB33_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB33_35
.LBB33_38:                              # %for.end
                                        #   in Loop: Header=BB33_33 Depth=5
	jmp	.LBB33_39
.LBB33_39:                              # %for.inc174
                                        #   in Loop: Header=BB33_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_33
.LBB33_40:                              # %for.end176
                                        #   in Loop: Header=BB33_31 Depth=4
	jmp	.LBB33_41
.LBB33_41:                              # %for.inc177
                                        #   in Loop: Header=BB33_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_31
.LBB33_42:                              # %for.end179
                                        #   in Loop: Header=BB33_29 Depth=3
	jmp	.LBB33_43
.LBB33_43:                              # %for.inc180
                                        #   in Loop: Header=BB33_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_29
.LBB33_44:                              # %for.end182
                                        #   in Loop: Header=BB33_12 Depth=2
	jmp	.LBB33_45
.LBB33_45:                              # %for.inc183
                                        #   in Loop: Header=BB33_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB33_12
.LBB33_46:                              # %for.end185
                                        #   in Loop: Header=BB33_10 Depth=1
	jmp	.LBB33_47
.LBB33_47:                              # %for.inc186
                                        #   in Loop: Header=BB33_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_10
.LBB33_48:                              # %for.end188
	cmpl	$1492979892, -84(%rbp)  # imm = 0x58FD10B4
	jne	.LBB33_50
.LBB33_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_49
.Lfunc_end33:
	.size	PartitionMotionSearch.8, .Lfunc_end33-PartitionMotionSearch.8
	.cfi_endproc
                                        # -- End function
	.globl	sign.9                  # -- Begin function sign.9
	.p2align	4, 0x90
	.type	sign.9,@function
sign.9:                                 # @sign.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$393425822, -24(%rbp)   # imm = 0x1773339E
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB34_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB34_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB34_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_6
.LBB34_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB34_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$393425822, -24(%rbp)   # imm = 0x1773339E
	jne	.LBB34_8
.LBB34_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_7
.Lfunc_end34:
	.size	sign.9, .Lfunc_end34-sign.9
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.10 # -- Begin function SetupFastFullPelSearch.10
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.10,@function
SetupFastFullPelSearch.10:              # @SetupFastFullPelSearch.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$968465307, -148(%rbp)  # imm = 0x39B99B9B
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB35_4
.LBB35_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_4
.LBB35_4:                               # %cond.end
	movl	%ecx, -152(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB35_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB35_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB35_10
.LBB35_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB35_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB35_9:                               # %land.end
.LBB35_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	movl	-8(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB35_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB35_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB35_14
.LBB35_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB35_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB35_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB35_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB35_18
.LBB35_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB35_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB35_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB35_24
.LBB35_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB35_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB35_23
.LBB35_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB35_23:                              # %cond.end82
.LBB35_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB35_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB35_27
.LBB35_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB35_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB35_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB35_33
.LBB35_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB35_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB35_32
.LBB35_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB35_32:                              # %cond.end122
.LBB35_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB35_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -72(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB35_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB35_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -80(%rbp)
.LBB35_37:                              # %for.cond155
                                        #   Parent Loop BB35_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB35_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB35_37 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB35_37
.LBB35_40:                              # %for.end
                                        #   in Loop: Header=BB35_35 Depth=1
	jmp	.LBB35_41
.LBB35_41:                              # %for.inc165
                                        #   in Loop: Header=BB35_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB35_35
.LBB35_42:                              # %for.end167
	movl	-72(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB35_47
# %bb.43:                               # %land.lhs.true170
	movl	-72(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB35_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB35_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB35_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB35_48
.LBB35_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB35_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB35_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB35_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB35_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB35_50 Depth=1
	movl	-140(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB35_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB35_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB35_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB35_57
.LBB35_54:                              # %if.end209
                                        #   in Loop: Header=BB35_50 Depth=1
	jmp	.LBB35_55
.LBB35_55:                              # %for.inc210
                                        #   in Loop: Header=BB35_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_50
.LBB35_56:                              # %for.end212.loopexit
	jmp	.LBB35_57
.LBB35_57:                              # %for.end212
	jmp	.LBB35_58
.LBB35_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB35_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_69 Depth 2
                                        #       Child Loop BB35_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB35_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB35_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB35_59 Depth=1
	cmpl	$0, -76(%rbp)
	jl	.LBB35_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB35_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB35_59 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB35_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB35_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB35_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB35_67
.LBB35_66:                              # %if.else238
                                        #   in Loop: Header=BB35_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB35_67:                              # %if.end239
                                        #   in Loop: Header=BB35_59 Depth=1
	jmp	.LBB35_68
.LBB35_68:                              # %if.end240
                                        #   in Loop: Header=BB35_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB35_69:                              # %for.cond242
                                        #   Parent Loop BB35_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_71 Depth 3
	cmpl	$4, -88(%rbp)
	jge	.LBB35_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB35_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -60(%rbp)
.LBB35_71:                              # %for.cond246
                                        #   Parent Loop BB35_59 Depth=1
                                        #     Parent Loop BB35_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB35_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB35_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-76(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -76(%rbp)
	movl	-92(%rbp), %edx
	movl	-136(%rbp), %ecx
	movl	-156(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB35_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB35_71
.LBB35_74:                              # %for.end381
                                        #   in Loop: Header=BB35_69 Depth=2
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB35_69 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB35_69
.LBB35_76:                              # %for.end404
                                        #   in Loop: Header=BB35_59 Depth=1
	jmp	.LBB35_77
.LBB35_77:                              # %for.inc405
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_59
.LBB35_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$968465307, -148(%rbp)  # imm = 0x39B99B9B
	jne	.LBB35_80
.LBB35_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_79
.Lfunc_end35:
	.size	SetupFastFullPelSearch.10, .Lfunc_end35-SetupFastFullPelSearch.10
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.11 # -- Begin function PartitionMotionSearch.11
	.p2align	4, 0x90
	.type	PartitionMotionSearch.11,@function
PartitionMotionSearch.11:               # @PartitionMotionSearch.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1354899391, -64(%rbp)  # imm = 0x50C21FBF
	movl	%edi, -8(%rbp)
	movl	%esi, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB36_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB36_3
.LBB36_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB36_3
.LBB36_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB36_6
# %bb.5:                                # %if.then20
	movl	$4, -48(%rbp)
	jmp	.LBB36_7
.LBB36_6:                               # %if.else
	movl	$2, -48(%rbp)
.LBB36_7:                               # %if.end
	jmp	.LBB36_9
.LBB36_8:                               # %if.else21
	movl	$0, -48(%rbp)
.LBB36_9:                               # %if.end22
	movl	-76(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB36_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_12 Depth 2
                                        #       Child Loop BB36_29 Depth 3
                                        #         Child Loop BB36_31 Depth 4
                                        #           Child Loop BB36_33 Depth 5
                                        #             Child Loop BB36_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB36_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB36_10 Depth=1
	movw	$0, -2(%rbp)
.LBB36_12:                              # %for.cond27
                                        #   Parent Loop BB36_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_29 Depth 3
                                        #         Child Loop BB36_31 Depth 4
                                        #           Child Loop BB36_33 Depth 5
                                        #             Child Loop BB36_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB36_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB36_28
.LBB36_15:                              # %if.else38
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB36_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB36_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB36_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB36_19
.LBB36_18:                              # %cond.false49
                                        #   in Loop: Header=BB36_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB36_19
.LBB36_19:                              # %cond.end50
                                        #   in Loop: Header=BB36_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB36_27
.LBB36_20:                              # %if.else53
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB36_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB36_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB36_23
.LBB36_22:                              # %cond.false60
                                        #   in Loop: Header=BB36_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB36_23
.LBB36_23:                              # %cond.end61
                                        #   in Loop: Header=BB36_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB36_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB36_12 Depth=2
	movl	$2, %edx
	jmp	.LBB36_26
.LBB36_25:                              # %cond.false67
                                        #   in Loop: Header=BB36_12 Depth=2
	movl	-8(%rbp), %edx
.LBB36_26:                              # %cond.end68
                                        #   in Loop: Header=BB36_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB36_27:                              # %if.end71
                                        #   in Loop: Header=BB36_12 Depth=2
	jmp	.LBB36_28
.LBB36_28:                              # %if.end72
                                        #   in Loop: Header=BB36_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB36_29:                              # %for.cond89
                                        #   Parent Loop BB36_10 Depth=1
                                        #     Parent Loop BB36_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB36_31 Depth 4
                                        #           Child Loop BB36_33 Depth 5
                                        #             Child Loop BB36_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB36_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB36_31:                              # %for.cond103
                                        #   Parent Loop BB36_10 Depth=1
                                        #     Parent Loop BB36_12 Depth=2
                                        #       Parent Loop BB36_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB36_33 Depth 5
                                        #             Child Loop BB36_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-32(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-36(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB36_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -28(%rbp)
.LBB36_33:                              # %for.cond123
                                        #   Parent Loop BB36_10 Depth=1
                                        #     Parent Loop BB36_12 Depth=2
                                        #       Parent Loop BB36_29 Depth=3
                                        #         Parent Loop BB36_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB36_35 Depth 6
	movl	-28(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB36_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB36_33 Depth=5
	movl	$0, -24(%rbp)
.LBB36_35:                              # %for.cond127
                                        #   Parent Loop BB36_10 Depth=1
                                        #     Parent Loop BB36_12 Depth=2
                                        #       Parent Loop BB36_29 Depth=3
                                        #         Parent Loop BB36_31 Depth=4
                                        #           Parent Loop BB36_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB36_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB36_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB36_35 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_35
.LBB36_38:                              # %for.end
                                        #   in Loop: Header=BB36_33 Depth=5
	jmp	.LBB36_39
.LBB36_39:                              # %for.inc174
                                        #   in Loop: Header=BB36_33 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB36_33
.LBB36_40:                              # %for.end176
                                        #   in Loop: Header=BB36_31 Depth=4
	jmp	.LBB36_41
.LBB36_41:                              # %for.inc177
                                        #   in Loop: Header=BB36_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_31
.LBB36_42:                              # %for.end179
                                        #   in Loop: Header=BB36_29 Depth=3
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc180
                                        #   in Loop: Header=BB36_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_29
.LBB36_44:                              # %for.end182
                                        #   in Loop: Header=BB36_12 Depth=2
	jmp	.LBB36_45
.LBB36_45:                              # %for.inc183
                                        #   in Loop: Header=BB36_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB36_12
.LBB36_46:                              # %for.end185
                                        #   in Loop: Header=BB36_10 Depth=1
	jmp	.LBB36_47
.LBB36_47:                              # %for.inc186
                                        #   in Loop: Header=BB36_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_10
.LBB36_48:                              # %for.end188
	cmpl	$1354899391, -64(%rbp)  # imm = 0x50C21FBF
	jne	.LBB36_50
.LBB36_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_49
.Lfunc_end36:
	.size	PartitionMotionSearch.11, .Lfunc_end36-PartitionMotionSearch.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.12
.LCPI37_0:
	.quad	4602678819172646912     # double 0.5
.LCPI37_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.12
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.12,@function
SubPelBlockSearchBiPred.12:             # @SubPelBlockSearchBiPred.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI37_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI37_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1347081085, -196(%rbp) # imm = 0x504AD37D
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -152(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB37_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB37_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB37_4
.LBB37_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB37_4:                               # %cond.end
	jmp	.LBB37_6
.LBB37_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB37_6:                               # %cond.end18
	movw	%ax, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB37_10
.LBB37_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB37_10
.LBB37_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB37_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB37_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB37_14
.LBB37_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB37_14:                              # %cond.end55
	jmp	.LBB37_16
.LBB37_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB37_16
.LBB37_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB37_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB37_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB37_20
.LBB37_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB37_20:                              # %cond.end82
	jmp	.LBB37_22
.LBB37_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB37_22
.LBB37_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB37_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB37_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB37_26
.LBB37_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB37_26:                              # %cond.end106
	jmp	.LBB37_28
.LBB37_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB37_28
.LBB37_28:                              # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB37_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB37_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB37_32
.LBB37_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB37_32:                              # %cond.end130
	jmp	.LBB37_34
.LBB37_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB37_34
.LBB37_34:                              # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB37_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB37_37
.LBB37_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB37_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB37_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB37_40
.LBB37_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB37_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-152(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB37_46
.LBB37_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB37_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB37_52
.LBB37_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB37_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB37_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_55 Depth 2
                                        #       Child Loop BB37_60 Depth 3
                                        #         Child Loop BB37_162 Depth 4
                                        #           Child Loop BB37_164 Depth 5
                                        #       Child Loop BB37_175 Depth 3
                                        #         Child Loop BB37_181 Depth 4
                                        #           Child Loop BB37_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-176(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB37_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB37_55:                              # %for.cond283
                                        #   Parent Loop BB37_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_60 Depth 3
                                        #         Child Loop BB37_162 Depth 4
                                        #           Child Loop BB37_164 Depth 5
                                        #       Child Loop BB37_175 Depth 3
                                        #         Child Loop BB37_181 Depth 4
                                        #           Child Loop BB37_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB37_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_57:                              # %land.end
                                        #   in Loop: Header=BB37_55 Depth=2
	testb	$1, %al
	jne	.LBB37_58
	jmp	.LBB37_195
.LBB37_58:                              # %for.body289
                                        #   in Loop: Header=BB37_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB37_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB37_55 Depth=2
	movw	$0, -40(%rbp)
.LBB37_60:                              # %for.cond304
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_162 Depth 4
                                        #           Child Loop BB37_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB37_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_67
.LBB37_63:                              # %cond.false345
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_66
.LBB37_65:                              # %cond.false369
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_66:                              # %cond.end389
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_67:                              # %cond.end391
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_73
.LBB37_69:                              # %cond.false421
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_72
.LBB37_71:                              # %cond.false448
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_72:                              # %cond.end470
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_73:                              # %cond.end472
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_79
.LBB37_75:                              # %cond.false505
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_78
.LBB37_77:                              # %cond.false532
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_78:                              # %cond.end554
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_79:                              # %cond.end556
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_85
.LBB37_81:                              # %cond.false589
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_84
.LBB37_83:                              # %cond.false616
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_84:                              # %cond.end638
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_85:                              # %cond.end640
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_91
.LBB37_87:                              # %cond.false681
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_90
.LBB37_89:                              # %cond.false706
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_90:                              # %cond.end726
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_91:                              # %cond.end728
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_97
.LBB37_93:                              # %cond.false759
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_96
.LBB37_95:                              # %cond.false786
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_96:                              # %cond.end808
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_97:                              # %cond.end810
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_103
.LBB37_99:                              # %cond.false843
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_102
.LBB37_101:                             # %cond.false870
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_102:                             # %cond.end892
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_103:                             # %cond.end894
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_109
.LBB37_105:                             # %cond.false927
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_108
.LBB37_107:                             # %cond.false954
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_108:                             # %cond.end976
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_109:                             # %cond.end978
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_115
.LBB37_111:                             # %cond.false1019
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_114
.LBB37_113:                             # %cond.false1044
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_114:                             # %cond.end1064
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_115:                             # %cond.end1066
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_121
.LBB37_117:                             # %cond.false1097
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_120
.LBB37_119:                             # %cond.false1124
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_120:                             # %cond.end1146
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_121:                             # %cond.end1148
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_127
.LBB37_123:                             # %cond.false1181
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_126
.LBB37_125:                             # %cond.false1208
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_126:                             # %cond.end1230
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_127:                             # %cond.end1232
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_133
.LBB37_129:                             # %cond.false1265
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_132
.LBB37_131:                             # %cond.false1292
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_132:                             # %cond.end1314
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_133:                             # %cond.end1316
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_139
.LBB37_135:                             # %cond.false1357
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_138
.LBB37_137:                             # %cond.false1382
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_138:                             # %cond.end1402
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_139:                             # %cond.end1404
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_145
.LBB37_141:                             # %cond.false1435
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_144
.LBB37_143:                             # %cond.false1462
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_144:                             # %cond.end1484
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_145:                             # %cond.end1486
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_151
.LBB37_147:                             # %cond.false1519
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_150
.LBB37_149:                             # %cond.false1546
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_150:                             # %cond.end1568
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_151:                             # %cond.end1570
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB37_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_157
.LBB37_153:                             # %cond.false1603
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB37_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_156
.LBB37_155:                             # %cond.false1630
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_156:                             # %cond.end1652
                                        #   in Loop: Header=BB37_60 Depth=3
.LBB37_157:                             # %cond.end1654
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB37_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB37_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB37_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB37_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB37_173
.LBB37_160:                             # %if.end1673
                                        #   in Loop: Header=BB37_60 Depth=3
	jmp	.LBB37_170
.LBB37_161:                             # %if.else1674
                                        #   in Loop: Header=BB37_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB37_162:                             # %for.cond1675
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        #       Parent Loop BB37_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB37_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB37_162 Depth=4
	movl	$0, -96(%rbp)
.LBB37_164:                             # %for.cond1679
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        #       Parent Loop BB37_60 Depth=3
                                        #         Parent Loop BB37_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB37_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB37_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB37_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB37_164
.LBB37_167:                             # %for.end
                                        #   in Loop: Header=BB37_162 Depth=4
	jmp	.LBB37_168
.LBB37_168:                             # %for.inc1694
                                        #   in Loop: Header=BB37_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB37_162
.LBB37_169:                             # %for.end1696
                                        #   in Loop: Header=BB37_60 Depth=3
	jmp	.LBB37_170
.LBB37_170:                             # %if.end1697
                                        #   in Loop: Header=BB37_60 Depth=3
	jmp	.LBB37_171
.LBB37_171:                             # %for.inc1698
                                        #   in Loop: Header=BB37_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB37_60
.LBB37_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB37_55 Depth=2
	jmp	.LBB37_173
.LBB37_173:                             # %for.end1702
                                        #   in Loop: Header=BB37_55 Depth=2
	jmp	.LBB37_193
.LBB37_174:                             # %if.else1703
                                        #   in Loop: Header=BB37_55 Depth=2
	movw	$0, -40(%rbp)
.LBB37_175:                             # %for.cond1704
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_181 Depth 4
                                        #           Child Loop BB37_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB37_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB37_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB37_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB37_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB37_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB37_192
.LBB37_179:                             # %if.end2054
                                        #   in Loop: Header=BB37_175 Depth=3
	jmp	.LBB37_189
.LBB37_180:                             # %if.else2055
                                        #   in Loop: Header=BB37_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB37_181:                             # %for.cond2056
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        #       Parent Loop BB37_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB37_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB37_181 Depth=4
	movl	$0, -96(%rbp)
.LBB37_183:                             # %for.cond2060
                                        #   Parent Loop BB37_53 Depth=1
                                        #     Parent Loop BB37_55 Depth=2
                                        #       Parent Loop BB37_175 Depth=3
                                        #         Parent Loop BB37_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB37_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB37_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB37_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB37_183
.LBB37_186:                             # %for.end2077
                                        #   in Loop: Header=BB37_181 Depth=4
	jmp	.LBB37_187
.LBB37_187:                             # %for.inc2078
                                        #   in Loop: Header=BB37_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB37_181
.LBB37_188:                             # %for.end2080
                                        #   in Loop: Header=BB37_175 Depth=3
	jmp	.LBB37_189
.LBB37_189:                             # %if.end2081
                                        #   in Loop: Header=BB37_175 Depth=3
	jmp	.LBB37_190
.LBB37_190:                             # %for.inc2082
                                        #   in Loop: Header=BB37_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB37_175
.LBB37_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB37_55 Depth=2
	jmp	.LBB37_192
.LBB37_192:                             # %for.end2086
                                        #   in Loop: Header=BB37_55 Depth=2
	jmp	.LBB37_193
.LBB37_193:                             # %if.end2087
                                        #   in Loop: Header=BB37_55 Depth=2
	jmp	.LBB37_194
.LBB37_194:                             # %for.inc2088
                                        #   in Loop: Header=BB37_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB37_55
.LBB37_195:                             # %for.end2092
                                        #   in Loop: Header=BB37_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB37_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB37_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB37_197:                             # %if.end2101
                                        #   in Loop: Header=BB37_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB37_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB37_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB37_199:                             # %if.end2107
                                        #   in Loop: Header=BB37_53 Depth=1
	jmp	.LBB37_200
.LBB37_200:                             # %for.inc2108
                                        #   in Loop: Header=BB37_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB37_53
.LBB37_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB37_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB37_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB37_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB37_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB37_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB37_211
.LBB37_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB37_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB37_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_214 Depth 2
                                        #       Child Loop BB37_219 Depth 3
                                        #         Child Loop BB37_321 Depth 4
                                        #           Child Loop BB37_323 Depth 5
                                        #       Child Loop BB37_334 Depth 3
                                        #         Child Loop BB37_340 Depth 4
                                        #           Child Loop BB37_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB37_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB37_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB37_214:                             # %for.cond2194
                                        #   Parent Loop BB37_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_219 Depth 3
                                        #         Child Loop BB37_321 Depth 4
                                        #           Child Loop BB37_323 Depth 5
                                        #       Child Loop BB37_334 Depth 3
                                        #         Child Loop BB37_340 Depth 4
                                        #           Child Loop BB37_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB37_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB37_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB37_216:                             # %land.end2202
                                        #   in Loop: Header=BB37_214 Depth=2
	testb	$1, %al
	jne	.LBB37_217
	jmp	.LBB37_354
.LBB37_217:                             # %for.body2203
                                        #   in Loop: Header=BB37_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB37_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB37_214 Depth=2
	movw	$0, -40(%rbp)
.LBB37_219:                             # %for.cond2218
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_321 Depth 4
                                        #           Child Loop BB37_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB37_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_226
.LBB37_222:                             # %cond.false2261
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_225
.LBB37_224:                             # %cond.false2286
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_225:                             # %cond.end2306
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_226:                             # %cond.end2308
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_232
.LBB37_228:                             # %cond.false2339
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_231
.LBB37_230:                             # %cond.false2366
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_231:                             # %cond.end2388
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_232:                             # %cond.end2390
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_238
.LBB37_234:                             # %cond.false2423
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_237
.LBB37_236:                             # %cond.false2450
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_237:                             # %cond.end2472
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_238:                             # %cond.end2474
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_244
.LBB37_240:                             # %cond.false2507
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_243
.LBB37_242:                             # %cond.false2534
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_243:                             # %cond.end2556
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_244:                             # %cond.end2558
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_250
.LBB37_246:                             # %cond.false2599
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_249
.LBB37_248:                             # %cond.false2624
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_249:                             # %cond.end2644
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_250:                             # %cond.end2646
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_256
.LBB37_252:                             # %cond.false2677
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_255
.LBB37_254:                             # %cond.false2704
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_255:                             # %cond.end2726
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_256:                             # %cond.end2728
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_262
.LBB37_258:                             # %cond.false2761
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_261
.LBB37_260:                             # %cond.false2788
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_261:                             # %cond.end2810
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_262:                             # %cond.end2812
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_268
.LBB37_264:                             # %cond.false2845
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_267
.LBB37_266:                             # %cond.false2872
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_267:                             # %cond.end2894
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_268:                             # %cond.end2896
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_274
.LBB37_270:                             # %cond.false2937
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_273
.LBB37_272:                             # %cond.false2962
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_273:                             # %cond.end2982
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_274:                             # %cond.end2984
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_280
.LBB37_276:                             # %cond.false3015
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_279
.LBB37_278:                             # %cond.false3042
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_279:                             # %cond.end3064
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_280:                             # %cond.end3066
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_286
.LBB37_282:                             # %cond.false3099
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_285
.LBB37_284:                             # %cond.false3126
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_285:                             # %cond.end3148
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_286:                             # %cond.end3150
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_292
.LBB37_288:                             # %cond.false3183
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_291
.LBB37_290:                             # %cond.false3210
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_291:                             # %cond.end3232
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_292:                             # %cond.end3234
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_298
.LBB37_294:                             # %cond.false3275
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_297
.LBB37_296:                             # %cond.false3300
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_297:                             # %cond.end3320
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_298:                             # %cond.end3322
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_304
.LBB37_300:                             # %cond.false3353
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_303
.LBB37_302:                             # %cond.false3380
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_303:                             # %cond.end3402
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_304:                             # %cond.end3404
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_310
.LBB37_306:                             # %cond.false3437
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_309
.LBB37_308:                             # %cond.false3464
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_309:                             # %cond.end3486
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_310:                             # %cond.end3488
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB37_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB37_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB37_316
.LBB37_312:                             # %cond.false3521
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB37_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB37_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB37_315
.LBB37_314:                             # %cond.false3548
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB37_315:                             # %cond.end3570
                                        #   in Loop: Header=BB37_219 Depth=3
.LBB37_316:                             # %cond.end3572
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB37_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB37_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB37_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB37_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB37_332
.LBB37_319:                             # %if.end3593
                                        #   in Loop: Header=BB37_219 Depth=3
	jmp	.LBB37_329
.LBB37_320:                             # %if.else3594
                                        #   in Loop: Header=BB37_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB37_321:                             # %for.cond3595
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        #       Parent Loop BB37_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB37_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB37_321 Depth=4
	movl	$0, -96(%rbp)
.LBB37_323:                             # %for.cond3599
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        #       Parent Loop BB37_219 Depth=3
                                        #         Parent Loop BB37_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB37_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB37_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB37_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB37_323
.LBB37_326:                             # %for.end3616
                                        #   in Loop: Header=BB37_321 Depth=4
	jmp	.LBB37_327
.LBB37_327:                             # %for.inc3617
                                        #   in Loop: Header=BB37_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB37_321
.LBB37_328:                             # %for.end3619
                                        #   in Loop: Header=BB37_219 Depth=3
	jmp	.LBB37_329
.LBB37_329:                             # %if.end3620
                                        #   in Loop: Header=BB37_219 Depth=3
	jmp	.LBB37_330
.LBB37_330:                             # %for.inc3621
                                        #   in Loop: Header=BB37_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB37_219
.LBB37_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB37_214 Depth=2
	jmp	.LBB37_332
.LBB37_332:                             # %for.end3625
                                        #   in Loop: Header=BB37_214 Depth=2
	jmp	.LBB37_352
.LBB37_333:                             # %if.else3626
                                        #   in Loop: Header=BB37_214 Depth=2
	movw	$0, -40(%rbp)
.LBB37_334:                             # %for.cond3627
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_340 Depth 4
                                        #           Child Loop BB37_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB37_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB37_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB37_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB37_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB37_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB37_351
.LBB37_338:                             # %if.end3978
                                        #   in Loop: Header=BB37_334 Depth=3
	jmp	.LBB37_348
.LBB37_339:                             # %if.else3979
                                        #   in Loop: Header=BB37_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB37_340:                             # %for.cond3980
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        #       Parent Loop BB37_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB37_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB37_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB37_340 Depth=4
	movl	$0, -96(%rbp)
.LBB37_342:                             # %for.cond3984
                                        #   Parent Loop BB37_212 Depth=1
                                        #     Parent Loop BB37_214 Depth=2
                                        #       Parent Loop BB37_334 Depth=3
                                        #         Parent Loop BB37_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB37_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB37_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB37_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB37_342
.LBB37_345:                             # %for.end4001
                                        #   in Loop: Header=BB37_340 Depth=4
	jmp	.LBB37_346
.LBB37_346:                             # %for.inc4002
                                        #   in Loop: Header=BB37_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB37_340
.LBB37_347:                             # %for.end4004
                                        #   in Loop: Header=BB37_334 Depth=3
	jmp	.LBB37_348
.LBB37_348:                             # %if.end4005
                                        #   in Loop: Header=BB37_334 Depth=3
	jmp	.LBB37_349
.LBB37_349:                             # %for.inc4006
                                        #   in Loop: Header=BB37_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB37_334
.LBB37_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB37_214 Depth=2
	jmp	.LBB37_351
.LBB37_351:                             # %for.end4010
                                        #   in Loop: Header=BB37_214 Depth=2
	jmp	.LBB37_352
.LBB37_352:                             # %if.end4011
                                        #   in Loop: Header=BB37_214 Depth=2
	jmp	.LBB37_353
.LBB37_353:                             # %for.inc4012
                                        #   in Loop: Header=BB37_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB37_214
.LBB37_354:                             # %for.end4016
                                        #   in Loop: Header=BB37_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB37_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB37_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB37_356:                             # %if.end4026
                                        #   in Loop: Header=BB37_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB37_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB37_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB37_358:                             # %if.end4032
                                        #   in Loop: Header=BB37_212 Depth=1
	jmp	.LBB37_359
.LBB37_359:                             # %for.inc4033
                                        #   in Loop: Header=BB37_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB37_212
.LBB37_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB37_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB37_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1347081085, -196(%rbp) # imm = 0x504AD37D
	jne	.LBB37_364
.LBB37_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_363
.Lfunc_end37:
	.size	SubPelBlockSearchBiPred.12, .Lfunc_end37-SubPelBlockSearchBiPred.12
	.cfi_endproc
                                        # -- End function
	.globl	sign.13                 # -- Begin function sign.13
	.p2align	4, 0x90
	.type	sign.13,@function
sign.13:                                # @sign.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2011632621, -24(%rbp)  # imm = 0x77E713ED
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB38_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB38_3
.LBB38_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB38_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB38_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_6
.LBB38_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB38_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$2011632621, -24(%rbp)  # imm = 0x77E713ED
	jne	.LBB38_8
.LBB38_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_7
.Lfunc_end38:
	.size	sign.13, .Lfunc_end38-sign.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.14
.LCPI39_0:
	.quad	4602678819172646912     # double 0.5
.LCPI39_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.14
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.14,@function
FullPelBlockMotionSearch.14:            # @FullPelBlockMotionSearch.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1706805947, -120(%rbp) # imm = 0x65BBCABB
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -64(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB39_4
.LBB39_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_4
.LBB39_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -32(%rbp)
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -132(%rbp)
	movl	-28(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -148(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -144(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-64(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-64(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -88(%rbp)
	movl	-88(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -136(%rbp)
	movl	-72(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-76(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -124(%rbp)
	movl	-72(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-76(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	cmpl	$1, -64(%rbp)
	jne	.LBB39_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB39_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB39_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB39_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB39_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB39_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB39_14
.LBB39_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB39_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB39_13:                              # %land.end63
.LBB39_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB39_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB39_17
# %bb.16:                               # %if.then
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB39_18
.LBB39_17:                              # %if.else
	movl	-28(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB39_18:                              # %if.end
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB39_23
# %bb.19:                               # %land.lhs.true81
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_23
# %bb.20:                               # %land.lhs.true86
	movl	-84(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB39_23
# %bb.21:                               # %land.lhs.true89
	movl	-84(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB39_24
.LBB39_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB39_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB39_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_33 Depth 2
                                        #       Child Loop BB39_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB39_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-84(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-60(%rbp), %edx
	shll	$2, %edx
	subl	-128(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-92(%rbp), %esi
	shll	$2, %esi
	subl	-124(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB39_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB39_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jne	.LBB39_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB39_30:                              # %if.end128
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB39_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_46
.LBB39_32:                              # %if.end132
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -24(%rbp)
.LBB39_33:                              # %for.cond133
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_35 Depth 3
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB39_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB39_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-148(%rbp), %r8d
	movl	-132(%rbp), %r9d
	callq	*%rax
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -68(%rbp)
.LBB39_35:                              # %for.cond140
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-68(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB39_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB39_35 Depth=3
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB39_35 Depth=3
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB39_35
.LBB39_38:                              # %for.end
                                        #   in Loop: Header=BB39_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB39_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_43
.LBB39_40:                              # %if.end178
                                        #   in Loop: Header=BB39_33 Depth=2
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc179
                                        #   in Loop: Header=BB39_33 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_33
.LBB39_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_43
.LBB39_43:                              # %for.end181
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB39_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB39_45:                              # %if.end185
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_46
.LBB39_46:                              # %for.inc186
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_25
.LBB39_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB39_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB39_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1706805947, -120(%rbp) # imm = 0x65BBCABB
	jne	.LBB39_51
.LBB39_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_50
.Lfunc_end39:
	.size	FullPelBlockMotionSearch.14, .Lfunc_end39-FullPelBlockMotionSearch.14
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.15 # -- Begin function FindSkipModeMotionVector.15
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.15,@function
FindSkipModeMotionVector.15:            # @FindSkipModeMotionVector.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1943974338, -56(%rbp)  # imm = 0x73DEB1C2
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB40_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_4
# %bb.3:                                # %if.then24
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB40_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_7
# %bb.6:                                # %if.then34
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB40_7:                               # %if.end36
	jmp	.LBB40_8
.LBB40_8:                               # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB40_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_12
# %bb.11:                               # %if.then69
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB40_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB40_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_15
# %bb.14:                               # %if.then82
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB40_15:                              # %if.end85
	jmp	.LBB40_16
.LBB40_16:                              # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB40_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB40_22
.LBB40_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB40_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB40_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB40_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB40_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB40_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB40_28
.LBB40_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB40_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB40_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB40_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB40_28:                              # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB40_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB40_39
.LBB40_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB40_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB40_31 Depth=1
	movl	$0, -4(%rbp)
.LBB40_33:                              # %for.cond137
                                        #   Parent Loop BB40_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB40_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB40_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_33
.LBB40_36:                              # %for.end
                                        #   in Loop: Header=BB40_31 Depth=1
	jmp	.LBB40_37
.LBB40_37:                              # %for.inc157
                                        #   in Loop: Header=BB40_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_31
.LBB40_38:                              # %for.end159
	jmp	.LBB40_48
.LBB40_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB40_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB40_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB40_40 Depth=1
	movl	$0, -4(%rbp)
.LBB40_42:                              # %for.cond166
                                        #   Parent Loop BB40_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB40_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB40_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_42
.LBB40_45:                              # %for.end190
                                        #   in Loop: Header=BB40_40 Depth=1
	jmp	.LBB40_46
.LBB40_46:                              # %for.inc191
                                        #   in Loop: Header=BB40_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_40
.LBB40_47:                              # %for.end193
	jmp	.LBB40_48
.LBB40_48:                              # %if.end194
	cmpl	$1943974338, -56(%rbp)  # imm = 0x73DEB1C2
	jne	.LBB40_50
.LBB40_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_49
.Lfunc_end40:
	.size	FindSkipModeMotionVector.15, .Lfunc_end40-FindSkipModeMotionVector.15
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.16            # -- Begin function find_SATD.16
	.p2align	4, 0x90
	.type	find_SATD.16,@function
find_SATD.16:                           # @find_SATD.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$118188717, -52(%rbp)   # imm = 0x70B6AAD
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
                                        #       Child Loop BB41_5 Depth 3
                                        #         Child Loop BB41_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB41_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -24(%rbp)
.LBB41_3:                               # %for.cond7
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_5 Depth 3
                                        #         Child Loop BB41_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB41_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB41_5:                               # %for.cond10
                                        #   Parent Loop BB41_1 Depth=1
                                        #     Parent Loop BB41_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB41_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB41_7:                               # %for.cond13
                                        #   Parent Loop BB41_1 Depth=1
                                        #     Parent Loop BB41_3 Depth=2
                                        #       Parent Loop BB41_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB41_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB41_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB41_7
.LBB41_10:                              # %for.end
                                        #   in Loop: Header=BB41_5 Depth=3
	jmp	.LBB41_11
.LBB41_11:                              # %for.inc24
                                        #   in Loop: Header=BB41_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_5
.LBB41_12:                              # %for.end26
                                        #   in Loop: Header=BB41_3 Depth=2
	jmp	.LBB41_13
.LBB41_13:                              # %for.inc27
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_3
.LBB41_14:                              # %for.end29
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_15
.LBB41_15:                              # %for.inc30
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_1
.LBB41_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB41_26
# %bb.17:                               # %if.then
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB41_24
# %bb.18:                               # %if.then
	movq	.LJTI41_0(,%rax,8), %rax
	jmpq	*%rax
.LBB41_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_25
.LBB41_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_25
.LBB41_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB41_25
.LBB41_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_25
.LBB41_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB41_25
.LBB41_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB41_25:                              # %sw.epilog
	jmp	.LBB41_31
.LBB41_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB41_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB41_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB41_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_27
.LBB41_30:                              # %for.end79
	jmp	.LBB41_31
.LBB41_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$118188717, -52(%rbp)   # imm = 0x70B6AAD
	jne	.LBB41_33
.LBB41_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_32
.Lfunc_end41:
	.size	find_SATD.16, .Lfunc_end41-find_SATD.16
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI41_0:
	.quad	.LBB41_19
	.quad	.LBB41_20
	.quad	.LBB41_20
	.quad	.LBB41_21
	.quad	.LBB41_22
	.quad	.LBB41_22
	.quad	.LBB41_23
                                        # -- End function
	.text
	.globl	SetupLargerBlocks.17    # -- Begin function SetupLargerBlocks.17
	.p2align	4, 0x90
	.type	SetupLargerBlocks.17,@function
SetupLargerBlocks.17:                   # @SetupLargerBlocks.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1710935700, -76(%rbp)  # imm = 0x65FACE94
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB42_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB42_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB42_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB42_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_9
.LBB42_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB42_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB42_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB42_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_17
.LBB42_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB42_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB42_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_21
.LBB42_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB42_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB42_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB42_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_29
.LBB42_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB42_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB42_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_33
.LBB42_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB42_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB42_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_37
.LBB42_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB42_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_41
.LBB42_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB42_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB42_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_45
.LBB42_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB42_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB42_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_49
.LBB42_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB42_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_53
.LBB42_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB42_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB42_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_57
.LBB42_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB42_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB42_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB42_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB42_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_65
.LBB42_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB42_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB42_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_69
.LBB42_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB42_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB42_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_73
.LBB42_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB42_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB42_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_77
.LBB42_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB42_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB42_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_81
.LBB42_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB42_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB42_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_85
.LBB42_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB42_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB42_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_89
.LBB42_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB42_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB42_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_93
.LBB42_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB42_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB42_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB42_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB42_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_97
.LBB42_100:                             # %for.end438
	cmpl	$1710935700, -76(%rbp)  # imm = 0x65FACE94
	jne	.LBB42_102
.LBB42_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_101
.Lfunc_end42:
	.size	SetupLargerBlocks.17, .Lfunc_end42-SetupLargerBlocks.17
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.18   # -- Begin function Get_Direct_Cost8x8.18
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.18,@function
Get_Direct_Cost8x8.18:                  # @Get_Direct_Cost8x8.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1324113822, -60(%rbp)  # imm = 0x4EEC5F9E
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
                                        #       Child Loop BB43_7 Depth 3
                                        #         Child Loop BB43_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB43_3:                               # %for.cond3
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_7 Depth 3
                                        #         Child Loop BB43_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB43_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB43_30
.LBB43_6:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -28(%rbp)
.LBB43_7:                               # %for.cond34
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB43_7 Depth=3
	movl	$0, -12(%rbp)
.LBB43_9:                               # %for.cond38
                                        #   Parent Loop BB43_1 Depth=1
                                        #     Parent Loop BB43_3 Depth=2
                                        #       Parent Loop BB43_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB43_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-400(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB43_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_9
.LBB43_12:                              # %for.end
                                        #   in Loop: Header=BB43_7 Depth=3
	jmp	.LBB43_13
.LBB43_13:                              # %for.inc67
                                        #   in Loop: Header=BB43_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_7
.LBB43_14:                              # %for.end69
                                        #   in Loop: Header=BB43_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_3
.LBB43_16:                              # %for.end73
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_17
.LBB43_17:                              # %for.inc74
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_1
.LBB43_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB43_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB43_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB43_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB43_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB43_21 Depth=1
	movl	$0, -12(%rbp)
.LBB43_23:                              # %for.cond84
                                        #   Parent Loop BB43_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB43_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB43_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-400(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB43_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_23
.LBB43_26:                              # %for.end97
                                        #   in Loop: Header=BB43_21 Depth=1
	jmp	.LBB43_27
.LBB43_27:                              # %for.inc98
                                        #   in Loop: Header=BB43_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_21
.LBB43_28:                              # %for.end100
	leaq	-656(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB43_29:                              # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB43_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$1324113822, -60(%rbp)  # imm = 0x4EEC5F9E
	jne	.LBB43_32
.LBB43_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_31
.Lfunc_end43:
	.size	Get_Direct_Cost8x8.18, .Lfunc_end43-Get_Direct_Cost8x8.18
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.19 # -- Begin function Get_Direct_Motion_Vectors.19
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.19,@function
Get_Direct_Motion_Vectors.19:           # @Get_Direct_Motion_Vectors.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$298952972, -232(%rbp)  # imm = 0x11D1A90C
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB44_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB44_5
.LBB44_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB44_5:                               # %if.end
	jmp	.LBB44_7
.LBB44_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB44_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB44_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB44_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB44_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_12
.LBB44_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_12
.LBB44_12:                              # %cond.end
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_15
.LBB44_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_15
.LBB44_15:                              # %cond.end38
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_18
.LBB44_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_18
.LBB44_18:                              # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_21
.LBB44_20:                              # %cond.false69
	movswl	-50(%rbp), %eax
.LBB44_21:                              # %cond.end71
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB44_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_24
.LBB44_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_24
.LBB44_24:                              # %cond.end87
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_27
.LBB44_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_27
.LBB44_27:                              # %cond.end103
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_30
.LBB44_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_30
.LBB44_30:                              # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_33
.LBB44_32:                              # %cond.false134
	movswl	-52(%rbp), %eax
.LBB44_33:                              # %cond.end136
	movw	%ax, -22(%rbp)
	jmp	.LBB44_150
.LBB44_34:                              # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB44_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_39
.LBB44_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_40
.LBB44_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_40:                              # %cond.end181
	jmp	.LBB44_42
.LBB44_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_42
.LBB44_42:                              # %cond.end184
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_46
.LBB44_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_47
.LBB44_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_47:                              # %cond.end229
	jmp	.LBB44_49
.LBB44_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_49
.LBB44_49:                              # %cond.end232
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_53
.LBB44_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_54
.LBB44_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_54:                              # %cond.end277
	jmp	.LBB44_56
.LBB44_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_56
.LBB44_56:                              # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_60
.LBB44_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_61
.LBB44_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_61:                              # %cond.end325
	jmp	.LBB44_63
.LBB44_62:                              # %cond.false327
	movswl	-50(%rbp), %eax
.LBB44_63:                              # %cond.end329
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB44_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_67
.LBB44_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_68
.LBB44_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_68:                              # %cond.end374
	jmp	.LBB44_70
.LBB44_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_70
.LBB44_70:                              # %cond.end377
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_74
.LBB44_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_75
.LBB44_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_75:                              # %cond.end422
	jmp	.LBB44_77
.LBB44_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_77
.LBB44_77:                              # %cond.end425
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_81
.LBB44_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_82
.LBB44_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_82:                              # %cond.end470
	jmp	.LBB44_84
.LBB44_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_84
.LBB44_84:                              # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_88
.LBB44_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB44_89
.LBB44_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB44_89:                              # %cond.end518
	jmp	.LBB44_91
.LBB44_90:                              # %cond.false520
	movswl	-52(%rbp), %eax
.LBB44_91:                              # %cond.end522
	movw	%ax, -22(%rbp)
	jmp	.LBB44_149
.LBB44_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB44_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_96
.LBB44_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_97
.LBB44_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_97:                              # %cond.end567
	jmp	.LBB44_99
.LBB44_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_99
.LBB44_99:                              # %cond.end570
	movw	%ax, -30(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_103
.LBB44_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_104
.LBB44_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_104:                             # %cond.end615
	jmp	.LBB44_106
.LBB44_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_106
.LBB44_106:                             # %cond.end618
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_110
.LBB44_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_111
.LBB44_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_111:                             # %cond.end663
	jmp	.LBB44_113
.LBB44_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_113
.LBB44_113:                             # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_117
.LBB44_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_118
.LBB44_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_118:                             # %cond.end711
	jmp	.LBB44_120
.LBB44_119:                             # %cond.false713
	movswl	-50(%rbp), %eax
.LBB44_120:                             # %cond.end715
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB44_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_124
.LBB44_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_125
.LBB44_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_125:                             # %cond.end760
	jmp	.LBB44_127
.LBB44_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_127
.LBB44_127:                             # %cond.end763
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB44_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_131
.LBB44_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_132
.LBB44_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_132:                             # %cond.end808
	jmp	.LBB44_134
.LBB44_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_134
.LBB44_134:                             # %cond.end811
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB44_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_138
.LBB44_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_139
.LBB44_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_139:                             # %cond.end856
	jmp	.LBB44_141
.LBB44_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB44_141
.LBB44_141:                             # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB44_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB44_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB44_145
.LBB44_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB44_146
.LBB44_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB44_146:                             # %cond.end904
	jmp	.LBB44_148
.LBB44_147:                             # %cond.false906
	movswl	-52(%rbp), %eax
.LBB44_148:                             # %cond.end908
	movw	%ax, -22(%rbp)
.LBB44_149:                             # %if.end911
	jmp	.LBB44_150
.LBB44_150:                             # %if.end912
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_156
# %bb.151:                              # %land.lhs.true916
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_156
# %bb.152:                              # %cond.true920
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_154
# %bb.153:                              # %cond.true925
	movswl	-30(%rbp), %eax
	jmp	.LBB44_155
.LBB44_154:                             # %cond.false927
	movswl	-24(%rbp), %eax
.LBB44_155:                             # %cond.end929
	jmp	.LBB44_160
.LBB44_156:                             # %cond.false931
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_158
# %bb.157:                              # %cond.true936
	movswl	-30(%rbp), %eax
	jmp	.LBB44_159
.LBB44_158:                             # %cond.false938
	movswl	-24(%rbp), %eax
.LBB44_159:                             # %cond.end940
.LBB44_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_166
# %bb.161:                              # %land.lhs.true948
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB44_165
.LBB44_164:                             # %cond.false959
	movswl	-32(%rbp), %eax
.LBB44_165:                             # %cond.end961
	jmp	.LBB44_170
.LBB44_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB44_169
.LBB44_168:                             # %cond.false970
	movswl	-32(%rbp), %eax
.LBB44_169:                             # %cond.end972
.LBB44_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_176
# %bb.171:                              # %land.lhs.true980
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_176
# %bb.172:                              # %cond.true984
	movswl	-26(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_174
# %bb.173:                              # %cond.true989
	movswl	-26(%rbp), %eax
	jmp	.LBB44_175
.LBB44_174:                             # %cond.false991
	movswl	-28(%rbp), %eax
.LBB44_175:                             # %cond.end993
	jmp	.LBB44_180
.LBB44_176:                             # %cond.false995
	movswl	-26(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_178
# %bb.177:                              # %cond.true1000
	movswl	-26(%rbp), %eax
	jmp	.LBB44_179
.LBB44_178:                             # %cond.false1002
	movswl	-28(%rbp), %eax
.LBB44_179:                             # %cond.end1004
.LBB44_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB44_185
.LBB44_184:                             # %cond.false1023
	movswl	-22(%rbp), %eax
.LBB44_185:                             # %cond.end1025
	jmp	.LBB44_190
.LBB44_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB44_189
.LBB44_188:                             # %cond.false1034
	movswl	-22(%rbp), %eax
.LBB44_189:                             # %cond.end1036
.LBB44_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB44_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB44_194:                             # %if.end1055
	movl	$0, -8(%rbp)
.LBB44_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB44_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB44_197:                             # %for.cond1061
                                        #   Parent Loop BB44_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB44_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB44_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB44_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB44_203
.LBB44_202:                             # %if.else1102
                                        #   in Loop: Header=BB44_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB44_203:                             # %if.end1128
                                        #   in Loop: Header=BB44_197 Depth=2
	jmp	.LBB44_205
.LBB44_204:                             # %if.else1129
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB44_205:                             # %if.end1151
                                        #   in Loop: Header=BB44_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB44_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB44_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB44_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB44_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB44_210
.LBB44_209:                             # %if.else1187
                                        #   in Loop: Header=BB44_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB44_210:                             # %if.end1213
                                        #   in Loop: Header=BB44_197 Depth=2
	jmp	.LBB44_212
.LBB44_211:                             # %if.else1214
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB44_212:                             # %if.end1236
                                        #   in Loop: Header=BB44_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB44_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB44_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB44_215:                             # %if.end1255
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB44_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB44_221
.LBB44_217:                             # %if.else1269
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB44_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB44_220
.LBB44_219:                             # %if.else1283
                                        #   in Loop: Header=BB44_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB44_220:                             # %if.end1288
                                        #   in Loop: Header=BB44_197 Depth=2
	jmp	.LBB44_221
.LBB44_221:                             # %if.end1289
                                        #   in Loop: Header=BB44_197 Depth=2
	jmp	.LBB44_222
.LBB44_222:                             # %for.inc
                                        #   in Loop: Header=BB44_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_197
.LBB44_223:                             # %for.end
                                        #   in Loop: Header=BB44_195 Depth=1
	jmp	.LBB44_224
.LBB44_224:                             # %for.inc1290
                                        #   in Loop: Header=BB44_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_195
.LBB44_225:                             # %for.end1292
	jmp	.LBB44_259
.LBB44_226:                             # %if.else1293
	movl	$0, -8(%rbp)
.LBB44_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_229 Depth 2
                                        #       Child Loop BB44_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB44_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB44_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB44_229:                             # %for.cond1304
                                        #   Parent Loop BB44_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB44_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB44_234
.LBB44_233:                             # %cond.false1319
                                        #   in Loop: Header=BB44_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_234
.LBB44_234:                             # %cond.end1320
                                        #   in Loop: Header=BB44_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB44_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB44_254
.LBB44_236:                             # %if.else1393
                                        #   in Loop: Header=BB44_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB44_237:                             # %for.cond1394
                                        #   Parent Loop BB44_227 Depth=1
                                        #     Parent Loop BB44_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB44_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB44_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB44_240
.LBB44_239:                             # %cond.false1402
                                        #   in Loop: Header=BB44_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB44_240:                             # %cond.end1406
                                        #   in Loop: Header=BB44_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB44_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB44_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB44_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB44_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB44_247
.LBB44_243:                             # %if.else1425
                                        #   in Loop: Header=BB44_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB44_237 Depth=3
	jmp	.LBB44_245
.LBB44_245:                             # %for.inc1427
                                        #   in Loop: Header=BB44_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB44_237
.LBB44_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB44_229 Depth=2
	jmp	.LBB44_247
.LBB44_247:                             # %for.end1429
                                        #   in Loop: Header=BB44_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB44_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB44_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB44_251
.LBB44_250:                             # %if.else1487
                                        #   in Loop: Header=BB44_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB44_251:                             # %if.end1571
                                        #   in Loop: Header=BB44_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB44_253
.LBB44_252:                             # %if.else1587
                                        #   in Loop: Header=BB44_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB44_253:                             # %if.end1602
                                        #   in Loop: Header=BB44_229 Depth=2
	jmp	.LBB44_254
.LBB44_254:                             # %if.end1603
                                        #   in Loop: Header=BB44_229 Depth=2
	jmp	.LBB44_255
.LBB44_255:                             # %for.inc1604
                                        #   in Loop: Header=BB44_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_229
.LBB44_256:                             # %for.end1606
                                        #   in Loop: Header=BB44_227 Depth=1
	jmp	.LBB44_257
.LBB44_257:                             # %for.inc1607
                                        #   in Loop: Header=BB44_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_227
.LBB44_258:                             # %for.end1609
	jmp	.LBB44_259
.LBB44_259:                             # %if.end1610
	cmpl	$298952972, -232(%rbp)  # imm = 0x11D1A90C
	jne	.LBB44_261
.LBB44_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_260
.Lfunc_end44:
	.size	Get_Direct_Motion_Vectors.19, .Lfunc_end44-Get_Direct_Motion_Vectors.19
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.20   # -- Begin function Get_Direct_Cost8x8.20
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.20,@function
Get_Direct_Cost8x8.20:                  # @Get_Direct_Cost8x8.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1592821301, -60(%rbp)  # imm = 0x5EF08635
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
                                        #       Child Loop BB45_7 Depth 3
                                        #         Child Loop BB45_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB45_3:                               # %for.cond3
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_7 Depth 3
                                        #         Child Loop BB45_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB45_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB45_30
.LBB45_6:                               # %if.end
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-24(%rbp), %edi
	movl	-28(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB45_7:                               # %for.cond34
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB45_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB45_7 Depth=3
	movl	$0, -12(%rbp)
.LBB45_9:                               # %for.cond38
                                        #   Parent Loop BB45_1 Depth=1
                                        #     Parent Loop BB45_3 Depth=2
                                        #       Parent Loop BB45_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB45_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB45_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_9
.LBB45_12:                              # %for.end
                                        #   in Loop: Header=BB45_7 Depth=3
	jmp	.LBB45_13
.LBB45_13:                              # %for.inc67
                                        #   in Loop: Header=BB45_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_7
.LBB45_14:                              # %for.end69
                                        #   in Loop: Header=BB45_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_3
.LBB45_16:                              # %for.end73
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_17
.LBB45_17:                              # %for.inc74
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_1
.LBB45_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB45_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB45_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB45_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB45_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB45_21 Depth=1
	movl	$0, -12(%rbp)
.LBB45_23:                              # %for.cond84
                                        #   Parent Loop BB45_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB45_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB45_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB45_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_23
.LBB45_26:                              # %for.end97
                                        #   in Loop: Header=BB45_21 Depth=1
	jmp	.LBB45_27
.LBB45_27:                              # %for.inc98
                                        #   in Loop: Header=BB45_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_21
.LBB45_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB45_29:                              # %if.end105
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB45_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$1592821301, -60(%rbp)  # imm = 0x5EF08635
	jne	.LBB45_32
.LBB45_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_31
.Lfunc_end45:
	.size	Get_Direct_Cost8x8.20, .Lfunc_end45-Get_Direct_Cost8x8.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.21
.LCPI46_0:
	.quad	4611686018427387904     # double 2
.LCPI46_1:
	.quad	4607182418800017408     # double 1
.LCPI46_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI46_4:
	.quad	4620693217682128896     # double 8
.LCPI46_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI46_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.21
	.p2align	4, 0x90
	.type	BlockMotionSearch.21,@function
BlockMotionSearch.21:                   # @BlockMotionSearch.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$285116969, -212(%rbp)  # imm = 0x10FE8A29
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -192(%rbp)
	movl	%ecx, -188(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-188(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-188(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB46_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB46_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB46_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB46_6 Depth=1
	movl	$0, -64(%rbp)
.LBB46_8:                               # %for.cond24
                                        #   Parent Loop BB46_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB46_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB46_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB46_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_8
.LBB46_11:                              # %for.end
                                        #   in Loop: Header=BB46_6 Depth=1
	jmp	.LBB46_12
.LBB46_12:                              # %for.inc37
                                        #   in Loop: Header=BB46_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_6
.LBB46_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB46_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_18
.LBB46_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB46_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_37
.LBB46_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB46_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_23
.LBB46_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB46_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_36
.LBB46_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB46_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_28
.LBB46_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB46_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_35
.LBB46_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB46_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_33
.LBB46_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB46_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB46_34:                              # %if.end276
	jmp	.LBB46_35
.LBB46_35:                              # %if.end277
	jmp	.LBB46_36
.LBB46_36:                              # %if.end278
	jmp	.LBB46_37
.LBB46_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB46_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB46_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_43
.LBB46_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB46_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_62
.LBB46_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB46_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_48
.LBB46_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB46_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_61
.LBB46_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB46_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_53
.LBB46_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB46_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB46_60
.LBB46_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB46_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB46_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB46_58
.LBB46_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB46_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB46_59:                              # %if.end524
	jmp	.LBB46_60
.LBB46_60:                              # %if.end525
	jmp	.LBB46_61
.LBB46_61:                              # %if.end526
	jmp	.LBB46_62
.LBB46_62:                              # %if.end527
	jmp	.LBB46_63
.LBB46_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB46_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB46_66
.LBB46_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB46_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB46_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB46_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB46_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB46_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB46_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB46_73
.LBB46_72:                              # %cond.false626
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB46_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB46_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB46_76
.LBB46_75:                              # %cond.false655
	vmovsd	.LCPI46_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB46_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB46_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB46_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB46_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB46_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB46_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB46_83
.LBB46_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB46_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB46_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB46_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB46_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB46_92
.LBB46_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB46_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB46_91
.LBB46_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB46_91:                              # %cond.end787
	vmovss	.LCPI46_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB46_92:                              # %if.end835
	jmp	.LBB46_106
.LBB46_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB46_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB46_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB46_97
.LBB46_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB46_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB46_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB46_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB46_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB46_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB46_104
.LBB46_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB46_104:                             # %cond.end940
	vmovss	.LCPI46_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB46_105:                             # %if.end988
	jmp	.LBB46_106
.LBB46_106:                             # %if.end989
	jmp	.LBB46_107
.LBB46_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB46_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	-132(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB46_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB46_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB46_114
.LBB46_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB46_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB46_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB46_120
.LBB46_116:                             # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB46_119
.LBB46_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB46_119:                             # %cond.end1029
.LBB46_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB46_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB46_123
.LBB46_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB46_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB46_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB46_129
.LBB46_125:                             # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB46_128
.LBB46_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB46_128:                             # %cond.end1054
.LBB46_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB46_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB46_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB46_131 Depth=1
	movl	$0, -72(%rbp)
.LBB46_133:                             # %for.cond1066
                                        #   Parent Loop BB46_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB46_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB46_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB46_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB46_137
.LBB46_136:                             # %if.else1091
                                        #   in Loop: Header=BB46_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB46_137:                             # %if.end1109
                                        #   in Loop: Header=BB46_133 Depth=2
	jmp	.LBB46_138
.LBB46_138:                             # %for.inc1110
                                        #   in Loop: Header=BB46_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_133
.LBB46_139:                             # %for.end1112
                                        #   in Loop: Header=BB46_131 Depth=1
	jmp	.LBB46_140
.LBB46_140:                             # %for.inc1113
                                        #   in Loop: Header=BB46_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_131
.LBB46_141:                             # %for.end1115
	jmp	.LBB46_143
.LBB46_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB46_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB46_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB46_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB46_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB46_150
.LBB46_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB46_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB46_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB46_151 Depth=1
	movl	$0, -72(%rbp)
.LBB46_153:                             # %for.cond1139
                                        #   Parent Loop BB46_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB46_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB46_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB46_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB46_157
.LBB46_156:                             # %if.else1183
                                        #   in Loop: Header=BB46_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB46_157:                             # %if.end1220
                                        #   in Loop: Header=BB46_153 Depth=2
	jmp	.LBB46_158
.LBB46_158:                             # %for.inc1221
                                        #   in Loop: Header=BB46_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_153
.LBB46_159:                             # %for.end1223
                                        #   in Loop: Header=BB46_151 Depth=1
	jmp	.LBB46_160
.LBB46_160:                             # %for.inc1224
                                        #   in Loop: Header=BB46_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_151
.LBB46_161:                             # %for.end1226
	jmp	.LBB46_166
.LBB46_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB46_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB46_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB46_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB46_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB46_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB46_173
.LBB46_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI46_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB46_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB46_172:                             # %if.end1273
	jmp	.LBB46_173
.LBB46_173:                             # %if.end1274
	jmp	.LBB46_174
.LBB46_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB46_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -196(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -64(%rbp)
.LBB46_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB46_176 Depth=1
	movl	$0, -72(%rbp)
.LBB46_178:                             # %for.cond1290
                                        #   Parent Loop BB46_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB46_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-196(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-180(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB46_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_178
.LBB46_181:                             # %for.end1337
                                        #   in Loop: Header=BB46_176 Depth=1
	jmp	.LBB46_182
.LBB46_182:                             # %for.inc1338
                                        #   in Loop: Header=BB46_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_176
.LBB46_183:                             # %for.end1340
	jmp	.LBB46_193
.LBB46_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB46_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB46_185 Depth=1
	movl	$0, -72(%rbp)
.LBB46_187:                             # %for.cond1347
                                        #   Parent Loop BB46_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB46_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB46_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_187
.LBB46_190:                             # %for.end1380
                                        #   in Loop: Header=BB46_185 Depth=1
	jmp	.LBB46_191
.LBB46_191:                             # %for.inc1381
                                        #   in Loop: Header=BB46_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_185
.LBB46_192:                             # %for.end1383
	jmp	.LBB46_193
.LBB46_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB46_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB46_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB46_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB46_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB46_200
.LBB46_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB46_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-136(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB46_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB46_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB46_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB46_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB46_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB46_208
.LBB46_204:                             # %if.else1433
                                        #   in Loop: Header=BB46_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB46_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB46_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB46_207
.LBB46_206:                             # %if.else1441
                                        #   in Loop: Header=BB46_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB46_207:                             # %if.end1450
                                        #   in Loop: Header=BB46_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB46_208:                             # %if.end1452
                                        #   in Loop: Header=BB46_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-140(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -140(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB46_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_201
.LBB46_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB46_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB46_213:                             # %if.end1469
	vmovsd	.LCPI46_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB46_215
.LBB46_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB46_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB46_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB46_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB46_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI46_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB46_220
.LBB46_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB46_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB46_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB46_221 Depth=1
	movl	$0, -72(%rbp)
.LBB46_223:                             # %for.cond1502
                                        #   Parent Loop BB46_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB46_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB46_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB46_223
.LBB46_226:                             # %for.end1565
                                        #   in Loop: Header=BB46_221 Depth=1
	jmp	.LBB46_227
.LBB46_227:                             # %for.inc1566
                                        #   in Loop: Header=BB46_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB46_221
.LBB46_228:                             # %for.end1568
	jmp	.LBB46_229
.LBB46_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-184(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$285116969, -212(%rbp)  # imm = 0x10FE8A29
	jne	.LBB46_231
.LBB46_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_230
.Lfunc_end46:
	.size	BlockMotionSearch.21, .Lfunc_end46-BlockMotionSearch.21
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.22 # -- Begin function PartitionMotionSearch.22
	.p2align	4, 0x90
	.type	PartitionMotionSearch.22,@function
PartitionMotionSearch.22:               # @PartitionMotionSearch.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1520746846, -84(%rbp)  # imm = 0x5AA4C15E
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB47_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB47_3
.LBB47_3:                               # %cond.end
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB47_6
# %bb.5:                                # %if.then20
	movl	$4, -44(%rbp)
	jmp	.LBB47_7
.LBB47_6:                               # %if.else
	movl	$2, -44(%rbp)
.LBB47_7:                               # %if.end
	jmp	.LBB47_9
.LBB47_8:                               # %if.else21
	movl	$0, -44(%rbp)
.LBB47_9:                               # %if.end22
	movl	-80(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	$0, -8(%rbp)
.LBB47_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_12 Depth 2
                                        #       Child Loop BB47_29 Depth 3
                                        #         Child Loop BB47_31 Depth 4
                                        #           Child Loop BB47_33 Depth 5
                                        #             Child Loop BB47_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB47_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB47_10 Depth=1
	movw	$0, -2(%rbp)
.LBB47_12:                              # %for.cond27
                                        #   Parent Loop BB47_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_29 Depth 3
                                        #         Child Loop BB47_31 Depth 4
                                        #           Child Loop BB47_33 Depth 5
                                        #             Child Loop BB47_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB47_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB47_28
.LBB47_15:                              # %if.else38
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB47_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB47_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB47_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB47_19
.LBB47_18:                              # %cond.false49
                                        #   in Loop: Header=BB47_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB47_19
.LBB47_19:                              # %cond.end50
                                        #   in Loop: Header=BB47_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	jmp	.LBB47_27
.LBB47_20:                              # %if.else53
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB47_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB47_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB47_23
.LBB47_22:                              # %cond.false60
                                        #   in Loop: Header=BB47_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB47_23
.LBB47_23:                              # %cond.end61
                                        #   in Loop: Header=BB47_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB47_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB47_12 Depth=2
	movl	$2, %edx
	jmp	.LBB47_26
.LBB47_25:                              # %cond.false67
                                        #   in Loop: Header=BB47_12 Depth=2
	movl	-12(%rbp), %edx
.LBB47_26:                              # %cond.end68
                                        #   in Loop: Header=BB47_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
.LBB47_27:                              # %if.end71
                                        #   in Loop: Header=BB47_12 Depth=2
	jmp	.LBB47_28
.LBB47_28:                              # %if.end72
                                        #   in Loop: Header=BB47_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB47_29:                              # %for.cond89
                                        #   Parent Loop BB47_10 Depth=1
                                        #     Parent Loop BB47_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_31 Depth 4
                                        #           Child Loop BB47_33 Depth 5
                                        #             Child Loop BB47_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB47_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB47_31:                              # %for.cond103
                                        #   Parent Loop BB47_10 Depth=1
                                        #     Parent Loop BB47_12 Depth=2
                                        #       Parent Loop BB47_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB47_33 Depth 5
                                        #             Child Loop BB47_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB47_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-48(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB47_33:                              # %for.cond123
                                        #   Parent Loop BB47_10 Depth=1
                                        #     Parent Loop BB47_12 Depth=2
                                        #       Parent Loop BB47_29 Depth=3
                                        #         Parent Loop BB47_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB47_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB47_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB47_33 Depth=5
	movl	$0, -36(%rbp)
.LBB47_35:                              # %for.cond127
                                        #   Parent Loop BB47_10 Depth=1
                                        #     Parent Loop BB47_12 Depth=2
                                        #       Parent Loop BB47_29 Depth=3
                                        #         Parent Loop BB47_31 Depth=4
                                        #           Parent Loop BB47_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB47_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB47_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB47_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB47_35
.LBB47_38:                              # %for.end
                                        #   in Loop: Header=BB47_33 Depth=5
	jmp	.LBB47_39
.LBB47_39:                              # %for.inc174
                                        #   in Loop: Header=BB47_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_33
.LBB47_40:                              # %for.end176
                                        #   in Loop: Header=BB47_31 Depth=4
	jmp	.LBB47_41
.LBB47_41:                              # %for.inc177
                                        #   in Loop: Header=BB47_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_31
.LBB47_42:                              # %for.end179
                                        #   in Loop: Header=BB47_29 Depth=3
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc180
                                        #   in Loop: Header=BB47_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_29
.LBB47_44:                              # %for.end182
                                        #   in Loop: Header=BB47_12 Depth=2
	jmp	.LBB47_45
.LBB47_45:                              # %for.inc183
                                        #   in Loop: Header=BB47_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB47_12
.LBB47_46:                              # %for.end185
                                        #   in Loop: Header=BB47_10 Depth=1
	jmp	.LBB47_47
.LBB47_47:                              # %for.inc186
                                        #   in Loop: Header=BB47_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_10
.LBB47_48:                              # %for.end188
	cmpl	$1520746846, -84(%rbp)  # imm = 0x5AA4C15E
	jne	.LBB47_50
.LBB47_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_49
.Lfunc_end47:
	.size	PartitionMotionSearch.22, .Lfunc_end47-PartitionMotionSearch.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.23
.LCPI48_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI48_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.23
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.23,@function
Init_Motion_Search_Module.23:           # @Init_Motion_Search_Module.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1370512419, -52(%rbp)  # imm = 0x51B05C23
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB48_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB48_3
.LBB48_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB48_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB48_6
.LBB48_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB48_6:                               # %cond.end19
	movl	%eax, -44(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB48_9
.LBB48_8:                               # %cond.false24
	movl	-48(%rbp), %eax
	addl	$1, %eax
.LBB48_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI48_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI48_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB48_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB48_11:                              # %if.end
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB48_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB48_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB48_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB48_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB48_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB48_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB48_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB48_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB48_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB48_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB48_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_22:                              # %for.cond90
                                        #   Parent Loop BB48_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB48_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB48_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_22
.LBB48_25:                              # %for.end
                                        #   in Loop: Header=BB48_20 Depth=1
	jmp	.LBB48_26
.LBB48_26:                              # %for.inc98
                                        #   in Loop: Header=BB48_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_20
.LBB48_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB48_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB48_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB48_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_30:                              # %for.cond111
                                        #   Parent Loop BB48_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB48_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB48_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_30
.LBB48_33:                              # %for.end119
                                        #   in Loop: Header=BB48_28 Depth=1
	jmp	.LBB48_34
.LBB48_34:                              # %for.inc120
                                        #   in Loop: Header=BB48_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_28
.LBB48_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB48_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB48_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB48_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB48_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_45 Depth 2
                                        #     Child Loop BB48_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB48_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB48_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB48_43
.LBB48_42:                              # %cond.false143
                                        #   in Loop: Header=BB48_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB48_43:                              # %cond.end144
                                        #   in Loop: Header=BB48_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB48_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB48_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB48_45:                              # %for.cond151
                                        #   Parent Loop BB48_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB48_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB48_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB48_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_45
.LBB48_48:                              # %for.end168
                                        #   in Loop: Header=BB48_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_49:                              # %for.cond170
                                        #   Parent Loop BB48_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB48_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB48_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB48_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_49
.LBB48_52:                              # %for.end187
                                        #   in Loop: Header=BB48_40 Depth=1
	jmp	.LBB48_53
.LBB48_53:                              # %for.inc188
                                        #   in Loop: Header=BB48_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_40
.LBB48_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB48_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB48_56:                              # %if.end192
	cmpl	$1370512419, -52(%rbp)  # imm = 0x51B05C23
	jne	.LBB48_58
.LBB48_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_57
.Lfunc_end48:
	.size	Init_Motion_Search_Module.23, .Lfunc_end48-Init_Motion_Search_Module.23
	.cfi_endproc
                                        # -- End function
	.globl	SATD.24                 # -- Begin function SATD.24
	.p2align	4, 0x90
	.type	SATD.24,@function
SATD.24:                                # @SATD.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$207751935, -180(%rbp)  # imm = 0xC620AFF
	movq	%rdi, -16(%rbp)
	movl	%esi, -184(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB49_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB49_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB49_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB49_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB49_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB49_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB49_6
.LBB49_5:                               # %cond.false
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-100(%rbp), %eax
.LBB49_6:                               # %cond.end
                                        #   in Loop: Header=BB49_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB49_2
.LBB49_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_14
.LBB49_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB49_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB49_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB49_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB49_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_10
.LBB49_13:                              # %for.end270
	jmp	.LBB49_14
.LBB49_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$207751935, -180(%rbp)  # imm = 0xC620AFF
	jne	.LBB49_16
.LBB49_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_15
.Lfunc_end49:
	.size	SATD.24, .Lfunc_end49-SATD.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.25
.LCPI50_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI50_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.25
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.25,@function
Init_Motion_Search_Module.25:           # @Init_Motion_Search_Module.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1735971876, -60(%rbp)  # imm = 0x6778D424
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB50_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB50_3
.LBB50_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB50_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB50_6:                               # %cond.end19
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB50_9
.LBB50_8:                               # %cond.false24
	movl	-40(%rbp), %eax
	addl	$1, %eax
.LBB50_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI50_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI50_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB50_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB50_11:                              # %if.end
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB50_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB50_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB50_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB50_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB50_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB50_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB50_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB50_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB50_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_22 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB50_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_22:                              # %for.cond90
                                        #   Parent Loop BB50_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB50_22 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB50_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_22
.LBB50_25:                              # %for.end
                                        #   in Loop: Header=BB50_20 Depth=1
	jmp	.LBB50_26
.LBB50_26:                              # %for.inc98
                                        #   in Loop: Header=BB50_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_20
.LBB50_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB50_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_30 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB50_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB50_28 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_30:                              # %for.cond111
                                        #   Parent Loop BB50_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB50_30 Depth=2
	movl	-16(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB50_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_30
.LBB50_33:                              # %for.end119
                                        #   in Loop: Header=BB50_28 Depth=1
	jmp	.LBB50_34
.LBB50_34:                              # %for.inc120
                                        #   in Loop: Header=BB50_28 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_28
.LBB50_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB50_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB50_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB50_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_36
.LBB50_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -12(%rbp)
.LBB50_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_45 Depth 2
                                        #     Child Loop BB50_49 Depth 2
	movl	-12(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB50_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB50_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB50_43
.LBB50_42:                              # %cond.false143
                                        #   in Loop: Header=BB50_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB50_43:                              # %cond.end144
                                        #   in Loop: Header=BB50_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB50_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB50_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB50_45:                              # %for.cond151
                                        #   Parent Loop BB50_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB50_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB50_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB50_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_45
.LBB50_48:                              # %for.end168
                                        #   in Loop: Header=BB50_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_49:                              # %for.cond170
                                        #   Parent Loop BB50_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB50_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB50_49 Depth=2
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB50_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_49
.LBB50_52:                              # %for.end187
                                        #   in Loop: Header=BB50_40 Depth=1
	jmp	.LBB50_53
.LBB50_53:                              # %for.inc188
                                        #   in Loop: Header=BB50_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_40
.LBB50_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB50_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB50_56:                              # %if.end192
	cmpl	$1735971876, -60(%rbp)  # imm = 0x6778D424
	jne	.LBB50_58
.LBB50_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_57
.Lfunc_end50:
	.size	Init_Motion_Search_Module.25, .Lfunc_end50-Init_Motion_Search_Module.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.26
.LCPI51_0:
	.quad	4602678819172646912     # double 0.5
.LCPI51_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.26
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.26,@function
FullPelBlockMotionBiPred.26:            # @FullPelBlockMotionBiPred.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$1583892127, -180(%rbp) # imm = 0x5E68469F
	movq	%rdi, -208(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB51_4
.LBB51_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB51_4
.LBB51_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB51_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB51_7
.LBB51_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB51_7:                               # %cond.end12
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -108(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -116(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -172(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-104(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movl	-104(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB51_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB51_11
.LBB51_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB51_11:                              # %cond.end87
	jmp	.LBB51_13
.LBB51_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB51_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB51_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB51_17
.LBB51_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB51_17:                              # %cond.end114
	jmp	.LBB51_19
.LBB51_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB51_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB51_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB51_23
.LBB51_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB51_23:                              # %cond.end138
	jmp	.LBB51_25
.LBB51_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB51_25
.LBB51_25:                              # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB51_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB51_29
.LBB51_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB51_29:                              # %cond.end161
	jmp	.LBB51_31
.LBB51_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB51_31
.LBB51_31:                              # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB51_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB51_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-112(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB51_37
.LBB51_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB51_37:                              # %if.end
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB51_42
# %bb.38:                               # %land.lhs.true196
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_42
# %bb.39:                               # %land.lhs.true204
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB51_42
# %bb.40:                               # %land.lhs.true208
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-112(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB51_43
.LBB51_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB51_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB51_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_49 Depth 2
                                        #       Child Loop BB51_51 Depth 3
                                        #     Child Loop BB51_85 Depth 2
                                        #       Child Loop BB51_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB51_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB51_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-42(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-46(%rbp), %esi
	shll	$2, %esi
	subl	-188(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-184(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB51_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_99
.LBB51_47:                              # %if.end257
                                        #   in Loop: Header=BB51_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB51_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB51_44 Depth=1
	movl	$0, -36(%rbp)
.LBB51_49:                              # %for.cond260
                                        #   Parent Loop BB51_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB51_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB51_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB51_51:                              # %for.cond271
                                        #   Parent Loop BB51_44 Depth=1
                                        #     Parent Loop BB51_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB51_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB51_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB51_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB51_58
.LBB51_54:                              # %cond.false296
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB51_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_57
.LBB51_56:                              # %cond.false310
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB51_57:                              # %cond.end320
                                        #   in Loop: Header=BB51_51 Depth=3
.LBB51_58:                              # %cond.end322
                                        #   in Loop: Header=BB51_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB51_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB51_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB51_64
.LBB51_60:                              # %cond.false354
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB51_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_63
.LBB51_62:                              # %cond.false369
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB51_63:                              # %cond.end379
                                        #   in Loop: Header=BB51_51 Depth=3
.LBB51_64:                              # %cond.end381
                                        #   in Loop: Header=BB51_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB51_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB51_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB51_70
.LBB51_66:                              # %cond.false413
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB51_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_69
.LBB51_68:                              # %cond.false428
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB51_69:                              # %cond.end438
                                        #   in Loop: Header=BB51_51 Depth=3
.LBB51_70:                              # %cond.end440
                                        #   in Loop: Header=BB51_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB51_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB51_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB51_76
.LBB51_72:                              # %cond.false472
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB51_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_75
.LBB51_74:                              # %cond.false487
                                        #   in Loop: Header=BB51_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB51_75:                              # %cond.end497
                                        #   in Loop: Header=BB51_51 Depth=3
.LBB51_76:                              # %cond.end499
                                        #   in Loop: Header=BB51_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB51_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB51_51
.LBB51_78:                              # %for.end
                                        #   in Loop: Header=BB51_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB51_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_83
.LBB51_80:                              # %if.end512
                                        #   in Loop: Header=BB51_49 Depth=2
	jmp	.LBB51_81
.LBB51_81:                              # %for.inc513
                                        #   in Loop: Header=BB51_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB51_49
.LBB51_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_83
.LBB51_83:                              # %for.end515
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_96
.LBB51_84:                              # %if.else516
                                        #   in Loop: Header=BB51_44 Depth=1
	movl	$0, -36(%rbp)
.LBB51_85:                              # %for.cond517
                                        #   Parent Loop BB51_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB51_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB51_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB51_87:                              # %for.cond529
                                        #   Parent Loop BB51_44 Depth=1
                                        #     Parent Loop BB51_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB51_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB51_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB51_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB51_87
.LBB51_90:                              # %for.end583
                                        #   in Loop: Header=BB51_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB51_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_95
.LBB51_92:                              # %if.end587
                                        #   in Loop: Header=BB51_85 Depth=2
	jmp	.LBB51_93
.LBB51_93:                              # %for.inc588
                                        #   in Loop: Header=BB51_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB51_85
.LBB51_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_95
.LBB51_95:                              # %for.end590
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_96
.LBB51_96:                              # %if.end591
                                        #   in Loop: Header=BB51_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB51_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB51_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB51_98:                              # %if.end595
                                        #   in Loop: Header=BB51_44 Depth=1
	jmp	.LBB51_99
.LBB51_99:                              # %for.inc596
                                        #   in Loop: Header=BB51_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB51_44
.LBB51_100:                             # %for.end598
	cmpl	$0, -116(%rbp)
	je	.LBB51_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-116(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-116(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB51_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$1583892127, -180(%rbp) # imm = 0x5E68469F
	jne	.LBB51_104
.LBB51_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_103
.Lfunc_end51:
	.size	FullPelBlockMotionBiPred.26, .Lfunc_end51-FullPelBlockMotionBiPred.26
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.27 # -- Begin function ResetFastFullIntegerSearch.27
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.27,@function
ResetFastFullIntegerSearch.27:          # @ResetFastFullIntegerSearch.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1900128065, -12(%rbp)  # imm = 0x7141A741
	movl	$0, -8(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB52_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_3:                               # %for.cond1
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB52_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB52_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_3
.LBB52_6:                               # %for.end
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_7
.LBB52_7:                               # %for.inc6
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_1
.LBB52_8:                               # %for.end8
	cmpl	$1900128065, -12(%rbp)  # imm = 0x7141A741
	jne	.LBB52_10
.LBB52_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_9
.Lfunc_end52:
	.size	ResetFastFullIntegerSearch.27, .Lfunc_end52-ResetFastFullIntegerSearch.27
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.28 # -- Begin function InitializeFastFullIntegerSearch.28
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.28,@function
InitializeFastFullIntegerSearch.28:     # @InitializeFastFullIntegerSearch.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$88372691, -28(%rbp)    # imm = 0x54475D3
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB53_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_7 Depth 2
                                        #       Child Loop BB53_11 Depth 3
                                        #         Child Loop BB53_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB53_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB53_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB53_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_6:                               # %if.end12
                                        #   in Loop: Header=BB53_3 Depth=1
	movl	$0, -8(%rbp)
.LBB53_7:                               # %for.cond13
                                        #   Parent Loop BB53_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_11 Depth 3
                                        #         Child Loop BB53_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB53_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB53_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB53_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_10:                              # %if.end26
                                        #   in Loop: Header=BB53_7 Depth=2
	movl	$1, -12(%rbp)
.LBB53_11:                              # %for.cond27
                                        #   Parent Loop BB53_3 Depth=1
                                        #     Parent Loop BB53_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB53_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB53_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB53_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_14:                              # %if.end41
                                        #   in Loop: Header=BB53_11 Depth=3
	movl	$0, -20(%rbp)
.LBB53_15:                              # %for.cond42
                                        #   Parent Loop BB53_3 Depth=1
                                        #     Parent Loop BB53_7 Depth=2
                                        #       Parent Loop BB53_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB53_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB53_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB53_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB53_18:                              # %if.end60
                                        #   in Loop: Header=BB53_15 Depth=4
	jmp	.LBB53_19
.LBB53_19:                              # %for.inc
                                        #   in Loop: Header=BB53_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_15
.LBB53_20:                              # %for.end
                                        #   in Loop: Header=BB53_11 Depth=3
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc61
                                        #   in Loop: Header=BB53_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_11
.LBB53_22:                              # %for.end63
                                        #   in Loop: Header=BB53_7 Depth=2
	jmp	.LBB53_23
.LBB53_23:                              # %for.inc64
                                        #   in Loop: Header=BB53_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_7
.LBB53_24:                              # %for.end66
                                        #   in Loop: Header=BB53_3 Depth=1
	jmp	.LBB53_25
.LBB53_25:                              # %for.inc67
                                        #   in Loop: Header=BB53_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_3
.LBB53_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB53_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB53_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB53_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB53_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB53_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB53_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB53_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB53_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB53_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB53_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB53_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB53_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB53_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB53_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB53_40:                              # %if.end109
                                        #   in Loop: Header=BB53_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB53_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB53_42:                              # %if.end120
                                        #   in Loop: Header=BB53_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB53_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB53_44:                              # %if.end131
                                        #   in Loop: Header=BB53_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB53_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB53_46:                              # %if.end142
                                        #   in Loop: Header=BB53_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB53_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB53_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB53_48:                              # %if.end153
                                        #   in Loop: Header=BB53_37 Depth=1
	jmp	.LBB53_49
.LBB53_49:                              # %for.inc154
                                        #   in Loop: Header=BB53_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_37
.LBB53_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB53_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB53_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	$0, -8(%rbp)
.LBB53_54:                              # %for.cond164
                                        #   Parent Loop BB53_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB53_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_54
.LBB53_57:                              # %for.end175
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_58
.LBB53_58:                              # %for.inc176
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_52
.LBB53_59:                              # %for.end178
	jmp	.LBB53_69
.LBB53_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB53_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB53_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB53_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB53_63:                              # %for.cond191
                                        #   Parent Loop BB53_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB53_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB53_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB53_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_63
.LBB53_66:                              # %for.end202
                                        #   in Loop: Header=BB53_61 Depth=1
	jmp	.LBB53_67
.LBB53_67:                              # %for.inc203
                                        #   in Loop: Header=BB53_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_61
.LBB53_68:                              # %for.end205
	jmp	.LBB53_69
.LBB53_69:                              # %if.end206
	cmpl	$88372691, -28(%rbp)    # imm = 0x54475D3
	jne	.LBB53_71
.LBB53_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_70
.Lfunc_end53:
	.size	InitializeFastFullIntegerSearch.28, .Lfunc_end53-InitializeFastFullIntegerSearch.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.29
.LCPI54_0:
	.quad	4602678819172646912     # double 0.5
.LCPI54_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.29
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.29,@function
FastFullPelBlockMotionSearch.29:        # @FastFullPelBlockMotionSearch.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$2065446359, -56(%rbp)  # imm = 0x7B1C35D7
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -64(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -72(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB54_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB54_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB54_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-44(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB54_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB54_5:                               # %if.end56
	jmp	.LBB54_6
.LBB54_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB54_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB54_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB54_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB54_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-44(%rbp), %eax
	movq	mvbits, %rcx
	movl	-84(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB54_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB54_11:                              # %if.end85
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_12
.LBB54_12:                              # %if.end86
                                        #   in Loop: Header=BB54_7 Depth=1
	jmp	.LBB54_13
.LBB54_13:                              # %for.inc
                                        #   in Loop: Header=BB54_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB54_7
.LBB54_14:                              # %for.end
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$2065446359, -56(%rbp)  # imm = 0x7B1C35D7
	jne	.LBB54_16
.LBB54_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_15
.Lfunc_end54:
	.size	FastFullPelBlockMotionSearch.29, .Lfunc_end54-FastFullPelBlockMotionSearch.29
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.30    # -- Begin function SetupLargerBlocks.30
	.p2align	4, 0x90
	.type	SetupLargerBlocks.30,@function
SetupLargerBlocks.30:                   # @SetupLargerBlocks.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$960720660, -76(%rbp)   # imm = 0x39436F14
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_4:                               # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB55_5 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB55_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_5
.LBB55_8:                               # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB55_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB55_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_9
.LBB55_12:                              # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB55_13 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB55_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_13
.LBB55_16:                              # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB55_17 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_17
.LBB55_20:                              # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB55_21 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB55_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_21
.LBB55_24:                              # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB55_25 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_25
.LBB55_28:                              # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB55_29 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB55_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_29
.LBB55_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB55_33 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB55_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_33
.LBB55_36:                              # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB55_37 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB55_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_37
.LBB55_40:                              # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB55_41 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB55_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_41
.LBB55_44:                              # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB55_45 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_45
.LBB55_48:                              # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB55_49 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB55_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_49
.LBB55_52:                              # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB55_53 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB55_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_53
.LBB55_56:                              # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB55_57 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB55_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_57
.LBB55_60:                              # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB55_61 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB55_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_61
.LBB55_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB55_65 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB55_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_65
.LBB55_68:                              # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB55_69 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB55_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_69
.LBB55_72:                              # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB55_73 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB55_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_73
.LBB55_76:                              # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB55_77 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB55_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_77
.LBB55_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB55_81 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB55_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_81
.LBB55_84:                              # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB55_85 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB55_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_85
.LBB55_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB55_89 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB55_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_89
.LBB55_92:                              # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB55_93 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB55_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_93
.LBB55_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB55_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB55_97 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB55_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_97
.LBB55_100:                             # %for.end438
	cmpl	$960720660, -76(%rbp)   # imm = 0x39436F14
	jne	.LBB55_102
.LBB55_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_101
.Lfunc_end55:
	.size	SetupLargerBlocks.30, .Lfunc_end55-SetupLargerBlocks.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.31
.LCPI56_0:
	.quad	4602678819172646912     # double 0.5
.LCPI56_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.31
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.31,@function
FullPelBlockMotionSearch.31:            # @FullPelBlockMotionSearch.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$655148888, -140(%rbp)  # imm = 0x270CC758
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -60(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB56_4
.LBB56_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB56_4
.LBB56_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -132(%rbp)
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -148(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-60(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-60(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -128(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -124(%rbp)
	movl	-84(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movl	-64(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	cmpl	$1, -60(%rbp)
	jne	.LBB56_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB56_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB56_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB56_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB56_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB56_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB56_14
.LBB56_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB56_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB56_13:                              # %land.end63
.LBB56_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB56_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB56_17
# %bb.16:                               # %if.then
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB56_18
.LBB56_17:                              # %if.else
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB56_18:                              # %if.end
	movl	-76(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB56_23
# %bb.19:                               # %land.lhs.true81
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_23
# %bb.20:                               # %land.lhs.true86
	movl	-68(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB56_23
# %bb.21:                               # %land.lhs.true89
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB56_24
.LBB56_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB56_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB56_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_33 Depth 2
                                        #       Child Loop BB56_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB56_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-88(%rbp), %edx
	shll	$2, %edx
	subl	-120(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-92(%rbp), %esi
	shll	$2, %esi
	subl	-124(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB56_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB56_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB56_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB56_30:                              # %if.end128
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB56_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_46
.LBB56_32:                              # %if.end132
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	$0, -24(%rbp)
.LBB56_33:                              # %for.cond133
                                        #   Parent Loop BB56_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_35 Depth 3
	movl	-24(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB56_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB56_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-80(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-136(%rbp), %r8d
	movl	-132(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -72(%rbp)
.LBB56_35:                              # %for.cond140
                                        #   Parent Loop BB56_25 Depth=1
                                        #     Parent Loop BB56_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-72(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.LBB56_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB56_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB56_35 Depth=3
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB56_35
.LBB56_38:                              # %for.end
                                        #   in Loop: Header=BB56_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB56_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_43
.LBB56_40:                              # %if.end178
                                        #   in Loop: Header=BB56_33 Depth=2
	jmp	.LBB56_41
.LBB56_41:                              # %for.inc179
                                        #   in Loop: Header=BB56_33 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_33
.LBB56_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_43
.LBB56_43:                              # %for.end181
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB56_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB56_45:                              # %if.end185
                                        #   in Loop: Header=BB56_25 Depth=1
	jmp	.LBB56_46
.LBB56_46:                              # %for.inc186
                                        #   in Loop: Header=BB56_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_25
.LBB56_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB56_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB56_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$655148888, -140(%rbp)  # imm = 0x270CC758
	jne	.LBB56_51
.LBB56_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_50
.Lfunc_end56:
	.size	FullPelBlockMotionSearch.31, .Lfunc_end56-FullPelBlockMotionSearch.31
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.32 # -- Begin function PartitionMotionSearch.32
	.p2align	4, 0x90
	.type	PartitionMotionSearch.32,@function
PartitionMotionSearch.32:               # @PartitionMotionSearch.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$181416757, -84(%rbp)   # imm = 0xAD03335
	movl	%edi, -8(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB57_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB57_3
.LBB57_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB57_6
# %bb.5:                                # %if.then20
	movl	$4, -48(%rbp)
	jmp	.LBB57_7
.LBB57_6:                               # %if.else
	movl	$2, -48(%rbp)
.LBB57_7:                               # %if.end
	jmp	.LBB57_9
.LBB57_8:                               # %if.else21
	movl	$0, -48(%rbp)
.LBB57_9:                               # %if.end22
	movl	-76(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB57_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_12 Depth 2
                                        #       Child Loop BB57_29 Depth 3
                                        #         Child Loop BB57_31 Depth 4
                                        #           Child Loop BB57_33 Depth 5
                                        #             Child Loop BB57_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB57_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB57_10 Depth=1
	movw	$0, -2(%rbp)
.LBB57_12:                              # %for.cond27
                                        #   Parent Loop BB57_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_29 Depth 3
                                        #         Child Loop BB57_31 Depth 4
                                        #           Child Loop BB57_33 Depth 5
                                        #             Child Loop BB57_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB57_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB57_28
.LBB57_15:                              # %if.else38
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB57_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB57_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB57_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB57_19
.LBB57_18:                              # %cond.false49
                                        #   in Loop: Header=BB57_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB57_19
.LBB57_19:                              # %cond.end50
                                        #   in Loop: Header=BB57_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB57_27
.LBB57_20:                              # %if.else53
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB57_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB57_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB57_23
.LBB57_22:                              # %cond.false60
                                        #   in Loop: Header=BB57_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB57_23
.LBB57_23:                              # %cond.end61
                                        #   in Loop: Header=BB57_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB57_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB57_12 Depth=2
	movl	$2, %edx
	jmp	.LBB57_26
.LBB57_25:                              # %cond.false67
                                        #   in Loop: Header=BB57_12 Depth=2
	movl	-8(%rbp), %edx
.LBB57_26:                              # %cond.end68
                                        #   in Loop: Header=BB57_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB57_27:                              # %if.end71
                                        #   in Loop: Header=BB57_12 Depth=2
	jmp	.LBB57_28
.LBB57_28:                              # %if.end72
                                        #   in Loop: Header=BB57_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB57_29:                              # %for.cond89
                                        #   Parent Loop BB57_10 Depth=1
                                        #     Parent Loop BB57_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_31 Depth 4
                                        #           Child Loop BB57_33 Depth 5
                                        #             Child Loop BB57_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB57_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB57_31:                              # %for.cond103
                                        #   Parent Loop BB57_10 Depth=1
                                        #     Parent Loop BB57_12 Depth=2
                                        #       Parent Loop BB57_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_33 Depth 5
                                        #             Child Loop BB57_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB57_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -24(%rbp)
.LBB57_33:                              # %for.cond123
                                        #   Parent Loop BB57_10 Depth=1
                                        #     Parent Loop BB57_12 Depth=2
                                        #       Parent Loop BB57_29 Depth=3
                                        #         Parent Loop BB57_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_35 Depth 6
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB57_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB57_33 Depth=5
	movl	$0, -36(%rbp)
.LBB57_35:                              # %for.cond127
                                        #   Parent Loop BB57_10 Depth=1
                                        #     Parent Loop BB57_12 Depth=2
                                        #       Parent Loop BB57_29 Depth=3
                                        #         Parent Loop BB57_31 Depth=4
                                        #           Parent Loop BB57_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB57_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB57_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB57_35
.LBB57_38:                              # %for.end
                                        #   in Loop: Header=BB57_33 Depth=5
	jmp	.LBB57_39
.LBB57_39:                              # %for.inc174
                                        #   in Loop: Header=BB57_33 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_33
.LBB57_40:                              # %for.end176
                                        #   in Loop: Header=BB57_31 Depth=4
	jmp	.LBB57_41
.LBB57_41:                              # %for.inc177
                                        #   in Loop: Header=BB57_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_31
.LBB57_42:                              # %for.end179
                                        #   in Loop: Header=BB57_29 Depth=3
	jmp	.LBB57_43
.LBB57_43:                              # %for.inc180
                                        #   in Loop: Header=BB57_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_29
.LBB57_44:                              # %for.end182
                                        #   in Loop: Header=BB57_12 Depth=2
	jmp	.LBB57_45
.LBB57_45:                              # %for.inc183
                                        #   in Loop: Header=BB57_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB57_12
.LBB57_46:                              # %for.end185
                                        #   in Loop: Header=BB57_10 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc186
                                        #   in Loop: Header=BB57_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_10
.LBB57_48:                              # %for.end188
	cmpl	$181416757, -84(%rbp)   # imm = 0xAD03335
	jne	.LBB57_50
.LBB57_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_49
.Lfunc_end57:
	.size	PartitionMotionSearch.32, .Lfunc_end57-PartitionMotionSearch.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.33
.LCPI58_0:
	.quad	4602678819172646912     # double 0.5
.LCPI58_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.33
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.33,@function
FullPelBlockMotionSearch.33:            # @FullPelBlockMotionSearch.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1608429087, -140(%rbp) # imm = 0x5FDEAE1F
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -80(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_4
.LBB58_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_4
.LBB58_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -148(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-80(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-80(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -116(%rbp)
	movl	-72(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movl	-88(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-72(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movl	-88(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	cmpl	$1, -80(%rbp)
	jne	.LBB58_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB58_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB58_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB58_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -120(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB58_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB58_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB58_14
.LBB58_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB58_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB58_13:                              # %land.end63
.LBB58_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -136(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB58_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB58_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB58_18
.LBB58_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB58_18:                              # %if.end
	movl	-68(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB58_23
# %bb.19:                               # %land.lhs.true81
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_23
# %bb.20:                               # %land.lhs.true86
	movl	-64(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB58_23
# %bb.21:                               # %land.lhs.true89
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB58_24
.LBB58_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB58_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB58_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_33 Depth 2
                                        #       Child Loop BB58_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB58_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-64(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-92(%rbp), %edx
	shll	$2, %edx
	subl	-132(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-84(%rbp), %esi
	shll	$2, %esi
	subl	-128(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -120(%rbp)
	je	.LBB58_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB58_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jne	.LBB58_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB58_30:                              # %if.end128
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB58_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_46
.LBB58_32:                              # %if.end132
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	$0, -32(%rbp)
.LBB58_33:                              # %for.cond133
                                        #   Parent Loop BB58_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB58_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB58_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-76(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-84(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-92(%rbp), %ecx
	movl	-144(%rbp), %r8d
	movl	-124(%rbp), %r9d
	callq	*%rax
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -60(%rbp)
.LBB58_35:                              # %for.cond140
                                        #   Parent Loop BB58_25 Depth=1
                                        #     Parent Loop BB58_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-60(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB58_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB58_35 Depth=3
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB58_35 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB58_35
.LBB58_38:                              # %for.end
                                        #   in Loop: Header=BB58_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB58_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_43
.LBB58_40:                              # %if.end178
                                        #   in Loop: Header=BB58_33 Depth=2
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc179
                                        #   in Loop: Header=BB58_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_33
.LBB58_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              # %for.end181
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB58_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB58_45:                              # %if.end185
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_46
.LBB58_46:                              # %for.inc186
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_25
.LBB58_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB58_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB58_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1608429087, -140(%rbp) # imm = 0x5FDEAE1F
	jne	.LBB58_51
.LBB58_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_50
.Lfunc_end58:
	.size	FullPelBlockMotionSearch.33, .Lfunc_end58-FullPelBlockMotionSearch.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.34
.LCPI59_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI59_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.34
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.34,@function
Init_Motion_Search_Module.34:           # @Init_Motion_Search_Module.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1892766043, -52(%rbp)  # imm = 0x70D1515B
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB59_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB59_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB59_6:                               # %cond.end19
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB59_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB59_9
.LBB59_8:                               # %cond.false24
	movl	-44(%rbp), %eax
	addl	$1, %eax
.LBB59_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB59_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB59_11:                              # %if.end
	movslq	-48(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB59_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB59_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB59_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB59_15:                              # %if.end66
	movslq	-60(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB59_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB59_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB59_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB59_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB59_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB59_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_22:                              # %for.cond90
                                        #   Parent Loop BB59_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB59_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB59_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_22
.LBB59_25:                              # %for.end
                                        #   in Loop: Header=BB59_20 Depth=1
	jmp	.LBB59_26
.LBB59_26:                              # %for.inc98
                                        #   in Loop: Header=BB59_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_20
.LBB59_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB59_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB59_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB59_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_30:                              # %for.cond111
                                        #   Parent Loop BB59_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB59_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB59_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB59_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_30
.LBB59_33:                              # %for.end119
                                        #   in Loop: Header=BB59_28 Depth=1
	jmp	.LBB59_34
.LBB59_34:                              # %for.inc120
                                        #   in Loop: Header=BB59_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_28
.LBB59_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB59_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB59_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB59_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB59_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_36
.LBB59_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB59_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_45 Depth 2
                                        #     Child Loop BB59_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB59_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB59_43
.LBB59_42:                              # %cond.false143
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB59_43:                              # %cond.end144
                                        #   in Loop: Header=BB59_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB59_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB59_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB59_45:                              # %for.cond151
                                        #   Parent Loop BB59_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB59_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB59_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB59_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_45
.LBB59_48:                              # %for.end168
                                        #   in Loop: Header=BB59_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB59_49:                              # %for.cond170
                                        #   Parent Loop BB59_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB59_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB59_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB59_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_52:                              # %for.end187
                                        #   in Loop: Header=BB59_40 Depth=1
	jmp	.LBB59_53
.LBB59_53:                              # %for.inc188
                                        #   in Loop: Header=BB59_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_40
.LBB59_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB59_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB59_56:                              # %if.end192
	cmpl	$1892766043, -52(%rbp)  # imm = 0x70D1515B
	jne	.LBB59_58
.LBB59_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_57
.Lfunc_end59:
	.size	Init_Motion_Search_Module.34, .Lfunc_end59-Init_Motion_Search_Module.34
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.35   # -- Begin function Get_Direct_Cost8x8.35
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.35,@function
Get_Direct_Cost8x8.35:                  # @Get_Direct_Cost8x8.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1944453251, -60(%rbp)  # imm = 0x73E60083
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_7 Depth 3
                                        #         Child Loop BB60_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB60_3:                               # %for.cond3
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_7 Depth 3
                                        #         Child Loop BB60_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB60_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB60_30
.LBB60_6:                               # %if.end
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-20(%rbp), %edi
	movl	-28(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB60_7:                               # %for.cond34
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_9 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB60_7 Depth=3
	movl	$0, -12(%rbp)
.LBB60_9:                               # %for.cond38
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        #       Parent Loop BB60_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB60_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB60_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_9
.LBB60_12:                              # %for.end
                                        #   in Loop: Header=BB60_7 Depth=3
	jmp	.LBB60_13
.LBB60_13:                              # %for.inc67
                                        #   in Loop: Header=BB60_7 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_7
.LBB60_14:                              # %for.end69
                                        #   in Loop: Header=BB60_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_3
.LBB60_16:                              # %for.end73
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_17
.LBB60_17:                              # %for.inc74
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_1
.LBB60_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB60_29
# %bb.20:                               # %if.then79
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB60_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_23 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB60_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	$0, -12(%rbp)
.LBB60_23:                              # %for.cond84
                                        #   Parent Loop BB60_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB60_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB60_23 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB60_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_23
.LBB60_26:                              # %for.end97
                                        #   in Loop: Header=BB60_21 Depth=1
	jmp	.LBB60_27
.LBB60_27:                              # %for.inc98
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_21
.LBB60_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_29:                              # %if.end105
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB60_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$1944453251, -60(%rbp)  # imm = 0x73E60083
	jne	.LBB60_32
.LBB60_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_31
.Lfunc_end60:
	.size	Get_Direct_Cost8x8.35, .Lfunc_end60-Get_Direct_Cost8x8.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.36
.LCPI61_0:
	.quad	4611686018427387904     # double 2
.LCPI61_1:
	.quad	4607182418800017408     # double 1
.LCPI61_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI61_4:
	.quad	4620693217682128896     # double 8
.LCPI61_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI61_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.36
	.p2align	4, 0x90
	.type	BlockMotionSearch.36,@function
BlockMotionSearch.36:                   # @BlockMotionSearch.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$636150587, -212(%rbp)  # imm = 0x25EAE33B
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -184(%rbp)
	movl	%ecx, -196(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB61_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB61_4
.LBB61_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB61_4
.LBB61_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB61_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB61_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB61_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	$0, -64(%rbp)
.LBB61_8:                               # %for.cond24
                                        #   Parent Loop BB61_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB61_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB61_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB61_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_8
.LBB61_11:                              # %for.end
                                        #   in Loop: Header=BB61_6 Depth=1
	jmp	.LBB61_12
.LBB61_12:                              # %for.inc37
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_6
.LBB61_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB61_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB61_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_37
.LBB61_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB61_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_23
.LBB61_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB61_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_36
.LBB61_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB61_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_28
.LBB61_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB61_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_35
.LBB61_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB61_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_33
.LBB61_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB61_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB61_34:                              # %if.end276
	jmp	.LBB61_35
.LBB61_35:                              # %if.end277
	jmp	.LBB61_36
.LBB61_36:                              # %if.end278
	jmp	.LBB61_37
.LBB61_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB61_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB61_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_62
.LBB61_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB61_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_48
.LBB61_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB61_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_61
.LBB61_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB61_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_53
.LBB61_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB61_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB61_60
.LBB61_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB61_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB61_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB61_58
.LBB61_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB61_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB61_59:                              # %if.end524
	jmp	.LBB61_60
.LBB61_60:                              # %if.end525
	jmp	.LBB61_61
.LBB61_61:                              # %if.end526
	jmp	.LBB61_62
.LBB61_62:                              # %if.end527
	jmp	.LBB61_63
.LBB61_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB61_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB61_66
.LBB61_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB61_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB61_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB61_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB61_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB61_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB61_73
.LBB61_72:                              # %cond.false626
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB61_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB61_76
.LBB61_75:                              # %cond.false655
	vmovsd	.LCPI61_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB61_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB61_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB61_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB61_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB61_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB61_83
.LBB61_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB61_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB61_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB61_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB61_92
.LBB61_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB61_91
.LBB61_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB61_91:                              # %cond.end787
	vmovss	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_92:                              # %if.end835
	jmp	.LBB61_106
.LBB61_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB61_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB61_97
.LBB61_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB61_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB61_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB61_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB61_104
.LBB61_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB61_104:                             # %cond.end940
	vmovss	.LCPI61_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB61_105:                             # %if.end988
	jmp	.LBB61_106
.LBB61_106:                             # %if.end989
	jmp	.LBB61_107
.LBB61_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB61_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-132(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB61_114
.LBB61_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB61_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB61_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB61_120
.LBB61_116:                             # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB61_119
.LBB61_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB61_119:                             # %cond.end1029
.LBB61_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB61_123
.LBB61_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB61_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB61_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB61_129
.LBB61_125:                             # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB61_128
.LBB61_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB61_128:                             # %cond.end1054
.LBB61_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB61_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB61_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB61_131 Depth=1
	movl	$0, -72(%rbp)
.LBB61_133:                             # %for.cond1066
                                        #   Parent Loop BB61_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB61_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB61_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB61_137
.LBB61_136:                             # %if.else1091
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB61_137:                             # %if.end1109
                                        #   in Loop: Header=BB61_133 Depth=2
	jmp	.LBB61_138
.LBB61_138:                             # %for.inc1110
                                        #   in Loop: Header=BB61_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_133
.LBB61_139:                             # %for.end1112
                                        #   in Loop: Header=BB61_131 Depth=1
	jmp	.LBB61_140
.LBB61_140:                             # %for.inc1113
                                        #   in Loop: Header=BB61_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_131
.LBB61_141:                             # %for.end1115
	jmp	.LBB61_143
.LBB61_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB61_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB61_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB61_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB61_150
.LBB61_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB61_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB61_151 Depth=1
	movl	$0, -72(%rbp)
.LBB61_153:                             # %for.cond1139
                                        #   Parent Loop BB61_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB61_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB61_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB61_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB61_157
.LBB61_156:                             # %if.else1183
                                        #   in Loop: Header=BB61_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB61_157:                             # %if.end1220
                                        #   in Loop: Header=BB61_153 Depth=2
	jmp	.LBB61_158
.LBB61_158:                             # %for.inc1221
                                        #   in Loop: Header=BB61_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_153
.LBB61_159:                             # %for.end1223
                                        #   in Loop: Header=BB61_151 Depth=1
	jmp	.LBB61_160
.LBB61_160:                             # %for.inc1224
                                        #   in Loop: Header=BB61_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_151
.LBB61_161:                             # %for.end1226
	jmp	.LBB61_166
.LBB61_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB61_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB61_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB61_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB61_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB61_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB61_173
.LBB61_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI61_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB61_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB61_172:                             # %if.end1273
	jmp	.LBB61_173
.LBB61_173:                             # %if.end1274
	jmp	.LBB61_174
.LBB61_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB61_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -192(%rbp)
	movl	$0, -64(%rbp)
.LBB61_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB61_176 Depth=1
	movl	$0, -72(%rbp)
.LBB61_178:                             # %for.cond1290
                                        #   Parent Loop BB61_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB61_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-188(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-192(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-188(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-192(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB61_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_178
.LBB61_181:                             # %for.end1337
                                        #   in Loop: Header=BB61_176 Depth=1
	jmp	.LBB61_182
.LBB61_182:                             # %for.inc1338
                                        #   in Loop: Header=BB61_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_176
.LBB61_183:                             # %for.end1340
	jmp	.LBB61_193
.LBB61_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB61_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB61_185 Depth=1
	movl	$0, -72(%rbp)
.LBB61_187:                             # %for.cond1347
                                        #   Parent Loop BB61_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB61_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB61_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_187
.LBB61_190:                             # %for.end1380
                                        #   in Loop: Header=BB61_185 Depth=1
	jmp	.LBB61_191
.LBB61_191:                             # %for.inc1381
                                        #   in Loop: Header=BB61_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_185
.LBB61_192:                             # %for.end1383
	jmp	.LBB61_193
.LBB61_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB61_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB61_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB61_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB61_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB61_200
.LBB61_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB61_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB61_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB61_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB61_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB61_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB61_208
.LBB61_204:                             # %if.else1433
                                        #   in Loop: Header=BB61_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB61_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB61_207
.LBB61_206:                             # %if.else1441
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB61_207:                             # %if.end1450
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB61_208:                             # %if.end1452
                                        #   in Loop: Header=BB61_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB61_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_201
.LBB61_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB61_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB61_213:                             # %if.end1469
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB61_215
.LBB61_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB61_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB61_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB61_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI61_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB61_220
.LBB61_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB61_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB61_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB61_221 Depth=1
	movl	$0, -72(%rbp)
.LBB61_223:                             # %for.cond1502
                                        #   Parent Loop BB61_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB61_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-48(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB61_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB61_223
.LBB61_226:                             # %for.end1565
                                        #   in Loop: Header=BB61_221 Depth=1
	jmp	.LBB61_227
.LBB61_227:                             # %for.inc1566
                                        #   in Loop: Header=BB61_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_221
.LBB61_228:                             # %for.end1568
	jmp	.LBB61_229
.LBB61_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-180(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$636150587, -212(%rbp)  # imm = 0x25EAE33B
	jne	.LBB61_231
.LBB61_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_230
.Lfunc_end61:
	.size	BlockMotionSearch.36, .Lfunc_end61-BlockMotionSearch.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.37
.LCPI62_0:
	.quad	4602678819172646912     # double 0.5
.LCPI62_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.37
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.37,@function
FullPelBlockMotionBiPred.37:            # @FullPelBlockMotionBiPred.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$784900559, -176(%rbp)  # imm = 0x2EC8A1CF
	movq	%rdi, -216(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -112(%rbp)
	movl	%r8d, -124(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_4
.LBB62_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_4
.LBB62_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB62_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB62_7
.LBB62_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB62_7:                               # %cond.end12
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -116(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -108(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -180(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-112(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-124(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-112(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movl	-124(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB62_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB62_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB62_11
.LBB62_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB62_11:                              # %cond.end87
	jmp	.LBB62_13
.LBB62_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB62_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB62_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB62_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB62_17
.LBB62_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB62_17:                              # %cond.end114
	jmp	.LBB62_19
.LBB62_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB62_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB62_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB62_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB62_23
.LBB62_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB62_23:                              # %cond.end138
	jmp	.LBB62_25
.LBB62_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB62_25
.LBB62_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB62_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB62_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB62_29
.LBB62_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB62_29:                              # %cond.end161
	jmp	.LBB62_31
.LBB62_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB62_31
.LBB62_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB62_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB62_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB62_37
.LBB62_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB62_37:                              # %if.end
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB62_42
# %bb.38:                               # %land.lhs.true196
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_42
# %bb.39:                               # %land.lhs.true204
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB62_42
# %bb.40:                               # %land.lhs.true208
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB62_43
.LBB62_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB62_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB62_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_49 Depth 2
                                        #       Child Loop BB62_51 Depth 3
                                        #     Child Loop BB62_85 Depth 2
                                        #       Child Loop BB62_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB62_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB62_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-42(%rbp), %edx
	shll	$2, %edx
	subl	-172(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-46(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB62_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_99
.LBB62_47:                              # %if.end257
                                        #   in Loop: Header=BB62_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB62_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB62_44 Depth=1
	movl	$0, -36(%rbp)
.LBB62_49:                              # %for.cond260
                                        #   Parent Loop BB62_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB62_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB62_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB62_51:                              # %for.cond271
                                        #   Parent Loop BB62_44 Depth=1
                                        #     Parent Loop BB62_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB62_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB62_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB62_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB62_58
.LBB62_54:                              # %cond.false296
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB62_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_57
.LBB62_56:                              # %cond.false310
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB62_57:                              # %cond.end320
                                        #   in Loop: Header=BB62_51 Depth=3
.LBB62_58:                              # %cond.end322
                                        #   in Loop: Header=BB62_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB62_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB62_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB62_64
.LBB62_60:                              # %cond.false354
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB62_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_63
.LBB62_62:                              # %cond.false369
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB62_63:                              # %cond.end379
                                        #   in Loop: Header=BB62_51 Depth=3
.LBB62_64:                              # %cond.end381
                                        #   in Loop: Header=BB62_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB62_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB62_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB62_70
.LBB62_66:                              # %cond.false413
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB62_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_69
.LBB62_68:                              # %cond.false428
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB62_69:                              # %cond.end438
                                        #   in Loop: Header=BB62_51 Depth=3
.LBB62_70:                              # %cond.end440
                                        #   in Loop: Header=BB62_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB62_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB62_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB62_76
.LBB62_72:                              # %cond.false472
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB62_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB62_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_75
.LBB62_74:                              # %cond.false487
                                        #   in Loop: Header=BB62_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB62_75:                              # %cond.end497
                                        #   in Loop: Header=BB62_51 Depth=3
.LBB62_76:                              # %cond.end499
                                        #   in Loop: Header=BB62_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB62_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB62_51
.LBB62_78:                              # %for.end
                                        #   in Loop: Header=BB62_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB62_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_83
.LBB62_80:                              # %if.end512
                                        #   in Loop: Header=BB62_49 Depth=2
	jmp	.LBB62_81
.LBB62_81:                              # %for.inc513
                                        #   in Loop: Header=BB62_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_49
.LBB62_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_83
.LBB62_83:                              # %for.end515
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_96
.LBB62_84:                              # %if.else516
                                        #   in Loop: Header=BB62_44 Depth=1
	movl	$0, -36(%rbp)
.LBB62_85:                              # %for.cond517
                                        #   Parent Loop BB62_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB62_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB62_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movswl	-46(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-42(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB62_87:                              # %for.cond529
                                        #   Parent Loop BB62_44 Depth=1
                                        #     Parent Loop BB62_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB62_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB62_87 Depth=3
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB62_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB62_87
.LBB62_90:                              # %for.end583
                                        #   in Loop: Header=BB62_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB62_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_95
.LBB62_92:                              # %if.end587
                                        #   in Loop: Header=BB62_85 Depth=2
	jmp	.LBB62_93
.LBB62_93:                              # %for.inc588
                                        #   in Loop: Header=BB62_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB62_85
.LBB62_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_95
.LBB62_95:                              # %for.end590
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_96
.LBB62_96:                              # %if.end591
                                        #   in Loop: Header=BB62_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB62_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB62_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB62_98:                              # %if.end595
                                        #   in Loop: Header=BB62_44 Depth=1
	jmp	.LBB62_99
.LBB62_99:                              # %for.inc596
                                        #   in Loop: Header=BB62_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB62_44
.LBB62_100:                             # %for.end598
	cmpl	$0, -108(%rbp)
	je	.LBB62_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-108(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-108(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB62_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$784900559, -176(%rbp)  # imm = 0x2EC8A1CF
	jne	.LBB62_104
.LBB62_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_103
.Lfunc_end62:
	.size	FullPelBlockMotionBiPred.37, .Lfunc_end62-FullPelBlockMotionBiPred.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.38
.LCPI63_0:
	.quad	4602678819172646912     # double 0.5
.LCPI63_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.38
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.38,@function
SubPelBlockMotionSearch.38:             # @SubPelBlockMotionSearch.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI63_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI63_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1845495478, -196(%rbp) # imm = 0x6E0006B6
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -152(%rbp)
	movl	%r8d, -156(%rbp)
	movl	%r9d, -108(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -140(%rbp)
	movl	$0, -112(%rbp)
	cmpl	$1, -108(%rbp)
	jne	.LBB63_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB63_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB63_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB63_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB63_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB63_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB63_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -148(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB63_10
.LBB63_10:                              # %cond.end
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB63_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB63_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB63_14
.LBB63_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB63_14:                              # %cond.end35
	jmp	.LBB63_16
.LBB63_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB63_16:                              # %cond.end38
	movl	%eax, -200(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_20
.LBB63_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB63_20
.LBB63_20:                              # %cond.end50
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB63_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB63_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB63_26
.LBB63_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB63_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB63_25:                              # %land.end65
.LBB63_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB63_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB63_29
.LBB63_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB63_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-132(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB63_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB63_32
# %bb.31:                               # %if.then
	movl	-132(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB63_33
.LBB63_32:                              # %if.else
	movl	-132(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB63_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-136(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-148(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB63_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_38
# %bb.35:                               # %land.lhs.true118
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB63_38
# %bb.36:                               # %land.lhs.true123
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB63_39
.LBB63_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB63_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB63_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_47 Depth 2
                                        #       Child Loop BB63_51 Depth 3
                                        #         Child Loop BB63_57 Depth 4
                                        #           Child Loop BB63_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jge	.LBB63_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB63_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB63_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB63_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB63_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-140(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB63_44:                              # %if.end164
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB63_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB63_40 Depth=1
	jmp	.LBB63_75
.LBB63_46:                              # %if.end168
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB63_47:                              # %for.cond169
                                        #   Parent Loop BB63_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_51 Depth 3
                                        #         Child Loop BB63_57 Depth 4
                                        #           Child Loop BB63_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB63_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB63_47 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_49:                              # %land.end174
                                        #   in Loop: Header=BB63_47 Depth=2
	testb	$1, %al
	jne	.LBB63_50
	jmp	.LBB63_70
.LBB63_50:                              # %for.body176
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB63_51:                              # %for.cond180
                                        #   Parent Loop BB63_40 Depth=1
                                        #     Parent Loop BB63_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_57 Depth 4
                                        #           Child Loop BB63_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB63_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB63_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB63_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB63_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB63_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB63_68
.LBB63_55:                              # %if.end342
                                        #   in Loop: Header=BB63_51 Depth=3
	jmp	.LBB63_65
.LBB63_56:                              # %if.else343
                                        #   in Loop: Header=BB63_51 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB63_57:                              # %for.cond344
                                        #   Parent Loop BB63_40 Depth=1
                                        #     Parent Loop BB63_47 Depth=2
                                        #       Parent Loop BB63_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_59 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB63_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB63_57 Depth=4
	movl	$0, -72(%rbp)
.LBB63_59:                              # %for.cond348
                                        #   Parent Loop BB63_40 Depth=1
                                        #     Parent Loop BB63_47 Depth=2
                                        #       Parent Loop BB63_51 Depth=3
                                        #         Parent Loop BB63_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB63_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB63_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB63_59 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB63_59
.LBB63_62:                              # %for.end
                                        #   in Loop: Header=BB63_57 Depth=4
	jmp	.LBB63_63
.LBB63_63:                              # %for.inc361
                                        #   in Loop: Header=BB63_57 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB63_57
.LBB63_64:                              # %for.end363
                                        #   in Loop: Header=BB63_51 Depth=3
	jmp	.LBB63_65
.LBB63_65:                              # %if.end364
                                        #   in Loop: Header=BB63_51 Depth=3
	jmp	.LBB63_66
.LBB63_66:                              # %for.inc365
                                        #   in Loop: Header=BB63_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_51
.LBB63_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB63_47 Depth=2
	jmp	.LBB63_68
.LBB63_68:                              # %for.end367
                                        #   in Loop: Header=BB63_47 Depth=2
	jmp	.LBB63_69
.LBB63_69:                              # %for.inc368
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB63_47
.LBB63_70:                              # %for.end370
                                        #   in Loop: Header=BB63_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB63_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB63_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB63_72:                              # %if.end377
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB63_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB63_74:                              # %if.end381
                                        #   in Loop: Header=BB63_40 Depth=1
	jmp	.LBB63_75
.LBB63_75:                              # %for.inc382
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB63_40
.LBB63_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB63_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB63_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB63_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB63_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB63_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_85
# %bb.82:                               # %land.lhs.true414
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB63_85
# %bb.83:                               # %land.lhs.true419
	movl	-120(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB63_86
.LBB63_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB63_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB63_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_91 Depth 2
                                        #       Child Loop BB63_95 Depth 3
                                        #         Child Loop BB63_101 Depth 4
                                        #           Child Loop BB63_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB63_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB63_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-104(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB63_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB63_87 Depth=1
	jmp	.LBB63_119
.LBB63_90:                              # %if.end456
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB63_91:                              # %for.cond457
                                        #   Parent Loop BB63_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_95 Depth 3
                                        #         Child Loop BB63_101 Depth 4
                                        #           Child Loop BB63_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB63_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB63_91 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_93:                              # %land.end463
                                        #   in Loop: Header=BB63_91 Depth=2
	testb	$1, %al
	jne	.LBB63_94
	jmp	.LBB63_114
.LBB63_94:                              # %for.body465
                                        #   in Loop: Header=BB63_91 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-104(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB63_95:                              # %for.cond469
                                        #   Parent Loop BB63_87 Depth=1
                                        #     Parent Loop BB63_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_101 Depth 4
                                        #           Child Loop BB63_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB63_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB63_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB63_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB63_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB63_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB63_91 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB63_112
.LBB63_99:                              # %if.end636
                                        #   in Loop: Header=BB63_95 Depth=3
	jmp	.LBB63_109
.LBB63_100:                             # %if.else637
                                        #   in Loop: Header=BB63_95 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB63_101:                             # %for.cond638
                                        #   Parent Loop BB63_87 Depth=1
                                        #     Parent Loop BB63_91 Depth=2
                                        #       Parent Loop BB63_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_103 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB63_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB63_101 Depth=4
	movl	$0, -72(%rbp)
.LBB63_103:                             # %for.cond642
                                        #   Parent Loop BB63_87 Depth=1
                                        #     Parent Loop BB63_91 Depth=2
                                        #       Parent Loop BB63_95 Depth=3
                                        #         Parent Loop BB63_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB63_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB63_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB63_103 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB63_103
.LBB63_106:                             # %for.end657
                                        #   in Loop: Header=BB63_101 Depth=4
	jmp	.LBB63_107
.LBB63_107:                             # %for.inc658
                                        #   in Loop: Header=BB63_101 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB63_101
.LBB63_108:                             # %for.end660
                                        #   in Loop: Header=BB63_95 Depth=3
	jmp	.LBB63_109
.LBB63_109:                             # %if.end661
                                        #   in Loop: Header=BB63_95 Depth=3
	jmp	.LBB63_110
.LBB63_110:                             # %for.inc662
                                        #   in Loop: Header=BB63_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_95
.LBB63_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB63_91 Depth=2
	jmp	.LBB63_112
.LBB63_112:                             # %for.end664
                                        #   in Loop: Header=BB63_91 Depth=2
	jmp	.LBB63_113
.LBB63_113:                             # %for.inc665
                                        #   in Loop: Header=BB63_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB63_91
.LBB63_114:                             # %for.end667
                                        #   in Loop: Header=BB63_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB63_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB63_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB63_116:                             # %if.end675
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB63_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB63_118:                             # %if.end679
                                        #   in Loop: Header=BB63_87 Depth=1
	jmp	.LBB63_119
.LBB63_119:                             # %for.inc680
                                        #   in Loop: Header=BB63_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB63_87
.LBB63_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB63_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB63_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1845495478, -196(%rbp) # imm = 0x6E0006B6
	jne	.LBB63_124
.LBB63_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_123
.Lfunc_end63:
	.size	SubPelBlockMotionSearch.38, .Lfunc_end63-SubPelBlockMotionSearch.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.39
.LCPI64_0:
	.quad	4602678819172646912     # double 0.5
.LCPI64_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.39
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.39,@function
FullPelBlockMotionBiPred.39:            # @FullPelBlockMotionBiPred.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$722453051, -176(%rbp)  # imm = 0x2B0FC23B
	movq	%rdi, -216(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB64_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB64_4
.LBB64_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB64_4
.LBB64_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB64_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB64_7
.LBB64_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB64_7:                               # %cond.end12
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI64_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -200(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -112(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -120(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -188(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-104(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-108(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-104(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-108(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-104(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -42(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB64_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB64_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB64_11
.LBB64_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB64_11:                              # %cond.end87
	jmp	.LBB64_13
.LBB64_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB64_13:                              # %cond.end91
	movw	%ax, -50(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB64_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB64_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB64_17
.LBB64_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB64_17:                              # %cond.end114
	jmp	.LBB64_19
.LBB64_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB64_19:                              # %cond.end118
	movw	%ax, -48(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB64_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB64_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB64_23
.LBB64_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB64_23:                              # %cond.end138
	jmp	.LBB64_25
.LBB64_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB64_25
.LBB64_25:                              # %cond.end141
	movw	%ax, -134(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB64_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB64_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB64_29
.LBB64_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB64_29:                              # %cond.end161
	jmp	.LBB64_31
.LBB64_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB64_31
.LBB64_31:                              # %cond.end164
	movw	%ax, -136(%rbp)
	movswl	-136(%rbp), %eax
	movswl	-134(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB64_36
# %bb.32:                               # %land.lhs.true176
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_36
# %bb.33:                               # %land.lhs.true182
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB64_36
# %bb.34:                               # %land.lhs.true186
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-124(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB64_37
.LBB64_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB64_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB64_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_42
# %bb.39:                               # %land.lhs.true204
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB64_42
# %bb.40:                               # %land.lhs.true208
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-124(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB64_43
.LBB64_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB64_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB64_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_49 Depth 2
                                        #       Child Loop BB64_51 Depth 3
                                        #     Child Loop BB64_85 Depth 2
                                        #       Child Loop BB64_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB64_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB64_44 Depth=1
	movswl	-96(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-94(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-172(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-44(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-180(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB64_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_99
.LBB64_47:                              # %if.end257
                                        #   in Loop: Header=BB64_44 Depth=1
	cmpw	$0, -42(%rbp)
	je	.LBB64_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	$0, -36(%rbp)
.LBB64_49:                              # %for.cond260
                                        #   Parent Loop BB64_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB64_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB64_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB64_51:                              # %for.cond271
                                        #   Parent Loop BB64_44 Depth=1
                                        #     Parent Loop BB64_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB64_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB64_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB64_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB64_58
.LBB64_54:                              # %cond.false296
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB64_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_57
.LBB64_56:                              # %cond.false310
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB64_57:                              # %cond.end320
                                        #   in Loop: Header=BB64_51 Depth=3
.LBB64_58:                              # %cond.end322
                                        #   in Loop: Header=BB64_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB64_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB64_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB64_64
.LBB64_60:                              # %cond.false354
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB64_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_63
.LBB64_62:                              # %cond.false369
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB64_63:                              # %cond.end379
                                        #   in Loop: Header=BB64_51 Depth=3
.LBB64_64:                              # %cond.end381
                                        #   in Loop: Header=BB64_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB64_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB64_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB64_70
.LBB64_66:                              # %cond.false413
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB64_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_69
.LBB64_68:                              # %cond.false428
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB64_69:                              # %cond.end438
                                        #   in Loop: Header=BB64_51 Depth=3
.LBB64_70:                              # %cond.end440
                                        #   in Loop: Header=BB64_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-48(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB64_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB64_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB64_76
.LBB64_72:                              # %cond.false472
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB64_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_75
.LBB64_74:                              # %cond.false487
                                        #   in Loop: Header=BB64_51 Depth=3
	movswl	-10(%rbp), %eax
	movswl	-12(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB64_75:                              # %cond.end497
                                        #   in Loop: Header=BB64_51 Depth=3
.LBB64_76:                              # %cond.end499
                                        #   in Loop: Header=BB64_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB64_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB64_51
.LBB64_78:                              # %for.end
                                        #   in Loop: Header=BB64_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB64_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_83
.LBB64_80:                              # %if.end512
                                        #   in Loop: Header=BB64_49 Depth=2
	jmp	.LBB64_81
.LBB64_81:                              # %for.inc513
                                        #   in Loop: Header=BB64_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB64_49
.LBB64_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_83
.LBB64_83:                              # %for.end515
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_96
.LBB64_84:                              # %if.else516
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	$0, -36(%rbp)
.LBB64_85:                              # %for.cond517
                                        #   Parent Loop BB64_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jge	.LBB64_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB64_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-200(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-116(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-216(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB64_87:                              # %for.cond529
                                        #   Parent Loop BB64_44 Depth=1
                                        #     Parent Loop BB64_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB64_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB64_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB64_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB64_87
.LBB64_90:                              # %for.end583
                                        #   in Loop: Header=BB64_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB64_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_95
.LBB64_92:                              # %if.end587
                                        #   in Loop: Header=BB64_85 Depth=2
	jmp	.LBB64_93
.LBB64_93:                              # %for.inc588
                                        #   in Loop: Header=BB64_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB64_85
.LBB64_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_95
.LBB64_95:                              # %for.end590
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_96
.LBB64_96:                              # %if.end591
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB64_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB64_98:                              # %if.end595
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_99
.LBB64_99:                              # %for.inc596
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB64_44
.LBB64_100:                             # %for.end598
	cmpl	$0, -120(%rbp)
	je	.LBB64_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB64_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$722453051, -176(%rbp)  # imm = 0x2B0FC23B
	jne	.LBB64_104
.LBB64_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_103
.Lfunc_end64:
	.size	FullPelBlockMotionBiPred.39, .Lfunc_end64-FullPelBlockMotionBiPred.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.40
.LCPI65_0:
	.quad	4602678819172646912     # double 0.5
.LCPI65_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.40
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.40,@function
SubPelBlockMotionSearch.40:             # @SubPelBlockMotionSearch.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI65_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI65_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$510375317, -196(%rbp)  # imm = 0x1E6BB595
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -156(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -132(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -100(%rbp)
	jne	.LBB65_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB65_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB65_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB65_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB65_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB65_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB65_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -152(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB65_10
.LBB65_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB65_10
.LBB65_10:                              # %cond.end
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB65_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB65_14
.LBB65_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB65_14:                              # %cond.end35
	jmp	.LBB65_16
.LBB65_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB65_16:                              # %cond.end38
	movl	%eax, -200(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB65_20
.LBB65_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB65_20
.LBB65_20:                              # %cond.end50
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB65_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB65_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB65_26
.LBB65_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB65_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB65_25:                              # %land.end65
.LBB65_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB65_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB65_29
.LBB65_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB65_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -188(%rbp)
	je	.LBB65_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB65_32
# %bb.31:                               # %if.then
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB65_33
.LBB65_32:                              # %if.else
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB65_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-152(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB65_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB65_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB65_39
.LBB65_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB65_39:                              # %if.end131
	movl	$0, -76(%rbp)
	movl	-180(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB65_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_47 Depth 2
                                        #       Child Loop BB65_51 Depth 3
                                        #         Child Loop BB65_57 Depth 4
                                        #           Child Loop BB65_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jge	.LBB65_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB65_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB65_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB65_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB65_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB65_44:                              # %if.end164
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB65_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB65_40 Depth=1
	jmp	.LBB65_75
.LBB65_46:                              # %if.end168
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB65_47:                              # %for.cond169
                                        #   Parent Loop BB65_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_51 Depth 3
                                        #         Child Loop BB65_57 Depth 4
                                        #           Child Loop BB65_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB65_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB65_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB65_49:                              # %land.end174
                                        #   in Loop: Header=BB65_47 Depth=2
	testb	$1, %al
	jne	.LBB65_50
	jmp	.LBB65_70
.LBB65_50:                              # %for.body176
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB65_51:                              # %for.cond180
                                        #   Parent Loop BB65_40 Depth=1
                                        #     Parent Loop BB65_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_57 Depth 4
                                        #           Child Loop BB65_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB65_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB65_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-144(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB65_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB65_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB65_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB65_68
.LBB65_55:                              # %if.end342
                                        #   in Loop: Header=BB65_51 Depth=3
	jmp	.LBB65_65
.LBB65_56:                              # %if.else343
                                        #   in Loop: Header=BB65_51 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB65_57:                              # %for.cond344
                                        #   Parent Loop BB65_40 Depth=1
                                        #     Parent Loop BB65_47 Depth=2
                                        #       Parent Loop BB65_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_59 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB65_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB65_57 Depth=4
	movl	$0, -80(%rbp)
.LBB65_59:                              # %for.cond348
                                        #   Parent Loop BB65_40 Depth=1
                                        #     Parent Loop BB65_47 Depth=2
                                        #       Parent Loop BB65_51 Depth=3
                                        #         Parent Loop BB65_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB65_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB65_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB65_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB65_59
.LBB65_62:                              # %for.end
                                        #   in Loop: Header=BB65_57 Depth=4
	jmp	.LBB65_63
.LBB65_63:                              # %for.inc361
                                        #   in Loop: Header=BB65_57 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB65_57
.LBB65_64:                              # %for.end363
                                        #   in Loop: Header=BB65_51 Depth=3
	jmp	.LBB65_65
.LBB65_65:                              # %if.end364
                                        #   in Loop: Header=BB65_51 Depth=3
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc365
                                        #   in Loop: Header=BB65_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_51
.LBB65_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_68
.LBB65_68:                              # %for.end367
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_69
.LBB65_69:                              # %for.inc368
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB65_47
.LBB65_70:                              # %for.end370
                                        #   in Loop: Header=BB65_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB65_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB65_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB65_72:                              # %if.end377
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB65_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB65_74:                              # %if.end381
                                        #   in Loop: Header=BB65_40 Depth=1
	jmp	.LBB65_75
.LBB65_75:                              # %for.inc382
                                        #   in Loop: Header=BB65_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB65_40
.LBB65_76:                              # %for.end384
	cmpl	$0, -76(%rbp)
	je	.LBB65_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB65_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB65_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB65_80:                              # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB65_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB65_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB65_86
.LBB65_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB65_86:                              # %if.end427
	movl	$0, -76(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB65_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_91 Depth 2
                                        #       Child Loop BB65_95 Depth 3
                                        #         Child Loop BB65_101 Depth 4
                                        #           Child Loop BB65_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB65_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB65_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB65_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB65_87 Depth=1
	jmp	.LBB65_119
.LBB65_90:                              # %if.end456
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB65_91:                              # %for.cond457
                                        #   Parent Loop BB65_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_95 Depth 3
                                        #         Child Loop BB65_101 Depth 4
                                        #           Child Loop BB65_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB65_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB65_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB65_93:                              # %land.end463
                                        #   in Loop: Header=BB65_91 Depth=2
	testb	$1, %al
	jne	.LBB65_94
	jmp	.LBB65_114
.LBB65_94:                              # %for.body465
                                        #   in Loop: Header=BB65_91 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB65_95:                              # %for.cond469
                                        #   Parent Loop BB65_87 Depth=1
                                        #     Parent Loop BB65_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_101 Depth 4
                                        #           Child Loop BB65_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB65_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB65_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-144(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB65_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB65_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB65_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB65_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB65_112
.LBB65_99:                              # %if.end636
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_109
.LBB65_100:                             # %if.else637
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB65_101:                             # %for.cond638
                                        #   Parent Loop BB65_87 Depth=1
                                        #     Parent Loop BB65_91 Depth=2
                                        #       Parent Loop BB65_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_103 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB65_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB65_101 Depth=4
	movl	$0, -80(%rbp)
.LBB65_103:                             # %for.cond642
                                        #   Parent Loop BB65_87 Depth=1
                                        #     Parent Loop BB65_91 Depth=2
                                        #       Parent Loop BB65_95 Depth=3
                                        #         Parent Loop BB65_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB65_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB65_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB65_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB65_103
.LBB65_106:                             # %for.end657
                                        #   in Loop: Header=BB65_101 Depth=4
	jmp	.LBB65_107
.LBB65_107:                             # %for.inc658
                                        #   in Loop: Header=BB65_101 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB65_101
.LBB65_108:                             # %for.end660
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_109
.LBB65_109:                             # %if.end661
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_110
.LBB65_110:                             # %for.inc662
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_95
.LBB65_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB65_91 Depth=2
	jmp	.LBB65_112
.LBB65_112:                             # %for.end664
                                        #   in Loop: Header=BB65_91 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc665
                                        #   in Loop: Header=BB65_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB65_91
.LBB65_114:                             # %for.end667
                                        #   in Loop: Header=BB65_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB65_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB65_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB65_116:                             # %if.end675
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB65_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB65_118:                             # %if.end679
                                        #   in Loop: Header=BB65_87 Depth=1
	jmp	.LBB65_119
.LBB65_119:                             # %for.inc680
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB65_87
.LBB65_120:                             # %for.end682
	cmpl	$0, -76(%rbp)
	je	.LBB65_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB65_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$510375317, -196(%rbp)  # imm = 0x1E6BB595
	jne	.LBB65_124
.LBB65_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_123
.Lfunc_end65:
	.size	SubPelBlockMotionSearch.40, .Lfunc_end65-SubPelBlockMotionSearch.40
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.41     # -- Begin function BIDPartitionCost.41
	.p2align	4, 0x90
	.type	BIDPartitionCost.41,@function
BIDPartitionCost.41:                    # @BIDPartitionCost.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$931496615, -104(%rbp)  # imm = 0x378582A7
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB66_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB66_3
.LBB66_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB66_3
.LBB66_3:                               # %cond.end
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB66_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB66_6
.LBB66_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB66_6
.LBB66_6:                               # %cond.end17
	movl	%eax, -124(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB66_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB66_9
.LBB66_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB66_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB66_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB66_12:                              # %for.cond53
                                        #   Parent Loop BB66_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB66_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB66_12 Depth=2
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_12
.LBB66_15:                              # %for.end
                                        #   in Loop: Header=BB66_10 Depth=1
	jmp	.LBB66_16
.LBB66_16:                              # %for.inc164
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-112(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_10
.LBB66_17:                              # %for.end166
	movl	-128(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB66_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_20 Depth 2
                                        #       Child Loop BB66_22 Depth 3
                                        #         Child Loop BB66_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB66_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB66_20:                              # %for.cond185
                                        #   Parent Loop BB66_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_22 Depth 3
                                        #         Child Loop BB66_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB66_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-76(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB66_22:                              # %for.cond196
                                        #   Parent Loop BB66_18 Depth=1
                                        #     Parent Loop BB66_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB66_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB66_22 Depth=3
	movl	$0, -32(%rbp)
.LBB66_24:                              # %for.cond200
                                        #   Parent Loop BB66_18 Depth=1
                                        #     Parent Loop BB66_20 Depth=2
                                        #       Parent Loop BB66_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB66_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB66_24 Depth=4
	movq	imgY_org, %rax
	movl	-120(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB66_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB66_24
.LBB66_27:                              # %for.end229
                                        #   in Loop: Header=BB66_22 Depth=3
	jmp	.LBB66_28
.LBB66_28:                              # %for.inc230
                                        #   in Loop: Header=BB66_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_22
.LBB66_29:                              # %for.end232
                                        #   in Loop: Header=BB66_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB66_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB66_32
.LBB66_31:                              # %if.then
                                        #   in Loop: Header=BB66_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_32:                              # %if.end
                                        #   in Loop: Header=BB66_20 Depth=2
	jmp	.LBB66_33
.LBB66_33:                              # %for.inc236
                                        #   in Loop: Header=BB66_20 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_20
.LBB66_34:                              # %for.end239
                                        #   in Loop: Header=BB66_18 Depth=1
	jmp	.LBB66_35
.LBB66_35:                              # %for.inc240
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_18
.LBB66_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB66_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB66_55
# %bb.38:                               # %if.then248
	movl	$0, -44(%rbp)
.LBB66_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_41 Depth 2
                                        #       Child Loop BB66_43 Depth 3
                                        #         Child Loop BB66_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB66_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB66_39 Depth=1
	movl	$0, -48(%rbp)
.LBB66_41:                              # %for.cond257
                                        #   Parent Loop BB66_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_43 Depth 3
                                        #         Child Loop BB66_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB66_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB66_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB66_43:                              # %for.cond265
                                        #   Parent Loop BB66_39 Depth=1
                                        #     Parent Loop BB66_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB66_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB66_43 Depth=3
	movl	$0, -28(%rbp)
.LBB66_45:                              # %for.cond269
                                        #   Parent Loop BB66_39 Depth=1
                                        #     Parent Loop BB66_41 Depth=2
                                        #       Parent Loop BB66_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB66_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB66_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB66_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_45
.LBB66_48:                              # %for.end284
                                        #   in Loop: Header=BB66_43 Depth=3
	jmp	.LBB66_49
.LBB66_49:                              # %for.inc285
                                        #   in Loop: Header=BB66_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB66_43
.LBB66_50:                              # %for.end287
                                        #   in Loop: Header=BB66_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB66_41 Depth=2
	movl	-108(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB66_41
.LBB66_52:                              # %for.end294
                                        #   in Loop: Header=BB66_39 Depth=1
	jmp	.LBB66_53
.LBB66_53:                              # %for.inc295
                                        #   in Loop: Header=BB66_39 Depth=1
	movl	-124(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_39
.LBB66_54:                              # %for.end297
	jmp	.LBB66_55
.LBB66_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$931496615, -104(%rbp)  # imm = 0x378582A7
	jne	.LBB66_57
.LBB66_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_56
.Lfunc_end66:
	.size	BIDPartitionCost.41, .Lfunc_end66-BIDPartitionCost.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.42
.LCPI67_0:
	.quad	4602678819172646912     # double 0.5
.LCPI67_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.42
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.42,@function
SubPelBlockMotionSearch.42:             # @SubPelBlockMotionSearch.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1031008487, -184(%rbp) # imm = 0x3D73F0E7
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -136(%rbp)
	movl	%ecx, -156(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -108(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -132(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -108(%rbp)
	jne	.LBB67_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB67_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB67_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB67_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB67_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB67_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB67_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -152(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -148(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB67_10
.LBB67_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB67_10
.LBB67_10:                              # %cond.end
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB67_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB67_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB67_14:                              # %cond.end35
	jmp	.LBB67_16
.LBB67_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB67_16:                              # %cond.end38
	movl	%eax, -200(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB67_20
.LBB67_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB67_20
.LBB67_20:                              # %cond.end50
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB67_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB67_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB67_26
.LBB67_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB67_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB67_25:                              # %land.end65
.LBB67_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB67_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB67_29
.LBB67_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB67_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -164(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -188(%rbp)
	je	.LBB67_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB67_32
# %bb.31:                               # %if.then
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB67_33
.LBB67_32:                              # %if.else
	movl	-136(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB67_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-152(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-148(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB67_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB67_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB67_39
.LBB67_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB67_39:                              # %if.end131
	movl	$0, -84(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB67_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_47 Depth 2
                                        #       Child Loop BB67_51 Depth 3
                                        #         Child Loop BB67_57 Depth 4
                                        #           Child Loop BB67_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jge	.LBB67_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB67_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB67_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB67_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB67_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB67_44:                              # %if.end164
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB67_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB67_40 Depth=1
	jmp	.LBB67_75
.LBB67_46:                              # %if.end168
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB67_47:                              # %for.cond169
                                        #   Parent Loop BB67_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_51 Depth 3
                                        #         Child Loop BB67_57 Depth 4
                                        #           Child Loop BB67_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB67_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB67_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_49:                              # %land.end174
                                        #   in Loop: Header=BB67_47 Depth=2
	testb	$1, %al
	jne	.LBB67_50
	jmp	.LBB67_70
.LBB67_50:                              # %for.body176
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB67_51:                              # %for.cond180
                                        #   Parent Loop BB67_40 Depth=1
                                        #     Parent Loop BB67_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_57 Depth 4
                                        #           Child Loop BB67_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB67_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB67_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-156(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB67_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB67_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-164(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB67_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB67_68
.LBB67_55:                              # %if.end342
                                        #   in Loop: Header=BB67_51 Depth=3
	jmp	.LBB67_65
.LBB67_56:                              # %if.else343
                                        #   in Loop: Header=BB67_51 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB67_57:                              # %for.cond344
                                        #   Parent Loop BB67_40 Depth=1
                                        #     Parent Loop BB67_47 Depth=2
                                        #       Parent Loop BB67_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_59 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB67_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB67_57 Depth=4
	movl	$0, -80(%rbp)
.LBB67_59:                              # %for.cond348
                                        #   Parent Loop BB67_40 Depth=1
                                        #     Parent Loop BB67_47 Depth=2
                                        #       Parent Loop BB67_51 Depth=3
                                        #         Parent Loop BB67_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB67_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB67_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB67_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB67_59
.LBB67_62:                              # %for.end
                                        #   in Loop: Header=BB67_57 Depth=4
	jmp	.LBB67_63
.LBB67_63:                              # %for.inc361
                                        #   in Loop: Header=BB67_57 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB67_57
.LBB67_64:                              # %for.end363
                                        #   in Loop: Header=BB67_51 Depth=3
	jmp	.LBB67_65
.LBB67_65:                              # %if.end364
                                        #   in Loop: Header=BB67_51 Depth=3
	jmp	.LBB67_66
.LBB67_66:                              # %for.inc365
                                        #   in Loop: Header=BB67_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_51
.LBB67_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB67_47 Depth=2
	jmp	.LBB67_68
.LBB67_68:                              # %for.end367
                                        #   in Loop: Header=BB67_47 Depth=2
	jmp	.LBB67_69
.LBB67_69:                              # %for.inc368
                                        #   in Loop: Header=BB67_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB67_47
.LBB67_70:                              # %for.end370
                                        #   in Loop: Header=BB67_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB67_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-164(%rbp), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB67_72:                              # %if.end377
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB67_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB67_74:                              # %if.end381
                                        #   in Loop: Header=BB67_40 Depth=1
	jmp	.LBB67_75
.LBB67_75:                              # %for.inc382
                                        #   in Loop: Header=BB67_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB67_40
.LBB67_76:                              # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB67_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB67_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB67_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB67_80:                              # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB67_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB67_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB67_86
.LBB67_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB67_86:                              # %if.end427
	movl	$0, -84(%rbp)
	movl	-180(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB67_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_91 Depth 2
                                        #       Child Loop BB67_95 Depth 3
                                        #         Child Loop BB67_101 Depth 4
                                        #           Child Loop BB67_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB67_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB67_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-132(%rbp), %eax
	movq	mvbits, %rdx
	movl	-96(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB67_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB67_87 Depth=1
	jmp	.LBB67_119
.LBB67_90:                              # %if.end456
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB67_91:                              # %for.cond457
                                        #   Parent Loop BB67_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_95 Depth 3
                                        #         Child Loop BB67_101 Depth 4
                                        #           Child Loop BB67_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-148(%rbp), %ecx
	jge	.LBB67_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB67_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB67_93:                              # %land.end463
                                        #   in Loop: Header=BB67_91 Depth=2
	testb	$1, %al
	jne	.LBB67_94
	jmp	.LBB67_114
.LBB67_94:                              # %for.body465
                                        #   in Loop: Header=BB67_91 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB67_95:                              # %for.cond469
                                        #   Parent Loop BB67_87 Depth=1
                                        #     Parent Loop BB67_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_101 Depth 4
                                        #           Child Loop BB67_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jge	.LBB67_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB67_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-156(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-96(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB67_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB67_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB67_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB67_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB67_112
.LBB67_99:                              # %if.end636
                                        #   in Loop: Header=BB67_95 Depth=3
	jmp	.LBB67_109
.LBB67_100:                             # %if.else637
                                        #   in Loop: Header=BB67_95 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB67_101:                             # %for.cond638
                                        #   Parent Loop BB67_87 Depth=1
                                        #     Parent Loop BB67_91 Depth=2
                                        #       Parent Loop BB67_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_103 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB67_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB67_101 Depth=4
	movl	$0, -80(%rbp)
.LBB67_103:                             # %for.cond642
                                        #   Parent Loop BB67_87 Depth=1
                                        #     Parent Loop BB67_91 Depth=2
                                        #       Parent Loop BB67_95 Depth=3
                                        #         Parent Loop BB67_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB67_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB67_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB67_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB67_103
.LBB67_106:                             # %for.end657
                                        #   in Loop: Header=BB67_101 Depth=4
	jmp	.LBB67_107
.LBB67_107:                             # %for.inc658
                                        #   in Loop: Header=BB67_101 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB67_101
.LBB67_108:                             # %for.end660
                                        #   in Loop: Header=BB67_95 Depth=3
	jmp	.LBB67_109
.LBB67_109:                             # %if.end661
                                        #   in Loop: Header=BB67_95 Depth=3
	jmp	.LBB67_110
.LBB67_110:                             # %for.inc662
                                        #   in Loop: Header=BB67_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_95
.LBB67_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB67_91 Depth=2
	jmp	.LBB67_112
.LBB67_112:                             # %for.end664
                                        #   in Loop: Header=BB67_91 Depth=2
	jmp	.LBB67_113
.LBB67_113:                             # %for.inc665
                                        #   in Loop: Header=BB67_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB67_91
.LBB67_114:                             # %for.end667
                                        #   in Loop: Header=BB67_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB67_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB67_116:                             # %if.end675
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB67_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB67_118:                             # %if.end679
                                        #   in Loop: Header=BB67_87 Depth=1
	jmp	.LBB67_119
.LBB67_119:                             # %for.inc680
                                        #   in Loop: Header=BB67_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB67_87
.LBB67_120:                             # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB67_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB67_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1031008487, -184(%rbp) # imm = 0x3D73F0E7
	jne	.LBB67_124
.LBB67_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_123
.Lfunc_end67:
	.size	SubPelBlockMotionSearch.42, .Lfunc_end67-SubPelBlockMotionSearch.42
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.43 # -- Begin function ClearFastFullIntegerSearch.43
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.43,@function
ClearFastFullIntegerSearch.43:          # @ClearFastFullIntegerSearch.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$630701308, -20(%rbp)   # imm = 0x2597BCFC
	movl	$0, -4(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_5 Depth 3
                                        #         Child Loop BB68_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB68_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -8(%rbp)
.LBB68_3:                               # %for.cond1
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_5 Depth 3
                                        #         Child Loop BB68_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB68_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	$1, -12(%rbp)
.LBB68_5:                               # %for.cond4
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB68_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	$0, -16(%rbp)
.LBB68_7:                               # %for.cond7
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        #       Parent Loop BB68_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB68_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB68_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB68_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_7
.LBB68_10:                              # %for.end
                                        #   in Loop: Header=BB68_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_5
.LBB68_12:                              # %for.end24
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_3
.LBB68_14:                              # %for.end31
                                        #   in Loop: Header=BB68_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_1
.LBB68_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB68_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB68_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB68_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB68_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_17
.LBB68_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$630701308, -20(%rbp)   # imm = 0x2597BCFC
	jne	.LBB68_22
.LBB68_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_21
.Lfunc_end68:
	.size	ClearFastFullIntegerSearch.43, .Lfunc_end68-ClearFastFullIntegerSearch.43
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.44        # -- Begin function GetSkipCostMB.44
	.p2align	4, 0x90
	.type	GetSkipCostMB.44,@function
GetSkipCostMB.44:                       # @GetSkipCostMB.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$410606836, -52(%rbp)   # imm = 0x18795CF4
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
                                        #     Child Loop BB69_24 Depth 2
                                        #       Child Loop BB69_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB69_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_5 Depth 3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB69_5:                               # %for.cond6
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_7 Depth 4
                                        #           Child Loop BB69_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
.LBB69_7:                               # %for.cond11
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        #       Parent Loop BB69_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB69_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB69_7 Depth=4
	movl	$0, -16(%rbp)
.LBB69_9:                               # %for.cond14
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        #       Parent Loop BB69_5 Depth=3
                                        #         Parent Loop BB69_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB69_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB69_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB69_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_9
.LBB69_12:                              # %for.end
                                        #   in Loop: Header=BB69_7 Depth=4
	jmp	.LBB69_13
.LBB69_13:                              # %for.inc39
                                        #   in Loop: Header=BB69_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_7
.LBB69_14:                              # %for.end41
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB69_17
.LBB69_16:                              # %if.then
                                        #   in Loop: Header=BB69_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB69_17:                              # %if.end
                                        #   in Loop: Header=BB69_5 Depth=3
	jmp	.LBB69_18
.LBB69_18:                              # %for.inc45
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB69_5
.LBB69_19:                              # %for.end47
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_20
.LBB69_20:                              # %for.inc48
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_3
.LBB69_21:                              # %for.end50
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB69_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB69_24:                              # %for.cond58
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB69_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB69_24 Depth=2
	movl	$0, -16(%rbp)
.LBB69_26:                              # %for.cond62
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB69_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB69_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB69_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_26
.LBB69_29:                              # %for.end75
                                        #   in Loop: Header=BB69_24 Depth=2
	jmp	.LBB69_30
.LBB69_30:                              # %for.inc76
                                        #   in Loop: Header=BB69_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_24
.LBB69_31:                              # %for.end78
                                        #   in Loop: Header=BB69_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB69_32:                              # %if.end83
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_33
.LBB69_33:                              # %for.inc84
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB69_1
.LBB69_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$410606836, -52(%rbp)   # imm = 0x18795CF4
	jne	.LBB69_36
.LBB69_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_35
.Lfunc_end69:
	.size	GetSkipCostMB.44, .Lfunc_end69-GetSkipCostMB.44
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.45 # -- Begin function FindSkipModeMotionVector.45
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.45,@function
FindSkipModeMotionVector.45:            # @FindSkipModeMotionVector.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$481847034, -56(%rbp)   # imm = 0x1CB866FA
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB70_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_4
# %bb.3:                                # %if.then24
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB70_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_7
# %bb.6:                                # %if.then34
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB70_7:                               # %if.end36
	jmp	.LBB70_8
.LBB70_8:                               # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB70_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_12
# %bb.11:                               # %if.then69
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB70_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB70_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_15
# %bb.14:                               # %if.then82
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB70_15:                              # %if.end85
	jmp	.LBB70_16
.LBB70_16:                              # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB70_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB70_22
.LBB70_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB70_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB70_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB70_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB70_22:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB70_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB70_28
.LBB70_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB70_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB70_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB70_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB70_28:                              # %cond.end130
	movl	%ecx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB70_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -60(%rbp)
	je	.LBB70_39
.LBB70_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB70_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB70_31 Depth=1
	movl	$0, -4(%rbp)
.LBB70_33:                              # %for.cond137
                                        #   Parent Loop BB70_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB70_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB70_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_33
.LBB70_36:                              # %for.end
                                        #   in Loop: Header=BB70_31 Depth=1
	jmp	.LBB70_37
.LBB70_37:                              # %for.inc157
                                        #   in Loop: Header=BB70_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_31
.LBB70_38:                              # %for.end159
	jmp	.LBB70_48
.LBB70_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB70_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	$0, -4(%rbp)
.LBB70_42:                              # %for.cond166
                                        #   Parent Loop BB70_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB70_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB70_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_42
.LBB70_45:                              # %for.end190
                                        #   in Loop: Header=BB70_40 Depth=1
	jmp	.LBB70_46
.LBB70_46:                              # %for.inc191
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_40
.LBB70_47:                              # %for.end193
	jmp	.LBB70_48
.LBB70_48:                              # %if.end194
	cmpl	$481847034, -56(%rbp)   # imm = 0x1CB866FA
	jne	.LBB70_50
.LBB70_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_49
.Lfunc_end70:
	.size	FindSkipModeMotionVector.45, .Lfunc_end70-FindSkipModeMotionVector.45
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.46 # -- Begin function SetMotionVectorPredictor.46
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.46,@function
SetMotionVectorPredictor.46:            # @SetMotionVectorPredictor.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$2085819800, -180(%rbp) # imm = 0x7C531598
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -156(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB71_2:                               # %if.end
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB71_19
# %bb.3:                                # %if.then2
	cmpl	$8, -156(%rbp)
	jge	.LBB71_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB71_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB71_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB71_8
.LBB71_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB71_8:                               # %if.end10
	jmp	.LBB71_13
.LBB71_9:                               # %if.else11
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB71_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB71_12
.LBB71_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB71_12:                              # %if.end18
	jmp	.LBB71_13
.LBB71_13:                              # %if.end19
	jmp	.LBB71_18
.LBB71_14:                              # %if.else20
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB71_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB71_17
.LBB71_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB71_17:                              # %if.end28
	jmp	.LBB71_18
.LBB71_18:                              # %if.end29
	jmp	.LBB71_19
.LBB71_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB71_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB71_21:                              # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB71_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB71_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_25
.LBB71_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_25
.LBB71_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_28
.LBB71_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_28
.LBB71_28:                              # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_31
.LBB71_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_31
.LBB71_31:                              # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB71_72
.LBB71_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB71_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_37
.LBB71_36:                              # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB71_37:                              # %cond.end108
	jmp	.LBB71_39
.LBB71_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_39
.LBB71_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_43
.LBB71_42:                              # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB71_43:                              # %cond.end143
	jmp	.LBB71_45
.LBB71_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_45
.LBB71_45:                              # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_49
.LBB71_48:                              # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB71_49:                              # %cond.end178
	jmp	.LBB71_51
.LBB71_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_51
.LBB71_51:                              # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB71_71
.LBB71_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB71_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB71_56
.LBB71_55:                              # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_56:                              # %cond.end213
	jmp	.LBB71_58
.LBB71_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_58
.LBB71_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB71_62
.LBB71_61:                              # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_62:                              # %cond.end248
	jmp	.LBB71_64
.LBB71_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_64
.LBB71_64:                              # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB71_68
.LBB71_67:                              # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_68:                              # %cond.end283
	jmp	.LBB71_70
.LBB71_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB71_70
.LBB71_70:                              # %cond.end286
	movl	%eax, -84(%rbp)
.LBB71_71:                              # %if.end288
	jmp	.LBB71_72
.LBB71_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB71_86
.LBB71_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB71_85
.LBB71_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB71_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB71_84:                              # %if.end327
	jmp	.LBB71_85
.LBB71_85:                              # %if.end328
	jmp	.LBB71_86
.LBB71_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB71_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB71_96
# %bb.88:                               # %if.then335
	cmpl	$0, -156(%rbp)
	jne	.LBB71_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB71_91:                              # %if.end343
	jmp	.LBB71_95
.LBB71_92:                              # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB71_94:                              # %if.end349
	jmp	.LBB71_95
.LBB71_95:                              # %if.end350
	jmp	.LBB71_107
.LBB71_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB71_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB71_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB71_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB71_101:                             # %if.end365
	jmp	.LBB71_105
.LBB71_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB71_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB71_104:                             # %if.end371
	jmp	.LBB71_105
.LBB71_105:                             # %if.end372
	jmp	.LBB71_106
.LBB71_106:                             # %if.end373
	jmp	.LBB71_107
.LBB71_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB71_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB71_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB71_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB71_121
.LBB71_111:                             # %if.then381
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB71_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_114
.LBB71_113:                             # %cond.false396
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_114
.LBB71_114:                             # %cond.end397
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_117
.LBB71_116:                             # %cond.false413
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_117
.LBB71_117:                             # %cond.end414
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_120
.LBB71_119:                             # %cond.false430
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_120
.LBB71_120:                             # %cond.end431
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB71_161
.LBB71_121:                             # %if.else433
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB71_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_126
.LBB71_125:                             # %cond.false462
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB71_126:                             # %cond.end474
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_128
.LBB71_127:                             # %cond.false476
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_128
.LBB71_128:                             # %cond.end477
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_132
.LBB71_131:                             # %cond.false500
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB71_132:                             # %cond.end513
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_134
.LBB71_133:                             # %cond.false515
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_134
.LBB71_134:                             # %cond.end516
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB71_138
.LBB71_137:                             # %cond.false539
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB71_138:                             # %cond.end552
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_140
.LBB71_139:                             # %cond.false554
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_140
.LBB71_140:                             # %cond.end555
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB71_160
.LBB71_141:                             # %if.else557
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB71_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB71_145
.LBB71_144:                             # %cond.false580
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_145:                             # %cond.end592
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_147
.LBB71_146:                             # %cond.false594
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_147
.LBB71_147:                             # %cond.end595
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB71_151
.LBB71_150:                             # %cond.false619
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_151:                             # %cond.end631
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_153
.LBB71_152:                             # %cond.false633
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_153
.LBB71_153:                             # %cond.end634
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB71_157
.LBB71_156:                             # %cond.false658
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB71_157:                             # %cond.end670
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_159
.LBB71_158:                             # %cond.false672
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_159
.LBB71_159:                             # %cond.end673
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB71_160:                             # %if.end675
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_161
.LBB71_161:                             # %if.end676
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB71_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB71_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB71_166
.LBB71_165:                             # %cond.false696
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB71_166:                             # %cond.end708
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_168
.LBB71_167:                             # %cond.false710
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_168
.LBB71_168:                             # %cond.end711
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB71_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB71_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB71_172
.LBB71_171:                             # %cond.false729
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB71_172:                             # %cond.end741
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_174
.LBB71_173:                             # %cond.false743
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_174
.LBB71_174:                             # %cond.end744
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB71_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB71_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB71_178
.LBB71_177:                             # %cond.false762
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB71_178:                             # %cond.end774
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_180
.LBB71_179:                             # %cond.false776
                                        #   in Loop: Header=BB71_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB71_180
.LBB71_180:                             # %cond.end777
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB71_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB71_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB71_184
.LBB71_183:                             # %cond.false795
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB71_184:                             # %cond.end807
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_186
.LBB71_185:                             # %cond.false809
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-176(%rbp), %eax
.LBB71_186:                             # %cond.end810
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB71_187:                             # %if.end812
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB71_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	.LJTI71_0(,%rax,8), %rax
	jmpq	*%rax
.LBB71_189:                             # %sw.bb
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB71_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB71_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB71_193:                             # %if.end824
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_213
.LBB71_194:                             # %if.else825
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB71_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB71_197
.LBB71_196:                             # %cond.false831
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %edx
.LBB71_197:                             # %cond.end832
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB71_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB71_203
.LBB71_199:                             # %cond.false837
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB71_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB71_202
.LBB71_201:                             # %cond.false841
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB71_202:                             # %cond.end842
                                        #   in Loop: Header=BB71_108 Depth=1
.LBB71_203:                             # %cond.end844
                                        #   in Loop: Header=BB71_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB71_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB71_206
.LBB71_205:                             # %cond.false849
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %edx
.LBB71_206:                             # %cond.end850
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB71_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB71_212
.LBB71_208:                             # %cond.false855
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB71_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB71_211
.LBB71_210:                             # %cond.false859
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB71_211:                             # %cond.end860
                                        #   in Loop: Header=BB71_108 Depth=1
.LBB71_212:                             # %cond.end862
                                        #   in Loop: Header=BB71_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB71_213:                             # %if.end865
                                        #   in Loop: Header=BB71_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB71_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB71_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB71_222
.LBB71_217:                             # %if.else877
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB71_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB71_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB71_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB71_221
.LBB71_220:                             # %if.else886
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB71_221:                             # %if.end889
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_222
.LBB71_222:                             # %if.end890
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_223
.LBB71_223:                             # %if.end891
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_234
.LBB71_224:                             # %sw.bb892
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB71_226:                             # %if.end898
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_234
.LBB71_227:                             # %sw.bb899
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB71_229:                             # %if.end905
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_234
.LBB71_230:                             # %sw.bb906
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB71_232:                             # %if.end912
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_234
.LBB71_233:                             # %sw.default
                                        #   in Loop: Header=BB71_108 Depth=1
	jmp	.LBB71_234
.LBB71_234:                             # %sw.epilog
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB71_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_108
.LBB71_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB71_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB71_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB71_240
.LBB71_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB71_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB71_241:                             # %if.end929
	cmpl	$2085819800, -180(%rbp) # imm = 0x7C531598
	jne	.LBB71_243
.LBB71_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_242
.Lfunc_end71:
	.size	SetMotionVectorPredictor.46, .Lfunc_end71-SetMotionVectorPredictor.46
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI71_0:
	.quad	.LBB71_189
	.quad	.LBB71_224
	.quad	.LBB71_227
	.quad	.LBB71_230
                                        # -- End function
	.text
	.globl	sign.47                 # -- Begin function sign.47
	.p2align	4, 0x90
	.type	sign.47,@function
sign.47:                                # @sign.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1144947512, -24(%rbp)  # imm = 0x443E8338
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB72_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB72_3
.LBB72_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB72_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB72_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_6
.LBB72_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB72_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$1144947512, -24(%rbp)  # imm = 0x443E8338
	jne	.LBB72_8
.LBB72_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_7
.Lfunc_end72:
	.size	sign.47, .Lfunc_end72-sign.47
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.48   # -- Begin function Get_Direct_Cost8x8.48
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.48,@function
Get_Direct_Cost8x8.48:                  # @Get_Direct_Cost8x8.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$934464345, -60(%rbp)   # imm = 0x37B2CB59
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
                                        #       Child Loop BB73_7 Depth 3
                                        #         Child Loop BB73_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB73_3:                               # %for.cond3
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_7 Depth 3
                                        #         Child Loop BB73_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB73_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB73_30
.LBB73_6:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-20(%rbp), %edi
	movl	-28(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB73_7:                               # %for.cond34
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB73_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB73_7 Depth=3
	movl	$0, -16(%rbp)
.LBB73_9:                               # %for.cond38
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_3 Depth=2
                                        #       Parent Loop BB73_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB73_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB73_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB73_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB73_9
.LBB73_12:                              # %for.end
                                        #   in Loop: Header=BB73_7 Depth=3
	jmp	.LBB73_13
.LBB73_13:                              # %for.inc67
                                        #   in Loop: Header=BB73_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_7
.LBB73_14:                              # %for.end69
                                        #   in Loop: Header=BB73_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_3
.LBB73_16:                              # %for.end73
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_17
.LBB73_17:                              # %for.inc74
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB73_1
.LBB73_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB73_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB73_29
# %bb.20:                               # %if.then79
	movl	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB73_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB73_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB73_21 Depth=1
	movl	$0, -16(%rbp)
.LBB73_23:                              # %for.cond84
                                        #   Parent Loop BB73_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB73_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB73_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB73_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB73_23
.LBB73_26:                              # %for.end97
                                        #   in Loop: Header=BB73_21 Depth=1
	jmp	.LBB73_27
.LBB73_27:                              # %for.inc98
                                        #   in Loop: Header=BB73_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_21
.LBB73_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB73_29:                              # %if.end105
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB73_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$934464345, -60(%rbp)   # imm = 0x37B2CB59
	jne	.LBB73_32
.LBB73_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_31
.Lfunc_end73:
	.size	Get_Direct_Cost8x8.48, .Lfunc_end73-Get_Direct_Cost8x8.48
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.49 # -- Begin function SetupFastFullPelSearch.49
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.49,@function
SetupFastFullPelSearch.49:              # @SetupFastFullPelSearch.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1131877870, -132(%rbp) # imm = 0x437715EE
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB74_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB74_4
.LBB74_4:                               # %cond.end
	movl	%ecx, -136(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB74_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB74_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB74_10
.LBB74_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB74_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB74_9:                               # %land.end
.LBB74_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movl	-8(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB74_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB74_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB74_14
.LBB74_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB74_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -156(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -148(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB74_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB74_18
.LBB74_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB74_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB74_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB74_24
.LBB74_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB74_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB74_23
.LBB74_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB74_23:                              # %cond.end82
.LBB74_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB74_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB74_27
.LBB74_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB74_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB74_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB74_33
.LBB74_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB74_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB74_32
.LBB74_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB74_32:                              # %cond.end122
.LBB74_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB74_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB74_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB74_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -72(%rbp)
.LBB74_37:                              # %for.cond155
                                        #   Parent Loop BB74_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB74_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB74_37 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB74_37
.LBB74_40:                              # %for.end
                                        #   in Loop: Header=BB74_35 Depth=1
	jmp	.LBB74_41
.LBB74_41:                              # %for.inc165
                                        #   in Loop: Header=BB74_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB74_35
.LBB74_42:                              # %for.end167
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB74_47
# %bb.43:                               # %land.lhs.true170
	movl	-68(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB74_47
# %bb.44:                               # %land.lhs.true174
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB74_47
# %bb.45:                               # %land.lhs.true177
	movl	-76(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB74_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB74_48
.LBB74_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB74_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB74_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	$0, -28(%rbp)
.LBB74_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB74_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB74_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	-152(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB74_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB74_57
.LBB74_54:                              # %if.end209
                                        #   in Loop: Header=BB74_50 Depth=1
	jmp	.LBB74_55
.LBB74_55:                              # %for.inc210
                                        #   in Loop: Header=BB74_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB74_50
.LBB74_56:                              # %for.end212.loopexit
	jmp	.LBB74_57
.LBB74_57:                              # %for.end212
	jmp	.LBB74_58
.LBB74_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB74_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_69 Depth 2
                                        #       Child Loop BB74_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB74_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB74_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB74_59 Depth=1
	cmpl	$0, -80(%rbp)
	jl	.LBB74_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-80(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB74_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB74_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB74_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB74_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB74_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB74_67
.LBB74_66:                              # %if.else238
                                        #   in Loop: Header=BB74_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB74_67:                              # %if.end239
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_68
.LBB74_68:                              # %if.end240
                                        #   in Loop: Header=BB74_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -84(%rbp)
.LBB74_69:                              # %for.cond242
                                        #   Parent Loop BB74_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_71 Depth 3
	cmpl	$4, -84(%rbp)
	jge	.LBB74_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB74_69 Depth=2
	movl	$0, -48(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -60(%rbp)
.LBB74_71:                              # %for.cond246
                                        #   Parent Loop BB74_59 Depth=1
                                        #     Parent Loop BB74_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB74_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB74_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-80(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -80(%rbp)
	movl	-88(%rbp), %edx
	movl	-148(%rbp), %ecx
	movl	-156(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB74_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB74_71
.LBB74_74:                              # %for.end381
                                        #   in Loop: Header=BB74_69 Depth=2
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB74_69 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB74_69
.LBB74_76:                              # %for.end404
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_77
.LBB74_77:                              # %for.inc405
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB74_59
.LBB74_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-92(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1131877870, -132(%rbp) # imm = 0x437715EE
	jne	.LBB74_80
.LBB74_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_79
.Lfunc_end74:
	.size	SetupFastFullPelSearch.49, .Lfunc_end74-SetupFastFullPelSearch.49
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.50 # -- Begin function FindSkipModeMotionVector.50
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.50,@function
FindSkipModeMotionVector.50:            # @FindSkipModeMotionVector.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1359276971, -60(%rbp)  # imm = 0x5104EBAB
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB75_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB75_4
# %bb.3:                                # %if.then24
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB75_4:                               # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB75_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_7
# %bb.6:                                # %if.then34
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB75_7:                               # %if.end36
	jmp	.LBB75_8
.LBB75_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB75_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB75_12
# %bb.11:                               # %if.then69
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB75_12:                              # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB75_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_15
# %bb.14:                               # %if.then82
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB75_15:                              # %if.end85
	jmp	.LBB75_16
.LBB75_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB75_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB75_22
.LBB75_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB75_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB75_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB75_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB75_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB75_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB75_28
.LBB75_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB75_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB75_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB75_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB75_28:                              # %cond.end130
	movl	%ecx, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.LBB75_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB75_39
.LBB75_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB75_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB75_31 Depth=1
	movl	$0, -4(%rbp)
.LBB75_33:                              # %for.cond137
                                        #   Parent Loop BB75_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB75_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB75_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_33
.LBB75_36:                              # %for.end
                                        #   in Loop: Header=BB75_31 Depth=1
	jmp	.LBB75_37
.LBB75_37:                              # %for.inc157
                                        #   in Loop: Header=BB75_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_31
.LBB75_38:                              # %for.end159
	jmp	.LBB75_48
.LBB75_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB75_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB75_40 Depth=1
	movl	$0, -4(%rbp)
.LBB75_42:                              # %for.cond166
                                        #   Parent Loop BB75_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB75_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB75_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB75_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_42
.LBB75_45:                              # %for.end190
                                        #   in Loop: Header=BB75_40 Depth=1
	jmp	.LBB75_46
.LBB75_46:                              # %for.inc191
                                        #   in Loop: Header=BB75_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_40
.LBB75_47:                              # %for.end193
	jmp	.LBB75_48
.LBB75_48:                              # %if.end194
	cmpl	$1359276971, -60(%rbp)  # imm = 0x5104EBAB
	jne	.LBB75_50
.LBB75_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_49
.Lfunc_end75:
	.size	FindSkipModeMotionVector.50, .Lfunc_end75-FindSkipModeMotionVector.50
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.51            # -- Begin function find_SATD.51
	.p2align	4, 0x90
	.type	find_SATD.51,@function
find_SATD.51:                           # @find_SATD.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$22993869, -52(%rbp)    # imm = 0x15EDBCD
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
                                        #       Child Loop BB76_5 Depth 3
                                        #         Child Loop BB76_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -24(%rbp)
.LBB76_3:                               # %for.cond7
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_5 Depth 3
                                        #         Child Loop BB76_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB76_5:                               # %for.cond10
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_7 Depth 4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_7:                               # %for.cond13
                                        #   Parent Loop BB76_1 Depth=1
                                        #     Parent Loop BB76_3 Depth=2
                                        #       Parent Loop BB76_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB76_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB76_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB76_7
.LBB76_10:                              # %for.end
                                        #   in Loop: Header=BB76_5 Depth=3
	jmp	.LBB76_11
.LBB76_11:                              # %for.inc24
                                        #   in Loop: Header=BB76_5 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB76_5
.LBB76_12:                              # %for.end26
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_13
.LBB76_13:                              # %for.inc27
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB76_3
.LBB76_14:                              # %for.end29
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_15
.LBB76_15:                              # %for.inc30
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_1
.LBB76_16:                              # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB76_26
# %bb.17:                               # %if.then
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB76_24
# %bb.18:                               # %if.then
	movq	.LJTI76_0(,%rax,8), %rax
	jmpq	*%rax
.LBB76_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB76_25:                              # %sw.epilog
	jmp	.LBB76_31
.LBB76_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB76_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB76_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_27
.LBB76_30:                              # %for.end79
	jmp	.LBB76_31
.LBB76_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$22993869, -52(%rbp)    # imm = 0x15EDBCD
	jne	.LBB76_33
.LBB76_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_32
.Lfunc_end76:
	.size	find_SATD.51, .Lfunc_end76-find_SATD.51
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI76_0:
	.quad	.LBB76_19
	.quad	.LBB76_20
	.quad	.LBB76_20
	.quad	.LBB76_21
	.quad	.LBB76_22
	.quad	.LBB76_22
	.quad	.LBB76_23
                                        # -- End function
	.text
	.globl	ClearFastFullIntegerSearch.52 # -- Begin function ClearFastFullIntegerSearch.52
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.52,@function
ClearFastFullIntegerSearch.52:          # @ClearFastFullIntegerSearch.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1103990706, -20(%rbp)  # imm = 0x41CD8FB2
	movl	$0, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
                                        #       Child Loop BB77_5 Depth 3
                                        #         Child Loop BB77_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB77_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond1
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_5 Depth 3
                                        #         Child Loop BB77_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB77_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$1, -12(%rbp)
.LBB77_5:                               # %for.cond4
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB77_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	$0, -16(%rbp)
.LBB77_7:                               # %for.cond7
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        #       Parent Loop BB77_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB77_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB77_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB77_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_7
.LBB77_10:                              # %for.end
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_5
.LBB77_12:                              # %for.end24
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_14:                              # %for.end31
                                        #   in Loop: Header=BB77_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB77_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB77_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB77_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB77_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_17
.LBB77_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$1103990706, -20(%rbp)  # imm = 0x41CD8FB2
	jne	.LBB77_22
.LBB77_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_21
.Lfunc_end77:
	.size	ClearFastFullIntegerSearch.52, .Lfunc_end77-ClearFastFullIntegerSearch.52
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.53    # -- Begin function SetupLargerBlocks.53
	.p2align	4, 0x90
	.type	SetupLargerBlocks.53,@function
SetupLargerBlocks.53:                   # @SetupLargerBlocks.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1844931078, -76(%rbp)  # imm = 0x6DF76A06
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB78_5 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB78_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_5
.LBB78_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB78_9 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB78_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_9
.LBB78_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB78_13 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB78_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_13
.LBB78_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB78_17 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB78_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_17
.LBB78_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB78_21 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB78_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_21
.LBB78_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB78_25 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB78_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_25
.LBB78_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB78_29 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB78_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_29
.LBB78_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB78_33 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB78_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_33
.LBB78_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB78_37 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB78_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_37
.LBB78_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB78_41 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB78_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_41
.LBB78_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB78_45 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB78_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_45
.LBB78_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB78_49 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB78_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_49
.LBB78_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB78_53 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB78_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_53
.LBB78_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB78_57 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB78_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_57
.LBB78_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB78_61 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB78_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_61
.LBB78_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB78_65 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB78_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_65
.LBB78_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB78_69 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB78_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_69
.LBB78_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB78_73 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB78_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_73
.LBB78_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB78_77 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB78_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_77
.LBB78_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB78_81 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB78_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_81
.LBB78_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB78_85 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB78_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_85
.LBB78_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB78_89 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB78_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_89
.LBB78_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB78_93 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB78_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_93
.LBB78_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB78_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB78_97 Depth=1
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB78_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_97
.LBB78_100:                             # %for.end438
	cmpl	$1844931078, -76(%rbp)  # imm = 0x6DF76A06
	jne	.LBB78_102
.LBB78_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_101
.Lfunc_end78:
	.size	SetupLargerBlocks.53, .Lfunc_end78-SetupLargerBlocks.53
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.54              # -- Begin function SATD8X8.54
	.p2align	4, 0x90
	.type	SATD8X8.54,@function
SATD8X8.54:                             # @SATD8X8.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1254297972, -36(%rbp)  # imm = 0x4AC31174
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB79_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB79_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB79_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB79_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_2
.LBB79_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB79_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB79_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB79_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB79_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_6
.LBB79_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB79_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB79_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	$0, -12(%rbp)
.LBB79_12:                              # %for.cond499
                                        #   Parent Loop BB79_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB79_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB79_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB79_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB79_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB79_16
.LBB79_15:                              # %cond.false
                                        #   in Loop: Header=BB79_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB79_16:                              # %cond.end
                                        #   in Loop: Header=BB79_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB79_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_12
.LBB79_18:                              # %for.end519
                                        #   in Loop: Header=BB79_10 Depth=1
	jmp	.LBB79_19
.LBB79_19:                              # %for.inc520
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_10
.LBB79_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB79_26
.LBB79_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB79_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB79_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB79_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB79_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_22
.LBB79_25:                              # %for.end534
	jmp	.LBB79_26
.LBB79_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1254297972, -36(%rbp)  # imm = 0x4AC31174
	jne	.LBB79_28
.LBB79_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_27
.Lfunc_end79:
	.size	SATD8X8.54, .Lfunc_end79-SATD8X8.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.55
.LCPI80_0:
	.quad	4611686018427387904     # double 2
.LCPI80_1:
	.quad	4607182418800017408     # double 1
.LCPI80_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI80_4:
	.quad	4620693217682128896     # double 8
.LCPI80_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI80_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.55
	.p2align	4, 0x90
	.type	BlockMotionSearch.55,@function
BlockMotionSearch.55:                   # @BlockMotionSearch.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$923618576, -212(%rbp)  # imm = 0x370D4D10
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -180(%rbp)
	movl	%ecx, -184(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB80_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB80_4
.LBB80_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB80_4
.LBB80_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB80_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB80_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB80_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB80_6 Depth=1
	movl	$0, -64(%rbp)
.LBB80_8:                               # %for.cond24
                                        #   Parent Loop BB80_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB80_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB80_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB80_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_8
.LBB80_11:                              # %for.end
                                        #   in Loop: Header=BB80_6 Depth=1
	jmp	.LBB80_12
.LBB80_12:                              # %for.inc37
                                        #   in Loop: Header=BB80_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_6
.LBB80_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB80_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_18
.LBB80_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB80_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_37
.LBB80_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB80_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_23
.LBB80_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB80_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_36
.LBB80_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB80_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_28
.LBB80_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB80_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_35
.LBB80_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB80_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_33
.LBB80_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB80_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB80_34:                              # %if.end276
	jmp	.LBB80_35
.LBB80_35:                              # %if.end277
	jmp	.LBB80_36
.LBB80_36:                              # %if.end278
	jmp	.LBB80_37
.LBB80_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB80_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB80_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_43
.LBB80_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB80_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_62
.LBB80_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB80_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_48
.LBB80_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB80_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_61
.LBB80_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB80_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_53
.LBB80_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB80_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB80_60
.LBB80_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB80_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB80_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB80_58
.LBB80_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB80_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB80_59:                              # %if.end524
	jmp	.LBB80_60
.LBB80_60:                              # %if.end525
	jmp	.LBB80_61
.LBB80_61:                              # %if.end526
	jmp	.LBB80_62
.LBB80_62:                              # %if.end527
	jmp	.LBB80_63
.LBB80_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB80_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB80_66
.LBB80_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB80_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB80_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB80_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB80_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB80_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB80_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB80_73
.LBB80_72:                              # %cond.false626
	vmovsd	.LCPI80_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB80_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB80_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB80_76
.LBB80_75:                              # %cond.false655
	vmovsd	.LCPI80_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB80_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB80_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB80_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB80_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB80_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB80_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB80_83
.LBB80_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB80_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB80_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB80_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB80_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB80_92
.LBB80_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB80_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB80_91
.LBB80_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB80_91:                              # %cond.end787
	vmovss	.LCPI80_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB80_92:                              # %if.end835
	jmp	.LBB80_106
.LBB80_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB80_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB80_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB80_97
.LBB80_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB80_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB80_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB80_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB80_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB80_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB80_104
.LBB80_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB80_104:                             # %cond.end940
	vmovss	.LCPI80_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB80_105:                             # %if.end988
	jmp	.LBB80_106
.LBB80_106:                             # %if.end989
	jmp	.LBB80_107
.LBB80_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB80_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_142
# %bb.110:                              # %if.then1000
	movswl	-96(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movswl	-94(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB80_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB80_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB80_114
.LBB80_113:                             # %cond.false1014
	movswl	-58(%rbp), %ecx
.LBB80_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB80_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB80_120
.LBB80_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB80_119
.LBB80_118:                             # %cond.false1027
	movswl	-58(%rbp), %ecx
.LBB80_119:                             # %cond.end1029
.LBB80_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -58(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB80_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB80_123
.LBB80_122:                             # %cond.false1039
	movswl	-60(%rbp), %ecx
.LBB80_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB80_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB80_129
.LBB80_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB80_128
.LBB80_127:                             # %cond.false1052
	movswl	-60(%rbp), %eax
.LBB80_128:                             # %cond.end1054
.LBB80_129:                             # %cond.end1056
	movw	%ax, -60(%rbp)
.LBB80_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB80_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB80_131 Depth=1
	movl	$0, -72(%rbp)
.LBB80_133:                             # %for.cond1066
                                        #   Parent Loop BB80_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB80_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB80_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB80_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB80_137
.LBB80_136:                             # %if.else1091
                                        #   in Loop: Header=BB80_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB80_137:                             # %if.end1109
                                        #   in Loop: Header=BB80_133 Depth=2
	jmp	.LBB80_138
.LBB80_138:                             # %for.inc1110
                                        #   in Loop: Header=BB80_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_133
.LBB80_139:                             # %for.end1112
                                        #   in Loop: Header=BB80_131 Depth=1
	jmp	.LBB80_140
.LBB80_140:                             # %for.inc1113
                                        #   in Loop: Header=BB80_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_131
.LBB80_141:                             # %for.end1115
	jmp	.LBB80_143
.LBB80_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB80_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB80_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB80_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB80_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB80_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB80_150
.LBB80_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB80_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB80_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB80_151 Depth=1
	movl	$0, -72(%rbp)
.LBB80_153:                             # %for.cond1139
                                        #   Parent Loop BB80_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB80_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB80_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB80_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB80_157
.LBB80_156:                             # %if.else1183
                                        #   in Loop: Header=BB80_153 Depth=2
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB80_157:                             # %if.end1220
                                        #   in Loop: Header=BB80_153 Depth=2
	jmp	.LBB80_158
.LBB80_158:                             # %for.inc1221
                                        #   in Loop: Header=BB80_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_153
.LBB80_159:                             # %for.end1223
                                        #   in Loop: Header=BB80_151 Depth=1
	jmp	.LBB80_160
.LBB80_160:                             # %for.inc1224
                                        #   in Loop: Header=BB80_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_151
.LBB80_161:                             # %for.end1226
	jmp	.LBB80_166
.LBB80_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB80_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB80_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB80_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB80_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB80_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB80_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB80_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB80_173
.LBB80_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI80_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB80_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -58(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -60(%rbp)
.LBB80_172:                             # %if.end1273
	jmp	.LBB80_173
.LBB80_173:                             # %if.end1274
	jmp	.LBB80_174
.LBB80_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB80_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -192(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -196(%rbp)
	movl	$0, -64(%rbp)
.LBB80_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB80_176 Depth=1
	movl	$0, -72(%rbp)
.LBB80_178:                             # %for.cond1290
                                        #   Parent Loop BB80_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB80_178 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB80_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_178
.LBB80_181:                             # %for.end1337
                                        #   in Loop: Header=BB80_176 Depth=1
	jmp	.LBB80_182
.LBB80_182:                             # %for.inc1338
                                        #   in Loop: Header=BB80_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_176
.LBB80_183:                             # %for.end1340
	jmp	.LBB80_193
.LBB80_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB80_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB80_185 Depth=1
	movl	$0, -72(%rbp)
.LBB80_187:                             # %for.cond1347
                                        #   Parent Loop BB80_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB80_187 Depth=2
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB80_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_187
.LBB80_190:                             # %for.end1380
                                        #   in Loop: Header=BB80_185 Depth=1
	jmp	.LBB80_191
.LBB80_191:                             # %for.inc1381
                                        #   in Loop: Header=BB80_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_185
.LBB80_192:                             # %for.end1383
	jmp	.LBB80_193
.LBB80_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB80_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB80_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB80_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB80_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB80_200
.LBB80_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB80_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movl	$0, -64(%rbp)
.LBB80_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB80_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB80_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB80_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB80_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB80_208
.LBB80_204:                             # %if.else1433
                                        #   in Loop: Header=BB80_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB80_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB80_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB80_207
.LBB80_206:                             # %if.else1441
                                        #   in Loop: Header=BB80_201 Depth=1
	movw	-58(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB80_207:                             # %if.end1450
                                        #   in Loop: Header=BB80_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB80_208:                             # %if.end1452
                                        #   in Loop: Header=BB80_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-140(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -140(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB80_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_201
.LBB80_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB80_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB80_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB80_213:                             # %if.end1469
	vmovsd	.LCPI80_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB80_215
.LBB80_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB80_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB80_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB80_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB80_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI80_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %ax
	movw	-94(%rbp), %bx
	movl	-140(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -140(%rbp)
	jmp	.LBB80_220
.LBB80_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
.LBB80_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB80_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB80_221 Depth=1
	movl	$0, -72(%rbp)
.LBB80_223:                             # %for.cond1502
                                        #   Parent Loop BB80_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB80_223 Depth=2
	xorl	%eax, %eax
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB80_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB80_223
.LBB80_226:                             # %for.end1565
                                        #   in Loop: Header=BB80_221 Depth=1
	jmp	.LBB80_227
.LBB80_227:                             # %for.inc1566
                                        #   in Loop: Header=BB80_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB80_221
.LBB80_228:                             # %for.end1568
	jmp	.LBB80_229
.LBB80_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-188(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$923618576, -212(%rbp)  # imm = 0x370D4D10
	jne	.LBB80_231
.LBB80_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_230
.Lfunc_end80:
	.size	BlockMotionSearch.55, .Lfunc_end80-BlockMotionSearch.55
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.56 # -- Begin function InitializeFastFullIntegerSearch.56
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.56,@function
InitializeFastFullIntegerSearch.56:     # @InitializeFastFullIntegerSearch.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1187491182, -24(%rbp)  # imm = 0x46C7AD6E
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB81_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB81_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
                                        #       Child Loop BB81_11 Depth 3
                                        #         Child Loop BB81_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB81_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB81_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB81_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_6:                               # %if.end12
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	$0, -8(%rbp)
.LBB81_7:                               # %for.cond13
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_11 Depth 3
                                        #         Child Loop BB81_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB81_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB81_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_10:                              # %if.end26
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$1, -12(%rbp)
.LBB81_11:                              # %for.cond27
                                        #   Parent Loop BB81_3 Depth=1
                                        #     Parent Loop BB81_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB81_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB81_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_14:                              # %if.end41
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	$0, -20(%rbp)
.LBB81_15:                              # %for.cond42
                                        #   Parent Loop BB81_3 Depth=1
                                        #     Parent Loop BB81_7 Depth=2
                                        #       Parent Loop BB81_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB81_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB81_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB81_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_18:                              # %if.end60
                                        #   in Loop: Header=BB81_15 Depth=4
	jmp	.LBB81_19
.LBB81_19:                              # %for.inc
                                        #   in Loop: Header=BB81_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_15
.LBB81_20:                              # %for.end
                                        #   in Loop: Header=BB81_11 Depth=3
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc61
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_11
.LBB81_22:                              # %for.end63
                                        #   in Loop: Header=BB81_7 Depth=2
	jmp	.LBB81_23
.LBB81_23:                              # %for.inc64
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_7
.LBB81_24:                              # %for.end66
                                        #   in Loop: Header=BB81_3 Depth=1
	jmp	.LBB81_25
.LBB81_25:                              # %for.inc67
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_3
.LBB81_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB81_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB81_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB81_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB81_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB81_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB81_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB81_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB81_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB81_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB81_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB81_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_40:                              # %if.end109
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB81_42:                              # %if.end120
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB81_44:                              # %if.end131
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB81_46:                              # %if.end142
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB81_48:                              # %if.end153
                                        #   in Loop: Header=BB81_37 Depth=1
	jmp	.LBB81_49
.LBB81_49:                              # %for.inc154
                                        #   in Loop: Header=BB81_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_37
.LBB81_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB81_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB81_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB81_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	$0, -8(%rbp)
.LBB81_54:                              # %for.cond164
                                        #   Parent Loop BB81_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB81_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_54
.LBB81_57:                              # %for.end175
                                        #   in Loop: Header=BB81_52 Depth=1
	jmp	.LBB81_58
.LBB81_58:                              # %for.inc176
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_52
.LBB81_59:                              # %for.end178
	jmp	.LBB81_69
.LBB81_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB81_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB81_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB81_63:                              # %for.cond191
                                        #   Parent Loop BB81_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB81_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB81_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB81_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_63
.LBB81_66:                              # %for.end202
                                        #   in Loop: Header=BB81_61 Depth=1
	jmp	.LBB81_67
.LBB81_67:                              # %for.inc203
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_61
.LBB81_68:                              # %for.end205
	jmp	.LBB81_69
.LBB81_69:                              # %if.end206
	cmpl	$1187491182, -24(%rbp)  # imm = 0x46C7AD6E
	jne	.LBB81_71
.LBB81_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_70
.Lfunc_end81:
	.size	InitializeFastFullIntegerSearch.56, .Lfunc_end81-InitializeFastFullIntegerSearch.56
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.57              # -- Begin function SATD8X8.57
	.p2align	4, 0x90
	.type	SATD8X8.57,@function
SATD8X8.57:                             # @SATD8X8.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$210687635, -32(%rbp)   # imm = 0xC8ED693
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB82_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB82_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB82_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB82_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_2
.LBB82_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB82_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB82_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB82_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB82_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_6
.LBB82_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB82_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB82_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB82_10 Depth=1
	movl	$0, -12(%rbp)
.LBB82_12:                              # %for.cond499
                                        #   Parent Loop BB82_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB82_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB82_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB82_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB82_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB82_16
.LBB82_15:                              # %cond.false
                                        #   in Loop: Header=BB82_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB82_16:                              # %cond.end
                                        #   in Loop: Header=BB82_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB82_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_12
.LBB82_18:                              # %for.end519
                                        #   in Loop: Header=BB82_10 Depth=1
	jmp	.LBB82_19
.LBB82_19:                              # %for.inc520
                                        #   in Loop: Header=BB82_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_10
.LBB82_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_26
.LBB82_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB82_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB82_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB82_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB82_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_22
.LBB82_25:                              # %for.end534
	jmp	.LBB82_26
.LBB82_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$210687635, -32(%rbp)   # imm = 0xC8ED693
	jne	.LBB82_28
.LBB82_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_27
.Lfunc_end82:
	.size	SATD8X8.57, .Lfunc_end82-SATD8X8.57
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.58 # -- Begin function SetMotionVectorPredictor.58
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.58,@function
SetMotionVectorPredictor.58:            # @SetMotionVectorPredictor.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1893186397, -180(%rbp) # imm = 0x70D7BB5D
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB83_2:                               # %if.end
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB83_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB83_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB83_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB83_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB83_8
.LBB83_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB83_8:                               # %if.end10
	jmp	.LBB83_13
.LBB83_9:                               # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB83_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB83_12
.LBB83_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB83_12:                              # %if.end18
	jmp	.LBB83_13
.LBB83_13:                              # %if.end19
	jmp	.LBB83_18
.LBB83_14:                              # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB83_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB83_17
.LBB83_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB83_17:                              # %if.end28
	jmp	.LBB83_18
.LBB83_18:                              # %if.end29
	jmp	.LBB83_19
.LBB83_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB83_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB83_21:                              # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB83_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB83_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_25
.LBB83_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_25
.LBB83_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_28
.LBB83_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_28
.LBB83_28:                              # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_31
.LBB83_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_31
.LBB83_31:                              # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB83_72
.LBB83_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB83_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_37
.LBB83_36:                              # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_37:                              # %cond.end108
	jmp	.LBB83_39
.LBB83_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_39
.LBB83_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_43
.LBB83_42:                              # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_43:                              # %cond.end143
	jmp	.LBB83_45
.LBB83_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_45
.LBB83_45:                              # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_49
.LBB83_48:                              # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB83_49:                              # %cond.end178
	jmp	.LBB83_51
.LBB83_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_51
.LBB83_51:                              # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB83_71
.LBB83_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB83_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_56
.LBB83_55:                              # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_56:                              # %cond.end213
	jmp	.LBB83_58
.LBB83_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_58
.LBB83_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_62
.LBB83_61:                              # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_62:                              # %cond.end248
	jmp	.LBB83_64
.LBB83_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_64
.LBB83_64:                              # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB83_68
.LBB83_67:                              # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_68:                              # %cond.end283
	jmp	.LBB83_70
.LBB83_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB83_70
.LBB83_70:                              # %cond.end286
	movl	%eax, -80(%rbp)
.LBB83_71:                              # %if.end288
	jmp	.LBB83_72
.LBB83_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB83_86
.LBB83_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB83_85
.LBB83_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB83_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB83_84:                              # %if.end327
	jmp	.LBB83_85
.LBB83_85:                              # %if.end328
	jmp	.LBB83_86
.LBB83_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB83_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB83_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB83_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB83_91:                              # %if.end343
	jmp	.LBB83_95
.LBB83_92:                              # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB83_94:                              # %if.end349
	jmp	.LBB83_95
.LBB83_95:                              # %if.end350
	jmp	.LBB83_107
.LBB83_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB83_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB83_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB83_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB83_101:                             # %if.end365
	jmp	.LBB83_105
.LBB83_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB83_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB83_104:                             # %if.end371
	jmp	.LBB83_105
.LBB83_105:                             # %if.end372
	jmp	.LBB83_106
.LBB83_106:                             # %if.end373
	jmp	.LBB83_107
.LBB83_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB83_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB83_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB83_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB83_121
.LBB83_111:                             # %if.then381
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_114
.LBB83_113:                             # %cond.false396
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_114
.LBB83_114:                             # %cond.end397
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_117
.LBB83_116:                             # %cond.false413
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_117
.LBB83_117:                             # %cond.end414
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_120
.LBB83_119:                             # %cond.false430
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_120
.LBB83_120:                             # %cond.end431
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB83_161
.LBB83_121:                             # %if.else433
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_126
.LBB83_125:                             # %cond.false462
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_126:                             # %cond.end474
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_128
.LBB83_127:                             # %cond.false476
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_128
.LBB83_128:                             # %cond.end477
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_132
.LBB83_131:                             # %cond.false500
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_132:                             # %cond.end513
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_134
.LBB83_133:                             # %cond.false515
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_134
.LBB83_134:                             # %cond.end516
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB83_138
.LBB83_137:                             # %cond.false539
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB83_138:                             # %cond.end552
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_140
.LBB83_139:                             # %cond.false554
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_140
.LBB83_140:                             # %cond.end555
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB83_160
.LBB83_141:                             # %if.else557
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_145
.LBB83_144:                             # %cond.false580
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_145:                             # %cond.end592
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_147
.LBB83_146:                             # %cond.false594
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_147
.LBB83_147:                             # %cond.end595
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_151
.LBB83_150:                             # %cond.false619
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_151:                             # %cond.end631
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_153
.LBB83_152:                             # %cond.false633
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_153
.LBB83_153:                             # %cond.end634
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB83_157
.LBB83_156:                             # %cond.false658
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB83_157:                             # %cond.end670
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_159
.LBB83_158:                             # %cond.false672
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_159
.LBB83_159:                             # %cond.end673
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB83_160:                             # %if.end675
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_161
.LBB83_161:                             # %if.end676
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB83_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_166
.LBB83_165:                             # %cond.false696
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_166:                             # %cond.end708
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_168
.LBB83_167:                             # %cond.false710
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_168
.LBB83_168:                             # %cond.end711
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB83_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_172
.LBB83_171:                             # %cond.false729
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_172:                             # %cond.end741
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_174
.LBB83_173:                             # %cond.false743
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_174
.LBB83_174:                             # %cond.end744
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB83_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_178
.LBB83_177:                             # %cond.false762
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_178:                             # %cond.end774
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_180
.LBB83_179:                             # %cond.false776
                                        #   in Loop: Header=BB83_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB83_180
.LBB83_180:                             # %cond.end777
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB83_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB83_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB83_184
.LBB83_183:                             # %cond.false795
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB83_184:                             # %cond.end807
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_186
.LBB83_185:                             # %cond.false809
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-176(%rbp), %eax
.LBB83_186:                             # %cond.end810
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB83_187:                             # %if.end812
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB83_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	.LJTI83_0(,%rax,8), %rax
	jmpq	*%rax
.LBB83_189:                             # %sw.bb
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB83_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB83_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_193:                             # %if.end824
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_213
.LBB83_194:                             # %if.else825
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB83_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB83_197
.LBB83_196:                             # %cond.false831
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %edx
.LBB83_197:                             # %cond.end832
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB83_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB83_203
.LBB83_199:                             # %cond.false837
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB83_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB83_202
.LBB83_201:                             # %cond.false841
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB83_202:                             # %cond.end842
                                        #   in Loop: Header=BB83_108 Depth=1
.LBB83_203:                             # %cond.end844
                                        #   in Loop: Header=BB83_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB83_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB83_206
.LBB83_205:                             # %cond.false849
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %edx
.LBB83_206:                             # %cond.end850
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB83_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB83_212
.LBB83_208:                             # %cond.false855
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB83_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB83_211
.LBB83_210:                             # %cond.false859
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB83_211:                             # %cond.end860
                                        #   in Loop: Header=BB83_108 Depth=1
.LBB83_212:                             # %cond.end862
                                        #   in Loop: Header=BB83_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB83_213:                             # %if.end865
                                        #   in Loop: Header=BB83_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB83_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB83_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB83_222
.LBB83_217:                             # %if.else877
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB83_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB83_108 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB83_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB83_221
.LBB83_220:                             # %if.else886
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_221:                             # %if.end889
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_222
.LBB83_222:                             # %if.end890
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_223
.LBB83_223:                             # %if.end891
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_224:                             # %sw.bb892
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_226:                             # %if.end898
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_227:                             # %sw.bb899
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_229:                             # %if.end905
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_230:                             # %sw.bb906
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB83_232:                             # %if.end912
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_233:                             # %sw.default
                                        #   in Loop: Header=BB83_108 Depth=1
	jmp	.LBB83_234
.LBB83_234:                             # %sw.epilog
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB83_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_108
.LBB83_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB83_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB83_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB83_240
.LBB83_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB83_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB83_241:                             # %if.end929
	cmpl	$1893186397, -180(%rbp) # imm = 0x70D7BB5D
	jne	.LBB83_243
.LBB83_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_242
.Lfunc_end83:
	.size	SetMotionVectorPredictor.58, .Lfunc_end83-SetMotionVectorPredictor.58
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI83_0:
	.quad	.LBB83_189
	.quad	.LBB83_224
	.quad	.LBB83_227
	.quad	.LBB83_230
                                        # -- End function
	.text
	.globl	GetSkipCostMB.59        # -- Begin function GetSkipCostMB.59
	.p2align	4, 0x90
	.type	GetSkipCostMB.59,@function
GetSkipCostMB.59:                       # @GetSkipCostMB.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1788032754, -56(%rbp)  # imm = 0x6A9336F2
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
                                        #           Child Loop BB84_9 Depth 5
                                        #     Child Loop BB84_24 Depth 2
                                        #       Child Loop BB84_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB84_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB84_3:                               # %for.cond2
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
                                        #           Child Loop BB84_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB84_5:                               # %for.cond6
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_7 Depth 4
                                        #           Child Loop BB84_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB84_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB84_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB84_7:                               # %for.cond11
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        #       Parent Loop BB84_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB84_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB84_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB84_7 Depth=4
	movl	$0, -12(%rbp)
.LBB84_9:                               # %for.cond14
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        #       Parent Loop BB84_5 Depth=3
                                        #         Parent Loop BB84_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB84_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB84_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-640(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB84_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_9
.LBB84_12:                              # %for.end
                                        #   in Loop: Header=BB84_7 Depth=4
	jmp	.LBB84_13
.LBB84_13:                              # %for.inc39
                                        #   in Loop: Header=BB84_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_7
.LBB84_14:                              # %for.end41
                                        #   in Loop: Header=BB84_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB84_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB84_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB84_17
.LBB84_16:                              # %if.then
                                        #   in Loop: Header=BB84_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB84_17:                              # %if.end
                                        #   in Loop: Header=BB84_5 Depth=3
	jmp	.LBB84_18
.LBB84_18:                              # %for.inc45
                                        #   in Loop: Header=BB84_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB84_5
.LBB84_19:                              # %for.end47
                                        #   in Loop: Header=BB84_3 Depth=2
	jmp	.LBB84_20
.LBB84_20:                              # %for.inc48
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB84_3
.LBB84_21:                              # %for.end50
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB84_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB84_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB84_24:                              # %for.cond58
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB84_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB84_24 Depth=2
	movl	$0, -12(%rbp)
.LBB84_26:                              # %for.cond62
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB84_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB84_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-640(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB84_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_26
.LBB84_29:                              # %for.end75
                                        #   in Loop: Header=BB84_24 Depth=2
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc76
                                        #   in Loop: Header=BB84_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_24
.LBB84_31:                              # %for.end78
                                        #   in Loop: Header=BB84_1 Depth=1
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB84_32:                              # %if.end83
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_33
.LBB84_33:                              # %for.inc84
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB84_1
.LBB84_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$1788032754, -56(%rbp)  # imm = 0x6A9336F2
	jne	.LBB84_36
.LBB84_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_35
.Lfunc_end84:
	.size	GetSkipCostMB.59, .Lfunc_end84-GetSkipCostMB.59
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.60 # -- Begin function Get_Direct_Motion_Vectors.60
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.60,@function
Get_Direct_Motion_Vectors.60:           # @Get_Direct_Motion_Vectors.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$79521635, -232(%rbp)   # imm = 0x4BD6763
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB85_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB85_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB85_5
.LBB85_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB85_5:                               # %if.end
	jmp	.LBB85_7
.LBB85_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB85_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB85_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB85_34
# %bb.9:                                # %if.then16
	cmpl	$0, -112(%rbp)
	je	.LBB85_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_12
.LBB85_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_12
.LBB85_12:                              # %cond.end
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_15
.LBB85_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_15
.LBB85_15:                              # %cond.end38
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_18
.LBB85_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_18
.LBB85_18:                              # %cond.end54
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_21
.LBB85_20:                              # %cond.false69
	movswl	-52(%rbp), %eax
.LBB85_21:                              # %cond.end71
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB85_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_24
.LBB85_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_24
.LBB85_24:                              # %cond.end87
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_27
.LBB85_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_27
.LBB85_27:                              # %cond.end103
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_30
.LBB85_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_30
.LBB85_30:                              # %cond.end119
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_33
.LBB85_32:                              # %cond.false134
	movswl	-50(%rbp), %eax
.LBB85_33:                              # %cond.end136
	movw	%ax, -26(%rbp)
	jmp	.LBB85_150
.LBB85_34:                              # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB85_92
# %bb.35:                               # %if.then142
	cmpl	$0, -112(%rbp)
	je	.LBB85_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_39
.LBB85_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_40
.LBB85_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_40:                              # %cond.end181
	jmp	.LBB85_42
.LBB85_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_42
.LBB85_42:                              # %cond.end184
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_46
.LBB85_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_47
.LBB85_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_47:                              # %cond.end229
	jmp	.LBB85_49
.LBB85_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_49
.LBB85_49:                              # %cond.end232
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_53
.LBB85_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_54
.LBB85_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_54:                              # %cond.end277
	jmp	.LBB85_56
.LBB85_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_56
.LBB85_56:                              # %cond.end280
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_60
.LBB85_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_61
.LBB85_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_61:                              # %cond.end325
	jmp	.LBB85_63
.LBB85_62:                              # %cond.false327
	movswl	-52(%rbp), %eax
.LBB85_63:                              # %cond.end329
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB85_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_67
.LBB85_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_68
.LBB85_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_68:                              # %cond.end374
	jmp	.LBB85_70
.LBB85_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_70
.LBB85_70:                              # %cond.end377
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_74
.LBB85_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_75
.LBB85_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_75:                              # %cond.end422
	jmp	.LBB85_77
.LBB85_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_77
.LBB85_77:                              # %cond.end425
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_81
.LBB85_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_82
.LBB85_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_82:                              # %cond.end470
	jmp	.LBB85_84
.LBB85_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_84
.LBB85_84:                              # %cond.end473
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_88
.LBB85_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB85_89
.LBB85_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB85_89:                              # %cond.end518
	jmp	.LBB85_91
.LBB85_90:                              # %cond.false520
	movswl	-50(%rbp), %eax
.LBB85_91:                              # %cond.end522
	movw	%ax, -26(%rbp)
	jmp	.LBB85_149
.LBB85_92:                              # %if.else525
	cmpl	$0, -112(%rbp)
	je	.LBB85_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_96
.LBB85_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_97
.LBB85_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_97:                              # %cond.end567
	jmp	.LBB85_99
.LBB85_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_99
.LBB85_99:                              # %cond.end570
	movw	%ax, -32(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_103
.LBB85_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_104
.LBB85_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_104:                             # %cond.end615
	jmp	.LBB85_106
.LBB85_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_106
.LBB85_106:                             # %cond.end618
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_110
.LBB85_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_111
.LBB85_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_111:                             # %cond.end663
	jmp	.LBB85_113
.LBB85_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_113
.LBB85_113:                             # %cond.end666
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_117
.LBB85_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_118
.LBB85_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_118:                             # %cond.end711
	jmp	.LBB85_120
.LBB85_119:                             # %cond.false713
	movswl	-52(%rbp), %eax
.LBB85_120:                             # %cond.end715
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB85_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_124
.LBB85_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_125
.LBB85_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_125:                             # %cond.end760
	jmp	.LBB85_127
.LBB85_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_127
.LBB85_127:                             # %cond.end763
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB85_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_131
.LBB85_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_132
.LBB85_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_132:                             # %cond.end808
	jmp	.LBB85_134
.LBB85_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_134
.LBB85_134:                             # %cond.end811
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB85_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_138
.LBB85_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_139
.LBB85_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_139:                             # %cond.end856
	jmp	.LBB85_141
.LBB85_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB85_141
.LBB85_141:                             # %cond.end859
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB85_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB85_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB85_145
.LBB85_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB85_146
.LBB85_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB85_146:                             # %cond.end904
	jmp	.LBB85_148
.LBB85_147:                             # %cond.false906
	movswl	-50(%rbp), %eax
.LBB85_148:                             # %cond.end908
	movw	%ax, -26(%rbp)
.LBB85_149:                             # %if.end911
	jmp	.LBB85_150
.LBB85_150:                             # %if.end912
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_156
# %bb.151:                              # %land.lhs.true916
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_156
# %bb.152:                              # %cond.true920
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_154
# %bb.153:                              # %cond.true925
	movswl	-32(%rbp), %eax
	jmp	.LBB85_155
.LBB85_154:                             # %cond.false927
	movswl	-22(%rbp), %eax
.LBB85_155:                             # %cond.end929
	jmp	.LBB85_160
.LBB85_156:                             # %cond.false931
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_158
# %bb.157:                              # %cond.true936
	movswl	-32(%rbp), %eax
	jmp	.LBB85_159
.LBB85_158:                             # %cond.false938
	movswl	-22(%rbp), %eax
.LBB85_159:                             # %cond.end940
.LBB85_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_166
# %bb.161:                              # %land.lhs.true948
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB85_165
.LBB85_164:                             # %cond.false959
	movswl	-28(%rbp), %eax
.LBB85_165:                             # %cond.end961
	jmp	.LBB85_170
.LBB85_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB85_169
.LBB85_168:                             # %cond.false970
	movswl	-28(%rbp), %eax
.LBB85_169:                             # %cond.end972
.LBB85_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_176
# %bb.171:                              # %land.lhs.true980
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_176
# %bb.172:                              # %cond.true984
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_174
# %bb.173:                              # %cond.true989
	movswl	-30(%rbp), %eax
	jmp	.LBB85_175
.LBB85_174:                             # %cond.false991
	movswl	-24(%rbp), %eax
.LBB85_175:                             # %cond.end993
	jmp	.LBB85_180
.LBB85_176:                             # %cond.false995
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_178
# %bb.177:                              # %cond.true1000
	movswl	-30(%rbp), %eax
	jmp	.LBB85_179
.LBB85_178:                             # %cond.false1002
	movswl	-24(%rbp), %eax
.LBB85_179:                             # %cond.end1004
.LBB85_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB85_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB85_185
.LBB85_184:                             # %cond.false1023
	movswl	-26(%rbp), %eax
.LBB85_185:                             # %cond.end1025
	jmp	.LBB85_190
.LBB85_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB85_189
.LBB85_188:                             # %cond.false1034
	movswl	-26(%rbp), %eax
.LBB85_189:                             # %cond.end1036
.LBB85_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB85_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB85_194:                             # %if.end1055
	movl	$0, -4(%rbp)
.LBB85_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB85_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB85_197:                             # %for.cond1061
                                        #   Parent Loop BB85_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB85_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB85_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB85_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB85_203
.LBB85_202:                             # %if.else1102
                                        #   in Loop: Header=BB85_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB85_203:                             # %if.end1128
                                        #   in Loop: Header=BB85_197 Depth=2
	jmp	.LBB85_205
.LBB85_204:                             # %if.else1129
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB85_205:                             # %if.end1151
                                        #   in Loop: Header=BB85_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB85_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB85_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB85_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB85_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_210
.LBB85_209:                             # %if.else1187
                                        #   in Loop: Header=BB85_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB85_210:                             # %if.end1213
                                        #   in Loop: Header=BB85_197 Depth=2
	jmp	.LBB85_212
.LBB85_211:                             # %if.else1214
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB85_212:                             # %if.end1236
                                        #   in Loop: Header=BB85_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB85_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB85_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB85_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB85_215:                             # %if.end1255
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB85_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB85_221
.LBB85_217:                             # %if.else1269
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB85_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB85_220
.LBB85_219:                             # %if.else1283
                                        #   in Loop: Header=BB85_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB85_220:                             # %if.end1288
                                        #   in Loop: Header=BB85_197 Depth=2
	jmp	.LBB85_221
.LBB85_221:                             # %if.end1289
                                        #   in Loop: Header=BB85_197 Depth=2
	jmp	.LBB85_222
.LBB85_222:                             # %for.inc
                                        #   in Loop: Header=BB85_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_197
.LBB85_223:                             # %for.end
                                        #   in Loop: Header=BB85_195 Depth=1
	jmp	.LBB85_224
.LBB85_224:                             # %for.inc1290
                                        #   in Loop: Header=BB85_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_195
.LBB85_225:                             # %for.end1292
	jmp	.LBB85_259
.LBB85_226:                             # %if.else1293
	movl	$0, -4(%rbp)
.LBB85_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_229 Depth 2
                                        #       Child Loop BB85_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB85_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB85_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB85_229:                             # %for.cond1304
                                        #   Parent Loop BB85_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB85_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB85_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB85_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB85_234
.LBB85_233:                             # %cond.false1319
                                        #   in Loop: Header=BB85_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB85_234
.LBB85_234:                             # %cond.end1320
                                        #   in Loop: Header=BB85_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB85_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB85_254
.LBB85_236:                             # %if.else1393
                                        #   in Loop: Header=BB85_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB85_237:                             # %for.cond1394
                                        #   Parent Loop BB85_227 Depth=1
                                        #     Parent Loop BB85_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB85_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB85_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB85_240
.LBB85_239:                             # %cond.false1402
                                        #   in Loop: Header=BB85_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB85_240:                             # %cond.end1406
                                        #   in Loop: Header=BB85_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB85_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB85_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB85_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB85_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB85_247
.LBB85_243:                             # %if.else1425
                                        #   in Loop: Header=BB85_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB85_237 Depth=3
	jmp	.LBB85_245
.LBB85_245:                             # %for.inc1427
                                        #   in Loop: Header=BB85_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB85_237
.LBB85_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB85_229 Depth=2
	jmp	.LBB85_247
.LBB85_247:                             # %for.end1429
                                        #   in Loop: Header=BB85_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB85_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB85_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB85_251
.LBB85_250:                             # %if.else1487
                                        #   in Loop: Header=BB85_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB85_251:                             # %if.end1571
                                        #   in Loop: Header=BB85_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB85_253
.LBB85_252:                             # %if.else1587
                                        #   in Loop: Header=BB85_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB85_253:                             # %if.end1602
                                        #   in Loop: Header=BB85_229 Depth=2
	jmp	.LBB85_254
.LBB85_254:                             # %if.end1603
                                        #   in Loop: Header=BB85_229 Depth=2
	jmp	.LBB85_255
.LBB85_255:                             # %for.inc1604
                                        #   in Loop: Header=BB85_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_229
.LBB85_256:                             # %for.end1606
                                        #   in Loop: Header=BB85_227 Depth=1
	jmp	.LBB85_257
.LBB85_257:                             # %for.inc1607
                                        #   in Loop: Header=BB85_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_227
.LBB85_258:                             # %for.end1609
	jmp	.LBB85_259
.LBB85_259:                             # %if.end1610
	cmpl	$79521635, -232(%rbp)   # imm = 0x4BD6763
	jne	.LBB85_261
.LBB85_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_260
.Lfunc_end85:
	.size	Get_Direct_Motion_Vectors.60, .Lfunc_end85-Get_Direct_Motion_Vectors.60
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.61 # -- Begin function ClearFastFullIntegerSearch.61
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.61,@function
ClearFastFullIntegerSearch.61:          # @ClearFastFullIntegerSearch.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1104312809, -20(%rbp)  # imm = 0x41D279E9
	movl	$0, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
                                        #       Child Loop BB86_5 Depth 3
                                        #         Child Loop BB86_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB86_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_3:                               # %for.cond1
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_5 Depth 3
                                        #         Child Loop BB86_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB86_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	$1, -12(%rbp)
.LBB86_5:                               # %for.cond4
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB86_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB86_5 Depth=3
	movl	$0, -16(%rbp)
.LBB86_7:                               # %for.cond7
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_3 Depth=2
                                        #       Parent Loop BB86_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB86_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB86_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB86_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_7
.LBB86_10:                              # %for.end
                                        #   in Loop: Header=BB86_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB86_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_5
.LBB86_12:                              # %for.end24
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_14:                              # %for.end31
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB86_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB86_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB86_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB86_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_17
.LBB86_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$1104312809, -20(%rbp)  # imm = 0x41D279E9
	jne	.LBB86_22
.LBB86_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_21
.Lfunc_end86:
	.size	ClearFastFullIntegerSearch.61, .Lfunc_end86-ClearFastFullIntegerSearch.61
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.62 # -- Begin function SetupFastFullPelSearch.62
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.62,@function
SetupFastFullPelSearch.62:              # @SetupFastFullPelSearch.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$372014470, -144(%rbp)  # imm = 0x162C7D86
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB87_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB87_10
.LBB87_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB87_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB87_9:                               # %land.end
.LBB87_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movl	-8(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB87_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB87_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB87_14
.LBB87_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB87_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -152(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB87_18
.LBB87_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB87_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB87_24
.LBB87_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB87_23
.LBB87_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB87_23:                              # %cond.end82
.LBB87_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB87_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB87_27
.LBB87_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB87_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB87_33
.LBB87_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB87_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB87_32
.LBB87_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB87_32:                              # %cond.end122
.LBB87_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB87_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB87_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -80(%rbp)
.LBB87_37:                              # %for.cond155
                                        #   Parent Loop BB87_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB87_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB87_37 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB87_37
.LBB87_40:                              # %for.end
                                        #   in Loop: Header=BB87_35 Depth=1
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc165
                                        #   in Loop: Header=BB87_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_35
.LBB87_42:                              # %for.end167
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.43:                               # %land.lhs.true170
	movl	-76(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB87_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB87_47
# %bb.46:                               # %if.then181
	movl	$0, -116(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_48
.LBB87_47:                              # %if.else182
	movl	$1, -116(%rbp)
.LBB87_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -28(%rbp)
.LBB87_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB87_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-156(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB87_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_57
.LBB87_54:                              # %if.end209
                                        #   in Loop: Header=BB87_50 Depth=1
	jmp	.LBB87_55
.LBB87_55:                              # %for.inc210
                                        #   in Loop: Header=BB87_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_50
.LBB87_56:                              # %for.end212.loopexit
	jmp	.LBB87_57
.LBB87_57:                              # %for.end212
	jmp	.LBB87_58
.LBB87_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB87_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_69 Depth 2
                                        #       Child Loop BB87_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB87_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB87_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB87_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB87_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB87_59 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB87_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB87_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB87_67
.LBB87_66:                              # %if.else238
                                        #   in Loop: Header=BB87_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB87_67:                              # %if.end239
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_68
.LBB87_68:                              # %if.end240
                                        #   in Loop: Header=BB87_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -84(%rbp)
.LBB87_69:                              # %for.cond242
                                        #   Parent Loop BB87_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_71 Depth 3
	cmpl	$4, -84(%rbp)
	jge	.LBB87_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -60(%rbp)
.LBB87_71:                              # %for.cond246
                                        #   Parent Loop BB87_59 Depth=1
                                        #     Parent Loop BB87_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB87_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB87_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-92(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-152(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB87_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_71
.LBB87_74:                              # %for.end381
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB87_69 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB87_69
.LBB87_76:                              # %for.end404
                                        #   in Loop: Header=BB87_59 Depth=1
	jmp	.LBB87_77
.LBB87_77:                              # %for.inc405
                                        #   in Loop: Header=BB87_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_59
.LBB87_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-88(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$372014470, -144(%rbp)  # imm = 0x162C7D86
	jne	.LBB87_80
.LBB87_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_79
.Lfunc_end87:
	.size	SetupFastFullPelSearch.62, .Lfunc_end87-SetupFastFullPelSearch.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.63
.LCPI88_0:
	.quad	4602678819172646912     # double 0.5
.LCPI88_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.63
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.63,@function
SubPelBlockSearchBiPred.63:             # @SubPelBlockSearchBiPred.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI88_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1680912150, -196(%rbp) # imm = 0x6430AF16
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -152(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB88_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB88_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB88_4:                               # %cond.end
	jmp	.LBB88_6
.LBB88_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB88_6:                               # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_10
.LBB88_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB88_10
.LBB88_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -118(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB88_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_14
.LBB88_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_14:                              # %cond.end55
	jmp	.LBB88_16
.LBB88_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB88_16
.LBB88_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB88_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_20
.LBB88_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_20:                              # %cond.end82
	jmp	.LBB88_22
.LBB88_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB88_22
.LBB88_22:                              # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB88_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_26
.LBB88_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_26:                              # %cond.end106
	jmp	.LBB88_28
.LBB88_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB88_28
.LBB88_28:                              # %cond.end109
	movw	%ax, -170(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB88_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_32
.LBB88_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_32:                              # %cond.end130
	jmp	.LBB88_34
.LBB88_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB88_34
.LBB88_34:                              # %cond.end133
	movw	%ax, -176(%rbp)
	movswl	-176(%rbp), %eax
	movswl	-170(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB88_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB88_37
.LBB88_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB88_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB88_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB88_40
.LBB88_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB88_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-152(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_45
# %bb.41:                               # %land.lhs.true197
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_45
# %bb.42:                               # %land.lhs.true205
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_45
# %bb.43:                               # %land.lhs.true211
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB88_46
.LBB88_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB88_46:                              # %if.end
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_51
# %bb.47:                               # %land.lhs.true224
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_51
# %bb.48:                               # %land.lhs.true232
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_51
# %bb.49:                               # %land.lhs.true238
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB88_52
.LBB88_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB88_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB88_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_55 Depth 2
                                        #       Child Loop BB88_60 Depth 3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB88_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB88_55:                              # %for.cond283
                                        #   Parent Loop BB88_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_60 Depth 3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
                                        #       Child Loop BB88_175 Depth 3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB88_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB88_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_57:                              # %land.end
                                        #   in Loop: Header=BB88_55 Depth=2
	testb	$1, %al
	jne	.LBB88_58
	jmp	.LBB88_195
.LBB88_58:                              # %for.body289
                                        #   in Loop: Header=BB88_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB88_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$0, -40(%rbp)
.LBB88_60:                              # %for.cond304
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_162 Depth 4
                                        #           Child Loop BB88_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB88_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_67
.LBB88_63:                              # %cond.false345
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_66
.LBB88_65:                              # %cond.false369
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_66:                              # %cond.end389
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_67:                              # %cond.end391
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_73
.LBB88_69:                              # %cond.false421
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_72
.LBB88_71:                              # %cond.false448
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_72:                              # %cond.end470
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_73:                              # %cond.end472
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_79
.LBB88_75:                              # %cond.false505
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_78
.LBB88_77:                              # %cond.false532
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_78:                              # %cond.end554
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_79:                              # %cond.end556
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_85
.LBB88_81:                              # %cond.false589
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_84
.LBB88_83:                              # %cond.false616
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_84:                              # %cond.end638
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_85:                              # %cond.end640
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_91
.LBB88_87:                              # %cond.false681
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_90
.LBB88_89:                              # %cond.false706
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_90:                              # %cond.end726
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_91:                              # %cond.end728
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_97
.LBB88_93:                              # %cond.false759
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_96
.LBB88_95:                              # %cond.false786
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_96:                              # %cond.end808
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_97:                              # %cond.end810
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_103
.LBB88_99:                              # %cond.false843
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_102
.LBB88_101:                             # %cond.false870
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_102:                             # %cond.end892
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_103:                             # %cond.end894
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_109
.LBB88_105:                             # %cond.false927
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_108
.LBB88_107:                             # %cond.false954
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_108:                             # %cond.end976
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_109:                             # %cond.end978
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_115
.LBB88_111:                             # %cond.false1019
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_114
.LBB88_113:                             # %cond.false1044
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_114:                             # %cond.end1064
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_115:                             # %cond.end1066
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_121
.LBB88_117:                             # %cond.false1097
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_120
.LBB88_119:                             # %cond.false1124
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_120:                             # %cond.end1146
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_121:                             # %cond.end1148
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_127
.LBB88_123:                             # %cond.false1181
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_126
.LBB88_125:                             # %cond.false1208
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_126:                             # %cond.end1230
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_127:                             # %cond.end1232
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_133
.LBB88_129:                             # %cond.false1265
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_132
.LBB88_131:                             # %cond.false1292
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_132:                             # %cond.end1314
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_133:                             # %cond.end1316
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_139
.LBB88_135:                             # %cond.false1357
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_138
.LBB88_137:                             # %cond.false1382
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_138:                             # %cond.end1402
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_139:                             # %cond.end1404
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_145
.LBB88_141:                             # %cond.false1435
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_144
.LBB88_143:                             # %cond.false1462
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_144:                             # %cond.end1484
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_145:                             # %cond.end1486
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_151
.LBB88_147:                             # %cond.false1519
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_150
.LBB88_149:                             # %cond.false1546
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_150:                             # %cond.end1568
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_151:                             # %cond.end1570
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB88_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_157
.LBB88_153:                             # %cond.false1603
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB88_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_156
.LBB88_155:                             # %cond.false1630
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_156:                             # %cond.end1652
                                        #   in Loop: Header=BB88_60 Depth=3
.LBB88_157:                             # %cond.end1654
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB88_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB88_173
.LBB88_160:                             # %if.end1673
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_170
.LBB88_161:                             # %if.else1674
                                        #   in Loop: Header=BB88_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB88_162:                             # %for.cond1675
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB88_162 Depth=4
	movl	$0, -100(%rbp)
.LBB88_164:                             # %for.cond1679
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_60 Depth=3
                                        #         Parent Loop BB88_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB88_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB88_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_164
.LBB88_167:                             # %for.end
                                        #   in Loop: Header=BB88_162 Depth=4
	jmp	.LBB88_168
.LBB88_168:                             # %for.inc1694
                                        #   in Loop: Header=BB88_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB88_162
.LBB88_169:                             # %for.end1696
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_170
.LBB88_170:                             # %if.end1697
                                        #   in Loop: Header=BB88_60 Depth=3
	jmp	.LBB88_171
.LBB88_171:                             # %for.inc1698
                                        #   in Loop: Header=BB88_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_60
.LBB88_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_173
.LBB88_173:                             # %for.end1702
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_193
.LBB88_174:                             # %if.else1703
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$0, -40(%rbp)
.LBB88_175:                             # %for.cond1704
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_181 Depth 4
                                        #           Child Loop BB88_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB88_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB88_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB88_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB88_192
.LBB88_179:                             # %if.end2054
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_189
.LBB88_180:                             # %if.else2055
                                        #   in Loop: Header=BB88_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB88_181:                             # %for.cond2056
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	$0, -100(%rbp)
.LBB88_183:                             # %for.cond2060
                                        #   Parent Loop BB88_53 Depth=1
                                        #     Parent Loop BB88_55 Depth=2
                                        #       Parent Loop BB88_175 Depth=3
                                        #         Parent Loop BB88_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB88_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB88_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_183
.LBB88_186:                             # %for.end2077
                                        #   in Loop: Header=BB88_181 Depth=4
	jmp	.LBB88_187
.LBB88_187:                             # %for.inc2078
                                        #   in Loop: Header=BB88_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB88_181
.LBB88_188:                             # %for.end2080
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_189
.LBB88_189:                             # %if.end2081
                                        #   in Loop: Header=BB88_175 Depth=3
	jmp	.LBB88_190
.LBB88_190:                             # %for.inc2082
                                        #   in Loop: Header=BB88_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_175
.LBB88_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_192
.LBB88_192:                             # %for.end2086
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_193
.LBB88_193:                             # %if.end2087
                                        #   in Loop: Header=BB88_55 Depth=2
	jmp	.LBB88_194
.LBB88_194:                             # %for.inc2088
                                        #   in Loop: Header=BB88_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB88_55
.LBB88_195:                             # %for.end2092
                                        #   in Loop: Header=BB88_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB88_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB88_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB88_197:                             # %if.end2101
                                        #   in Loop: Header=BB88_53 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB88_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB88_53 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB88_199:                             # %if.end2107
                                        #   in Loop: Header=BB88_53 Depth=1
	jmp	.LBB88_200
.LBB88_200:                             # %for.inc2108
                                        #   in Loop: Header=BB88_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB88_53
.LBB88_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB88_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB88_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB88_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB88_205:                             # %if.end2129
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB88_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB88_211
.LBB88_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB88_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB88_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_214 Depth 2
                                        #       Child Loop BB88_219 Depth 3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
                                        #       Child Loop BB88_334 Depth 3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB88_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB88_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB88_214:                             # %for.cond2194
                                        #   Parent Loop BB88_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_219 Depth 3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
                                        #       Child Loop BB88_334 Depth 3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB88_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB88_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_216:                             # %land.end2202
                                        #   in Loop: Header=BB88_214 Depth=2
	testb	$1, %al
	jne	.LBB88_217
	jmp	.LBB88_354
.LBB88_217:                             # %for.body2203
                                        #   in Loop: Header=BB88_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB88_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$0, -40(%rbp)
.LBB88_219:                             # %for.cond2218
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_321 Depth 4
                                        #           Child Loop BB88_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB88_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_226
.LBB88_222:                             # %cond.false2261
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_225
.LBB88_224:                             # %cond.false2286
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_225:                             # %cond.end2306
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_226:                             # %cond.end2308
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_232
.LBB88_228:                             # %cond.false2339
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_231
.LBB88_230:                             # %cond.false2366
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_231:                             # %cond.end2388
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_232:                             # %cond.end2390
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_238
.LBB88_234:                             # %cond.false2423
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_237
.LBB88_236:                             # %cond.false2450
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_237:                             # %cond.end2472
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_238:                             # %cond.end2474
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_244
.LBB88_240:                             # %cond.false2507
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_243
.LBB88_242:                             # %cond.false2534
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_243:                             # %cond.end2556
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_244:                             # %cond.end2558
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_250
.LBB88_246:                             # %cond.false2599
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_249
.LBB88_248:                             # %cond.false2624
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_249:                             # %cond.end2644
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_250:                             # %cond.end2646
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_256
.LBB88_252:                             # %cond.false2677
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_255
.LBB88_254:                             # %cond.false2704
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_255:                             # %cond.end2726
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_256:                             # %cond.end2728
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_262
.LBB88_258:                             # %cond.false2761
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_261
.LBB88_260:                             # %cond.false2788
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_261:                             # %cond.end2810
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_262:                             # %cond.end2812
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_268
.LBB88_264:                             # %cond.false2845
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_267
.LBB88_266:                             # %cond.false2872
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_267:                             # %cond.end2894
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_268:                             # %cond.end2896
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_274
.LBB88_270:                             # %cond.false2937
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_273
.LBB88_272:                             # %cond.false2962
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_273:                             # %cond.end2982
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_274:                             # %cond.end2984
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_280
.LBB88_276:                             # %cond.false3015
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_279
.LBB88_278:                             # %cond.false3042
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_279:                             # %cond.end3064
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_280:                             # %cond.end3066
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_286
.LBB88_282:                             # %cond.false3099
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_285
.LBB88_284:                             # %cond.false3126
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_285:                             # %cond.end3148
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_286:                             # %cond.end3150
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_292
.LBB88_288:                             # %cond.false3183
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_291
.LBB88_290:                             # %cond.false3210
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_291:                             # %cond.end3232
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_292:                             # %cond.end3234
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_298
.LBB88_294:                             # %cond.false3275
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_297
.LBB88_296:                             # %cond.false3300
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_297:                             # %cond.end3320
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_298:                             # %cond.end3322
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_304
.LBB88_300:                             # %cond.false3353
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_303
.LBB88_302:                             # %cond.false3380
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_303:                             # %cond.end3402
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_304:                             # %cond.end3404
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_310
.LBB88_306:                             # %cond.false3437
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_309
.LBB88_308:                             # %cond.false3464
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_309:                             # %cond.end3486
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_310:                             # %cond.end3488
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB88_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB88_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB88_316
.LBB88_312:                             # %cond.false3521
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB88_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB88_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB88_315
.LBB88_314:                             # %cond.false3548
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB88_315:                             # %cond.end3570
                                        #   in Loop: Header=BB88_219 Depth=3
.LBB88_316:                             # %cond.end3572
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB88_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB88_332
.LBB88_319:                             # %if.end3593
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_329
.LBB88_320:                             # %if.else3594
                                        #   in Loop: Header=BB88_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB88_321:                             # %for.cond3595
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB88_321 Depth=4
	movl	$0, -100(%rbp)
.LBB88_323:                             # %for.cond3599
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_219 Depth=3
                                        #         Parent Loop BB88_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB88_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB88_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_323
.LBB88_326:                             # %for.end3616
                                        #   in Loop: Header=BB88_321 Depth=4
	jmp	.LBB88_327
.LBB88_327:                             # %for.inc3617
                                        #   in Loop: Header=BB88_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB88_321
.LBB88_328:                             # %for.end3619
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_329
.LBB88_329:                             # %if.end3620
                                        #   in Loop: Header=BB88_219 Depth=3
	jmp	.LBB88_330
.LBB88_330:                             # %for.inc3621
                                        #   in Loop: Header=BB88_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_219
.LBB88_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_332
.LBB88_332:                             # %for.end3625
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_352
.LBB88_333:                             # %if.else3626
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$0, -40(%rbp)
.LBB88_334:                             # %for.cond3627
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_340 Depth 4
                                        #           Child Loop BB88_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB88_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB88_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB88_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB88_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB88_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB88_351
.LBB88_338:                             # %if.end3978
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_348
.LBB88_339:                             # %if.else3979
                                        #   in Loop: Header=BB88_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB88_340:                             # %for.cond3980
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB88_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB88_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB88_340 Depth=4
	movl	$0, -100(%rbp)
.LBB88_342:                             # %for.cond3984
                                        #   Parent Loop BB88_212 Depth=1
                                        #     Parent Loop BB88_214 Depth=2
                                        #       Parent Loop BB88_334 Depth=3
                                        #         Parent Loop BB88_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB88_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB88_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB88_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB88_342
.LBB88_345:                             # %for.end4001
                                        #   in Loop: Header=BB88_340 Depth=4
	jmp	.LBB88_346
.LBB88_346:                             # %for.inc4002
                                        #   in Loop: Header=BB88_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB88_340
.LBB88_347:                             # %for.end4004
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_348
.LBB88_348:                             # %if.end4005
                                        #   in Loop: Header=BB88_334 Depth=3
	jmp	.LBB88_349
.LBB88_349:                             # %for.inc4006
                                        #   in Loop: Header=BB88_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB88_334
.LBB88_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_351
.LBB88_351:                             # %for.end4010
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_352
.LBB88_352:                             # %if.end4011
                                        #   in Loop: Header=BB88_214 Depth=2
	jmp	.LBB88_353
.LBB88_353:                             # %for.inc4012
                                        #   in Loop: Header=BB88_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB88_214
.LBB88_354:                             # %for.end4016
                                        #   in Loop: Header=BB88_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB88_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB88_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB88_356:                             # %if.end4026
                                        #   in Loop: Header=BB88_212 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB88_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB88_212 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB88_358:                             # %if.end4032
                                        #   in Loop: Header=BB88_212 Depth=1
	jmp	.LBB88_359
.LBB88_359:                             # %for.inc4033
                                        #   in Loop: Header=BB88_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB88_212
.LBB88_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB88_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB88_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1680912150, -196(%rbp) # imm = 0x6430AF16
	jne	.LBB88_364
.LBB88_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_363
.Lfunc_end88:
	.size	SubPelBlockSearchBiPred.63, .Lfunc_end88-SubPelBlockSearchBiPred.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.64
.LCPI89_0:
	.quad	4602678819172646912     # double 0.5
.LCPI89_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.64
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.64,@function
FullPelBlockMotionSearch.64:            # @FullPelBlockMotionSearch.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$671066406, -116(%rbp)  # imm = 0x27FFA926
	movq	%rdi, -176(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -60(%rbp)
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB89_4
.LBB89_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB89_4
.LBB89_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -24(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -132(%rbp)
	movl	-28(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -120(%rbp)
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-60(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-60(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -144(%rbp)
	movl	-88(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -148(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-88(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movl	-64(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$1, -60(%rbp)
	jne	.LBB89_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB89_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB89_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB89_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB89_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB89_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB89_14
.LBB89_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB89_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB89_13:                              # %land.end63
.LBB89_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	je	.LBB89_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB89_17
# %bb.16:                               # %if.then
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB89_18
.LBB89_17:                              # %if.else
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB89_18:                              # %if.end
	movl	-76(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB89_23
# %bb.19:                               # %land.lhs.true81
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_23
# %bb.20:                               # %land.lhs.true86
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB89_23
# %bb.21:                               # %land.lhs.true89
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB89_24
.LBB89_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB89_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB89_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_33 Depth 2
                                        #       Child Loop BB89_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB89_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-84(%rbp), %edx
	shll	$2, %edx
	subl	-148(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-72(%rbp), %esi
	shll	$2, %esi
	subl	-140(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -124(%rbp)
	je	.LBB89_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jne	.LBB89_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB89_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB89_30:                              # %if.end128
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB89_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB89_25 Depth=1
	jmp	.LBB89_46
.LBB89_32:                              # %if.end132
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	$0, -32(%rbp)
.LBB89_33:                              # %for.cond133
                                        #   Parent Loop BB89_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB89_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB89_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-68(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-72(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-136(%rbp), %r8d
	movl	-132(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-176(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -92(%rbp)
.LBB89_35:                              # %for.cond140
                                        #   Parent Loop BB89_25 Depth=1
                                        #     Parent Loop BB89_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB89_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB89_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB89_35 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB89_35
.LBB89_38:                              # %for.end
                                        #   in Loop: Header=BB89_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB89_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB89_25 Depth=1
	jmp	.LBB89_43
.LBB89_40:                              # %if.end178
                                        #   in Loop: Header=BB89_33 Depth=2
	jmp	.LBB89_41
.LBB89_41:                              # %for.inc179
                                        #   in Loop: Header=BB89_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB89_33
.LBB89_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB89_25 Depth=1
	jmp	.LBB89_43
.LBB89_43:                              # %for.end181
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB89_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB89_45:                              # %if.end185
                                        #   in Loop: Header=BB89_25 Depth=1
	jmp	.LBB89_46
.LBB89_46:                              # %for.inc186
                                        #   in Loop: Header=BB89_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_25
.LBB89_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB89_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB89_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$671066406, -116(%rbp)  # imm = 0x27FFA926
	jne	.LBB89_51
.LBB89_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_50
.Lfunc_end89:
	.size	FullPelBlockMotionSearch.64, .Lfunc_end89-FullPelBlockMotionSearch.64
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.65 # -- Begin function FindSkipModeMotionVector.65
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.65,@function
FindSkipModeMotionVector.65:            # @FindSkipModeMotionVector.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1236314175, -52(%rbp)  # imm = 0x49B0A83F
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -112(%rbp)
	je	.LBB90_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB90_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB90_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB90_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB90_7:                               # %if.end36
	jmp	.LBB90_8
.LBB90_8:                               # %if.end37
	cmpl	$0, -88(%rbp)
	je	.LBB90_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB90_12
# %bb.11:                               # %if.then69
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB90_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB90_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB90_15
# %bb.14:                               # %if.then82
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB90_15:                              # %if.end85
	jmp	.LBB90_16
.LBB90_16:                              # %if.end86
	cmpl	$0, -112(%rbp)
	jne	.LBB90_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB90_22
.LBB90_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB90_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB90_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB90_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB90_22:                              # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.LBB90_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB90_28
.LBB90_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB90_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB90_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB90_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB90_28:                              # %cond.end130
	movl	%ecx, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.LBB90_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -60(%rbp)
	je	.LBB90_39
.LBB90_30:                              # %if.then134
	movl	$0, -4(%rbp)
.LBB90_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_33 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB90_31 Depth=1
	movl	$0, -8(%rbp)
.LBB90_33:                              # %for.cond137
                                        #   Parent Loop BB90_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB90_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB90_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_33
.LBB90_36:                              # %for.end
                                        #   in Loop: Header=BB90_31 Depth=1
	jmp	.LBB90_37
.LBB90_37:                              # %for.inc157
                                        #   in Loop: Header=BB90_31 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_31
.LBB90_38:                              # %for.end159
	jmp	.LBB90_48
.LBB90_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -4(%rbp)
.LBB90_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_42 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB90_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	$0, -8(%rbp)
.LBB90_42:                              # %for.cond166
                                        #   Parent Loop BB90_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB90_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB90_42 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_42
.LBB90_45:                              # %for.end190
                                        #   in Loop: Header=BB90_40 Depth=1
	jmp	.LBB90_46
.LBB90_46:                              # %for.inc191
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_40
.LBB90_47:                              # %for.end193
	jmp	.LBB90_48
.LBB90_48:                              # %if.end194
	cmpl	$1236314175, -52(%rbp)  # imm = 0x49B0A83F
	jne	.LBB90_50
.LBB90_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_49
.Lfunc_end90:
	.size	FindSkipModeMotionVector.65, .Lfunc_end90-FindSkipModeMotionVector.65
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.66 # -- Begin function ClearFastFullIntegerSearch.66
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.66,@function
ClearFastFullIntegerSearch.66:          # @ClearFastFullIntegerSearch.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$707857315, -20(%rbp)   # imm = 0x2A310BA3
	movl	$0, -4(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_3 Depth 2
                                        #       Child Loop BB91_5 Depth 3
                                        #         Child Loop BB91_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB91_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	$0, -8(%rbp)
.LBB91_3:                               # %for.cond1
                                        #   Parent Loop BB91_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_5 Depth 3
                                        #         Child Loop BB91_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB91_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	$1, -12(%rbp)
.LBB91_5:                               # %for.cond4
                                        #   Parent Loop BB91_1 Depth=1
                                        #     Parent Loop BB91_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB91_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB91_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB91_5 Depth=3
	movl	$0, -16(%rbp)
.LBB91_7:                               # %for.cond7
                                        #   Parent Loop BB91_1 Depth=1
                                        #     Parent Loop BB91_3 Depth=2
                                        #       Parent Loop BB91_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB91_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB91_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB91_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB91_7
.LBB91_10:                              # %for.end
                                        #   in Loop: Header=BB91_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB91_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_5
.LBB91_12:                              # %for.end24
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_3
.LBB91_14:                              # %for.end31
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_1
.LBB91_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB91_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB91_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB91_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB91_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_17
.LBB91_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$707857315, -20(%rbp)   # imm = 0x2A310BA3
	jne	.LBB91_22
.LBB91_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_21
.Lfunc_end91:
	.size	ClearFastFullIntegerSearch.66, .Lfunc_end91-ClearFastFullIntegerSearch.66
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.67 # -- Begin function SetupFastFullPelSearch.67
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.67,@function
SetupFastFullPelSearch.67:              # @SetupFastFullPelSearch.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$615616603, -156(%rbp)  # imm = 0x24B1905B
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB92_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB92_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB92_4
.LBB92_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB92_4
.LBB92_4:                               # %cond.end
	movl	%ecx, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB92_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB92_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB92_10
.LBB92_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB92_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB92_9:                               # %land.end
.LBB92_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	movl	-8(%rbp), %eax
	addl	-140(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB92_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB92_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB92_14
.LBB92_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB92_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -148(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -152(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB92_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB92_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB92_18
.LBB92_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB92_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB92_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB92_24
.LBB92_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB92_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB92_23
.LBB92_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB92_23:                              # %cond.end82
.LBB92_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB92_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB92_27
.LBB92_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB92_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB92_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB92_33
.LBB92_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB92_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB92_32
.LBB92_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB92_32:                              # %cond.end122
.LBB92_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB92_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB92_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB92_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -80(%rbp)
.LBB92_37:                              # %for.cond155
                                        #   Parent Loop BB92_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB92_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB92_37 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB92_37
.LBB92_40:                              # %for.end
                                        #   in Loop: Header=BB92_35 Depth=1
	jmp	.LBB92_41
.LBB92_41:                              # %for.inc165
                                        #   in Loop: Header=BB92_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB92_35
.LBB92_42:                              # %for.end167
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB92_47
# %bb.43:                               # %land.lhs.true170
	movl	-76(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB92_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB92_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB92_47
# %bb.46:                               # %if.then181
	movl	$0, -112(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB92_48
.LBB92_47:                              # %if.else182
	movl	$1, -112(%rbp)
.LBB92_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB92_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB92_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB92_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB92_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB92_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB92_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB92_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB92_57
.LBB92_54:                              # %if.end209
                                        #   in Loop: Header=BB92_50 Depth=1
	jmp	.LBB92_55
.LBB92_55:                              # %for.inc210
                                        #   in Loop: Header=BB92_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_50
.LBB92_56:                              # %for.end212.loopexit
	jmp	.LBB92_57
.LBB92_57:                              # %for.end212
	jmp	.LBB92_58
.LBB92_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB92_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_69 Depth 2
                                        #       Child Loop BB92_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB92_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB92_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB92_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB92_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB92_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB92_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB92_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB92_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB92_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB92_67
.LBB92_66:                              # %if.else238
                                        #   in Loop: Header=BB92_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB92_67:                              # %if.end239
                                        #   in Loop: Header=BB92_59 Depth=1
	jmp	.LBB92_68
.LBB92_68:                              # %if.end240
                                        #   in Loop: Header=BB92_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB92_69:                              # %for.cond242
                                        #   Parent Loop BB92_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB92_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB92_69 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -64(%rbp)
.LBB92_71:                              # %for.cond246
                                        #   Parent Loop BB92_59 Depth=1
                                        #     Parent Loop BB92_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB92_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB92_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-88(%rbp), %edx
	movl	-152(%rbp), %ecx
	movl	-148(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB92_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB92_71
.LBB92_74:                              # %for.end381
                                        #   in Loop: Header=BB92_69 Depth=2
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB92_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB92_69
.LBB92_76:                              # %for.end404
                                        #   in Loop: Header=BB92_59 Depth=1
	jmp	.LBB92_77
.LBB92_77:                              # %for.inc405
                                        #   in Loop: Header=BB92_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_59
.LBB92_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$615616603, -156(%rbp)  # imm = 0x24B1905B
	jne	.LBB92_80
.LBB92_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_79
.Lfunc_end92:
	.size	SetupFastFullPelSearch.67, .Lfunc_end92-SetupFastFullPelSearch.67
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.68 # -- Begin function InitializeFastFullIntegerSearch.68
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.68,@function
InitializeFastFullIntegerSearch.68:     # @InitializeFastFullIntegerSearch.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1434690446, -24(%rbp)  # imm = 0x5583A38E
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB93_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB93_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_7 Depth 2
                                        #       Child Loop BB93_11 Depth 3
                                        #         Child Loop BB93_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB93_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB93_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB93_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_6:                               # %if.end12
                                        #   in Loop: Header=BB93_3 Depth=1
	movl	$0, -8(%rbp)
.LBB93_7:                               # %for.cond13
                                        #   Parent Loop BB93_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_11 Depth 3
                                        #         Child Loop BB93_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB93_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB93_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_10:                              # %if.end26
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	$1, -12(%rbp)
.LBB93_11:                              # %for.cond27
                                        #   Parent Loop BB93_3 Depth=1
                                        #     Parent Loop BB93_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB93_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB93_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_14:                              # %if.end41
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	$0, -20(%rbp)
.LBB93_15:                              # %for.cond42
                                        #   Parent Loop BB93_3 Depth=1
                                        #     Parent Loop BB93_7 Depth=2
                                        #       Parent Loop BB93_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB93_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB93_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB93_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB93_18:                              # %if.end60
                                        #   in Loop: Header=BB93_15 Depth=4
	jmp	.LBB93_19
.LBB93_19:                              # %for.inc
                                        #   in Loop: Header=BB93_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_15
.LBB93_20:                              # %for.end
                                        #   in Loop: Header=BB93_11 Depth=3
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc61
                                        #   in Loop: Header=BB93_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_11
.LBB93_22:                              # %for.end63
                                        #   in Loop: Header=BB93_7 Depth=2
	jmp	.LBB93_23
.LBB93_23:                              # %for.inc64
                                        #   in Loop: Header=BB93_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_7
.LBB93_24:                              # %for.end66
                                        #   in Loop: Header=BB93_3 Depth=1
	jmp	.LBB93_25
.LBB93_25:                              # %for.inc67
                                        #   in Loop: Header=BB93_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_3
.LBB93_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB93_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB93_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB93_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB93_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB93_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB93_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB93_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB93_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB93_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB93_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB93_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB93_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB93_40:                              # %if.end109
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB93_42:                              # %if.end120
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB93_44:                              # %if.end131
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB93_46:                              # %if.end142
                                        #   in Loop: Header=BB93_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB93_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB93_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB93_48:                              # %if.end153
                                        #   in Loop: Header=BB93_37 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc154
                                        #   in Loop: Header=BB93_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_37
.LBB93_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB93_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB93_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB93_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	$0, -8(%rbp)
.LBB93_54:                              # %for.cond164
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB93_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end175
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc176
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end178
	jmp	.LBB93_69
.LBB93_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB93_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB93_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB93_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB93_63:                              # %for.cond191
                                        #   Parent Loop BB93_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB93_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB93_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB93_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_63
.LBB93_66:                              # %for.end202
                                        #   in Loop: Header=BB93_61 Depth=1
	jmp	.LBB93_67
.LBB93_67:                              # %for.inc203
                                        #   in Loop: Header=BB93_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_61
.LBB93_68:                              # %for.end205
	jmp	.LBB93_69
.LBB93_69:                              # %if.end206
	cmpl	$1434690446, -24(%rbp)  # imm = 0x5583A38E
	jne	.LBB93_71
.LBB93_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_70
.Lfunc_end93:
	.size	InitializeFastFullIntegerSearch.68, .Lfunc_end93-InitializeFastFullIntegerSearch.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.69
.LCPI94_0:
	.quad	4602678819172646912     # double 0.5
.LCPI94_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.69
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.69,@function
SubPelBlockMotionSearch.69:             # @SubPelBlockMotionSearch.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI94_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1114097060, -188(%rbp) # imm = 0x4267C5A4
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -152(%rbp)
	movl	%ecx, -144(%rbp)
	movl	%r8d, -140(%rbp)
	movl	%r9d, -108(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -156(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -108(%rbp)
	jne	.LBB94_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB94_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB94_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB94_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB94_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB94_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB94_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -192(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-108(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB94_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB94_10
.LBB94_10:                              # %cond.end
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB94_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB94_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB94_14
.LBB94_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB94_14:                              # %cond.end35
	jmp	.LBB94_16
.LBB94_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB94_16:                              # %cond.end38
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB94_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB94_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB94_20
.LBB94_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB94_20
.LBB94_20:                              # %cond.end50
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB94_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB94_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB94_26
.LBB94_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB94_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB94_25:                              # %land.end65
.LBB94_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB94_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB94_29
.LBB94_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB94_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-152(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB94_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB94_32
# %bb.31:                               # %if.then
	movl	-152(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB94_33
.LBB94_32:                              # %if.else
	movl	-152(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB94_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-132(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-136(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB94_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB94_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB94_39
.LBB94_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB94_39:                              # %if.end131
	movl	$0, -80(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB94_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_47 Depth 2
                                        #       Child Loop BB94_51 Depth 3
                                        #         Child Loop BB94_57 Depth 4
                                        #           Child Loop BB94_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB94_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB94_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -192(%rbp)
	je	.LBB94_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB94_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB94_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	-156(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB94_44:                              # %if.end164
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB94_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB94_40 Depth=1
	jmp	.LBB94_75
.LBB94_46:                              # %if.end168
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB94_47:                              # %for.cond169
                                        #   Parent Loop BB94_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_51 Depth 3
                                        #         Child Loop BB94_57 Depth 4
                                        #           Child Loop BB94_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-136(%rbp), %ecx
	jge	.LBB94_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB94_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB94_49:                              # %land.end174
                                        #   in Loop: Header=BB94_47 Depth=2
	testb	$1, %al
	jne	.LBB94_50
	jmp	.LBB94_70
.LBB94_50:                              # %for.body176
                                        #   in Loop: Header=BB94_47 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB94_51:                              # %for.cond180
                                        #   Parent Loop BB94_40 Depth=1
                                        #     Parent Loop BB94_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_57 Depth 4
                                        #           Child Loop BB94_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB94_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB94_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-144(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB94_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB94_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB94_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB94_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB94_68
.LBB94_55:                              # %if.end342
                                        #   in Loop: Header=BB94_51 Depth=3
	jmp	.LBB94_65
.LBB94_56:                              # %if.else343
                                        #   in Loop: Header=BB94_51 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB94_57:                              # %for.cond344
                                        #   Parent Loop BB94_40 Depth=1
                                        #     Parent Loop BB94_47 Depth=2
                                        #       Parent Loop BB94_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB94_59 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB94_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB94_57 Depth=4
	movl	$0, -76(%rbp)
.LBB94_59:                              # %for.cond348
                                        #   Parent Loop BB94_40 Depth=1
                                        #     Parent Loop BB94_47 Depth=2
                                        #       Parent Loop BB94_51 Depth=3
                                        #         Parent Loop BB94_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB94_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB94_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB94_59 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB94_59
.LBB94_62:                              # %for.end
                                        #   in Loop: Header=BB94_57 Depth=4
	jmp	.LBB94_63
.LBB94_63:                              # %for.inc361
                                        #   in Loop: Header=BB94_57 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB94_57
.LBB94_64:                              # %for.end363
                                        #   in Loop: Header=BB94_51 Depth=3
	jmp	.LBB94_65
.LBB94_65:                              # %if.end364
                                        #   in Loop: Header=BB94_51 Depth=3
	jmp	.LBB94_66
.LBB94_66:                              # %for.inc365
                                        #   in Loop: Header=BB94_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_51
.LBB94_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB94_47 Depth=2
	jmp	.LBB94_68
.LBB94_68:                              # %for.end367
                                        #   in Loop: Header=BB94_47 Depth=2
	jmp	.LBB94_69
.LBB94_69:                              # %for.inc368
                                        #   in Loop: Header=BB94_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB94_47
.LBB94_70:                              # %for.end370
                                        #   in Loop: Header=BB94_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB94_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB94_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB94_72:                              # %if.end377
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB94_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB94_74:                              # %if.end381
                                        #   in Loop: Header=BB94_40 Depth=1
	jmp	.LBB94_75
.LBB94_75:                              # %for.inc382
                                        #   in Loop: Header=BB94_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB94_40
.LBB94_76:                              # %for.end384
	cmpl	$0, -80(%rbp)
	je	.LBB94_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB94_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB94_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB94_80:                              # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB94_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB94_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB94_86
.LBB94_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB94_86:                              # %if.end427
	movl	$0, -80(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB94_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_91 Depth 2
                                        #       Child Loop BB94_95 Depth 3
                                        #         Child Loop BB94_101 Depth 4
                                        #           Child Loop BB94_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB94_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB94_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-96(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB94_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB94_87 Depth=1
	jmp	.LBB94_119
.LBB94_90:                              # %if.end456
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB94_91:                              # %for.cond457
                                        #   Parent Loop BB94_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_95 Depth 3
                                        #         Child Loop BB94_101 Depth 4
                                        #           Child Loop BB94_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-136(%rbp), %ecx
	jge	.LBB94_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB94_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB94_93:                              # %land.end463
                                        #   in Loop: Header=BB94_91 Depth=2
	testb	$1, %al
	jne	.LBB94_94
	jmp	.LBB94_114
.LBB94_94:                              # %for.body465
                                        #   in Loop: Header=BB94_91 Depth=2
	movl	-140(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-96(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB94_95:                              # %for.cond469
                                        #   Parent Loop BB94_87 Depth=1
                                        #     Parent Loop BB94_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_101 Depth 4
                                        #           Child Loop BB94_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB94_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB94_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-144(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB94_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB94_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB94_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB94_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB94_112
.LBB94_99:                              # %if.end636
                                        #   in Loop: Header=BB94_95 Depth=3
	jmp	.LBB94_109
.LBB94_100:                             # %if.else637
                                        #   in Loop: Header=BB94_95 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB94_101:                             # %for.cond638
                                        #   Parent Loop BB94_87 Depth=1
                                        #     Parent Loop BB94_91 Depth=2
                                        #       Parent Loop BB94_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB94_103 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB94_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB94_101 Depth=4
	movl	$0, -76(%rbp)
.LBB94_103:                             # %for.cond642
                                        #   Parent Loop BB94_87 Depth=1
                                        #     Parent Loop BB94_91 Depth=2
                                        #       Parent Loop BB94_95 Depth=3
                                        #         Parent Loop BB94_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB94_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB94_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB94_103 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB94_103
.LBB94_106:                             # %for.end657
                                        #   in Loop: Header=BB94_101 Depth=4
	jmp	.LBB94_107
.LBB94_107:                             # %for.inc658
                                        #   in Loop: Header=BB94_101 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB94_101
.LBB94_108:                             # %for.end660
                                        #   in Loop: Header=BB94_95 Depth=3
	jmp	.LBB94_109
.LBB94_109:                             # %if.end661
                                        #   in Loop: Header=BB94_95 Depth=3
	jmp	.LBB94_110
.LBB94_110:                             # %for.inc662
                                        #   in Loop: Header=BB94_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_95
.LBB94_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB94_91 Depth=2
	jmp	.LBB94_112
.LBB94_112:                             # %for.end664
                                        #   in Loop: Header=BB94_91 Depth=2
	jmp	.LBB94_113
.LBB94_113:                             # %for.inc665
                                        #   in Loop: Header=BB94_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB94_91
.LBB94_114:                             # %for.end667
                                        #   in Loop: Header=BB94_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB94_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB94_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-108(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB94_116:                             # %if.end675
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB94_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB94_118:                             # %if.end679
                                        #   in Loop: Header=BB94_87 Depth=1
	jmp	.LBB94_119
.LBB94_119:                             # %for.inc680
                                        #   in Loop: Header=BB94_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB94_87
.LBB94_120:                             # %for.end682
	cmpl	$0, -80(%rbp)
	je	.LBB94_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB94_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1114097060, -188(%rbp) # imm = 0x4267C5A4
	jne	.LBB94_124
.LBB94_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_123
.Lfunc_end94:
	.size	SubPelBlockMotionSearch.69, .Lfunc_end94-SubPelBlockMotionSearch.69
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.70              # -- Begin function SATD8X8.70
	.p2align	4, 0x90
	.type	SATD8X8.70,@function
SATD8X8.70:                             # @SATD8X8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1854926719, -36(%rbp)  # imm = 0x6E8FEF7F
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB95_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB95_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB95_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB95_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_2
.LBB95_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB95_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB95_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB95_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB95_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_6
.LBB95_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB95_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB95_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB95_10 Depth=1
	movl	$0, -12(%rbp)
.LBB95_12:                              # %for.cond499
                                        #   Parent Loop BB95_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB95_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB95_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB95_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB95_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB95_16
.LBB95_15:                              # %cond.false
                                        #   in Loop: Header=BB95_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB95_16:                              # %cond.end
                                        #   in Loop: Header=BB95_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB95_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_12
.LBB95_18:                              # %for.end519
                                        #   in Loop: Header=BB95_10 Depth=1
	jmp	.LBB95_19
.LBB95_19:                              # %for.inc520
                                        #   in Loop: Header=BB95_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_10
.LBB95_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_26
.LBB95_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB95_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB95_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB95_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB95_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_22
.LBB95_25:                              # %for.end534
	jmp	.LBB95_26
.LBB95_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1854926719, -36(%rbp)  # imm = 0x6E8FEF7F
	jne	.LBB95_28
.LBB95_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_27
.Lfunc_end95:
	.size	SATD8X8.70, .Lfunc_end95-SATD8X8.70
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.71 # -- Begin function InitializeFastFullIntegerSearch.71
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.71,@function
InitializeFastFullIntegerSearch.71:     # @InitializeFastFullIntegerSearch.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$701151918, -28(%rbp)   # imm = 0x29CABAAE
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB96_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB96_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB96_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_7 Depth 2
                                        #       Child Loop BB96_11 Depth 3
                                        #         Child Loop BB96_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB96_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB96_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB96_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB96_6:                               # %if.end12
                                        #   in Loop: Header=BB96_3 Depth=1
	movl	$0, -8(%rbp)
.LBB96_7:                               # %for.cond13
                                        #   Parent Loop BB96_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB96_11 Depth 3
                                        #         Child Loop BB96_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB96_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB96_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB96_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB96_10:                              # %if.end26
                                        #   in Loop: Header=BB96_7 Depth=2
	movl	$1, -16(%rbp)
.LBB96_11:                              # %for.cond27
                                        #   Parent Loop BB96_3 Depth=1
                                        #     Parent Loop BB96_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB96_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB96_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB96_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB96_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB96_14:                              # %if.end41
                                        #   in Loop: Header=BB96_11 Depth=3
	movl	$0, -20(%rbp)
.LBB96_15:                              # %for.cond42
                                        #   Parent Loop BB96_3 Depth=1
                                        #     Parent Loop BB96_7 Depth=2
                                        #       Parent Loop BB96_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB96_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB96_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB96_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB96_18:                              # %if.end60
                                        #   in Loop: Header=BB96_15 Depth=4
	jmp	.LBB96_19
.LBB96_19:                              # %for.inc
                                        #   in Loop: Header=BB96_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_15
.LBB96_20:                              # %for.end
                                        #   in Loop: Header=BB96_11 Depth=3
	jmp	.LBB96_21
.LBB96_21:                              # %for.inc61
                                        #   in Loop: Header=BB96_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB96_11
.LBB96_22:                              # %for.end63
                                        #   in Loop: Header=BB96_7 Depth=2
	jmp	.LBB96_23
.LBB96_23:                              # %for.inc64
                                        #   in Loop: Header=BB96_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_7
.LBB96_24:                              # %for.end66
                                        #   in Loop: Header=BB96_3 Depth=1
	jmp	.LBB96_25
.LBB96_25:                              # %for.inc67
                                        #   in Loop: Header=BB96_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_3
.LBB96_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB96_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB96_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB96_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB96_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB96_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB96_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB96_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB96_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB96_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB96_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB96_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB96_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB96_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB96_40:                              # %if.end109
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB96_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB96_42:                              # %if.end120
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB96_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB96_44:                              # %if.end131
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB96_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB96_46:                              # %if.end142
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB96_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB96_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB96_48:                              # %if.end153
                                        #   in Loop: Header=BB96_37 Depth=1
	jmp	.LBB96_49
.LBB96_49:                              # %for.inc154
                                        #   in Loop: Header=BB96_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_37
.LBB96_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB96_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB96_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB96_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	$0, -8(%rbp)
.LBB96_54:                              # %for.cond164
                                        #   Parent Loop BB96_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB96_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB96_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_54
.LBB96_57:                              # %for.end175
                                        #   in Loop: Header=BB96_52 Depth=1
	jmp	.LBB96_58
.LBB96_58:                              # %for.inc176
                                        #   in Loop: Header=BB96_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_52
.LBB96_59:                              # %for.end178
	jmp	.LBB96_69
.LBB96_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB96_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB96_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB96_63:                              # %for.cond191
                                        #   Parent Loop BB96_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB96_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB96_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB96_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_63
.LBB96_66:                              # %for.end202
                                        #   in Loop: Header=BB96_61 Depth=1
	jmp	.LBB96_67
.LBB96_67:                              # %for.inc203
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_61
.LBB96_68:                              # %for.end205
	jmp	.LBB96_69
.LBB96_69:                              # %if.end206
	cmpl	$701151918, -28(%rbp)   # imm = 0x29CABAAE
	jne	.LBB96_71
.LBB96_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_70
.Lfunc_end96:
	.size	InitializeFastFullIntegerSearch.71, .Lfunc_end96-InitializeFastFullIntegerSearch.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.72
.LCPI97_0:
	.quad	4611686018427387904     # double 2
.LCPI97_1:
	.quad	4607182418800017408     # double 1
.LCPI97_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI97_4:
	.quad	4620693217682128896     # double 8
.LCPI97_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI97_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.72
	.p2align	4, 0x90
	.type	BlockMotionSearch.72,@function
BlockMotionSearch.72:                   # @BlockMotionSearch.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$297762690, -212(%rbp)  # imm = 0x11BF7F82
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -188(%rbp)
	movl	%ecx, -180(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-188(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-188(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB97_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB97_4
.LBB97_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB97_4
.LBB97_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB97_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB97_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB97_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB97_6 Depth=1
	movl	$0, -64(%rbp)
.LBB97_8:                               # %for.cond24
                                        #   Parent Loop BB97_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB97_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB97_8 Depth=2
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB97_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_8
.LBB97_11:                              # %for.end
                                        #   in Loop: Header=BB97_6 Depth=1
	jmp	.LBB97_12
.LBB97_12:                              # %for.inc37
                                        #   in Loop: Header=BB97_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_6
.LBB97_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB97_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_18
.LBB97_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB97_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_37
.LBB97_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB97_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_23
.LBB97_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB97_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_36
.LBB97_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB97_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_28
.LBB97_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB97_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_35
.LBB97_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB97_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_33
.LBB97_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB97_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB97_34:                              # %if.end276
	jmp	.LBB97_35
.LBB97_35:                              # %if.end277
	jmp	.LBB97_36
.LBB97_36:                              # %if.end278
	jmp	.LBB97_37
.LBB97_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB97_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB97_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_43
.LBB97_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB97_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_62
.LBB97_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB97_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_48
.LBB97_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB97_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_61
.LBB97_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB97_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_53
.LBB97_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB97_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB97_60
.LBB97_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB97_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB97_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB97_58
.LBB97_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB97_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB97_59:                              # %if.end524
	jmp	.LBB97_60
.LBB97_60:                              # %if.end525
	jmp	.LBB97_61
.LBB97_61:                              # %if.end526
	jmp	.LBB97_62
.LBB97_62:                              # %if.end527
	jmp	.LBB97_63
.LBB97_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB97_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB97_66
.LBB97_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB97_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB97_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB97_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB97_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB97_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB97_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB97_73
.LBB97_72:                              # %cond.false626
	vmovsd	.LCPI97_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI97_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB97_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB97_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB97_76
.LBB97_75:                              # %cond.false655
	vmovsd	.LCPI97_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI97_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB97_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB97_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB97_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB97_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB97_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB97_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB97_83
.LBB97_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB97_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB97_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB97_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB97_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB97_92
.LBB97_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB97_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB97_91
.LBB97_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB97_91:                              # %cond.end787
	vmovss	.LCPI97_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB97_92:                              # %if.end835
	jmp	.LBB97_106
.LBB97_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB97_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB97_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB97_97
.LBB97_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB97_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB97_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB97_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB97_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB97_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB97_104
.LBB97_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB97_104:                             # %cond.end940
	vmovss	.LCPI97_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB97_105:                             # %if.end988
	jmp	.LBB97_106
.LBB97_106:                             # %if.end989
	jmp	.LBB97_107
.LBB97_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB97_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB97_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB97_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB97_114
.LBB97_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB97_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB97_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB97_120
.LBB97_116:                             # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB97_119
.LBB97_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB97_119:                             # %cond.end1029
.LBB97_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB97_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB97_123
.LBB97_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB97_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB97_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB97_129
.LBB97_125:                             # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB97_128
.LBB97_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB97_128:                             # %cond.end1054
.LBB97_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB97_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB97_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB97_131 Depth=1
	movl	$0, -72(%rbp)
.LBB97_133:                             # %for.cond1066
                                        #   Parent Loop BB97_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB97_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB97_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB97_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB97_137
.LBB97_136:                             # %if.else1091
                                        #   in Loop: Header=BB97_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB97_137:                             # %if.end1109
                                        #   in Loop: Header=BB97_133 Depth=2
	jmp	.LBB97_138
.LBB97_138:                             # %for.inc1110
                                        #   in Loop: Header=BB97_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_133
.LBB97_139:                             # %for.end1112
                                        #   in Loop: Header=BB97_131 Depth=1
	jmp	.LBB97_140
.LBB97_140:                             # %for.inc1113
                                        #   in Loop: Header=BB97_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_131
.LBB97_141:                             # %for.end1115
	jmp	.LBB97_143
.LBB97_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB97_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB97_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB97_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB97_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB97_150
.LBB97_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB97_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB97_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB97_151 Depth=1
	movl	$0, -72(%rbp)
.LBB97_153:                             # %for.cond1139
                                        #   Parent Loop BB97_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB97_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB97_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB97_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB97_157
.LBB97_156:                             # %if.else1183
                                        #   in Loop: Header=BB97_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB97_157:                             # %if.end1220
                                        #   in Loop: Header=BB97_153 Depth=2
	jmp	.LBB97_158
.LBB97_158:                             # %for.inc1221
                                        #   in Loop: Header=BB97_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_153
.LBB97_159:                             # %for.end1223
                                        #   in Loop: Header=BB97_151 Depth=1
	jmp	.LBB97_160
.LBB97_160:                             # %for.inc1224
                                        #   in Loop: Header=BB97_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_151
.LBB97_161:                             # %for.end1226
	jmp	.LBB97_166
.LBB97_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB97_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB97_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB97_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB97_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB97_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB97_173
.LBB97_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI97_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI97_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB97_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB97_172:                             # %if.end1273
	jmp	.LBB97_173
.LBB97_173:                             # %if.end1274
	jmp	.LBB97_174
.LBB97_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -196(%rbp)
	movl	$0, -64(%rbp)
.LBB97_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB97_176 Depth=1
	movl	$0, -72(%rbp)
.LBB97_178:                             # %for.cond1290
                                        #   Parent Loop BB97_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB97_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB97_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_178
.LBB97_181:                             # %for.end1337
                                        #   in Loop: Header=BB97_176 Depth=1
	jmp	.LBB97_182
.LBB97_182:                             # %for.inc1338
                                        #   in Loop: Header=BB97_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_176
.LBB97_183:                             # %for.end1340
	jmp	.LBB97_193
.LBB97_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB97_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB97_185 Depth=1
	movl	$0, -72(%rbp)
.LBB97_187:                             # %for.cond1347
                                        #   Parent Loop BB97_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB97_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB97_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_187
.LBB97_190:                             # %for.end1380
                                        #   in Loop: Header=BB97_185 Depth=1
	jmp	.LBB97_191
.LBB97_191:                             # %for.inc1381
                                        #   in Loop: Header=BB97_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_185
.LBB97_192:                             # %for.end1383
	jmp	.LBB97_193
.LBB97_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB97_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB97_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB97_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB97_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB97_200
.LBB97_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB97_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %eax
	movl	-136(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB97_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB97_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB97_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB97_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB97_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB97_208
.LBB97_204:                             # %if.else1433
                                        #   in Loop: Header=BB97_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB97_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB97_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB97_207
.LBB97_206:                             # %if.else1441
                                        #   in Loop: Header=BB97_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB97_207:                             # %if.end1450
                                        #   in Loop: Header=BB97_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB97_208:                             # %if.end1452
                                        #   in Loop: Header=BB97_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %eax
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-132(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -132(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB97_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_201
.LBB97_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB97_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB97_213:                             # %if.end1469
	vmovsd	.LCPI97_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB97_215
.LBB97_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB97_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB97_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB97_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI97_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-128(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB97_220
.LBB97_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB97_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB97_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB97_221 Depth=1
	movl	$0, -72(%rbp)
.LBB97_223:                             # %for.cond1502
                                        #   Parent Loop BB97_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB97_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-48(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB97_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB97_223
.LBB97_226:                             # %for.end1565
                                        #   in Loop: Header=BB97_221 Depth=1
	jmp	.LBB97_227
.LBB97_227:                             # %for.inc1566
                                        #   in Loop: Header=BB97_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB97_221
.LBB97_228:                             # %for.end1568
	jmp	.LBB97_229
.LBB97_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-192(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$297762690, -212(%rbp)  # imm = 0x11BF7F82
	jne	.LBB97_231
.LBB97_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_230
.Lfunc_end97:
	.size	BlockMotionSearch.72, .Lfunc_end97-BlockMotionSearch.72
	.cfi_endproc
                                        # -- End function
	.globl	SATD.73                 # -- Begin function SATD.73
	.p2align	4, 0x90
	.type	SATD.73,@function
SATD.73:                                # @SATD.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1535757446, -184(%rbp) # imm = 0x5B89CC86
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB98_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB98_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB98_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB98_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB98_6
.LBB98_5:                               # %cond.false
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-100(%rbp), %eax
.LBB98_6:                               # %cond.end
                                        #   in Loop: Header=BB98_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB98_2
.LBB98_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_14
.LBB98_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB98_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB98_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB98_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB98_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_10
.LBB98_13:                              # %for.end270
	jmp	.LBB98_14
.LBB98_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1535757446, -184(%rbp) # imm = 0x5B89CC86
	jne	.LBB98_16
.LBB98_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_15
.Lfunc_end98:
	.size	SATD.73, .Lfunc_end98-SATD.73
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.74   # -- Begin function BPredPartitionCost.74
	.p2align	4, 0x90
	.type	BPredPartitionCost.74,@function
BPredPartitionCost.74:                  # @BPredPartitionCost.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$107681152, -108(%rbp)  # imm = 0x66B1580
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB99_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB99_3
.LBB99_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB99_3
.LBB99_3:                               # %cond.end
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB99_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB99_6
.LBB99_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB99_6
.LBB99_6:                               # %cond.end17
	movl	%eax, -120(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB99_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB99_9
.LBB99_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB99_9
.LBB99_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -80(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB99_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB99_12
.LBB99_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB99_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB99_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_15 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB99_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB99_15:                              # %for.cond56
                                        #   Parent Loop BB99_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB99_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB99_15 Depth=2
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_15
.LBB99_18:                              # %for.end
                                        #   in Loop: Header=BB99_13 Depth=1
	jmp	.LBB99_19
.LBB99_19:                              # %for.inc167
                                        #   in Loop: Header=BB99_13 Depth=1
	movl	-116(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_13
.LBB99_20:                              # %for.end169
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB99_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_23 Depth 2
                                        #       Child Loop BB99_25 Depth 3
                                        #         Child Loop BB99_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB99_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB99_23:                              # %for.cond188
                                        #   Parent Loop BB99_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_25 Depth 3
                                        #         Child Loop BB99_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB99_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	-76(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-72(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB99_25:                              # %for.cond199
                                        #   Parent Loop BB99_21 Depth=1
                                        #     Parent Loop BB99_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB99_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB99_25 Depth=3
	movl	$0, -28(%rbp)
.LBB99_27:                              # %for.cond203
                                        #   Parent Loop BB99_21 Depth=1
                                        #     Parent Loop BB99_23 Depth=2
                                        #       Parent Loop BB99_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB99_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB99_27 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB99_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB99_27
.LBB99_30:                              # %for.end232
                                        #   in Loop: Header=BB99_25 Depth=3
	jmp	.LBB99_31
.LBB99_31:                              # %for.inc233
                                        #   in Loop: Header=BB99_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB99_25
.LBB99_32:                              # %for.end235
                                        #   in Loop: Header=BB99_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB99_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB99_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB99_35
.LBB99_34:                              # %if.then
                                        #   in Loop: Header=BB99_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB99_35:                              # %if.end
                                        #   in Loop: Header=BB99_23 Depth=2
	jmp	.LBB99_36
.LBB99_36:                              # %for.inc240
                                        #   in Loop: Header=BB99_23 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_23
.LBB99_37:                              # %for.end243
                                        #   in Loop: Header=BB99_21 Depth=1
	jmp	.LBB99_38
.LBB99_38:                              # %for.inc244
                                        #   in Loop: Header=BB99_21 Depth=1
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_21
.LBB99_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB99_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB99_58
# %bb.41:                               # %if.then252
	movl	$0, -44(%rbp)
.LBB99_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_44 Depth 2
                                        #       Child Loop BB99_46 Depth 3
                                        #         Child Loop BB99_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB99_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB99_42 Depth=1
	movl	$0, -52(%rbp)
.LBB99_44:                              # %for.cond261
                                        #   Parent Loop BB99_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_46 Depth 3
                                        #         Child Loop BB99_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB99_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB99_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB99_46:                              # %for.cond269
                                        #   Parent Loop BB99_42 Depth=1
                                        #     Parent Loop BB99_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB99_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB99_46 Depth=3
	movl	$0, -32(%rbp)
.LBB99_48:                              # %for.cond273
                                        #   Parent Loop BB99_42 Depth=1
                                        #     Parent Loop BB99_44 Depth=2
                                        #       Parent Loop BB99_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB99_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB99_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB99_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB99_48
.LBB99_51:                              # %for.end288
                                        #   in Loop: Header=BB99_46 Depth=3
	jmp	.LBB99_52
.LBB99_52:                              # %for.inc289
                                        #   in Loop: Header=BB99_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB99_46
.LBB99_53:                              # %for.end291
                                        #   in Loop: Header=BB99_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB99_44 Depth=2
	movl	-104(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB99_44
.LBB99_55:                              # %for.end298
                                        #   in Loop: Header=BB99_42 Depth=1
	jmp	.LBB99_56
.LBB99_56:                              # %for.inc299
                                        #   in Loop: Header=BB99_42 Depth=1
	movl	-120(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB99_42
.LBB99_57:                              # %for.end301
	jmp	.LBB99_58
.LBB99_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$107681152, -108(%rbp)  # imm = 0x66B1580
	jne	.LBB99_60
.LBB99_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_59
.Lfunc_end99:
	.size	BPredPartitionCost.74, .Lfunc_end99-BPredPartitionCost.74
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.75   # -- Begin function BPredPartitionCost.75
	.p2align	4, 0x90
	.type	BPredPartitionCost.75,@function
BPredPartitionCost.75:                  # @BPredPartitionCost.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$302174171, -100(%rbp)  # imm = 0x1202CFDB
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB100_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB100_3
.LBB100_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB100_3
.LBB100_3:                              # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB100_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB100_6
.LBB100_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB100_6
.LBB100_6:                              # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB100_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB100_9
.LBB100_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB100_9
.LBB100_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB100_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB100_12
.LBB100_11:                             # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB100_12:                             # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB100_13:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB100_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB100_15:                             # %for.cond56
                                        #   Parent Loop BB100_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB100_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB100_15 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_15
.LBB100_18:                             # %for.end
                                        #   in Loop: Header=BB100_13 Depth=1
	jmp	.LBB100_19
.LBB100_19:                             # %for.inc167
                                        #   in Loop: Header=BB100_13 Depth=1
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_13
.LBB100_20:                             # %for.end169
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB100_21:                             # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_23 Depth 2
                                        #       Child Loop BB100_25 Depth 3
                                        #         Child Loop BB100_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB100_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB100_23:                             # %for.cond188
                                        #   Parent Loop BB100_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_25 Depth 3
                                        #         Child Loop BB100_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB100_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-80(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-72(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB100_25:                             # %for.cond199
                                        #   Parent Loop BB100_21 Depth=1
                                        #     Parent Loop BB100_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB100_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB100_25 Depth=3
	movl	$0, -32(%rbp)
.LBB100_27:                             # %for.cond203
                                        #   Parent Loop BB100_21 Depth=1
                                        #     Parent Loop BB100_23 Depth=2
                                        #       Parent Loop BB100_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB100_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB100_27 Depth=4
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-108(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB100_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB100_27
.LBB100_30:                             # %for.end232
                                        #   in Loop: Header=BB100_25 Depth=3
	jmp	.LBB100_31
.LBB100_31:                             # %for.inc233
                                        #   in Loop: Header=BB100_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_25
.LBB100_32:                             # %for.end235
                                        #   in Loop: Header=BB100_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB100_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB100_35
.LBB100_34:                             # %if.then
                                        #   in Loop: Header=BB100_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB100_35:                             # %if.end
                                        #   in Loop: Header=BB100_23 Depth=2
	jmp	.LBB100_36
.LBB100_36:                             # %for.inc240
                                        #   in Loop: Header=BB100_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_23
.LBB100_37:                             # %for.end243
                                        #   in Loop: Header=BB100_21 Depth=1
	jmp	.LBB100_38
.LBB100_38:                             # %for.inc244
                                        #   in Loop: Header=BB100_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_21
.LBB100_39:                             # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB100_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB100_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB100_42:                             # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_44 Depth 2
                                        #       Child Loop BB100_46 Depth 3
                                        #         Child Loop BB100_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB100_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB100_42 Depth=1
	movl	$0, -48(%rbp)
.LBB100_44:                             # %for.cond261
                                        #   Parent Loop BB100_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_46 Depth 3
                                        #         Child Loop BB100_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB100_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB100_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB100_46:                             # %for.cond269
                                        #   Parent Loop BB100_42 Depth=1
                                        #     Parent Loop BB100_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB100_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB100_46 Depth=3
	movl	$0, -28(%rbp)
.LBB100_48:                             # %for.cond273
                                        #   Parent Loop BB100_42 Depth=1
                                        #     Parent Loop BB100_44 Depth=2
                                        #       Parent Loop BB100_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB100_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB100_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB100_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB100_48
.LBB100_51:                             # %for.end288
                                        #   in Loop: Header=BB100_46 Depth=3
	jmp	.LBB100_52
.LBB100_52:                             # %for.inc289
                                        #   in Loop: Header=BB100_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB100_46
.LBB100_53:                             # %for.end291
                                        #   in Loop: Header=BB100_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB100_44 Depth=2
	movl	-116(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB100_44
.LBB100_55:                             # %for.end298
                                        #   in Loop: Header=BB100_42 Depth=1
	jmp	.LBB100_56
.LBB100_56:                             # %for.inc299
                                        #   in Loop: Header=BB100_42 Depth=1
	movl	-112(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB100_42
.LBB100_57:                             # %for.end301
	jmp	.LBB100_58
.LBB100_58:                             # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$302174171, -100(%rbp)  # imm = 0x1202CFDB
	jne	.LBB100_60
.LBB100_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_60:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_59
.Lfunc_end100:
	.size	BPredPartitionCost.75, .Lfunc_end100-BPredPartitionCost.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.76
.LCPI101_0:
	.quad	4602678819172646912     # double 0.5
.LCPI101_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.76
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.76,@function
SubPelBlockSearchBiPred.76:             # @SubPelBlockSearchBiPred.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI101_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI101_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1852183890, -196(%rbp) # imm = 0x6E661552
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -154(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB101_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB101_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB101_4
.LBB101_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB101_4:                              # %cond.end
	jmp	.LBB101_6
.LBB101_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB101_6:                              # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB101_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB101_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB101_10
.LBB101_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB101_10
.LBB101_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -118(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB101_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB101_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB101_14
.LBB101_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB101_14:                             # %cond.end55
	jmp	.LBB101_16
.LBB101_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB101_16
.LBB101_16:                             # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB101_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB101_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB101_20
.LBB101_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB101_20:                             # %cond.end82
	jmp	.LBB101_22
.LBB101_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB101_22
.LBB101_22:                             # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB101_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB101_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB101_26
.LBB101_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB101_26:                             # %cond.end106
	jmp	.LBB101_28
.LBB101_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB101_28
.LBB101_28:                             # %cond.end109
	movw	%ax, -172(%rbp)
	movswl	-118(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB101_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB101_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB101_32
.LBB101_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB101_32:                             # %cond.end130
	jmp	.LBB101_34
.LBB101_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB101_34
.LBB101_34:                             # %cond.end133
	movw	%ax, -170(%rbp)
	movswl	-170(%rbp), %eax
	movswl	-172(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB101_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB101_37
.LBB101_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB101_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB101_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB101_40
.LBB101_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB101_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-154(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_45
# %bb.42:                               # %land.lhs.true205
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_45
# %bb.43:                               # %land.lhs.true211
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB101_46
.LBB101_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB101_46:                             # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_51
# %bb.48:                               # %land.lhs.true232
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_51
# %bb.49:                               # %land.lhs.true238
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB101_52
.LBB101_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB101_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-176(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB101_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_55 Depth 2
                                        #       Child Loop BB101_60 Depth 3
                                        #         Child Loop BB101_162 Depth 4
                                        #           Child Loop BB101_164 Depth 5
                                        #       Child Loop BB101_175 Depth 3
                                        #         Child Loop BB101_181 Depth 4
                                        #           Child Loop BB101_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB101_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB101_55:                             # %for.cond283
                                        #   Parent Loop BB101_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_60 Depth 3
                                        #         Child Loop BB101_162 Depth 4
                                        #           Child Loop BB101_164 Depth 5
                                        #       Child Loop BB101_175 Depth 3
                                        #         Child Loop BB101_181 Depth 4
                                        #           Child Loop BB101_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB101_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB101_55 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB101_57:                             # %land.end
                                        #   in Loop: Header=BB101_55 Depth=2
	testb	$1, %al
	jne	.LBB101_58
	jmp	.LBB101_195
.LBB101_58:                             # %for.body289
                                        #   in Loop: Header=BB101_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB101_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB101_55 Depth=2
	movw	$0, -40(%rbp)
.LBB101_60:                             # %for.cond304
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_162 Depth 4
                                        #           Child Loop BB101_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB101_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_67
.LBB101_63:                             # %cond.false345
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_66
.LBB101_65:                             # %cond.false369
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_66:                             # %cond.end389
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_67:                             # %cond.end391
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_73
.LBB101_69:                             # %cond.false421
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_72
.LBB101_71:                             # %cond.false448
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_72:                             # %cond.end470
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_73:                             # %cond.end472
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_79
.LBB101_75:                             # %cond.false505
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_78
.LBB101_77:                             # %cond.false532
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_78:                             # %cond.end554
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_79:                             # %cond.end556
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_85
.LBB101_81:                             # %cond.false589
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_84
.LBB101_83:                             # %cond.false616
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_84:                             # %cond.end638
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_85:                             # %cond.end640
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_91
.LBB101_87:                             # %cond.false681
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_90
.LBB101_89:                             # %cond.false706
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_90:                             # %cond.end726
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_91:                             # %cond.end728
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_97
.LBB101_93:                             # %cond.false759
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_96
.LBB101_95:                             # %cond.false786
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_96:                             # %cond.end808
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_97:                             # %cond.end810
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_103
.LBB101_99:                             # %cond.false843
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_102
.LBB101_101:                            # %cond.false870
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_102:                            # %cond.end892
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_103:                            # %cond.end894
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_109
.LBB101_105:                            # %cond.false927
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_108
.LBB101_107:                            # %cond.false954
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_108:                            # %cond.end976
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_109:                            # %cond.end978
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_115
.LBB101_111:                            # %cond.false1019
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_114
.LBB101_113:                            # %cond.false1044
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_114:                            # %cond.end1064
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_115:                            # %cond.end1066
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_121
.LBB101_117:                            # %cond.false1097
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_120
.LBB101_119:                            # %cond.false1124
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_120:                            # %cond.end1146
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_121:                            # %cond.end1148
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_127
.LBB101_123:                            # %cond.false1181
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_126
.LBB101_125:                            # %cond.false1208
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_126:                            # %cond.end1230
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_127:                            # %cond.end1232
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_133
.LBB101_129:                            # %cond.false1265
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_132
.LBB101_131:                            # %cond.false1292
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_132:                            # %cond.end1314
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_133:                            # %cond.end1316
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_139
.LBB101_135:                            # %cond.false1357
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_138
.LBB101_137:                            # %cond.false1382
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_138:                            # %cond.end1402
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_139:                            # %cond.end1404
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_145
.LBB101_141:                            # %cond.false1435
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_144
.LBB101_143:                            # %cond.false1462
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_144:                            # %cond.end1484
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_145:                            # %cond.end1486
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_151
.LBB101_147:                            # %cond.false1519
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_150
.LBB101_149:                            # %cond.false1546
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_150:                            # %cond.end1568
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_151:                            # %cond.end1570
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB101_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_157
.LBB101_153:                            # %cond.false1603
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB101_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_156
.LBB101_155:                            # %cond.false1630
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_156:                            # %cond.end1652
                                        #   in Loop: Header=BB101_60 Depth=3
.LBB101_157:                            # %cond.end1654
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB101_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB101_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB101_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB101_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB101_173
.LBB101_160:                            # %if.end1673
                                        #   in Loop: Header=BB101_60 Depth=3
	jmp	.LBB101_170
.LBB101_161:                            # %if.else1674
                                        #   in Loop: Header=BB101_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB101_162:                            # %for.cond1675
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        #       Parent Loop BB101_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB101_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB101_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB101_162 Depth=4
	movl	$0, -100(%rbp)
.LBB101_164:                            # %for.cond1679
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        #       Parent Loop BB101_60 Depth=3
                                        #         Parent Loop BB101_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB101_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB101_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB101_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB101_164
.LBB101_167:                            # %for.end
                                        #   in Loop: Header=BB101_162 Depth=4
	jmp	.LBB101_168
.LBB101_168:                            # %for.inc1694
                                        #   in Loop: Header=BB101_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB101_162
.LBB101_169:                            # %for.end1696
                                        #   in Loop: Header=BB101_60 Depth=3
	jmp	.LBB101_170
.LBB101_170:                            # %if.end1697
                                        #   in Loop: Header=BB101_60 Depth=3
	jmp	.LBB101_171
.LBB101_171:                            # %for.inc1698
                                        #   in Loop: Header=BB101_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB101_60
.LBB101_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB101_55 Depth=2
	jmp	.LBB101_173
.LBB101_173:                            # %for.end1702
                                        #   in Loop: Header=BB101_55 Depth=2
	jmp	.LBB101_193
.LBB101_174:                            # %if.else1703
                                        #   in Loop: Header=BB101_55 Depth=2
	movw	$0, -40(%rbp)
.LBB101_175:                            # %for.cond1704
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_181 Depth 4
                                        #           Child Loop BB101_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB101_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB101_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB101_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB101_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB101_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB101_192
.LBB101_179:                            # %if.end2054
                                        #   in Loop: Header=BB101_175 Depth=3
	jmp	.LBB101_189
.LBB101_180:                            # %if.else2055
                                        #   in Loop: Header=BB101_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB101_181:                            # %for.cond2056
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        #       Parent Loop BB101_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB101_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB101_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB101_181 Depth=4
	movl	$0, -100(%rbp)
.LBB101_183:                            # %for.cond2060
                                        #   Parent Loop BB101_53 Depth=1
                                        #     Parent Loop BB101_55 Depth=2
                                        #       Parent Loop BB101_175 Depth=3
                                        #         Parent Loop BB101_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB101_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB101_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB101_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB101_183
.LBB101_186:                            # %for.end2077
                                        #   in Loop: Header=BB101_181 Depth=4
	jmp	.LBB101_187
.LBB101_187:                            # %for.inc2078
                                        #   in Loop: Header=BB101_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB101_181
.LBB101_188:                            # %for.end2080
                                        #   in Loop: Header=BB101_175 Depth=3
	jmp	.LBB101_189
.LBB101_189:                            # %if.end2081
                                        #   in Loop: Header=BB101_175 Depth=3
	jmp	.LBB101_190
.LBB101_190:                            # %for.inc2082
                                        #   in Loop: Header=BB101_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB101_175
.LBB101_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB101_55 Depth=2
	jmp	.LBB101_192
.LBB101_192:                            # %for.end2086
                                        #   in Loop: Header=BB101_55 Depth=2
	jmp	.LBB101_193
.LBB101_193:                            # %if.end2087
                                        #   in Loop: Header=BB101_55 Depth=2
	jmp	.LBB101_194
.LBB101_194:                            # %for.inc2088
                                        #   in Loop: Header=BB101_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB101_55
.LBB101_195:                            # %for.end2092
                                        #   in Loop: Header=BB101_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB101_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB101_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB101_197:                            # %if.end2101
                                        #   in Loop: Header=BB101_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB101_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB101_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB101_199:                            # %if.end2107
                                        #   in Loop: Header=BB101_53 Depth=1
	jmp	.LBB101_200
.LBB101_200:                            # %for.inc2108
                                        #   in Loop: Header=BB101_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB101_53
.LBB101_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB101_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB101_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB101_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB101_205:                            # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB101_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB101_211
.LBB101_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB101_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB101_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_214 Depth 2
                                        #       Child Loop BB101_219 Depth 3
                                        #         Child Loop BB101_321 Depth 4
                                        #           Child Loop BB101_323 Depth 5
                                        #       Child Loop BB101_334 Depth 3
                                        #         Child Loop BB101_340 Depth 4
                                        #           Child Loop BB101_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB101_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB101_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB101_214:                            # %for.cond2194
                                        #   Parent Loop BB101_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_219 Depth 3
                                        #         Child Loop BB101_321 Depth 4
                                        #           Child Loop BB101_323 Depth 5
                                        #       Child Loop BB101_334 Depth 3
                                        #         Child Loop BB101_340 Depth 4
                                        #           Child Loop BB101_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB101_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB101_214 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB101_216:                            # %land.end2202
                                        #   in Loop: Header=BB101_214 Depth=2
	testb	$1, %al
	jne	.LBB101_217
	jmp	.LBB101_354
.LBB101_217:                            # %for.body2203
                                        #   in Loop: Header=BB101_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -118(%rbp)
	je	.LBB101_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB101_214 Depth=2
	movw	$0, -40(%rbp)
.LBB101_219:                            # %for.cond2218
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_321 Depth 4
                                        #           Child Loop BB101_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB101_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_226
.LBB101_222:                            # %cond.false2261
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_225
.LBB101_224:                            # %cond.false2286
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_225:                            # %cond.end2306
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_226:                            # %cond.end2308
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_232
.LBB101_228:                            # %cond.false2339
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_231
.LBB101_230:                            # %cond.false2366
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_231:                            # %cond.end2388
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_232:                            # %cond.end2390
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_238
.LBB101_234:                            # %cond.false2423
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_237
.LBB101_236:                            # %cond.false2450
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_237:                            # %cond.end2472
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_238:                            # %cond.end2474
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_244
.LBB101_240:                            # %cond.false2507
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_243
.LBB101_242:                            # %cond.false2534
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_243:                            # %cond.end2556
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_244:                            # %cond.end2558
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_250
.LBB101_246:                            # %cond.false2599
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_249
.LBB101_248:                            # %cond.false2624
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_249:                            # %cond.end2644
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_250:                            # %cond.end2646
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_256
.LBB101_252:                            # %cond.false2677
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_255
.LBB101_254:                            # %cond.false2704
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_255:                            # %cond.end2726
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_256:                            # %cond.end2728
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_262
.LBB101_258:                            # %cond.false2761
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_261
.LBB101_260:                            # %cond.false2788
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_261:                            # %cond.end2810
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_262:                            # %cond.end2812
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_268
.LBB101_264:                            # %cond.false2845
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_267
.LBB101_266:                            # %cond.false2872
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_267:                            # %cond.end2894
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_268:                            # %cond.end2896
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_274
.LBB101_270:                            # %cond.false2937
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_273
.LBB101_272:                            # %cond.false2962
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_273:                            # %cond.end2982
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_274:                            # %cond.end2984
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_280
.LBB101_276:                            # %cond.false3015
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_279
.LBB101_278:                            # %cond.false3042
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_279:                            # %cond.end3064
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_280:                            # %cond.end3066
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_286
.LBB101_282:                            # %cond.false3099
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_285
.LBB101_284:                            # %cond.false3126
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_285:                            # %cond.end3148
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_286:                            # %cond.end3150
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_292
.LBB101_288:                            # %cond.false3183
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_291
.LBB101_290:                            # %cond.false3210
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_291:                            # %cond.end3232
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_292:                            # %cond.end3234
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_298
.LBB101_294:                            # %cond.false3275
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_297
.LBB101_296:                            # %cond.false3300
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_297:                            # %cond.end3320
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_298:                            # %cond.end3322
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_304
.LBB101_300:                            # %cond.false3353
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_303
.LBB101_302:                            # %cond.false3380
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_303:                            # %cond.end3402
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_304:                            # %cond.end3404
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_310
.LBB101_306:                            # %cond.false3437
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_309
.LBB101_308:                            # %cond.false3464
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_309:                            # %cond.end3486
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_310:                            # %cond.end3488
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB101_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB101_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB101_316
.LBB101_312:                            # %cond.false3521
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB101_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB101_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB101_315
.LBB101_314:                            # %cond.false3548
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB101_315:                            # %cond.end3570
                                        #   in Loop: Header=BB101_219 Depth=3
.LBB101_316:                            # %cond.end3572
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB101_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB101_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB101_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB101_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB101_332
.LBB101_319:                            # %if.end3593
                                        #   in Loop: Header=BB101_219 Depth=3
	jmp	.LBB101_329
.LBB101_320:                            # %if.else3594
                                        #   in Loop: Header=BB101_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB101_321:                            # %for.cond3595
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        #       Parent Loop BB101_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB101_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB101_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB101_321 Depth=4
	movl	$0, -100(%rbp)
.LBB101_323:                            # %for.cond3599
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        #       Parent Loop BB101_219 Depth=3
                                        #         Parent Loop BB101_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB101_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB101_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB101_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB101_323
.LBB101_326:                            # %for.end3616
                                        #   in Loop: Header=BB101_321 Depth=4
	jmp	.LBB101_327
.LBB101_327:                            # %for.inc3617
                                        #   in Loop: Header=BB101_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB101_321
.LBB101_328:                            # %for.end3619
                                        #   in Loop: Header=BB101_219 Depth=3
	jmp	.LBB101_329
.LBB101_329:                            # %if.end3620
                                        #   in Loop: Header=BB101_219 Depth=3
	jmp	.LBB101_330
.LBB101_330:                            # %for.inc3621
                                        #   in Loop: Header=BB101_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB101_219
.LBB101_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB101_214 Depth=2
	jmp	.LBB101_332
.LBB101_332:                            # %for.end3625
                                        #   in Loop: Header=BB101_214 Depth=2
	jmp	.LBB101_352
.LBB101_333:                            # %if.else3626
                                        #   in Loop: Header=BB101_214 Depth=2
	movw	$0, -40(%rbp)
.LBB101_334:                            # %for.cond3627
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_340 Depth 4
                                        #           Child Loop BB101_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB101_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB101_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB101_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB101_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB101_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB101_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB101_351
.LBB101_338:                            # %if.end3978
                                        #   in Loop: Header=BB101_334 Depth=3
	jmp	.LBB101_348
.LBB101_339:                            # %if.else3979
                                        #   in Loop: Header=BB101_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB101_340:                            # %for.cond3980
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        #       Parent Loop BB101_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB101_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB101_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB101_340 Depth=4
	movl	$0, -100(%rbp)
.LBB101_342:                            # %for.cond3984
                                        #   Parent Loop BB101_212 Depth=1
                                        #     Parent Loop BB101_214 Depth=2
                                        #       Parent Loop BB101_334 Depth=3
                                        #         Parent Loop BB101_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB101_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB101_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB101_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB101_342
.LBB101_345:                            # %for.end4001
                                        #   in Loop: Header=BB101_340 Depth=4
	jmp	.LBB101_346
.LBB101_346:                            # %for.inc4002
                                        #   in Loop: Header=BB101_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB101_340
.LBB101_347:                            # %for.end4004
                                        #   in Loop: Header=BB101_334 Depth=3
	jmp	.LBB101_348
.LBB101_348:                            # %if.end4005
                                        #   in Loop: Header=BB101_334 Depth=3
	jmp	.LBB101_349
.LBB101_349:                            # %for.inc4006
                                        #   in Loop: Header=BB101_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB101_334
.LBB101_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB101_214 Depth=2
	jmp	.LBB101_351
.LBB101_351:                            # %for.end4010
                                        #   in Loop: Header=BB101_214 Depth=2
	jmp	.LBB101_352
.LBB101_352:                            # %if.end4011
                                        #   in Loop: Header=BB101_214 Depth=2
	jmp	.LBB101_353
.LBB101_353:                            # %for.inc4012
                                        #   in Loop: Header=BB101_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB101_214
.LBB101_354:                            # %for.end4016
                                        #   in Loop: Header=BB101_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB101_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB101_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB101_356:                            # %if.end4026
                                        #   in Loop: Header=BB101_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB101_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB101_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB101_358:                            # %if.end4032
                                        #   in Loop: Header=BB101_212 Depth=1
	jmp	.LBB101_359
.LBB101_359:                            # %for.inc4033
                                        #   in Loop: Header=BB101_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB101_212
.LBB101_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB101_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB101_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1852183890, -196(%rbp) # imm = 0x6E661552
	jne	.LBB101_364
.LBB101_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_363
.Lfunc_end101:
	.size	SubPelBlockSearchBiPred.76, .Lfunc_end101-SubPelBlockSearchBiPred.76
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.77 # -- Begin function SetMotionVectorPredictor.77
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.77,@function
SetMotionVectorPredictor.77:            # @SetMotionVectorPredictor.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$807352504, -180(%rbp)  # imm = 0x301F38B8
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -144(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB102_2:                              # %if.end
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB102_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB102_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB102_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB102_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB102_8
.LBB102_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB102_8:                              # %if.end10
	jmp	.LBB102_13
.LBB102_9:                              # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB102_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_12
.LBB102_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB102_12:                             # %if.end18
	jmp	.LBB102_13
.LBB102_13:                             # %if.end19
	jmp	.LBB102_18
.LBB102_14:                             # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB102_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB102_17
.LBB102_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB102_17:                             # %if.end28
	jmp	.LBB102_18
.LBB102_18:                             # %if.end29
	jmp	.LBB102_19
.LBB102_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB102_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB102_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB102_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB102_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_25
.LBB102_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_25
.LBB102_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_28
.LBB102_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_28
.LBB102_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_31
.LBB102_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_31
.LBB102_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB102_72
.LBB102_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB102_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_37
.LBB102_36:                             # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB102_37:                             # %cond.end108
	jmp	.LBB102_39
.LBB102_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_39
.LBB102_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_43
.LBB102_42:                             # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB102_43:                             # %cond.end143
	jmp	.LBB102_45
.LBB102_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_45
.LBB102_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_49
.LBB102_48:                             # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB102_49:                             # %cond.end178
	jmp	.LBB102_51
.LBB102_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_51
.LBB102_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB102_71
.LBB102_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB102_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB102_56
.LBB102_55:                             # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_56:                             # %cond.end213
	jmp	.LBB102_58
.LBB102_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_58
.LBB102_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB102_62
.LBB102_61:                             # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_62:                             # %cond.end248
	jmp	.LBB102_64
.LBB102_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_64
.LBB102_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB102_68
.LBB102_67:                             # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_68:                             # %cond.end283
	jmp	.LBB102_70
.LBB102_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB102_70
.LBB102_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB102_71:                             # %if.end288
	jmp	.LBB102_72
.LBB102_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB102_86
.LBB102_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB102_85
.LBB102_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB102_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB102_84:                             # %if.end327
	jmp	.LBB102_85
.LBB102_85:                             # %if.end328
	jmp	.LBB102_86
.LBB102_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB102_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB102_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB102_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB102_91:                             # %if.end343
	jmp	.LBB102_95
.LBB102_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB102_94:                             # %if.end349
	jmp	.LBB102_95
.LBB102_95:                             # %if.end350
	jmp	.LBB102_107
.LBB102_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB102_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB102_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB102_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB102_101:                            # %if.end365
	jmp	.LBB102_105
.LBB102_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB102_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB102_104:                            # %if.end371
	jmp	.LBB102_105
.LBB102_105:                            # %if.end372
	jmp	.LBB102_106
.LBB102_106:                            # %if.end373
	jmp	.LBB102_107
.LBB102_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB102_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB102_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB102_121
.LBB102_111:                            # %if.then381
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB102_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_114
.LBB102_113:                            # %cond.false396
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_114
.LBB102_114:                            # %cond.end397
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_117
.LBB102_116:                            # %cond.false413
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_117
.LBB102_117:                            # %cond.end414
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_120
.LBB102_119:                            # %cond.false430
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_120
.LBB102_120:                            # %cond.end431
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB102_161
.LBB102_121:                            # %if.else433
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB102_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_126
.LBB102_125:                            # %cond.false462
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_126:                            # %cond.end474
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_128
.LBB102_127:                            # %cond.false476
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_128
.LBB102_128:                            # %cond.end477
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_132
.LBB102_131:                            # %cond.false500
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_132:                            # %cond.end513
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_134
.LBB102_133:                            # %cond.false515
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_134
.LBB102_134:                            # %cond.end516
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB102_138
.LBB102_137:                            # %cond.false539
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB102_138:                            # %cond.end552
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_140
.LBB102_139:                            # %cond.false554
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_140
.LBB102_140:                            # %cond.end555
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB102_160
.LBB102_141:                            # %if.else557
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB102_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB102_145
.LBB102_144:                            # %cond.false580
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_145:                            # %cond.end592
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_147
.LBB102_146:                            # %cond.false594
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_147
.LBB102_147:                            # %cond.end595
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB102_151
.LBB102_150:                            # %cond.false619
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_151:                            # %cond.end631
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_153
.LBB102_152:                            # %cond.false633
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_153
.LBB102_153:                            # %cond.end634
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB102_157
.LBB102_156:                            # %cond.false658
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB102_157:                            # %cond.end670
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_159
.LBB102_158:                            # %cond.false672
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_159
.LBB102_159:                            # %cond.end673
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB102_160:                            # %if.end675
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_161
.LBB102_161:                            # %if.end676
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB102_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB102_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_166
.LBB102_165:                            # %cond.false696
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_166:                            # %cond.end708
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_168
.LBB102_167:                            # %cond.false710
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_168
.LBB102_168:                            # %cond.end711
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -140(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB102_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB102_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_172
.LBB102_171:                            # %cond.false729
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_172:                            # %cond.end741
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_174
.LBB102_173:                            # %cond.false743
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_174
.LBB102_174:                            # %cond.end744
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB102_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB102_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_178
.LBB102_177:                            # %cond.false762
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_178:                            # %cond.end774
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_180
.LBB102_179:                            # %cond.false776
                                        #   in Loop: Header=BB102_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_180
.LBB102_180:                            # %cond.end777
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB102_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB102_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB102_184
.LBB102_183:                            # %cond.false795
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB102_184:                            # %cond.end807
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_186
.LBB102_185:                            # %cond.false809
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-176(%rbp), %eax
.LBB102_186:                            # %cond.end810
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB102_187:                            # %if.end812
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB102_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	.LJTI102_0(,%rax,8), %rax
	jmpq	*%rax
.LBB102_189:                            # %sw.bb
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB102_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB102_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB102_193:                            # %if.end824
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_213
.LBB102_194:                            # %if.else825
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB102_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB102_197
.LBB102_196:                            # %cond.false831
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-20(%rbp), %edx
.LBB102_197:                            # %cond.end832
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB102_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB102_203
.LBB102_199:                            # %cond.false837
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB102_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB102_202
.LBB102_201:                            # %cond.false841
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB102_202:                            # %cond.end842
                                        #   in Loop: Header=BB102_108 Depth=1
.LBB102_203:                            # %cond.end844
                                        #   in Loop: Header=BB102_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB102_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB102_206
.LBB102_205:                            # %cond.false849
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-20(%rbp), %edx
.LBB102_206:                            # %cond.end850
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB102_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB102_212
.LBB102_208:                            # %cond.false855
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB102_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB102_211
.LBB102_210:                            # %cond.false859
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB102_211:                            # %cond.end860
                                        #   in Loop: Header=BB102_108 Depth=1
.LBB102_212:                            # %cond.end862
                                        #   in Loop: Header=BB102_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB102_213:                            # %if.end865
                                        #   in Loop: Header=BB102_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB102_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -140(%rbp)
	je	.LBB102_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB102_222
.LBB102_217:                            # %if.else877
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB102_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB102_108 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB102_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB102_221
.LBB102_220:                            # %if.else886
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB102_221:                            # %if.end889
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_222
.LBB102_222:                            # %if.end890
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_223
.LBB102_223:                            # %if.end891
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_234
.LBB102_224:                            # %sw.bb892
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB102_226:                            # %if.end898
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_234
.LBB102_227:                            # %sw.bb899
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB102_229:                            # %if.end905
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_234
.LBB102_230:                            # %sw.bb906
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB102_232:                            # %if.end912
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_234
.LBB102_233:                            # %sw.default
                                        #   in Loop: Header=BB102_108 Depth=1
	jmp	.LBB102_234
.LBB102_234:                            # %sw.epilog
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB102_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_108
.LBB102_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB102_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB102_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB102_240
.LBB102_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB102_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB102_241:                            # %if.end929
	cmpl	$807352504, -180(%rbp)  # imm = 0x301F38B8
	jne	.LBB102_243
.LBB102_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_242
.Lfunc_end102:
	.size	SetMotionVectorPredictor.77, .Lfunc_end102-SetMotionVectorPredictor.77
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI102_0:
	.quad	.LBB102_189
	.quad	.LBB102_224
	.quad	.LBB102_227
	.quad	.LBB102_230
                                        # -- End function
	.text
	.globl	SetupLargerBlocks.78    # -- Begin function SetupLargerBlocks.78
	.p2align	4, 0x90
	.type	SetupLargerBlocks.78,@function
SetupLargerBlocks.78:                   # @SetupLargerBlocks.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$499835990, -76(%rbp)   # imm = 0x1DCAE456
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_1
.LBB103_4:                              # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_5:                              # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB103_5 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB103_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_5
.LBB103_8:                              # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_9:                              # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB103_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB103_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_9
.LBB103_12:                             # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_13:                             # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB103_13 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB103_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_13
.LBB103_16:                             # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_17:                             # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB103_17 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB103_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_17
.LBB103_20:                             # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_21:                             # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB103_21 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB103_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_21
.LBB103_24:                             # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_25:                             # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB103_25 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB103_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_25
.LBB103_28:                             # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_29:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB103_29 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB103_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_29
.LBB103_32:                             # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_33:                             # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB103_33 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB103_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_33
.LBB103_36:                             # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_37:                             # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB103_37 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB103_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_37
.LBB103_40:                             # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_41:                             # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB103_41 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB103_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_41
.LBB103_44:                             # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_45:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB103_45 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB103_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_45
.LBB103_48:                             # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_49:                             # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB103_49 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB103_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_49
.LBB103_52:                             # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_53:                             # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB103_53 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB103_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_53
.LBB103_56:                             # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_57:                             # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB103_57 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB103_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_57
.LBB103_60:                             # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_61:                             # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB103_61 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB103_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_61
.LBB103_64:                             # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_65:                             # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB103_65 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB103_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_65
.LBB103_68:                             # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_69:                             # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB103_69 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB103_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_69
.LBB103_72:                             # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_73:                             # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB103_73 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB103_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_73
.LBB103_76:                             # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_77:                             # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB103_77 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB103_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_77
.LBB103_80:                             # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_81:                             # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB103_81 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB103_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_81
.LBB103_84:                             # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_85:                             # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB103_85 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB103_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_85
.LBB103_88:                             # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_89:                             # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB103_89 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB103_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_89
.LBB103_92:                             # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_93:                             # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB103_93 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB103_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_93
.LBB103_96:                             # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB103_97:                             # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB103_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB103_97 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB103_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_97
.LBB103_100:                            # %for.end438
	cmpl	$499835990, -76(%rbp)   # imm = 0x1DCAE456
	jne	.LBB103_102
.LBB103_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_102:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_101
.Lfunc_end103:
	.size	SetupLargerBlocks.78, .Lfunc_end103-SetupLargerBlocks.78
	.cfi_endproc
                                        # -- End function
	.globl	SATD.79                 # -- Begin function SATD.79
	.p2align	4, 0x90
	.type	SATD.79,@function
SATD.79:                                # @SATD.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$735231196, -180(%rbp)  # imm = 0x2BD2BCDC
	movq	%rdi, -16(%rbp)
	movl	%esi, -184(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB104_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB104_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB104_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB104_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB104_6
.LBB104_5:                              # %cond.false
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-100(%rbp), %eax
.LBB104_6:                              # %cond.end
                                        #   in Loop: Header=BB104_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB104_2
.LBB104_8:                              # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB104_14
.LBB104_9:                              # %if.else
	movl	$0, -20(%rbp)
.LBB104_10:                             # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB104_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB104_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB104_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB104_10
.LBB104_13:                             # %for.end270
	jmp	.LBB104_14
.LBB104_14:                             # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$735231196, -180(%rbp)  # imm = 0x2BD2BCDC
	jne	.LBB104_16
.LBB104_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_15
.Lfunc_end104:
	.size	SATD.79, .Lfunc_end104-SATD.79
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.80            # -- Begin function find_SATD.80
	.p2align	4, 0x90
	.type	find_SATD.80,@function
find_SATD.80:                           # @find_SATD.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$210038690, -52(%rbp)   # imm = 0xC84EFA2
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-32(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_3 Depth 2
                                        #       Child Loop BB105_5 Depth 3
                                        #         Child Loop BB105_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB105_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	$0, -24(%rbp)
.LBB105_3:                              # %for.cond7
                                        #   Parent Loop BB105_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_5 Depth 3
                                        #         Child Loop BB105_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB105_5:                              # %for.cond10
                                        #   Parent Loop BB105_1 Depth=1
                                        #     Parent Loop BB105_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_7 Depth 4
	movl	-36(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB105_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB105_7:                              # %for.cond13
                                        #   Parent Loop BB105_1 Depth=1
                                        #     Parent Loop BB105_3 Depth=2
                                        #       Parent Loop BB105_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB105_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB105_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB105_7
.LBB105_10:                             # %for.end
                                        #   in Loop: Header=BB105_5 Depth=3
	jmp	.LBB105_11
.LBB105_11:                             # %for.inc24
                                        #   in Loop: Header=BB105_5 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB105_5
.LBB105_12:                             # %for.end26
                                        #   in Loop: Header=BB105_3 Depth=2
	jmp	.LBB105_13
.LBB105_13:                             # %for.inc27
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_3
.LBB105_14:                             # %for.end29
                                        #   in Loop: Header=BB105_1 Depth=1
	jmp	.LBB105_15
.LBB105_15:                             # %for.inc30
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_1
.LBB105_16:                             # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB105_26
# %bb.17:                               # %if.then
	movl	-32(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB105_24
# %bb.18:                               # %if.then
	movq	.LJTI105_0(,%rax,8), %rax
	jmpq	*%rax
.LBB105_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_25
.LBB105_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_25
.LBB105_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB105_25
.LBB105_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_25
.LBB105_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB105_25
.LBB105_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB105_25:                             # %sw.epilog
	jmp	.LBB105_31
.LBB105_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB105_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB105_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB105_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_27
.LBB105_30:                             # %for.end79
	jmp	.LBB105_31
.LBB105_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$210038690, -52(%rbp)   # imm = 0xC84EFA2
	jne	.LBB105_33
.LBB105_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_32
.Lfunc_end105:
	.size	find_SATD.80, .Lfunc_end105-find_SATD.80
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI105_0:
	.quad	.LBB105_19
	.quad	.LBB105_20
	.quad	.LBB105_20
	.quad	.LBB105_21
	.quad	.LBB105_22
	.quad	.LBB105_22
	.quad	.LBB105_23
                                        # -- End function
	.text
	.globl	SetMotionVectorPredictor.81 # -- Begin function SetMotionVectorPredictor.81
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.81,@function
SetMotionVectorPredictor.81:            # @SetMotionVectorPredictor.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$406856131, -180(%rbp)  # imm = 0x184021C3
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -156(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB106_2:                              # %if.end
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -168(%rbp)
	jle	.LBB106_19
# %bb.3:                                # %if.then2
	cmpl	$8, -156(%rbp)
	jge	.LBB106_14
# %bb.4:                                # %if.then4
	cmpl	$8, -168(%rbp)
	jne	.LBB106_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB106_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB106_8
.LBB106_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB106_8:                              # %if.end10
	jmp	.LBB106_13
.LBB106_9:                              # %if.else11
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB106_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB106_12
.LBB106_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB106_12:                             # %if.end18
	jmp	.LBB106_13
.LBB106_13:                             # %if.end19
	jmp	.LBB106_18
.LBB106_14:                             # %if.else20
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB106_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB106_17
.LBB106_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB106_17:                             # %if.end28
	jmp	.LBB106_18
.LBB106_18:                             # %if.end29
	jmp	.LBB106_19
.LBB106_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB106_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB106_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB106_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB106_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_25
.LBB106_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_25
.LBB106_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_28
.LBB106_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_28
.LBB106_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_31
.LBB106_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_31
.LBB106_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB106_72
.LBB106_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB106_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_37
.LBB106_36:                             # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_37:                             # %cond.end108
	jmp	.LBB106_39
.LBB106_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_39
.LBB106_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_43
.LBB106_42:                             # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_43:                             # %cond.end143
	jmp	.LBB106_45
.LBB106_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_45
.LBB106_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_49
.LBB106_48:                             # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_49:                             # %cond.end178
	jmp	.LBB106_51
.LBB106_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_51
.LBB106_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB106_71
.LBB106_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB106_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_56
.LBB106_55:                             # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_56:                             # %cond.end213
	jmp	.LBB106_58
.LBB106_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_58
.LBB106_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_62
.LBB106_61:                             # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_62:                             # %cond.end248
	jmp	.LBB106_64
.LBB106_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_64
.LBB106_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_68
.LBB106_67:                             # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_68:                             # %cond.end283
	jmp	.LBB106_70
.LBB106_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_70
.LBB106_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB106_71:                             # %if.end288
	jmp	.LBB106_72
.LBB106_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB106_86
.LBB106_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB106_85
.LBB106_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB106_84:                             # %if.end327
	jmp	.LBB106_85
.LBB106_85:                             # %if.end328
	jmp	.LBB106_86
.LBB106_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB106_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB106_96
# %bb.88:                               # %if.then335
	cmpl	$0, -156(%rbp)
	jne	.LBB106_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB106_91:                             # %if.end343
	jmp	.LBB106_95
.LBB106_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB106_94:                             # %if.end349
	jmp	.LBB106_95
.LBB106_95:                             # %if.end350
	jmp	.LBB106_107
.LBB106_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB106_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB106_106
# %bb.98:                               # %if.then357
	cmpl	$0, -168(%rbp)
	jne	.LBB106_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB106_101:                            # %if.end365
	jmp	.LBB106_105
.LBB106_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB106_104:                            # %if.end371
	jmp	.LBB106_105
.LBB106_105:                            # %if.end372
	jmp	.LBB106_106
.LBB106_106:                            # %if.end373
	jmp	.LBB106_107
.LBB106_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB106_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB106_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB106_121
.LBB106_111:                            # %if.then381
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_114
.LBB106_113:                            # %cond.false396
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_114
.LBB106_114:                            # %cond.end397
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_117
.LBB106_116:                            # %cond.false413
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_117
.LBB106_117:                            # %cond.end414
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_120
.LBB106_119:                            # %cond.false430
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_120
.LBB106_120:                            # %cond.end431
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB106_161
.LBB106_121:                            # %if.else433
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_126
.LBB106_125:                            # %cond.false462
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_126:                            # %cond.end474
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_128
.LBB106_127:                            # %cond.false476
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_128
.LBB106_128:                            # %cond.end477
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_132
.LBB106_131:                            # %cond.false500
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_132:                            # %cond.end513
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_134
.LBB106_133:                            # %cond.false515
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_134
.LBB106_134:                            # %cond.end516
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_138
.LBB106_137:                            # %cond.false539
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_138:                            # %cond.end552
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_140
.LBB106_139:                            # %cond.false554
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_140
.LBB106_140:                            # %cond.end555
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB106_160
.LBB106_141:                            # %if.else557
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_145
.LBB106_144:                            # %cond.false580
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_145:                            # %cond.end592
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_147
.LBB106_146:                            # %cond.false594
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_147
.LBB106_147:                            # %cond.end595
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_151
.LBB106_150:                            # %cond.false619
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_151:                            # %cond.end631
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_153
.LBB106_152:                            # %cond.false633
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_153
.LBB106_153:                            # %cond.end634
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_157
.LBB106_156:                            # %cond.false658
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_157:                            # %cond.end670
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_159
.LBB106_158:                            # %cond.false672
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_159
.LBB106_159:                            # %cond.end673
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB106_160:                            # %if.end675
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_161
.LBB106_161:                            # %if.end676
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_166
.LBB106_165:                            # %cond.false696
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_166:                            # %cond.end708
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_168
.LBB106_167:                            # %cond.false710
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_168
.LBB106_168:                            # %cond.end711
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_172
.LBB106_171:                            # %cond.false729
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_172:                            # %cond.end741
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_174
.LBB106_173:                            # %cond.false743
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_174
.LBB106_174:                            # %cond.end744
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB106_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_178
.LBB106_177:                            # %cond.false762
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_178:                            # %cond.end774
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_180
.LBB106_179:                            # %cond.false776
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_180
.LBB106_180:                            # %cond.end777
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_184
.LBB106_183:                            # %cond.false795
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_184:                            # %cond.end807
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_186
.LBB106_185:                            # %cond.false809
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-176(%rbp), %eax
.LBB106_186:                            # %cond.end810
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -172(%rbp)
.LBB106_187:                            # %if.end812
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB106_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	.LJTI106_0(,%rax,8), %rax
	jmpq	*%rax
.LBB106_189:                            # %sw.bb
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB106_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB106_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_193:                            # %if.end824
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_213
.LBB106_194:                            # %if.else825
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB106_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB106_197
.LBB106_196:                            # %cond.false831
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %edx
.LBB106_197:                            # %cond.end832
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB106_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB106_203
.LBB106_199:                            # %cond.false837
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB106_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB106_202
.LBB106_201:                            # %cond.false841
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB106_202:                            # %cond.end842
                                        #   in Loop: Header=BB106_108 Depth=1
.LBB106_203:                            # %cond.end844
                                        #   in Loop: Header=BB106_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB106_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB106_206
.LBB106_205:                            # %cond.false849
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %edx
.LBB106_206:                            # %cond.end850
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB106_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB106_212
.LBB106_208:                            # %cond.false855
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB106_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB106_211
.LBB106_210:                            # %cond.false859
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB106_211:                            # %cond.end860
                                        #   in Loop: Header=BB106_108 Depth=1
.LBB106_212:                            # %cond.end862
                                        #   in Loop: Header=BB106_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB106_213:                            # %if.end865
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB106_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB106_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB106_222
.LBB106_217:                            # %if.else877
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB106_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB106_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB106_221
.LBB106_220:                            # %if.else886
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_221:                            # %if.end889
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_222
.LBB106_222:                            # %if.end890
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_223
.LBB106_223:                            # %if.end891
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_224:                            # %sw.bb892
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_226:                            # %if.end898
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_227:                            # %sw.bb899
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_229:                            # %if.end905
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_230:                            # %sw.bb906
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-172(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_232:                            # %if.end912
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_233:                            # %sw.default
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_234:                            # %sw.epilog
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_108
.LBB106_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB106_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB106_240
.LBB106_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB106_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB106_241:                            # %if.end929
	cmpl	$406856131, -180(%rbp)  # imm = 0x184021C3
	jne	.LBB106_243
.LBB106_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_242
.Lfunc_end106:
	.size	SetMotionVectorPredictor.81, .Lfunc_end106-SetMotionVectorPredictor.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI106_0:
	.quad	.LBB106_189
	.quad	.LBB106_224
	.quad	.LBB106_227
	.quad	.LBB106_230
                                        # -- End function
	.text
	.globl	Get_Direct_CostMB.82    # -- Begin function Get_Direct_CostMB.82
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.82,@function
Get_Direct_CostMB.82:                   # @Get_Direct_CostMB.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$772041832, -28(%rbp)   # imm = 0x2E046C68
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB107_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB107_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB107_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB107_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB107_5
.LBB107_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB107_18
.LBB107_5:                              # %if.end
                                        #   in Loop: Header=BB107_1 Depth=1
	jmp	.LBB107_6
.LBB107_6:                              # %for.inc
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB107_1
.LBB107_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB107_9
	jmp	.LBB107_8
.LBB107_8:                              # %for.end
	subl	$2, %eax
	je	.LBB107_15
	jmp	.LBB107_16
.LBB107_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB107_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB107_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB107_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB107_14
.LBB107_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB107_14:                             # %if.end9
	jmp	.LBB107_17
.LBB107_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_17
.LBB107_16:                             # %sw.default
	jmp	.LBB107_17
.LBB107_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB107_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$772041832, -28(%rbp)   # imm = 0x2E046C68
	jne	.LBB107_20
.LBB107_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_19
.Lfunc_end107:
	.size	Get_Direct_CostMB.82, .Lfunc_end107-Get_Direct_CostMB.82
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.83            # -- Begin function find_SATD.83
	.p2align	4, 0x90
	.type	find_SATD.83,@function
find_SATD.83:                           # @find_SATD.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$2044214129, -56(%rbp)  # imm = 0x79D83B71
	movq	%rdi, -64(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -20(%rbp)
.LBB108_3:                              # %for.cond7
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB108_5:                              # %for.cond10
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_7:                              # %for.cond13
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        #       Parent Loop BB108_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB108_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB108_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB108_7
.LBB108_10:                             # %for.end
                                        #   in Loop: Header=BB108_5 Depth=3
	jmp	.LBB108_11
.LBB108_11:                             # %for.inc24
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB108_5
.LBB108_12:                             # %for.end26
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_13
.LBB108_13:                             # %for.inc27
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_3
.LBB108_14:                             # %for.end29
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_15
.LBB108_15:                             # %for.inc30
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_1
.LBB108_16:                             # %for.end32
	cmpl	$0, -52(%rbp)
	je	.LBB108_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB108_24
# %bb.18:                               # %if.then
	movq	.LJTI108_0(,%rax,8), %rax
	jmpq	*%rax
.LBB108_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB108_25:                             # %sw.epilog
	jmp	.LBB108_31
.LBB108_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB108_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB108_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB108_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_27
.LBB108_30:                             # %for.end79
	jmp	.LBB108_31
.LBB108_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$2044214129, -56(%rbp)  # imm = 0x79D83B71
	jne	.LBB108_33
.LBB108_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_32
.Lfunc_end108:
	.size	find_SATD.83, .Lfunc_end108-find_SATD.83
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI108_0:
	.quad	.LBB108_19
	.quad	.LBB108_20
	.quad	.LBB108_20
	.quad	.LBB108_21
	.quad	.LBB108_22
	.quad	.LBB108_22
	.quad	.LBB108_23
                                        # -- End function
	.text
	.globl	BIDPartitionCost.84     # -- Begin function BIDPartitionCost.84
	.p2align	4, 0x90
	.type	BIDPartitionCost.84,@function
BIDPartitionCost.84:                    # @BIDPartitionCost.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$763366491, -108(%rbp)  # imm = 0x2D800C5B
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB109_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB109_3
.LBB109_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB109_3
.LBB109_3:                              # %cond.end
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB109_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB109_6
.LBB109_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB109_6
.LBB109_6:                              # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB109_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB109_9
.LBB109_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB109_9
.LBB109_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB109_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB109_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB109_12:                             # %for.cond53
                                        #   Parent Loop BB109_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB109_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB109_12 Depth=2
	movl	-100(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_12
.LBB109_15:                             # %for.end
                                        #   in Loop: Header=BB109_10 Depth=1
	jmp	.LBB109_16
.LBB109_16:                             # %for.inc164
                                        #   in Loop: Header=BB109_10 Depth=1
	movl	-124(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_10
.LBB109_17:                             # %for.end166
	movl	-116(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB109_18:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_20 Depth 2
                                        #       Child Loop BB109_22 Depth 3
                                        #         Child Loop BB109_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB109_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB109_20:                             # %for.cond185
                                        #   Parent Loop BB109_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_22 Depth 3
                                        #         Child Loop BB109_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB109_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-72(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB109_22:                             # %for.cond196
                                        #   Parent Loop BB109_18 Depth=1
                                        #     Parent Loop BB109_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB109_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB109_22 Depth=3
	movl	$0, -32(%rbp)
.LBB109_24:                             # %for.cond200
                                        #   Parent Loop BB109_18 Depth=1
                                        #     Parent Loop BB109_20 Depth=2
                                        #       Parent Loop BB109_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB109_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB109_24 Depth=4
	movq	imgY_org, %rax
	movl	-104(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB109_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_24
.LBB109_27:                             # %for.end229
                                        #   in Loop: Header=BB109_22 Depth=3
	jmp	.LBB109_28
.LBB109_28:                             # %for.inc230
                                        #   in Loop: Header=BB109_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_22
.LBB109_29:                             # %for.end232
                                        #   in Loop: Header=BB109_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB109_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB109_32
.LBB109_31:                             # %if.then
                                        #   in Loop: Header=BB109_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_32:                             # %if.end
                                        #   in Loop: Header=BB109_20 Depth=2
	jmp	.LBB109_33
.LBB109_33:                             # %for.inc236
                                        #   in Loop: Header=BB109_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_20
.LBB109_34:                             # %for.end239
                                        #   in Loop: Header=BB109_18 Depth=1
	jmp	.LBB109_35
.LBB109_35:                             # %for.inc240
                                        #   in Loop: Header=BB109_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_18
.LBB109_36:                             # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB109_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB109_39:                             # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_41 Depth 2
                                        #       Child Loop BB109_43 Depth 3
                                        #         Child Loop BB109_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB109_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB109_39 Depth=1
	movl	$0, -44(%rbp)
.LBB109_41:                             # %for.cond257
                                        #   Parent Loop BB109_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_43 Depth 3
                                        #         Child Loop BB109_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB109_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB109_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB109_43:                             # %for.cond265
                                        #   Parent Loop BB109_39 Depth=1
                                        #     Parent Loop BB109_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB109_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB109_43 Depth=3
	movl	$0, -28(%rbp)
.LBB109_45:                             # %for.cond269
                                        #   Parent Loop BB109_39 Depth=1
                                        #     Parent Loop BB109_41 Depth=2
                                        #       Parent Loop BB109_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB109_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB109_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB109_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_45
.LBB109_48:                             # %for.end284
                                        #   in Loop: Header=BB109_43 Depth=3
	jmp	.LBB109_49
.LBB109_49:                             # %for.inc285
                                        #   in Loop: Header=BB109_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB109_43
.LBB109_50:                             # %for.end287
                                        #   in Loop: Header=BB109_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB109_41 Depth=2
	movl	-128(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB109_41
.LBB109_52:                             # %for.end294
                                        #   in Loop: Header=BB109_39 Depth=1
	jmp	.LBB109_53
.LBB109_53:                             # %for.inc295
                                        #   in Loop: Header=BB109_39 Depth=1
	movl	-112(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB109_39
.LBB109_54:                             # %for.end297
	jmp	.LBB109_55
.LBB109_55:                             # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$763366491, -108(%rbp)  # imm = 0x2D800C5B
	jne	.LBB109_57
.LBB109_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_56
.Lfunc_end109:
	.size	BIDPartitionCost.84, .Lfunc_end109-BIDPartitionCost.84
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.85
.LCPI110_0:
	.quad	4602678819172646912     # double 0.5
.LCPI110_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.85
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.85,@function
SubPelBlockSearchBiPred.85:             # @SubPelBlockSearchBiPred.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI110_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1577899368, -196(%rbp) # imm = 0x5E0CD568
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB110_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB110_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB110_4
.LBB110_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB110_4:                              # %cond.end
	jmp	.LBB110_6
.LBB110_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB110_6:                              # %cond.end18
	movw	%ax, -170(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB110_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB110_10
.LBB110_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB110_10
.LBB110_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -114(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB110_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB110_14:                             # %cond.end55
	jmp	.LBB110_16
.LBB110_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB110_16
.LBB110_16:                             # %cond.end58
	movw	%ax, -38(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB110_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB110_20
.LBB110_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB110_20:                             # %cond.end82
	jmp	.LBB110_22
.LBB110_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB110_22
.LBB110_22:                             # %cond.end85
	movw	%ax, -34(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB110_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB110_26
.LBB110_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB110_26:                             # %cond.end106
	jmp	.LBB110_28
.LBB110_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB110_28
.LBB110_28:                             # %cond.end109
	movw	%ax, -176(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB110_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB110_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB110_32
.LBB110_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB110_32:                             # %cond.end130
	jmp	.LBB110_34
.LBB110_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB110_34
.LBB110_34:                             # %cond.end133
	movw	%ax, -174(%rbp)
	movswl	-174(%rbp), %eax
	movswl	-176(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB110_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB110_37
.LBB110_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB110_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB110_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB110_40
.LBB110_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB110_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_45
# %bb.41:                               # %land.lhs.true197
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB110_46
.LBB110_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB110_46:                             # %if.end
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_51
# %bb.47:                               # %land.lhs.true224
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB110_52
.LBB110_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB110_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB110_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_55 Depth 2
                                        #       Child Loop BB110_60 Depth 3
                                        #         Child Loop BB110_162 Depth 4
                                        #           Child Loop BB110_164 Depth 5
                                        #       Child Loop BB110_175 Depth 3
                                        #         Child Loop BB110_181 Depth 4
                                        #           Child Loop BB110_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-170(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB110_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB110_55:                             # %for.cond283
                                        #   Parent Loop BB110_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_60 Depth 3
                                        #         Child Loop BB110_162 Depth 4
                                        #           Child Loop BB110_164 Depth 5
                                        #       Child Loop BB110_175 Depth 3
                                        #         Child Loop BB110_181 Depth 4
                                        #           Child Loop BB110_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB110_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB110_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB110_57:                             # %land.end
                                        #   in Loop: Header=BB110_55 Depth=2
	testb	$1, %al
	jne	.LBB110_58
	jmp	.LBB110_195
.LBB110_58:                             # %for.body289
                                        #   in Loop: Header=BB110_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB110_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB110_55 Depth=2
	movw	$0, -40(%rbp)
.LBB110_60:                             # %for.cond304
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_162 Depth 4
                                        #           Child Loop BB110_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB110_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_67
.LBB110_63:                             # %cond.false345
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_66
.LBB110_65:                             # %cond.false369
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_66:                             # %cond.end389
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_67:                             # %cond.end391
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_73
.LBB110_69:                             # %cond.false421
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_72
.LBB110_71:                             # %cond.false448
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_72:                             # %cond.end470
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_73:                             # %cond.end472
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_79
.LBB110_75:                             # %cond.false505
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_78
.LBB110_77:                             # %cond.false532
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_78:                             # %cond.end554
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_79:                             # %cond.end556
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_85
.LBB110_81:                             # %cond.false589
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_84
.LBB110_83:                             # %cond.false616
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_84:                             # %cond.end638
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_85:                             # %cond.end640
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_91
.LBB110_87:                             # %cond.false681
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_90
.LBB110_89:                             # %cond.false706
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_90:                             # %cond.end726
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_91:                             # %cond.end728
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_97
.LBB110_93:                             # %cond.false759
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_96
.LBB110_95:                             # %cond.false786
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_96:                             # %cond.end808
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_97:                             # %cond.end810
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_103
.LBB110_99:                             # %cond.false843
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_102
.LBB110_101:                            # %cond.false870
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_102:                            # %cond.end892
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_103:                            # %cond.end894
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_109
.LBB110_105:                            # %cond.false927
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_108
.LBB110_107:                            # %cond.false954
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_108:                            # %cond.end976
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_109:                            # %cond.end978
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_115
.LBB110_111:                            # %cond.false1019
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_114
.LBB110_113:                            # %cond.false1044
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_114:                            # %cond.end1064
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_115:                            # %cond.end1066
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_121
.LBB110_117:                            # %cond.false1097
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_120
.LBB110_119:                            # %cond.false1124
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_120:                            # %cond.end1146
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_121:                            # %cond.end1148
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_127
.LBB110_123:                            # %cond.false1181
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_126
.LBB110_125:                            # %cond.false1208
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_126:                            # %cond.end1230
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_127:                            # %cond.end1232
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_133
.LBB110_129:                            # %cond.false1265
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_132
.LBB110_131:                            # %cond.false1292
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_132:                            # %cond.end1314
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_133:                            # %cond.end1316
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_139
.LBB110_135:                            # %cond.false1357
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_138
.LBB110_137:                            # %cond.false1382
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_138:                            # %cond.end1402
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_139:                            # %cond.end1404
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_145
.LBB110_141:                            # %cond.false1435
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_144
.LBB110_143:                            # %cond.false1462
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_144:                            # %cond.end1484
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_145:                            # %cond.end1486
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_151
.LBB110_147:                            # %cond.false1519
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_150
.LBB110_149:                            # %cond.false1546
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_150:                            # %cond.end1568
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_151:                            # %cond.end1570
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB110_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_157
.LBB110_153:                            # %cond.false1603
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB110_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_156
.LBB110_155:                            # %cond.false1630
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_156:                            # %cond.end1652
                                        #   in Loop: Header=BB110_60 Depth=3
.LBB110_157:                            # %cond.end1654
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB110_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB110_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB110_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB110_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB110_173
.LBB110_160:                            # %if.end1673
                                        #   in Loop: Header=BB110_60 Depth=3
	jmp	.LBB110_170
.LBB110_161:                            # %if.else1674
                                        #   in Loop: Header=BB110_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB110_162:                            # %for.cond1675
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        #       Parent Loop BB110_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB110_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB110_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB110_162 Depth=4
	movl	$0, -100(%rbp)
.LBB110_164:                            # %for.cond1679
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        #       Parent Loop BB110_60 Depth=3
                                        #         Parent Loop BB110_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB110_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB110_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB110_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB110_164
.LBB110_167:                            # %for.end
                                        #   in Loop: Header=BB110_162 Depth=4
	jmp	.LBB110_168
.LBB110_168:                            # %for.inc1694
                                        #   in Loop: Header=BB110_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB110_162
.LBB110_169:                            # %for.end1696
                                        #   in Loop: Header=BB110_60 Depth=3
	jmp	.LBB110_170
.LBB110_170:                            # %if.end1697
                                        #   in Loop: Header=BB110_60 Depth=3
	jmp	.LBB110_171
.LBB110_171:                            # %for.inc1698
                                        #   in Loop: Header=BB110_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB110_60
.LBB110_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB110_55 Depth=2
	jmp	.LBB110_173
.LBB110_173:                            # %for.end1702
                                        #   in Loop: Header=BB110_55 Depth=2
	jmp	.LBB110_193
.LBB110_174:                            # %if.else1703
                                        #   in Loop: Header=BB110_55 Depth=2
	movw	$0, -40(%rbp)
.LBB110_175:                            # %for.cond1704
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_181 Depth 4
                                        #           Child Loop BB110_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB110_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB110_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB110_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB110_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB110_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB110_192
.LBB110_179:                            # %if.end2054
                                        #   in Loop: Header=BB110_175 Depth=3
	jmp	.LBB110_189
.LBB110_180:                            # %if.else2055
                                        #   in Loop: Header=BB110_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB110_181:                            # %for.cond2056
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        #       Parent Loop BB110_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB110_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB110_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB110_181 Depth=4
	movl	$0, -100(%rbp)
.LBB110_183:                            # %for.cond2060
                                        #   Parent Loop BB110_53 Depth=1
                                        #     Parent Loop BB110_55 Depth=2
                                        #       Parent Loop BB110_175 Depth=3
                                        #         Parent Loop BB110_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB110_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB110_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB110_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB110_183
.LBB110_186:                            # %for.end2077
                                        #   in Loop: Header=BB110_181 Depth=4
	jmp	.LBB110_187
.LBB110_187:                            # %for.inc2078
                                        #   in Loop: Header=BB110_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB110_181
.LBB110_188:                            # %for.end2080
                                        #   in Loop: Header=BB110_175 Depth=3
	jmp	.LBB110_189
.LBB110_189:                            # %if.end2081
                                        #   in Loop: Header=BB110_175 Depth=3
	jmp	.LBB110_190
.LBB110_190:                            # %for.inc2082
                                        #   in Loop: Header=BB110_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB110_175
.LBB110_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB110_55 Depth=2
	jmp	.LBB110_192
.LBB110_192:                            # %for.end2086
                                        #   in Loop: Header=BB110_55 Depth=2
	jmp	.LBB110_193
.LBB110_193:                            # %if.end2087
                                        #   in Loop: Header=BB110_55 Depth=2
	jmp	.LBB110_194
.LBB110_194:                            # %for.inc2088
                                        #   in Loop: Header=BB110_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB110_55
.LBB110_195:                            # %for.end2092
                                        #   in Loop: Header=BB110_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB110_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB110_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB110_197:                            # %if.end2101
                                        #   in Loop: Header=BB110_53 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB110_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB110_53 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB110_199:                            # %if.end2107
                                        #   in Loop: Header=BB110_53 Depth=1
	jmp	.LBB110_200
.LBB110_200:                            # %for.inc2108
                                        #   in Loop: Header=BB110_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB110_53
.LBB110_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB110_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB110_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB110_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB110_205:                            # %if.end2129
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB110_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB110_211
.LBB110_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB110_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB110_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_214 Depth 2
                                        #       Child Loop BB110_219 Depth 3
                                        #         Child Loop BB110_321 Depth 4
                                        #           Child Loop BB110_323 Depth 5
                                        #       Child Loop BB110_334 Depth 3
                                        #         Child Loop BB110_340 Depth 4
                                        #           Child Loop BB110_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB110_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB110_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -86(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB110_214:                            # %for.cond2194
                                        #   Parent Loop BB110_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_219 Depth 3
                                        #         Child Loop BB110_321 Depth 4
                                        #           Child Loop BB110_323 Depth 5
                                        #       Child Loop BB110_334 Depth 3
                                        #         Child Loop BB110_340 Depth 4
                                        #           Child Loop BB110_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB110_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB110_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB110_216:                            # %land.end2202
                                        #   in Loop: Header=BB110_214 Depth=2
	testb	$1, %al
	jne	.LBB110_217
	jmp	.LBB110_354
.LBB110_217:                            # %for.body2203
                                        #   in Loop: Header=BB110_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -84(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB110_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB110_214 Depth=2
	movw	$0, -40(%rbp)
.LBB110_219:                            # %for.cond2218
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_321 Depth 4
                                        #           Child Loop BB110_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB110_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_226
.LBB110_222:                            # %cond.false2261
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_225
.LBB110_224:                            # %cond.false2286
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_225:                            # %cond.end2306
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_226:                            # %cond.end2308
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_232
.LBB110_228:                            # %cond.false2339
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_231
.LBB110_230:                            # %cond.false2366
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_231:                            # %cond.end2388
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_232:                            # %cond.end2390
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_238
.LBB110_234:                            # %cond.false2423
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_237
.LBB110_236:                            # %cond.false2450
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_237:                            # %cond.end2472
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_238:                            # %cond.end2474
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_244
.LBB110_240:                            # %cond.false2507
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_243
.LBB110_242:                            # %cond.false2534
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_243:                            # %cond.end2556
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_244:                            # %cond.end2558
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_250
.LBB110_246:                            # %cond.false2599
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_249
.LBB110_248:                            # %cond.false2624
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_249:                            # %cond.end2644
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_250:                            # %cond.end2646
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_256
.LBB110_252:                            # %cond.false2677
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_255
.LBB110_254:                            # %cond.false2704
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_255:                            # %cond.end2726
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_256:                            # %cond.end2728
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_262
.LBB110_258:                            # %cond.false2761
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_261
.LBB110_260:                            # %cond.false2788
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_261:                            # %cond.end2810
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_262:                            # %cond.end2812
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_268
.LBB110_264:                            # %cond.false2845
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_267
.LBB110_266:                            # %cond.false2872
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_267:                            # %cond.end2894
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_268:                            # %cond.end2896
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_274
.LBB110_270:                            # %cond.false2937
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_273
.LBB110_272:                            # %cond.false2962
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_273:                            # %cond.end2982
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_274:                            # %cond.end2984
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_280
.LBB110_276:                            # %cond.false3015
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_279
.LBB110_278:                            # %cond.false3042
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_279:                            # %cond.end3064
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_280:                            # %cond.end3066
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_286
.LBB110_282:                            # %cond.false3099
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_285
.LBB110_284:                            # %cond.false3126
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_285:                            # %cond.end3148
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_286:                            # %cond.end3150
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_292
.LBB110_288:                            # %cond.false3183
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_291
.LBB110_290:                            # %cond.false3210
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_291:                            # %cond.end3232
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_292:                            # %cond.end3234
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_298
.LBB110_294:                            # %cond.false3275
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_297
.LBB110_296:                            # %cond.false3300
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_297:                            # %cond.end3320
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_298:                            # %cond.end3322
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_304
.LBB110_300:                            # %cond.false3353
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_303
.LBB110_302:                            # %cond.false3380
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_303:                            # %cond.end3402
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_304:                            # %cond.end3404
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_310
.LBB110_306:                            # %cond.false3437
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_309
.LBB110_308:                            # %cond.false3464
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_309:                            # %cond.end3486
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_310:                            # %cond.end3488
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB110_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB110_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB110_316
.LBB110_312:                            # %cond.false3521
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB110_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB110_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB110_315
.LBB110_314:                            # %cond.false3548
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-38(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-34(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB110_315:                            # %cond.end3570
                                        #   in Loop: Header=BB110_219 Depth=3
.LBB110_316:                            # %cond.end3572
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB110_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB110_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB110_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB110_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB110_332
.LBB110_319:                            # %if.end3593
                                        #   in Loop: Header=BB110_219 Depth=3
	jmp	.LBB110_329
.LBB110_320:                            # %if.else3594
                                        #   in Loop: Header=BB110_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB110_321:                            # %for.cond3595
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        #       Parent Loop BB110_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB110_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB110_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB110_321 Depth=4
	movl	$0, -100(%rbp)
.LBB110_323:                            # %for.cond3599
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        #       Parent Loop BB110_219 Depth=3
                                        #         Parent Loop BB110_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB110_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB110_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB110_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB110_323
.LBB110_326:                            # %for.end3616
                                        #   in Loop: Header=BB110_321 Depth=4
	jmp	.LBB110_327
.LBB110_327:                            # %for.inc3617
                                        #   in Loop: Header=BB110_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB110_321
.LBB110_328:                            # %for.end3619
                                        #   in Loop: Header=BB110_219 Depth=3
	jmp	.LBB110_329
.LBB110_329:                            # %if.end3620
                                        #   in Loop: Header=BB110_219 Depth=3
	jmp	.LBB110_330
.LBB110_330:                            # %for.inc3621
                                        #   in Loop: Header=BB110_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB110_219
.LBB110_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB110_214 Depth=2
	jmp	.LBB110_332
.LBB110_332:                            # %for.end3625
                                        #   in Loop: Header=BB110_214 Depth=2
	jmp	.LBB110_352
.LBB110_333:                            # %if.else3626
                                        #   in Loop: Header=BB110_214 Depth=2
	movw	$0, -40(%rbp)
.LBB110_334:                            # %for.cond3627
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB110_340 Depth 4
                                        #           Child Loop BB110_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB110_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB110_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-84(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-84(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB110_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB110_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB110_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB110_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB110_351
.LBB110_338:                            # %if.end3978
                                        #   in Loop: Header=BB110_334 Depth=3
	jmp	.LBB110_348
.LBB110_339:                            # %if.else3979
                                        #   in Loop: Header=BB110_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB110_340:                            # %for.cond3980
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        #       Parent Loop BB110_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB110_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB110_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB110_340 Depth=4
	movl	$0, -100(%rbp)
.LBB110_342:                            # %for.cond3984
                                        #   Parent Loop BB110_212 Depth=1
                                        #     Parent Loop BB110_214 Depth=2
                                        #       Parent Loop BB110_334 Depth=3
                                        #         Parent Loop BB110_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB110_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB110_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB110_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB110_342
.LBB110_345:                            # %for.end4001
                                        #   in Loop: Header=BB110_340 Depth=4
	jmp	.LBB110_346
.LBB110_346:                            # %for.inc4002
                                        #   in Loop: Header=BB110_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB110_340
.LBB110_347:                            # %for.end4004
                                        #   in Loop: Header=BB110_334 Depth=3
	jmp	.LBB110_348
.LBB110_348:                            # %if.end4005
                                        #   in Loop: Header=BB110_334 Depth=3
	jmp	.LBB110_349
.LBB110_349:                            # %for.inc4006
                                        #   in Loop: Header=BB110_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB110_334
.LBB110_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB110_214 Depth=2
	jmp	.LBB110_351
.LBB110_351:                            # %for.end4010
                                        #   in Loop: Header=BB110_214 Depth=2
	jmp	.LBB110_352
.LBB110_352:                            # %if.end4011
                                        #   in Loop: Header=BB110_214 Depth=2
	jmp	.LBB110_353
.LBB110_353:                            # %for.inc4012
                                        #   in Loop: Header=BB110_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB110_214
.LBB110_354:                            # %for.end4016
                                        #   in Loop: Header=BB110_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB110_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB110_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-86(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -86(%rbp)
.LBB110_356:                            # %if.end4026
                                        #   in Loop: Header=BB110_212 Depth=1
	movswl	-86(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB110_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB110_212 Depth=1
	movswl	-86(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB110_358:                            # %if.end4032
                                        #   in Loop: Header=BB110_212 Depth=1
	jmp	.LBB110_359
.LBB110_359:                            # %for.inc4033
                                        #   in Loop: Header=BB110_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB110_212
.LBB110_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB110_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB110_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1577899368, -196(%rbp) # imm = 0x5E0CD568
	jne	.LBB110_364
.LBB110_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_363
.Lfunc_end110:
	.size	SubPelBlockSearchBiPred.85, .Lfunc_end110-SubPelBlockSearchBiPred.85
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.86    # -- Begin function Get_Direct_CostMB.86
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.86,@function
Get_Direct_CostMB.86:                   # @Get_Direct_CostMB.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$569947736, -28(%rbp)   # imm = 0x21F8B658
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB111_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB111_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB111_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB111_5
.LBB111_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_18
.LBB111_5:                              # %if.end
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_6
.LBB111_6:                              # %for.inc
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_1
.LBB111_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB111_9
	jmp	.LBB111_8
.LBB111_8:                              # %for.end
	subl	$2, %eax
	je	.LBB111_15
	jmp	.LBB111_16
.LBB111_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB111_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB111_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB111_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB111_14
.LBB111_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB111_14:                             # %if.end9
	jmp	.LBB111_17
.LBB111_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_17
.LBB111_16:                             # %sw.default
	jmp	.LBB111_17
.LBB111_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB111_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$569947736, -28(%rbp)   # imm = 0x21F8B658
	jne	.LBB111_20
.LBB111_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_19
.Lfunc_end111:
	.size	Get_Direct_CostMB.86, .Lfunc_end111-Get_Direct_CostMB.86
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.87        # -- Begin function GetSkipCostMB.87
	.p2align	4, 0x90
	.type	GetSkipCostMB.87,@function
GetSkipCostMB.87:                       # @GetSkipCostMB.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1512478382, -52(%rbp)  # imm = 0x5A2696AE
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_3 Depth 2
                                        #       Child Loop BB112_5 Depth 3
                                        #         Child Loop BB112_7 Depth 4
                                        #           Child Loop BB112_9 Depth 5
                                        #     Child Loop BB112_24 Depth 2
                                        #       Child Loop BB112_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB112_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB112_3:                              # %for.cond2
                                        #   Parent Loop BB112_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_5 Depth 3
                                        #         Child Loop BB112_7 Depth 4
                                        #           Child Loop BB112_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB112_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB112_5:                              # %for.cond6
                                        #   Parent Loop BB112_1 Depth=1
                                        #     Parent Loop BB112_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_7 Depth 4
                                        #           Child Loop BB112_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB112_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB112_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB112_7:                              # %for.cond11
                                        #   Parent Loop BB112_1 Depth=1
                                        #     Parent Loop BB112_3 Depth=2
                                        #       Parent Loop BB112_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB112_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB112_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB112_7 Depth=4
	movl	$0, -12(%rbp)
.LBB112_9:                              # %for.cond14
                                        #   Parent Loop BB112_1 Depth=1
                                        #     Parent Loop BB112_3 Depth=2
                                        #       Parent Loop BB112_5 Depth=3
                                        #         Parent Loop BB112_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB112_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB112_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-640(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB112_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_9
.LBB112_12:                             # %for.end
                                        #   in Loop: Header=BB112_7 Depth=4
	jmp	.LBB112_13
.LBB112_13:                             # %for.inc39
                                        #   in Loop: Header=BB112_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_7
.LBB112_14:                             # %for.end41
                                        #   in Loop: Header=BB112_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB112_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB112_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB112_17
.LBB112_16:                             # %if.then
                                        #   in Loop: Header=BB112_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB112_17:                             # %if.end
                                        #   in Loop: Header=BB112_5 Depth=3
	jmp	.LBB112_18
.LBB112_18:                             # %for.inc45
                                        #   in Loop: Header=BB112_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB112_5
.LBB112_19:                             # %for.end47
                                        #   in Loop: Header=BB112_3 Depth=2
	jmp	.LBB112_20
.LBB112_20:                             # %for.inc48
                                        #   in Loop: Header=BB112_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB112_3
.LBB112_21:                             # %for.end50
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB112_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB112_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB112_24:                             # %for.cond58
                                        #   Parent Loop BB112_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB112_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB112_24 Depth=2
	movl	$0, -12(%rbp)
.LBB112_26:                             # %for.cond62
                                        #   Parent Loop BB112_1 Depth=1
                                        #     Parent Loop BB112_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB112_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB112_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-640(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB112_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB112_26
.LBB112_29:                             # %for.end75
                                        #   in Loop: Header=BB112_24 Depth=2
	jmp	.LBB112_30
.LBB112_30:                             # %for.inc76
                                        #   in Loop: Header=BB112_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_24
.LBB112_31:                             # %for.end78
                                        #   in Loop: Header=BB112_1 Depth=1
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB112_32:                             # %if.end83
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_33
.LBB112_33:                             # %for.inc84
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB112_1
.LBB112_34:                             # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$1512478382, -52(%rbp)  # imm = 0x5A2696AE
	jne	.LBB112_36
.LBB112_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_35
.Lfunc_end112:
	.size	GetSkipCostMB.87, .Lfunc_end112-GetSkipCostMB.87
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.88     # -- Begin function BIDPartitionCost.88
	.p2align	4, 0x90
	.type	BIDPartitionCost.88,@function
BIDPartitionCost.88:                    # @BIDPartitionCost.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$171426194, -104(%rbp)  # imm = 0xA37C192
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB113_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB113_3
.LBB113_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB113_3
.LBB113_3:                              # %cond.end
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB113_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB113_6
.LBB113_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB113_6
.LBB113_6:                              # %cond.end17
	movl	%eax, -128(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB113_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB113_9
.LBB113_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB113_9
.LBB113_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -64(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB113_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB113_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB113_12:                             # %for.cond53
                                        #   Parent Loop BB113_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB113_12 Depth=2
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_12
.LBB113_15:                             # %for.end
                                        #   in Loop: Header=BB113_10 Depth=1
	jmp	.LBB113_16
.LBB113_16:                             # %for.inc164
                                        #   in Loop: Header=BB113_10 Depth=1
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_10
.LBB113_17:                             # %for.end166
	movl	-120(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB113_18:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_20 Depth 2
                                        #       Child Loop BB113_22 Depth 3
                                        #         Child Loop BB113_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB113_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB113_20:                             # %for.cond185
                                        #   Parent Loop BB113_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_22 Depth 3
                                        #         Child Loop BB113_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-64(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB113_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	-76(%rbp), %edi
	movl	-68(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB113_22:                             # %for.cond196
                                        #   Parent Loop BB113_18 Depth=1
                                        #     Parent Loop BB113_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB113_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB113_22 Depth=3
	movl	$0, -32(%rbp)
.LBB113_24:                             # %for.cond200
                                        #   Parent Loop BB113_18 Depth=1
                                        #     Parent Loop BB113_20 Depth=2
                                        #       Parent Loop BB113_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB113_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB113_24 Depth=4
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB113_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB113_24
.LBB113_27:                             # %for.end229
                                        #   in Loop: Header=BB113_22 Depth=3
	jmp	.LBB113_28
.LBB113_28:                             # %for.inc230
                                        #   in Loop: Header=BB113_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_22
.LBB113_29:                             # %for.end232
                                        #   in Loop: Header=BB113_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB113_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB113_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB113_32
.LBB113_31:                             # %if.then
                                        #   in Loop: Header=BB113_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB113_32:                             # %if.end
                                        #   in Loop: Header=BB113_20 Depth=2
	jmp	.LBB113_33
.LBB113_33:                             # %for.inc236
                                        #   in Loop: Header=BB113_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_20
.LBB113_34:                             # %for.end239
                                        #   in Loop: Header=BB113_18 Depth=1
	jmp	.LBB113_35
.LBB113_35:                             # %for.inc240
                                        #   in Loop: Header=BB113_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_18
.LBB113_36:                             # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB113_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB113_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB113_39:                             # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_41 Depth 2
                                        #       Child Loop BB113_43 Depth 3
                                        #         Child Loop BB113_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB113_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB113_39 Depth=1
	movl	$0, -44(%rbp)
.LBB113_41:                             # %for.cond257
                                        #   Parent Loop BB113_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_43 Depth 3
                                        #         Child Loop BB113_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB113_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB113_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB113_43:                             # %for.cond265
                                        #   Parent Loop BB113_39 Depth=1
                                        #     Parent Loop BB113_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB113_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB113_43 Depth=3
	movl	$0, -28(%rbp)
.LBB113_45:                             # %for.cond269
                                        #   Parent Loop BB113_39 Depth=1
                                        #     Parent Loop BB113_41 Depth=2
                                        #       Parent Loop BB113_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB113_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB113_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB113_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_45
.LBB113_48:                             # %for.end284
                                        #   in Loop: Header=BB113_43 Depth=3
	jmp	.LBB113_49
.LBB113_49:                             # %for.inc285
                                        #   in Loop: Header=BB113_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB113_43
.LBB113_50:                             # %for.end287
                                        #   in Loop: Header=BB113_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB113_41 Depth=2
	movl	-112(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_41
.LBB113_52:                             # %for.end294
                                        #   in Loop: Header=BB113_39 Depth=1
	jmp	.LBB113_53
.LBB113_53:                             # %for.inc295
                                        #   in Loop: Header=BB113_39 Depth=1
	movl	-128(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_39
.LBB113_54:                             # %for.end297
	jmp	.LBB113_55
.LBB113_55:                             # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$171426194, -104(%rbp)  # imm = 0xA37C192
	jne	.LBB113_57
.LBB113_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_56
.Lfunc_end113:
	.size	BIDPartitionCost.88, .Lfunc_end113-BIDPartitionCost.88
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.89    # -- Begin function Get_Direct_CostMB.89
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.89,@function
Get_Direct_CostMB.89:                   # @Get_Direct_CostMB.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1580858077, -28(%rbp)  # imm = 0x5E39FADD
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB114_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB114_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB114_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB114_5
.LBB114_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB114_18
.LBB114_5:                              # %if.end
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_6
.LBB114_6:                              # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_1
.LBB114_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB114_9
	jmp	.LBB114_8
.LBB114_8:                              # %for.end
	subl	$2, %eax
	je	.LBB114_15
	jmp	.LBB114_16
.LBB114_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB114_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB114_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB114_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB114_14
.LBB114_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB114_14:                             # %if.end9
	jmp	.LBB114_17
.LBB114_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_17
.LBB114_16:                             # %sw.default
	jmp	.LBB114_17
.LBB114_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB114_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1580858077, -28(%rbp)  # imm = 0x5E39FADD
	jne	.LBB114_20
.LBB114_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_19
.Lfunc_end114:
	.size	Get_Direct_CostMB.89, .Lfunc_end114-Get_Direct_CostMB.89
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.90    # -- Begin function Get_Direct_CostMB.90
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.90,@function
Get_Direct_CostMB.90:                   # @Get_Direct_CostMB.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$330386468, -28(%rbp)   # imm = 0x13B14C24
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB115_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB115_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB115_5
.LBB115_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB115_18
.LBB115_5:                              # %if.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_6
.LBB115_6:                              # %for.inc
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_1
.LBB115_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB115_9
	jmp	.LBB115_8
.LBB115_8:                              # %for.end
	subl	$2, %eax
	je	.LBB115_15
	jmp	.LBB115_16
.LBB115_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB115_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB115_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB115_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB115_14
.LBB115_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB115_14:                             # %if.end9
	jmp	.LBB115_17
.LBB115_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_17
.LBB115_16:                             # %sw.default
	jmp	.LBB115_17
.LBB115_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB115_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$330386468, -28(%rbp)   # imm = 0x13B14C24
	jne	.LBB115_20
.LBB115_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_19
.Lfunc_end115:
	.size	Get_Direct_CostMB.90, .Lfunc_end115-Get_Direct_CostMB.90
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.91        # -- Begin function GetSkipCostMB.91
	.p2align	4, 0x90
	.type	GetSkipCostMB.91,@function
GetSkipCostMB.91:                       # @GetSkipCostMB.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$273879435, -52(%rbp)   # imm = 0x1053118B
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_3 Depth 2
                                        #       Child Loop BB116_5 Depth 3
                                        #         Child Loop BB116_7 Depth 4
                                        #           Child Loop BB116_9 Depth 5
                                        #     Child Loop BB116_24 Depth 2
                                        #       Child Loop BB116_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB116_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB116_3:                              # %for.cond2
                                        #   Parent Loop BB116_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_5 Depth 3
                                        #         Child Loop BB116_7 Depth 4
                                        #           Child Loop BB116_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB116_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB116_5:                              # %for.cond6
                                        #   Parent Loop BB116_1 Depth=1
                                        #     Parent Loop BB116_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB116_7 Depth 4
                                        #           Child Loop BB116_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB116_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB116_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -28(%rbp)
.LBB116_7:                              # %for.cond11
                                        #   Parent Loop BB116_1 Depth=1
                                        #     Parent Loop BB116_3 Depth=2
                                        #       Parent Loop BB116_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB116_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB116_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB116_7 Depth=4
	movl	$0, -12(%rbp)
.LBB116_9:                              # %for.cond14
                                        #   Parent Loop BB116_1 Depth=1
                                        #     Parent Loop BB116_3 Depth=2
                                        #       Parent Loop BB116_5 Depth=3
                                        #         Parent Loop BB116_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB116_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB116_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB116_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB116_9
.LBB116_12:                             # %for.end
                                        #   in Loop: Header=BB116_7 Depth=4
	jmp	.LBB116_13
.LBB116_13:                             # %for.inc39
                                        #   in Loop: Header=BB116_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_7
.LBB116_14:                             # %for.end41
                                        #   in Loop: Header=BB116_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB116_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB116_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB116_17
.LBB116_16:                             # %if.then
                                        #   in Loop: Header=BB116_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB116_17:                             # %if.end
                                        #   in Loop: Header=BB116_5 Depth=3
	jmp	.LBB116_18
.LBB116_18:                             # %for.inc45
                                        #   in Loop: Header=BB116_5 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB116_5
.LBB116_19:                             # %for.end47
                                        #   in Loop: Header=BB116_3 Depth=2
	jmp	.LBB116_20
.LBB116_20:                             # %for.inc48
                                        #   in Loop: Header=BB116_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB116_3
.LBB116_21:                             # %for.end50
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB116_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB116_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB116_24:                             # %for.cond58
                                        #   Parent Loop BB116_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB116_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB116_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB116_24 Depth=2
	movl	$0, -12(%rbp)
.LBB116_26:                             # %for.cond62
                                        #   Parent Loop BB116_1 Depth=1
                                        #     Parent Loop BB116_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB116_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB116_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB116_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB116_26
.LBB116_29:                             # %for.end75
                                        #   in Loop: Header=BB116_24 Depth=2
	jmp	.LBB116_30
.LBB116_30:                             # %for.inc76
                                        #   in Loop: Header=BB116_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB116_24
.LBB116_31:                             # %for.end78
                                        #   in Loop: Header=BB116_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB116_32:                             # %if.end83
                                        #   in Loop: Header=BB116_1 Depth=1
	jmp	.LBB116_33
.LBB116_33:                             # %for.inc84
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB116_1
.LBB116_34:                             # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$273879435, -52(%rbp)   # imm = 0x1053118B
	jne	.LBB116_36
.LBB116_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_35
.Lfunc_end116:
	.size	GetSkipCostMB.91, .Lfunc_end116-GetSkipCostMB.91
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.92   # -- Begin function BPredPartitionCost.92
	.p2align	4, 0x90
	.type	BPredPartitionCost.92,@function
BPredPartitionCost.92:                  # @BPredPartitionCost.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1478888865, -128(%rbp) # imm = 0x58260DA1
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -112(%rbp)
	movl	%r9d, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB117_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB117_3
.LBB117_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB117_3
.LBB117_3:                              # %cond.end
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB117_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB117_6
.LBB117_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB117_6
.LBB117_6:                              # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB117_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB117_9
.LBB117_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB117_9
.LBB117_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB117_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_12
.LBB117_11:                             # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_12:                             # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB117_13:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB117_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB117_15:                             # %for.cond56
                                        #   Parent Loop BB117_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB117_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB117_15 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_15
.LBB117_18:                             # %for.end
                                        #   in Loop: Header=BB117_13 Depth=1
	jmp	.LBB117_19
.LBB117_19:                             # %for.inc167
                                        #   in Loop: Header=BB117_13 Depth=1
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_13
.LBB117_20:                             # %for.end169
	movl	-112(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB117_21:                             # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_23 Depth 2
                                        #       Child Loop BB117_25 Depth 3
                                        #         Child Loop BB117_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB117_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB117_23:                             # %for.cond188
                                        #   Parent Loop BB117_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_25 Depth 3
                                        #         Child Loop BB117_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB117_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	-80(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-72(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB117_25:                             # %for.cond199
                                        #   Parent Loop BB117_21 Depth=1
                                        #     Parent Loop BB117_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB117_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB117_25 Depth=3
	movl	$0, -32(%rbp)
.LBB117_27:                             # %for.cond203
                                        #   Parent Loop BB117_21 Depth=1
                                        #     Parent Loop BB117_23 Depth=2
                                        #       Parent Loop BB117_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB117_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB117_27 Depth=4
	movq	imgY_org, %rax
	movl	-100(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB117_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB117_27
.LBB117_30:                             # %for.end232
                                        #   in Loop: Header=BB117_25 Depth=3
	jmp	.LBB117_31
.LBB117_31:                             # %for.inc233
                                        #   in Loop: Header=BB117_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_25
.LBB117_32:                             # %for.end235
                                        #   in Loop: Header=BB117_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB117_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB117_35
.LBB117_34:                             # %if.then
                                        #   in Loop: Header=BB117_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB117_35:                             # %if.end
                                        #   in Loop: Header=BB117_23 Depth=2
	jmp	.LBB117_36
.LBB117_36:                             # %for.inc240
                                        #   in Loop: Header=BB117_23 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_23
.LBB117_37:                             # %for.end243
                                        #   in Loop: Header=BB117_21 Depth=1
	jmp	.LBB117_38
.LBB117_38:                             # %for.inc244
                                        #   in Loop: Header=BB117_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_21
.LBB117_39:                             # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB117_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB117_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB117_42:                             # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_44 Depth 2
                                        #       Child Loop BB117_46 Depth 3
                                        #         Child Loop BB117_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB117_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB117_42 Depth=1
	movl	$0, -44(%rbp)
.LBB117_44:                             # %for.cond261
                                        #   Parent Loop BB117_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_46 Depth 3
                                        #         Child Loop BB117_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB117_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB117_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB117_46:                             # %for.cond269
                                        #   Parent Loop BB117_42 Depth=1
                                        #     Parent Loop BB117_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB117_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB117_46 Depth=3
	movl	$0, -28(%rbp)
.LBB117_48:                             # %for.cond273
                                        #   Parent Loop BB117_42 Depth=1
                                        #     Parent Loop BB117_44 Depth=2
                                        #       Parent Loop BB117_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB117_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB117_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB117_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_48
.LBB117_51:                             # %for.end288
                                        #   in Loop: Header=BB117_46 Depth=3
	jmp	.LBB117_52
.LBB117_52:                             # %for.inc289
                                        #   in Loop: Header=BB117_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB117_46
.LBB117_53:                             # %for.end291
                                        #   in Loop: Header=BB117_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB117_44 Depth=2
	movl	-124(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB117_44
.LBB117_55:                             # %for.end298
                                        #   in Loop: Header=BB117_42 Depth=1
	jmp	.LBB117_56
.LBB117_56:                             # %for.inc299
                                        #   in Loop: Header=BB117_42 Depth=1
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB117_42
.LBB117_57:                             # %for.end301
	jmp	.LBB117_58
.LBB117_58:                             # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$1478888865, -128(%rbp) # imm = 0x58260DA1
	jne	.LBB117_60
.LBB117_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_60:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_59
.Lfunc_end117:
	.size	BPredPartitionCost.92, .Lfunc_end117-BPredPartitionCost.92
	.cfi_endproc
                                        # -- End function
	.globl	SATD.93                 # -- Begin function SATD.93
	.p2align	4, 0x90
	.type	SATD.93,@function
SATD.93:                                # @SATD.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$363635736, -184(%rbp)  # imm = 0x15ACA418
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB118_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB118_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB118_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB118_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB118_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB118_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB118_6
.LBB118_5:                              # %cond.false
                                        #   in Loop: Header=BB118_2 Depth=1
	movl	-100(%rbp), %eax
.LBB118_6:                              # %cond.end
                                        #   in Loop: Header=BB118_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB118_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB118_2
.LBB118_8:                              # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB118_14
.LBB118_9:                              # %if.else
	movl	$0, -20(%rbp)
.LBB118_10:                             # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB118_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB118_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB118_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB118_10
.LBB118_13:                             # %for.end270
	jmp	.LBB118_14
.LBB118_14:                             # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$363635736, -184(%rbp)  # imm = 0x15ACA418
	jne	.LBB118_16
.LBB118_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_15
.Lfunc_end118:
	.size	SATD.93, .Lfunc_end118-SATD.93
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.94     # -- Begin function BIDPartitionCost.94
	.p2align	4, 0x90
	.type	BIDPartitionCost.94,@function
BIDPartitionCost.94:                    # @BIDPartitionCost.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$464434423, -100(%rbp)  # imm = 0x1BAEB4F7
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB119_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB119_3
.LBB119_2:                              # %cond.false
	movl	$8, %eax
	jmp	.LBB119_3
.LBB119_3:                              # %cond.end
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB119_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB119_6
.LBB119_5:                              # %cond.false16
	movl	$8, %eax
	jmp	.LBB119_6
.LBB119_6:                              # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB119_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB119_9
.LBB119_8:                              # %cond.false21
	movl	$4, %eax
	jmp	.LBB119_9
.LBB119_9:                              # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB119_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB119_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB119_12:                             # %for.cond53
                                        #   Parent Loop BB119_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB119_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB119_12 Depth=2
	movl	-116(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_12
.LBB119_15:                             # %for.end
                                        #   in Loop: Header=BB119_10 Depth=1
	jmp	.LBB119_16
.LBB119_16:                             # %for.inc164
                                        #   in Loop: Header=BB119_10 Depth=1
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_10
.LBB119_17:                             # %for.end166
	movl	-124(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB119_18:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_20 Depth 2
                                        #       Child Loop BB119_22 Depth 3
                                        #         Child Loop BB119_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB119_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB119_20:                             # %for.cond185
                                        #   Parent Loop BB119_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_22 Depth 3
                                        #         Child Loop BB119_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB119_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB119_22:                             # %for.cond196
                                        #   Parent Loop BB119_18 Depth=1
                                        #     Parent Loop BB119_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB119_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB119_22 Depth=3
	movl	$0, -32(%rbp)
.LBB119_24:                             # %for.cond200
                                        #   Parent Loop BB119_18 Depth=1
                                        #     Parent Loop BB119_20 Depth=2
                                        #       Parent Loop BB119_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB119_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB119_24 Depth=4
	movq	imgY_org, %rax
	movl	-104(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB119_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB119_24
.LBB119_27:                             # %for.end229
                                        #   in Loop: Header=BB119_22 Depth=3
	jmp	.LBB119_28
.LBB119_28:                             # %for.inc230
                                        #   in Loop: Header=BB119_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_22
.LBB119_29:                             # %for.end232
                                        #   in Loop: Header=BB119_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB119_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB119_32
.LBB119_31:                             # %if.then
                                        #   in Loop: Header=BB119_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB119_32:                             # %if.end
                                        #   in Loop: Header=BB119_20 Depth=2
	jmp	.LBB119_33
.LBB119_33:                             # %for.inc236
                                        #   in Loop: Header=BB119_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_20
.LBB119_34:                             # %for.end239
                                        #   in Loop: Header=BB119_18 Depth=1
	jmp	.LBB119_35
.LBB119_35:                             # %for.inc240
                                        #   in Loop: Header=BB119_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_18
.LBB119_36:                             # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB119_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB119_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB119_39:                             # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_41 Depth 2
                                        #       Child Loop BB119_43 Depth 3
                                        #         Child Loop BB119_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB119_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB119_39 Depth=1
	movl	$0, -44(%rbp)
.LBB119_41:                             # %for.cond257
                                        #   Parent Loop BB119_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_43 Depth 3
                                        #         Child Loop BB119_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB119_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB119_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB119_43:                             # %for.cond265
                                        #   Parent Loop BB119_39 Depth=1
                                        #     Parent Loop BB119_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB119_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB119_43 Depth=3
	movl	$0, -28(%rbp)
.LBB119_45:                             # %for.cond269
                                        #   Parent Loop BB119_39 Depth=1
                                        #     Parent Loop BB119_41 Depth=2
                                        #       Parent Loop BB119_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB119_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB119_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB119_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_45
.LBB119_48:                             # %for.end284
                                        #   in Loop: Header=BB119_43 Depth=3
	jmp	.LBB119_49
.LBB119_49:                             # %for.inc285
                                        #   in Loop: Header=BB119_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB119_43
.LBB119_50:                             # %for.end287
                                        #   in Loop: Header=BB119_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB119_41 Depth=2
	movl	-128(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB119_41
.LBB119_52:                             # %for.end294
                                        #   in Loop: Header=BB119_39 Depth=1
	jmp	.LBB119_53
.LBB119_53:                             # %for.inc295
                                        #   in Loop: Header=BB119_39 Depth=1
	movl	-112(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB119_39
.LBB119_54:                             # %for.end297
	jmp	.LBB119_55
.LBB119_55:                             # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$464434423, -100(%rbp)  # imm = 0x1BAEB4F7
	jne	.LBB119_57
.LBB119_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_56
.Lfunc_end119:
	.size	BIDPartitionCost.94, .Lfunc_end119-BIDPartitionCost.94
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.95              # -- Begin function SATD8X8.95
	.p2align	4, 0x90
	.type	SATD8X8.95,@function
SATD8X8.95:                             # @SATD8X8.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1822366024, -36(%rbp)  # imm = 0x6C9F1948
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB120_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB120_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB120_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB120_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_2
.LBB120_5:                              # %for.end
	movl	$0, -12(%rbp)
.LBB120_6:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB120_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB120_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB120_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_6
.LBB120_9:                              # %for.end495
	movl	$0, -16(%rbp)
.LBB120_10:                             # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB120_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB120_10 Depth=1
	movl	$0, -12(%rbp)
.LBB120_12:                             # %for.cond499
                                        #   Parent Loop BB120_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB120_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB120_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB120_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB120_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB120_16
.LBB120_15:                             # %cond.false
                                        #   in Loop: Header=BB120_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB120_16:                             # %cond.end
                                        #   in Loop: Header=BB120_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB120_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_12
.LBB120_18:                             # %for.end519
                                        #   in Loop: Header=BB120_10 Depth=1
	jmp	.LBB120_19
.LBB120_19:                             # %for.inc520
                                        #   in Loop: Header=BB120_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_10
.LBB120_20:                             # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_26
.LBB120_21:                             # %if.else
	movl	$0, -12(%rbp)
.LBB120_22:                             # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB120_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB120_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB120_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_22
.LBB120_25:                             # %for.end534
	jmp	.LBB120_26
.LBB120_26:                             # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1822366024, -36(%rbp)  # imm = 0x6C9F1948
	jne	.LBB120_28
.LBB120_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_27
.Lfunc_end120:
	.size	SATD8X8.95, .Lfunc_end120-SATD8X8.95
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.96
.LCPI121_0:
	.quad	4602678819172646912     # double 0.5
.LCPI121_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.96
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.96,@function
FastFullPelBlockMotionSearch.96:        # @FastFullPelBlockMotionSearch.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI121_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$388509798, -84(%rbp)   # imm = 0x17283066
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -72(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -80(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movq	BlockSAD, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB121_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-20(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB121_2:                              # %if.end
	movq	search_center_x, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB121_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB121_5
# %bb.4:                                # %if.then51
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB121_5:                              # %if.end56
	jmp	.LBB121_6
.LBB121_6:                              # %if.end57
	movl	$0, -24(%rbp)
.LBB121_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB121_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB121_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB121_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB121_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB121_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB121_7 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB121_11:                             # %if.end85
                                        #   in Loop: Header=BB121_7 Depth=1
	jmp	.LBB121_12
.LBB121_12:                             # %if.end86
                                        #   in Loop: Header=BB121_7 Depth=1
	jmp	.LBB121_13
.LBB121_13:                             # %for.inc
                                        #   in Loop: Header=BB121_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB121_7
.LBB121_14:                             # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$388509798, -84(%rbp)   # imm = 0x17283066
	jne	.LBB121_16
.LBB121_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_15
.Lfunc_end121:
	.size	FastFullPelBlockMotionSearch.96, .Lfunc_end121-FastFullPelBlockMotionSearch.96
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.97 # -- Begin function Get_Direct_Motion_Vectors.97
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.97,@function
Get_Direct_Motion_Vectors.97:           # @Get_Direct_Motion_Vectors.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$986691574, -228(%rbp)  # imm = 0x3ACFB7F6
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB122_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB122_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB122_5
.LBB122_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB122_5:                              # %if.end
	jmp	.LBB122_7
.LBB122_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB122_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB122_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB122_34
# %bb.9:                                # %if.then16
	cmpl	$0, -88(%rbp)
	je	.LBB122_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_12
.LBB122_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_12
.LBB122_12:                             # %cond.end
	movw	%ax, -30(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_15
.LBB122_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_15
.LBB122_15:                             # %cond.end38
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_18
.LBB122_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_18
.LBB122_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_21
.LBB122_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB122_21:                             # %cond.end71
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB122_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_24
.LBB122_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_24
.LBB122_24:                             # %cond.end87
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_27
.LBB122_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_27
.LBB122_27:                             # %cond.end103
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_30
.LBB122_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_30
.LBB122_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_33
.LBB122_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB122_33:                             # %cond.end136
	movw	%ax, -28(%rbp)
	jmp	.LBB122_150
.LBB122_34:                             # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB122_92
# %bb.35:                               # %if.then142
	cmpl	$0, -88(%rbp)
	je	.LBB122_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_39
.LBB122_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_40
.LBB122_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_40:                             # %cond.end181
	jmp	.LBB122_42
.LBB122_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_42
.LBB122_42:                             # %cond.end184
	movw	%ax, -30(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_46
.LBB122_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_47
.LBB122_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_47:                             # %cond.end229
	jmp	.LBB122_49
.LBB122_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_49
.LBB122_49:                             # %cond.end232
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_53
.LBB122_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_54
.LBB122_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_54:                             # %cond.end277
	jmp	.LBB122_56
.LBB122_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_56
.LBB122_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_60
.LBB122_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_61
.LBB122_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_61:                             # %cond.end325
	jmp	.LBB122_63
.LBB122_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB122_63:                             # %cond.end329
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB122_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_67
.LBB122_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_68
.LBB122_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_68:                             # %cond.end374
	jmp	.LBB122_70
.LBB122_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_70
.LBB122_70:                             # %cond.end377
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_74
.LBB122_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_75
.LBB122_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_75:                             # %cond.end422
	jmp	.LBB122_77
.LBB122_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_77
.LBB122_77:                             # %cond.end425
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_81
.LBB122_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_82
.LBB122_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_82:                             # %cond.end470
	jmp	.LBB122_84
.LBB122_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_84
.LBB122_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_88
.LBB122_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB122_89
.LBB122_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB122_89:                             # %cond.end518
	jmp	.LBB122_91
.LBB122_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB122_91:                             # %cond.end522
	movw	%ax, -28(%rbp)
	jmp	.LBB122_149
.LBB122_92:                             # %if.else525
	cmpl	$0, -88(%rbp)
	je	.LBB122_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_96
.LBB122_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_97
.LBB122_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_97:                             # %cond.end567
	jmp	.LBB122_99
.LBB122_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_99
.LBB122_99:                             # %cond.end570
	movw	%ax, -30(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_103
.LBB122_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_104
.LBB122_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_104:                            # %cond.end615
	jmp	.LBB122_106
.LBB122_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_106
.LBB122_106:                            # %cond.end618
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_110
.LBB122_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_111
.LBB122_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_111:                            # %cond.end663
	jmp	.LBB122_113
.LBB122_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_113
.LBB122_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_117
.LBB122_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_118
.LBB122_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_118:                            # %cond.end711
	jmp	.LBB122_120
.LBB122_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB122_120:                            # %cond.end715
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB122_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_124
.LBB122_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_125
.LBB122_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_125:                            # %cond.end760
	jmp	.LBB122_127
.LBB122_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_127
.LBB122_127:                            # %cond.end763
	movw	%ax, -32(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB122_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_131
.LBB122_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_132
.LBB122_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_132:                            # %cond.end808
	jmp	.LBB122_134
.LBB122_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_134
.LBB122_134:                            # %cond.end811
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB122_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_138
.LBB122_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_139
.LBB122_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_139:                            # %cond.end856
	jmp	.LBB122_141
.LBB122_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB122_141
.LBB122_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB122_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB122_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB122_145
.LBB122_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB122_146
.LBB122_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB122_146:                            # %cond.end904
	jmp	.LBB122_148
.LBB122_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB122_148:                            # %cond.end908
	movw	%ax, -28(%rbp)
.LBB122_149:                            # %if.end911
	jmp	.LBB122_150
.LBB122_150:                            # %if.end912
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_156
# %bb.151:                              # %land.lhs.true916
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_156
# %bb.152:                              # %cond.true920
	movswl	-30(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_154
# %bb.153:                              # %cond.true925
	movswl	-30(%rbp), %eax
	jmp	.LBB122_155
.LBB122_154:                            # %cond.false927
	movswl	-22(%rbp), %eax
.LBB122_155:                            # %cond.end929
	jmp	.LBB122_160
.LBB122_156:                            # %cond.false931
	movswl	-30(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_158
# %bb.157:                              # %cond.true936
	movswl	-30(%rbp), %eax
	jmp	.LBB122_159
.LBB122_158:                            # %cond.false938
	movswl	-22(%rbp), %eax
.LBB122_159:                            # %cond.end940
.LBB122_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_166
# %bb.161:                              # %land.lhs.true948
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB122_165
.LBB122_164:                            # %cond.false959
	movswl	-26(%rbp), %eax
.LBB122_165:                            # %cond.end961
	jmp	.LBB122_170
.LBB122_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB122_169
.LBB122_168:                            # %cond.false970
	movswl	-26(%rbp), %eax
.LBB122_169:                            # %cond.end972
.LBB122_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_176
# %bb.171:                              # %land.lhs.true980
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_176
# %bb.172:                              # %cond.true984
	movswl	-32(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_174
# %bb.173:                              # %cond.true989
	movswl	-32(%rbp), %eax
	jmp	.LBB122_175
.LBB122_174:                            # %cond.false991
	movswl	-24(%rbp), %eax
.LBB122_175:                            # %cond.end993
	jmp	.LBB122_180
.LBB122_176:                            # %cond.false995
	movswl	-32(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_178
# %bb.177:                              # %cond.true1000
	movswl	-32(%rbp), %eax
	jmp	.LBB122_179
.LBB122_178:                            # %cond.false1002
	movswl	-24(%rbp), %eax
.LBB122_179:                            # %cond.end1004
.LBB122_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB122_185
.LBB122_184:                            # %cond.false1023
	movswl	-28(%rbp), %eax
.LBB122_185:                            # %cond.end1025
	jmp	.LBB122_190
.LBB122_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB122_189
.LBB122_188:                            # %cond.false1034
	movswl	-28(%rbp), %eax
.LBB122_189:                            # %cond.end1036
.LBB122_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB122_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB122_194:                            # %if.end1055
	movl	$0, -4(%rbp)
.LBB122_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB122_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB122_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB122_197:                            # %for.cond1061
                                        #   Parent Loop BB122_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB122_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB122_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB122_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB122_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB122_203
.LBB122_202:                            # %if.else1102
                                        #   in Loop: Header=BB122_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB122_203:                            # %if.end1128
                                        #   in Loop: Header=BB122_197 Depth=2
	jmp	.LBB122_205
.LBB122_204:                            # %if.else1129
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB122_205:                            # %if.end1151
                                        #   in Loop: Header=BB122_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB122_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB122_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB122_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB122_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB122_210
.LBB122_209:                            # %if.else1187
                                        #   in Loop: Header=BB122_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB122_210:                            # %if.end1213
                                        #   in Loop: Header=BB122_197 Depth=2
	jmp	.LBB122_212
.LBB122_211:                            # %if.else1214
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB122_212:                            # %if.end1236
                                        #   in Loop: Header=BB122_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB122_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB122_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB122_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB122_215:                            # %if.end1255
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB122_221
.LBB122_217:                            # %if.else1269
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB122_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB122_220
.LBB122_219:                            # %if.else1283
                                        #   in Loop: Header=BB122_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB122_220:                            # %if.end1288
                                        #   in Loop: Header=BB122_197 Depth=2
	jmp	.LBB122_221
.LBB122_221:                            # %if.end1289
                                        #   in Loop: Header=BB122_197 Depth=2
	jmp	.LBB122_222
.LBB122_222:                            # %for.inc
                                        #   in Loop: Header=BB122_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_197
.LBB122_223:                            # %for.end
                                        #   in Loop: Header=BB122_195 Depth=1
	jmp	.LBB122_224
.LBB122_224:                            # %for.inc1290
                                        #   in Loop: Header=BB122_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_195
.LBB122_225:                            # %for.end1292
	jmp	.LBB122_259
.LBB122_226:                            # %if.else1293
	movl	$0, -4(%rbp)
.LBB122_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_229 Depth 2
                                        #       Child Loop BB122_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB122_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB122_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB122_229:                            # %for.cond1304
                                        #   Parent Loop BB122_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB122_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB122_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB122_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB122_234
.LBB122_233:                            # %cond.false1319
                                        #   in Loop: Header=BB122_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_234
.LBB122_234:                            # %cond.end1320
                                        #   in Loop: Header=BB122_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB122_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB122_254
.LBB122_236:                            # %if.else1393
                                        #   in Loop: Header=BB122_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB122_237:                            # %for.cond1394
                                        #   Parent Loop BB122_227 Depth=1
                                        #     Parent Loop BB122_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB122_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB122_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB122_240
.LBB122_239:                            # %cond.false1402
                                        #   in Loop: Header=BB122_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB122_240:                            # %cond.end1406
                                        #   in Loop: Header=BB122_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB122_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB122_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB122_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB122_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB122_247
.LBB122_243:                            # %if.else1425
                                        #   in Loop: Header=BB122_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB122_237 Depth=3
	jmp	.LBB122_245
.LBB122_245:                            # %for.inc1427
                                        #   in Loop: Header=BB122_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB122_237
.LBB122_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB122_229 Depth=2
	jmp	.LBB122_247
.LBB122_247:                            # %for.end1429
                                        #   in Loop: Header=BB122_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB122_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB122_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB122_251
.LBB122_250:                            # %if.else1487
                                        #   in Loop: Header=BB122_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB122_251:                            # %if.end1571
                                        #   in Loop: Header=BB122_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB122_253
.LBB122_252:                            # %if.else1587
                                        #   in Loop: Header=BB122_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB122_253:                            # %if.end1602
                                        #   in Loop: Header=BB122_229 Depth=2
	jmp	.LBB122_254
.LBB122_254:                            # %if.end1603
                                        #   in Loop: Header=BB122_229 Depth=2
	jmp	.LBB122_255
.LBB122_255:                            # %for.inc1604
                                        #   in Loop: Header=BB122_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_229
.LBB122_256:                            # %for.end1606
                                        #   in Loop: Header=BB122_227 Depth=1
	jmp	.LBB122_257
.LBB122_257:                            # %for.inc1607
                                        #   in Loop: Header=BB122_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_227
.LBB122_258:                            # %for.end1609
	jmp	.LBB122_259
.LBB122_259:                            # %if.end1610
	cmpl	$986691574, -228(%rbp)  # imm = 0x3ACFB7F6
	jne	.LBB122_261
.LBB122_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_260
.Lfunc_end122:
	.size	Get_Direct_Motion_Vectors.97, .Lfunc_end122-Get_Direct_Motion_Vectors.97
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.98
.LCPI123_0:
	.quad	4602678819172646912     # double 0.5
.LCPI123_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.98
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.98,@function
FastFullPelBlockMotionSearch.98:        # @FastFullPelBlockMotionSearch.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI123_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI123_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1984055639, -64(%rbp)  # imm = 0x76424957
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -56(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -68(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-60(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -80(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB123_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB123_2:                              # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB123_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB123_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB123_5:                              # %if.end56
	jmp	.LBB123_6
.LBB123_6:                              # %if.end57
	movl	$0, -24(%rbp)
.LBB123_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB123_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB123_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB123_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB123_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-72(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB123_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB123_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB123_11:                             # %if.end85
                                        #   in Loop: Header=BB123_7 Depth=1
	jmp	.LBB123_12
.LBB123_12:                             # %if.end86
                                        #   in Loop: Header=BB123_7 Depth=1
	jmp	.LBB123_13
.LBB123_13:                             # %for.inc
                                        #   in Loop: Header=BB123_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB123_7
.LBB123_14:                             # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1984055639, -64(%rbp)  # imm = 0x76424957
	jne	.LBB123_16
.LBB123_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_15
.Lfunc_end123:
	.size	FastFullPelBlockMotionSearch.98, .Lfunc_end123-FastFullPelBlockMotionSearch.98
	.cfi_endproc
                                        # -- End function
	.type	QP2QUANT,@object        # @QP2QUANT
	.section	.rodata,"a",@progbits
	.globl	QP2QUANT
	.p2align	4
QP2QUANT:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	18                      # 0x12
	.long	20                      # 0x14
	.long	23                      # 0x17
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	32                      # 0x20
	.long	36                      # 0x24
	.long	40                      # 0x28
	.long	45                      # 0x2d
	.long	51                      # 0x33
	.long	57                      # 0x39
	.long	64                      # 0x40
	.long	72                      # 0x48
	.long	81                      # 0x51
	.long	91                      # 0x5b
	.size	QP2QUANT, 160

	.type	BlockSAD,@object        # @BlockSAD
	.local	BlockSAD
	.comm	BlockSAD,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"InitializeFastFullIntegerSearch: BlockSAD"
	.size	.L.str, 42

	.type	search_setup_done,@object # @search_setup_done
	.local	search_setup_done
	.comm	search_setup_done,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"InitializeFastFullIntegerSearch: search_setup_done"
	.size	.L.str.1, 51

	.type	search_center_x,@object # @search_center_x
	.local	search_center_x
	.comm	search_center_x,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"InitializeFastFullIntegerSearch: search_center_x"
	.size	.L.str.2, 49

	.type	search_center_y,@object # @search_center_y
	.local	search_center_y
	.comm	search_center_y,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"InitializeFastFullIntegerSearch: search_center_y"
	.size	.L.str.3, 49

	.type	pos_00,@object          # @pos_00
	.local	pos_00
	.comm	pos_00,8,8
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"InitializeFastFullIntegerSearch: pos_00"
	.size	.L.str.4, 40

	.type	max_search_range,@object # @max_search_range
	.local	max_search_range
	.comm	max_search_range,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"InitializeFastFullIntegerSearch: max_search_range"
	.size	.L.str.5, 50

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	PelYline_11,@object     # @PelYline_11
	.local	PelYline_11
	.comm	PelYline_11,8,8
	.type	spiral_search_x,@object # @spiral_search_x
	.comm	spiral_search_x,8,8
	.type	spiral_search_y,@object # @spiral_search_y
	.comm	spiral_search_y,8,8
	.type	byte_abs,@object        # @byte_abs
	.comm	byte_abs,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	max_mvd,@object         # @max_mvd
	.comm	max_mvd,4,4
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Init_Motion_Search_Module: spiral_search_x"
	.size	.L.str.6, 43

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Init_Motion_Search_Module: spiral_search_y"
	.size	.L.str.7, 43

	.type	mvbits,@object          # @mvbits
	.comm	mvbits,8,8
	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"Init_Motion_Search_Module: mvbits"
	.size	.L.str.8, 34

	.type	refbits,@object         # @refbits
	.comm	refbits,8,8
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"Init_Motion_Search_Module: refbits"
	.size	.L.str.9, 35

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"Init_Motion_Search_Module: byte_abs"
	.size	.L.str.10, 36

	.type	motion_cost,@object     # @motion_cost
	.comm	motion_cost,8,8
	.type	PelY_14,@object         # @PelY_14
	.local	PelY_14
	.comm	PelY_14,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	PelY_14b,@object        # @PelY_14b
	.local	PelY_14b
	.comm	PelY_14b,8,8
	.type	BPredPartitionCost.bx0,@object # @BPredPartitionCost.bx0
	.data
	.p2align	4
BPredPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BPredPartitionCost.bx0, 80

	.type	BPredPartitionCost.by0,@object # @BPredPartitionCost.by0
	.p2align	4
BPredPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BPredPartitionCost.by0, 80

	.type	BlockMotionSearch.orig_val,@object # @BlockMotionSearch.orig_val
	.local	BlockMotionSearch.orig_val
	.comm	BlockMotionSearch.orig_val,512,16
	.type	BlockMotionSearch.orig_pic,@object # @BlockMotionSearch.orig_pic
	.p2align	4
BlockMotionSearch.orig_pic:
	.quad	BlockMotionSearch.orig_val
	.quad	BlockMotionSearch.orig_val+32
	.quad	BlockMotionSearch.orig_val+64
	.quad	BlockMotionSearch.orig_val+96
	.quad	BlockMotionSearch.orig_val+128
	.quad	BlockMotionSearch.orig_val+160
	.quad	BlockMotionSearch.orig_val+192
	.quad	BlockMotionSearch.orig_val+224
	.quad	BlockMotionSearch.orig_val+256
	.quad	BlockMotionSearch.orig_val+288
	.quad	BlockMotionSearch.orig_val+320
	.quad	BlockMotionSearch.orig_val+352
	.quad	BlockMotionSearch.orig_val+384
	.quad	BlockMotionSearch.orig_val+416
	.quad	BlockMotionSearch.orig_val+448
	.quad	BlockMotionSearch.orig_val+480
	.size	BlockMotionSearch.orig_pic, 128

	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	BIDPartitionCost.bx0,@object # @BIDPartitionCost.bx0
	.p2align	4
BIDPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BIDPartitionCost.bx0, 80

	.type	BIDPartitionCost.by0,@object # @BIDPartitionCost.by0
	.p2align	4
BIDPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BIDPartitionCost.by0, 80

	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	PartitionMotionSearch.bx0,@object # @PartitionMotionSearch.bx0
	.p2align	4
PartitionMotionSearch.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	PartitionMotionSearch.bx0, 80

	.type	PartitionMotionSearch.by0,@object # @PartitionMotionSearch.by0
	.p2align	4
PartitionMotionSearch.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	PartitionMotionSearch.by0, 80

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
