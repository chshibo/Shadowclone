	.text
	.file	"block.c"
	.globl	intrapred_luma          # -- Begin function intrapred_luma
	.p2align	4, 0x90
	.type	intrapred_luma,@function
intrapred_luma:                         # @intrapred_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movq	%rdx, %r12
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_intrapred_luma.2
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_intrapred_luma.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_intrapred_luma.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_intrapred_luma.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_intrapred_luma.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_intrapred_luma.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_intrapred_luma.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_intrapred_luma.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movq	%r12, %rdx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	intrapred_luma.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	intrapred_luma, .Lfunc_end0-intrapred_luma
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16    # -- Begin function intrapred_luma_16x16
	.p2align	4, 0x90
	.type	intrapred_luma_16x16,@function
intrapred_luma_16x16:                   # @intrapred_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_intrapred_luma_16x16.11
	callq	intrapred_luma_16x16.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_intrapred_luma_16x16.18
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_intrapred_luma_16x16.31
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_intrapred_luma_16x16.47
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_intrapred_luma_16x16.48
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_intrapred_luma_16x16.57
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_intrapred_luma_16x16.58
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_intrapred_luma_16x16.61
	.cfi_def_cfa %rbp, 16
	callq	intrapred_luma_16x16.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	intrapred_luma_16x16, .Lfunc_end1-intrapred_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16          # -- Begin function dct_luma_16x16
	.p2align	4, 0x90
	.type	dct_luma_16x16,@function
dct_luma_16x16:                         # @dct_luma_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_dct_luma_16x16.9
	movl	%ebx, %edi
	callq	dct_luma_16x16.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_dct_luma_16x16.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_dct_luma_16x16.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_dct_luma_16x16.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_dct_luma_16x16.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.75
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_dct_luma_16x16.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_dct_luma_16x16.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.79
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_dct_luma_16x16.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	dct_luma_16x16.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	dct_luma_16x16, .Lfunc_end2-dct_luma_16x16
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma                # -- Begin function dct_luma
	.p2align	4, 0x90
	.type	dct_luma,@function
dct_luma:                               # @dct_luma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movq	%rdx, %r15
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_dct_luma.6
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.6
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_dct_luma.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.32
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_dct_luma.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.37
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_dct_luma.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.42
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_dct_luma.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.51
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_dct_luma.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.52
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_dct_luma.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.66
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_dct_luma.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movq	%r15, %rdx
	movl	%r14d, %ecx
	callq	dct_luma.67
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	dct_luma, .Lfunc_end3-dct_luma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma              # -- Begin function dct_chroma
	.p2align	4, 0x90
	.type	dct_chroma,@function
dct_chroma:                             # @dct_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_dct_chroma.3
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_dct_chroma.4
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_dct_chroma.5
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_dct_chroma.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_dct_chroma.29
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_dct_chroma.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_dct_chroma.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_dct_chroma.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	dct_chroma, .Lfunc_end4-dct_chroma
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4           # -- Begin function dct_chroma4x4
	.p2align	4, 0x90
	.type	dct_chroma4x4,@function
dct_chroma4x4:                          # @dct_chroma4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_dct_chroma4x4.16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_dct_chroma4x4.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_dct_chroma4x4.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_dct_chroma4x4.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_dct_chroma4x4.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_dct_chroma4x4.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_dct_chroma4x4.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_dct_chroma4x4.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	dct_chroma4x4.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	dct_chroma4x4, .Lfunc_end5-dct_chroma4x4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC           # -- Begin function dct_chroma_DC
	.p2align	4, 0x90
	.type	dct_chroma_DC,@function
dct_chroma_DC:                          # @dct_chroma_DC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_dct_chroma_DC.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_dct_chroma_DC.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_dct_chroma_DC.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_dct_chroma_DC.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_dct_chroma_DC.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.46
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_dct_chroma_DC.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_dct_chroma_DC.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_dct_chroma_DC.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_DC.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	dct_chroma_DC, .Lfunc_end6-dct_chroma_DC
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_sp             # -- Begin function dct_luma_sp
	.p2align	4, 0x90
	.type	dct_luma_sp,@function
dct_luma_sp:                            # @dct_luma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_dct_luma_sp.1
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.1
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_dct_luma_sp.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_dct_luma_sp.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_dct_luma_sp.13
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_dct_luma_sp.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_dct_luma_sp.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_dct_luma_sp.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_dct_luma_sp.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	dct_luma_sp.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	dct_luma_sp, .Lfunc_end7-dct_luma_sp
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_sp           # -- Begin function dct_chroma_sp
	.p2align	4, 0x90
	.type	dct_chroma_sp,@function
dct_chroma_sp:                          # @dct_chroma_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_dct_chroma_sp.22
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.22
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_dct_chroma_sp.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_dct_chroma_sp.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_dct_chroma_sp.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_dct_chroma_sp.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_dct_chroma_sp.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.72
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_dct_chroma_sp.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_dct_chroma_sp.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	dct_chroma_sp.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	dct_chroma_sp, .Lfunc_end8-dct_chroma_sp
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp            # -- Begin function copyblock_sp
	.p2align	4, 0x90
	.type	copyblock_sp,@function
copyblock_sp:                           # @copyblock_sp
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_copyblock_sp.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_copyblock_sp.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_copyblock_sp.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_copyblock_sp.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_copyblock_sp.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_copyblock_sp.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_copyblock_sp.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_copyblock_sp.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	copyblock_sp.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	copyblock_sp, .Lfunc_end9-copyblock_sp
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.1
.LCPI10_0:
	.quad	4616189618054758400     # double 4
.LCPI10_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI10_2:
	.quad	4611686018427387904     # double 2
.LCPI10_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.1
	.p2align	4, 0x90
	.type	dct_luma_sp.1,@function
dct_luma_sp.1:                          # @dct_luma_sp.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI10_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI10_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$873127459, -216(%rbp)  # imm = 0x340ADE23
	movl	%edi, -136(%rbp)
	movl	%esi, -140(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-136(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-140(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -200(%rbp)
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI10_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI10_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -120(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	$0, -12(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -16(%rbp)
.LBB10_3:                               # %for.cond38
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB10_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-140(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_3
.LBB10_6:                               # %for.end
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_7
.LBB10_7:                               # %for.inc66
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_1
.LBB10_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB10_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	$0, -16(%rbp)
.LBB10_11:                              # %for.cond73
                                        #   Parent Loop BB10_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB10_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB10_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB10_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_11
.LBB10_14:                              # %for.end106
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB10_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_9
.LBB10_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB10_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	$0, -12(%rbp)
.LBB10_19:                              # %for.cond144
                                        #   Parent Loop BB10_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB10_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB10_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB10_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_19
.LBB10_22:                              # %for.end177
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_17
.LBB10_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB10_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	$0, -16(%rbp)
.LBB10_27:                              # %for.cond215
                                        #   Parent Loop BB10_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB10_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_27
.LBB10_30:                              # %for.end244
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_25
.LBB10_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB10_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	$0, -12(%rbp)
.LBB10_35:                              # %for.cond278
                                        #   Parent Loop BB10_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB10_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB10_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_35
.LBB10_38:                              # %for.end307
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB10_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_33
.LBB10_40:                              # %for.end336
	movl	$0, -204(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -64(%rbp)
.LBB10_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB10_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB10_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB10_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB10_46
.LBB10_45:                              # %if.then
                                        #   in Loop: Header=BB10_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_47
.LBB10_46:                              # %if.else
                                        #   in Loop: Header=BB10_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB10_47:                              # %if.end
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB10_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB10_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB10_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB10_55
	jp	.LBB10_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB10_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB10_54
.LBB10_53:                              # %cond.false
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-56(%rbp), %eax
.LBB10_54:                              # %cond.end
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB10_59
.LBB10_55:                              # %if.else500
                                        #   in Loop: Header=BB10_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB10_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB10_58
.LBB10_57:                              # %if.else504
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB10_58:                              # %if.end505
                                        #   in Loop: Header=BB10_41 Depth=1
	jmp	.LBB10_59
.LBB10_59:                              # %if.end506
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB10_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB10_62
.LBB10_61:                              # %cond.false510
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-124(%rbp), %eax
.LBB10_62:                              # %cond.end511
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB10_73
.LBB10_63:                              # %if.else513
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB10_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB10_72
.LBB10_65:                              # %if.else517
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB10_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB10_68
.LBB10_67:                              # %cond.false521
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-56(%rbp), %eax
.LBB10_68:                              # %cond.end522
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB10_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB10_71
.LBB10_70:                              # %cond.false527
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-124(%rbp), %eax
.LBB10_71:                              # %cond.end528
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB10_72:                              # %if.end530
                                        #   in Loop: Header=BB10_41 Depth=1
	jmp	.LBB10_73
.LBB10_73:                              # %if.end531
                                        #   in Loop: Header=BB10_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB10_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	$1, -204(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB10_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB10_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB10_77
.LBB10_76:                              # %if.else539
                                        #   in Loop: Header=BB10_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB10_77:                              # %if.end546
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB10_78:                              # %if.end568
                                        #   in Loop: Header=BB10_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB10_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB10_41
.LBB10_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB10_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_83 Depth 2
                                        #     Child Loop BB10_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	$0, -16(%rbp)
.LBB10_83:                              # %for.cond607
                                        #   Parent Loop BB10_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB10_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB10_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_83
.LBB10_86:                              # %for.end620
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB10_87:                              # %for.cond639
                                        #   Parent Loop BB10_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB10_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB10_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB10_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_87
.LBB10_90:                              # %for.end666
                                        #   in Loop: Header=BB10_81 Depth=1
	jmp	.LBB10_91
.LBB10_91:                              # %for.inc667
                                        #   in Loop: Header=BB10_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_81
.LBB10_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB10_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_95 Depth 2
                                        #     Child Loop BB10_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB10_93 Depth=1
	movl	$0, -12(%rbp)
.LBB10_95:                              # %for.cond674
                                        #   Parent Loop BB10_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB10_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB10_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_95
.LBB10_98:                              # %for.end687
                                        #   in Loop: Header=BB10_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB10_99:                              # %for.cond706
                                        #   Parent Loop BB10_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB10_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB10_103
.LBB10_102:                             # %cond.false721
                                        #   in Loop: Header=BB10_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_103:                             # %cond.end729
                                        #   in Loop: Header=BB10_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB10_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB10_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_109
.LBB10_105:                             # %cond.false735
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB10_108
.LBB10_107:                             # %cond.false746
                                        #   in Loop: Header=BB10_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_108:                             # %cond.end754
                                        #   in Loop: Header=BB10_99 Depth=2
.LBB10_109:                             # %cond.end756
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB10_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB10_112
.LBB10_111:                             # %cond.false774
                                        #   in Loop: Header=BB10_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB10_112:                             # %cond.end782
                                        #   in Loop: Header=BB10_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB10_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB10_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_118
.LBB10_114:                             # %cond.false788
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB10_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB10_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB10_117
.LBB10_116:                             # %cond.false799
                                        #   in Loop: Header=BB10_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB10_117:                             # %cond.end807
                                        #   in Loop: Header=BB10_99 Depth=2
.LBB10_118:                             # %cond.end809
                                        #   in Loop: Header=BB10_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB10_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_99
.LBB10_120:                             # %for.end818
                                        #   in Loop: Header=BB10_93 Depth=1
	jmp	.LBB10_121
.LBB10_121:                             # %for.inc819
                                        #   in Loop: Header=BB10_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_93
.LBB10_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB10_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB10_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB10_123 Depth=1
	movl	$0, -16(%rbp)
.LBB10_125:                             # %for.cond826
                                        #   Parent Loop BB10_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB10_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB10_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-140(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB10_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_125
.LBB10_128:                             # %for.end846
                                        #   in Loop: Header=BB10_123 Depth=1
	jmp	.LBB10_129
.LBB10_129:                             # %for.inc847
                                        #   in Loop: Header=BB10_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_123
.LBB10_130:                             # %for.end849
	movl	-204(%rbp), %ebx
	cmpl	$873127459, -216(%rbp)  # imm = 0x340ADE23
	jne	.LBB10_132
.LBB10_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_131
.Lfunc_end10:
	.size	dct_luma_sp.1, .Lfunc_end10-dct_luma_sp.1
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.2        # -- Begin function intrapred_luma.2
	.p2align	4, 0x90
	.type	intrapred_luma.2,@function
intrapred_luma.2:                       # @intrapred_luma.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$103039775, -172(%rbp)  # imm = 0x624431F
	movl	%edi, -108(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB11_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB11_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_1
.LBB11_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB11_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB11_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB11_10
.LBB11_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB11_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB11_9:                               # %lor.end
.LBB11_10:                              # %land.end
	xorb	$-1, %al
.LBB11_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB11_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB11_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB11_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB11_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB11_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB11_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB11_17
.LBB11_16:                              # %cond.false
                                        #   in Loop: Header=BB11_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_17
.LBB11_17:                              # %cond.end
                                        #   in Loop: Header=BB11_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB11_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_13
.LBB11_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB11_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB11_22
.LBB11_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB11_22
.LBB11_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB11_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB11_25
.LBB11_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB11_25
.LBB11_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB11_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB11_28
.LBB11_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB11_28
.LBB11_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB11_30
.LBB11_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB11_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB11_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB11_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB11_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB11_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB11_36
.LBB11_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB11_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB11_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB11_39
.LBB11_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB11_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB11_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_42
.LBB11_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB11_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB11_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB11_45
.LBB11_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB11_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB11_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB11_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB11_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB11_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_46
.LBB11_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB11_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB11_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB11_61
.LBB11_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB11_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB11_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB11_60
.LBB11_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB11_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB11_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB11_59
.LBB11_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB11_59:                              # %if.end284
	jmp	.LBB11_60
.LBB11_60:                              # %if.end285
	jmp	.LBB11_61
.LBB11_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB11_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB11_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB11_62 Depth=1
	movl	$0, -4(%rbp)
.LBB11_64:                              # %for.cond291
                                        #   Parent Loop BB11_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB11_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB11_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB11_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_64
.LBB11_67:                              # %for.end304
                                        #   in Loop: Header=BB11_62 Depth=1
	jmp	.LBB11_68
.LBB11_68:                              # %for.inc305
                                        #   in Loop: Header=BB11_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB11_62
.LBB11_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB11_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB11_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB11_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB11_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_70
.LBB11_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB11_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB11_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB11_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB11_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB11_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB11_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB11_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB11_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB11_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB11_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB11_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB11_85:                              # %if.end1174
	cmpl	$103039775, -172(%rbp)  # imm = 0x624431F
	jne	.LBB11_87
.LBB11_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_86
.Lfunc_end11:
	.size	intrapred_luma.2, .Lfunc_end11-intrapred_luma.2
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.3            # -- Begin function dct_chroma.3
	.p2align	4, 0x90
	.type	dct_chroma.3,@function
dct_chroma.3:                           # @dct_chroma.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$2087005548, -380(%rbp) # imm = 0x7C652D6C
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB12_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB12_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB12_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB12_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB12_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB12_11
.LBB12_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB12_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB12_10
.LBB12_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB12_10:                              # %cond.end
.LBB12_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB12_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB12_14
.LBB12_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB12_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB12_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB12_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB12_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_19 Depth 2
                                        #       Child Loop BB12_21 Depth 3
                                        #         Child Loop BB12_25 Depth 4
                                        #       Child Loop BB12_31 Depth 3
                                        #         Child Loop BB12_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB12_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	$0, -28(%rbp)
.LBB12_19:                              # %for.cond56
                                        #   Parent Loop BB12_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_21 Depth 3
                                        #         Child Loop BB12_25 Depth 4
                                        #       Child Loop BB12_31 Depth 3
                                        #         Child Loop BB12_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB12_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB12_19 Depth=2
	movl	$0, -12(%rbp)
.LBB12_21:                              # %for.cond60
                                        #   Parent Loop BB12_17 Depth=1
                                        #     Parent Loop BB12_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB12_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB12_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_23:                              # %land.end64
                                        #   in Loop: Header=BB12_21 Depth=3
	testb	$1, %al
	jne	.LBB12_24
	jmp	.LBB12_30
.LBB12_24:                              # %for.body66
                                        #   in Loop: Header=BB12_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB12_25:                              # %for.cond68
                                        #   Parent Loop BB12_17 Depth=1
                                        #     Parent Loop BB12_19 Depth=2
                                        #       Parent Loop BB12_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB12_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB12_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB12_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_25
.LBB12_28:                              # %for.end
                                        #   in Loop: Header=BB12_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB12_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_21
.LBB12_30:                              # %for.end141
                                        #   in Loop: Header=BB12_19 Depth=2
	movl	$0, -16(%rbp)
.LBB12_31:                              # %for.cond142
                                        #   Parent Loop BB12_17 Depth=1
                                        #     Parent Loop BB12_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB12_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_33:                              # %land.end148
                                        #   in Loop: Header=BB12_31 Depth=3
	testb	$1, %al
	jne	.LBB12_34
	jmp	.LBB12_40
.LBB12_34:                              # %for.body150
                                        #   in Loop: Header=BB12_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB12_35:                              # %for.cond152
                                        #   Parent Loop BB12_17 Depth=1
                                        #     Parent Loop BB12_19 Depth=2
                                        #       Parent Loop BB12_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB12_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB12_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB12_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_35
.LBB12_38:                              # %for.end189
                                        #   in Loop: Header=BB12_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB12_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_31
.LBB12_40:                              # %for.end230
                                        #   in Loop: Header=BB12_19 Depth=2
	jmp	.LBB12_41
.LBB12_41:                              # %for.inc231
                                        #   in Loop: Header=BB12_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_19
.LBB12_42:                              # %for.end233
                                        #   in Loop: Header=BB12_17 Depth=1
	jmp	.LBB12_43
.LBB12_43:                              # %for.inc234
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_17
.LBB12_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB12_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB12_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB12_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB12_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB12_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_50
.LBB12_49:                              # %if.else
                                        #   in Loop: Header=BB12_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB12_50:                              # %if.end349
                                        #   in Loop: Header=BB12_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB12_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB12_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB12_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB12_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB12_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB12_54:                              # %if.end359
                                        #   in Loop: Header=BB12_46 Depth=1
	jmp	.LBB12_55
.LBB12_55:                              # %if.end360
                                        #   in Loop: Header=BB12_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB12_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB12_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	$1, %eax
	jmp	.LBB12_59
.LBB12_58:                              # %cond.false370
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-132(%rbp), %eax
.LBB12_59:                              # %cond.end371
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB12_60:                              # %if.end384
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB12_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_46
.LBB12_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB12_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB12_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB12_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB12_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB12_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB12_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB12_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB12_68
.LBB12_67:                              # %if.else447
                                        #   in Loop: Header=BB12_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB12_68:                              # %if.end461
                                        #   in Loop: Header=BB12_63 Depth=1
	jmp	.LBB12_73
.LBB12_69:                              # %if.else462
                                        #   in Loop: Header=BB12_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB12_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB12_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB12_72
.LBB12_71:                              # %if.else479
                                        #   in Loop: Header=BB12_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB12_72:                              # %if.end493
                                        #   in Loop: Header=BB12_63 Depth=1
	jmp	.LBB12_73
.LBB12_73:                              # %if.end494
                                        #   in Loop: Header=BB12_63 Depth=1
	jmp	.LBB12_74
.LBB12_74:                              # %for.inc495
                                        #   in Loop: Header=BB12_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_63
.LBB12_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB12_213
.LBB12_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB12_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB12_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB12_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB12_78 Depth=1
	movl	$0, -16(%rbp)
.LBB12_80:                              # %for.cond523
                                        #   Parent Loop BB12_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB12_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB12_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB12_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_80
.LBB12_83:                              # %for.end541
                                        #   in Loop: Header=BB12_78 Depth=1
	jmp	.LBB12_84
.LBB12_84:                              # %for.inc542
                                        #   in Loop: Header=BB12_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_78
.LBB12_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB12_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB12_86 Depth=1
	movl	$0, -12(%rbp)
.LBB12_88:                              # %for.cond605
                                        #   Parent Loop BB12_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB12_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB12_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_88
.LBB12_91:                              # %for.end634
                                        #   in Loop: Header=BB12_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB12_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_86
.LBB12_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB12_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB12_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB12_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB12_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB12_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_98
.LBB12_97:                              # %if.else700
                                        #   in Loop: Header=BB12_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB12_98:                              # %if.end723
                                        #   in Loop: Header=BB12_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB12_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB12_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	$1, %eax
	jmp	.LBB12_102
.LBB12_101:                             # %cond.false735
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	-132(%rbp), %eax
.LBB12_102:                             # %cond.end736
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB12_103:                             # %if.end748
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB12_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_94
.LBB12_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB12_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_108 Depth 2
                                        #     Child Loop BB12_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB12_106 Depth=1
	movl	$0, -12(%rbp)
.LBB12_108:                             # %for.cond823
                                        #   Parent Loop BB12_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB12_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB12_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_108
.LBB12_111:                             # %for.end835
                                        #   in Loop: Header=BB12_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB12_112:                             # %for.cond852
                                        #   Parent Loop BB12_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB12_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB12_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB12_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB12_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB12_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB12_117
.LBB12_116:                             # %if.else915
                                        #   in Loop: Header=BB12_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB12_117:                             # %if.end968
                                        #   in Loop: Header=BB12_112 Depth=2
	jmp	.LBB12_122
.LBB12_118:                             # %if.else969
                                        #   in Loop: Header=BB12_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB12_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB12_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB12_121
.LBB12_120:                             # %if.else1019
                                        #   in Loop: Header=BB12_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB12_121:                             # %if.end1066
                                        #   in Loop: Header=BB12_112 Depth=2
	jmp	.LBB12_122
.LBB12_122:                             # %if.end1067
                                        #   in Loop: Header=BB12_112 Depth=2
	jmp	.LBB12_123
.LBB12_123:                             # %for.inc1068
                                        #   in Loop: Header=BB12_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_112
.LBB12_124:                             # %for.end1070
                                        #   in Loop: Header=BB12_106 Depth=1
	jmp	.LBB12_125
.LBB12_125:                             # %for.inc1071
                                        #   in Loop: Header=BB12_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_106
.LBB12_126:                             # %for.end1073
	jmp	.LBB12_212
.LBB12_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB12_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB12_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB12_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB12_129 Depth=1
	movl	$0, -16(%rbp)
.LBB12_131:                             # %for.cond1083
                                        #   Parent Loop BB12_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB12_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB12_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB12_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_131
.LBB12_134:                             # %for.end1101
                                        #   in Loop: Header=BB12_129 Depth=1
	jmp	.LBB12_135
.LBB12_135:                             # %for.inc1102
                                        #   in Loop: Header=BB12_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_129
.LBB12_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB12_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB12_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB12_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_139:                             # %land.end1111
                                        #   in Loop: Header=BB12_137 Depth=1
	testb	$1, %al
	jne	.LBB12_140
	jmp	.LBB12_146
.LBB12_140:                             # %for.body1113
                                        #   in Loop: Header=BB12_137 Depth=1
	movl	$0, -16(%rbp)
.LBB12_141:                             # %for.cond1114
                                        #   Parent Loop BB12_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB12_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB12_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_141
.LBB12_144:                             # %for.end1143
                                        #   in Loop: Header=BB12_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB12_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_137
.LBB12_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB12_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB12_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_149:                             # %land.end1177
                                        #   in Loop: Header=BB12_147 Depth=1
	testb	$1, %al
	jne	.LBB12_150
	jmp	.LBB12_156
.LBB12_150:                             # %for.body1179
                                        #   in Loop: Header=BB12_147 Depth=1
	movl	$0, -12(%rbp)
.LBB12_151:                             # %for.cond1180
                                        #   Parent Loop BB12_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB12_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB12_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_151
.LBB12_154:                             # %for.end1209
                                        #   in Loop: Header=BB12_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB12_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_147
.LBB12_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB12_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB12_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB12_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB12_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB12_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB12_164
.LBB12_160:                             # %if.else1261
                                        #   in Loop: Header=BB12_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB12_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB12_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_163
.LBB12_162:                             # %if.else1287
                                        #   in Loop: Header=BB12_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB12_163:                             # %if.end1310
                                        #   in Loop: Header=BB12_157 Depth=1
	jmp	.LBB12_164
.LBB12_164:                             # %if.end1311
                                        #   in Loop: Header=BB12_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB12_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB12_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	$1, %eax
	jmp	.LBB12_168
.LBB12_167:                             # %cond.false1322
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	-132(%rbp), %eax
.LBB12_168:                             # %cond.end1323
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB12_169:                             # %if.end1335
                                        #   in Loop: Header=BB12_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB12_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB12_171:                             # %if.end1347
                                        #   in Loop: Header=BB12_157 Depth=1
	jmp	.LBB12_172
.LBB12_172:                             # %for.inc1348
                                        #   in Loop: Header=BB12_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_157
.LBB12_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB12_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_178 Depth 2
                                        #     Child Loop BB12_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB12_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB12_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_176:                             # %land.end1359
                                        #   in Loop: Header=BB12_174 Depth=1
	testb	$1, %al
	jne	.LBB12_177
	jmp	.LBB12_187
.LBB12_177:                             # %for.body1361
                                        #   in Loop: Header=BB12_174 Depth=1
	movl	$0, -16(%rbp)
.LBB12_178:                             # %for.cond1362
                                        #   Parent Loop BB12_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB12_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB12_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB12_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_178
.LBB12_181:                             # %for.end1374
                                        #   in Loop: Header=BB12_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB12_182:                             # %for.cond1391
                                        #   Parent Loop BB12_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB12_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB12_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB12_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_182
.LBB12_185:                             # %for.end1416
                                        #   in Loop: Header=BB12_174 Depth=1
	jmp	.LBB12_186
.LBB12_186:                             # %for.inc1417
                                        #   in Loop: Header=BB12_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_174
.LBB12_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB12_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_192 Depth 2
                                        #     Child Loop BB12_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB12_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_190:                             # %land.end1426
                                        #   in Loop: Header=BB12_188 Depth=1
	testb	$1, %al
	jne	.LBB12_191
	jmp	.LBB12_210
.LBB12_191:                             # %for.body1428
                                        #   in Loop: Header=BB12_188 Depth=1
	movl	$0, -12(%rbp)
.LBB12_192:                             # %for.cond1429
                                        #   Parent Loop BB12_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB12_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB12_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB12_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_192
.LBB12_195:                             # %for.end1441
                                        #   in Loop: Header=BB12_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB12_196:                             # %for.cond1458
                                        #   Parent Loop BB12_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB12_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB12_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB12_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB12_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB12_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB12_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB12_201
.LBB12_200:                             # %if.else1521
                                        #   in Loop: Header=BB12_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB12_201:                             # %if.end1574
                                        #   in Loop: Header=BB12_196 Depth=2
	jmp	.LBB12_206
.LBB12_202:                             # %if.else1575
                                        #   in Loop: Header=BB12_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB12_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB12_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB12_205
.LBB12_204:                             # %if.else1625
                                        #   in Loop: Header=BB12_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB12_205:                             # %if.end1672
                                        #   in Loop: Header=BB12_196 Depth=2
	jmp	.LBB12_206
.LBB12_206:                             # %if.end1673
                                        #   in Loop: Header=BB12_196 Depth=2
	jmp	.LBB12_207
.LBB12_207:                             # %for.inc1674
                                        #   in Loop: Header=BB12_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_196
.LBB12_208:                             # %for.end1676
                                        #   in Loop: Header=BB12_188 Depth=1
	jmp	.LBB12_209
.LBB12_209:                             # %for.inc1677
                                        #   in Loop: Header=BB12_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_188
.LBB12_210:                             # %for.end1679
	jmp	.LBB12_211
.LBB12_211:                             # %if.end1680
	jmp	.LBB12_212
.LBB12_212:                             # %if.end1681
	jmp	.LBB12_213
.LBB12_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB12_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_216 Depth 2
                                        #       Child Loop BB12_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB12_214 Depth=1
	movl	$0, -112(%rbp)
.LBB12_216:                             # %for.cond1689
                                        #   Parent Loop BB12_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB12_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB12_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB12_218:                             # %for.cond1722
                                        #   Parent Loop BB12_214 Depth=1
                                        #     Parent Loop BB12_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB12_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB12_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_223
.LBB12_222:                             # %if.then1731
                                        #   in Loop: Header=BB12_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_224
.LBB12_223:                             # %if.else1740
                                        #   in Loop: Header=BB12_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB12_224:                             # %if.end1749
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB12_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB12_230
.LBB12_226:                             # %if.else1761
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB12_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB12_229
.LBB12_228:                             # %if.else1792
                                        #   in Loop: Header=BB12_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB12_229:                             # %if.end1820
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_230
.LBB12_230:                             # %if.end1821
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB12_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB12_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB12_234
.LBB12_233:                             # %if.then1839
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB12_235
.LBB12_234:                             # %if.else1841
                                        #   in Loop: Header=BB12_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB12_235:                             # %if.end1848
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB12_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB12_247
.LBB12_237:                             # %if.else1872
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB12_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB12_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB12_241
.LBB12_240:                             # %if.else1893
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB12_241:                             # %if.end1908
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_246
.LBB12_242:                             # %if.else1909
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB12_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB12_245
.LBB12_244:                             # %if.else1924
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB12_245:                             # %if.end1936
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_246
.LBB12_246:                             # %if.end1937
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_247
.LBB12_247:                             # %if.end1938
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_248
.LBB12_248:                             # %if.end1939
                                        #   in Loop: Header=BB12_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB12_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_250:                             # %if.end1949
                                        #   in Loop: Header=BB12_218 Depth=3
	jmp	.LBB12_251
.LBB12_251:                             # %for.inc1950
                                        #   in Loop: Header=BB12_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_218
.LBB12_252:                             # %for.end1952
                                        #   in Loop: Header=BB12_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB12_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB12_216
.LBB12_254:                             # %for.end1957
                                        #   in Loop: Header=BB12_214 Depth=1
	jmp	.LBB12_255
.LBB12_255:                             # %for.inc1958
                                        #   in Loop: Header=BB12_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB12_214
.LBB12_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB12_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB12_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB12_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_261 Depth 2
                                        #       Child Loop BB12_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB12_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB12_259 Depth=1
	movl	$0, -112(%rbp)
.LBB12_261:                             # %for.cond1972
                                        #   Parent Loop BB12_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB12_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB12_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB12_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB12_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB12_264:                             # %if.end2016
                                        #   in Loop: Header=BB12_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB12_265:                             # %for.cond2018
                                        #   Parent Loop BB12_259 Depth=1
                                        #     Parent Loop BB12_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB12_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB12_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB12_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB12_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB12_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_270
.LBB12_269:                             # %if.then2030
                                        #   in Loop: Header=BB12_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_271
.LBB12_270:                             # %if.else2039
                                        #   in Loop: Header=BB12_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB12_271:                             # %if.end2048
                                        #   in Loop: Header=BB12_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB12_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_265
.LBB12_273:                             # %for.end2060
                                        #   in Loop: Header=BB12_261 Depth=2
	jmp	.LBB12_274
.LBB12_274:                             # %for.inc2061
                                        #   in Loop: Header=BB12_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB12_261
.LBB12_275:                             # %for.end2063
                                        #   in Loop: Header=BB12_259 Depth=1
	jmp	.LBB12_276
.LBB12_276:                             # %for.inc2064
                                        #   in Loop: Header=BB12_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB12_259
.LBB12_277:                             # %for.end2066
	jmp	.LBB12_278
.LBB12_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB12_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB12_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB12_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_285 Depth 2
                                        #       Child Loop BB12_287 Depth 3
                                        #         Child Loop BB12_289 Depth 4
                                        #         Child Loop BB12_293 Depth 4
                                        #       Child Loop BB12_299 Depth 3
                                        #         Child Loop BB12_303 Depth 4
                                        #         Child Loop BB12_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB12_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB12_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_283:                             # %land.end2079
                                        #   in Loop: Header=BB12_281 Depth=1
	testb	$1, %al
	jne	.LBB12_284
	jmp	.LBB12_340
.LBB12_284:                             # %for.body2081
                                        #   in Loop: Header=BB12_281 Depth=1
	movl	$0, -28(%rbp)
.LBB12_285:                             # %for.cond2082
                                        #   Parent Loop BB12_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_287 Depth 3
                                        #         Child Loop BB12_289 Depth 4
                                        #         Child Loop BB12_293 Depth 4
                                        #       Child Loop BB12_299 Depth 3
                                        #         Child Loop BB12_303 Depth 4
                                        #         Child Loop BB12_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB12_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB12_285 Depth=2
	movl	$0, -12(%rbp)
.LBB12_287:                             # %for.cond2087
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_289 Depth 4
                                        #         Child Loop BB12_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB12_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB12_287 Depth=3
	movl	$0, -16(%rbp)
.LBB12_289:                             # %for.cond2091
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        #       Parent Loop BB12_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB12_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB12_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB12_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_289
.LBB12_292:                             # %for.end2106
                                        #   in Loop: Header=BB12_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB12_293:                             # %for.cond2125
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        #       Parent Loop BB12_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB12_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB12_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB12_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_293
.LBB12_296:                             # %for.end2156
                                        #   in Loop: Header=BB12_287 Depth=3
	jmp	.LBB12_297
.LBB12_297:                             # %for.inc2157
                                        #   in Loop: Header=BB12_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_287
.LBB12_298:                             # %for.end2159
                                        #   in Loop: Header=BB12_285 Depth=2
	movl	$0, -16(%rbp)
.LBB12_299:                             # %for.cond2160
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB12_303 Depth 4
                                        #         Child Loop BB12_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB12_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB12_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB12_301:                             # %land.end2166
                                        #   in Loop: Header=BB12_299 Depth=3
	testb	$1, %al
	jne	.LBB12_302
	jmp	.LBB12_336
.LBB12_302:                             # %for.body2168
                                        #   in Loop: Header=BB12_299 Depth=3
	movl	$0, -12(%rbp)
.LBB12_303:                             # %for.cond2169
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        #       Parent Loop BB12_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB12_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB12_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB12_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_303
.LBB12_306:                             # %for.end2184
                                        #   in Loop: Header=BB12_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB12_307:                             # %for.cond2203
                                        #   Parent Loop BB12_281 Depth=1
                                        #     Parent Loop BB12_285 Depth=2
                                        #       Parent Loop BB12_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB12_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB12_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB12_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB12_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB12_312
.LBB12_311:                             # %cond.false2231
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB12_312:                             # %cond.end2250
                                        #   in Loop: Header=BB12_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB12_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB12_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB12_318
.LBB12_314:                             # %cond.false2257
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB12_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB12_317
.LBB12_316:                             # %cond.false2279
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB12_317:                             # %cond.end2298
                                        #   in Loop: Header=BB12_307 Depth=4
.LBB12_318:                             # %cond.end2300
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB12_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB12_321
.LBB12_320:                             # %cond.false2333
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB12_321:                             # %cond.end2352
                                        #   in Loop: Header=BB12_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB12_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB12_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB12_327
.LBB12_323:                             # %cond.false2359
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB12_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB12_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB12_326
.LBB12_325:                             # %cond.false2381
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB12_326:                             # %cond.end2400
                                        #   in Loop: Header=BB12_307 Depth=4
.LBB12_327:                             # %cond.end2402
                                        #   in Loop: Header=BB12_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB12_332
.LBB12_328:                             # %if.else2412
                                        #   in Loop: Header=BB12_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB12_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB12_331
.LBB12_330:                             # %if.else2439
                                        #   in Loop: Header=BB12_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB12_331:                             # %if.end2468
                                        #   in Loop: Header=BB12_307 Depth=4
	jmp	.LBB12_332
.LBB12_332:                             # %if.end2469
                                        #   in Loop: Header=BB12_307 Depth=4
	jmp	.LBB12_333
.LBB12_333:                             # %for.inc2470
                                        #   in Loop: Header=BB12_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_307
.LBB12_334:                             # %for.end2472
                                        #   in Loop: Header=BB12_299 Depth=3
	jmp	.LBB12_335
.LBB12_335:                             # %for.inc2473
                                        #   in Loop: Header=BB12_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_299
.LBB12_336:                             # %for.end2475
                                        #   in Loop: Header=BB12_285 Depth=2
	jmp	.LBB12_337
.LBB12_337:                             # %for.inc2476
                                        #   in Loop: Header=BB12_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB12_285
.LBB12_338:                             # %for.end2478
                                        #   in Loop: Header=BB12_281 Depth=1
	jmp	.LBB12_339
.LBB12_339:                             # %for.inc2479
                                        #   in Loop: Header=BB12_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_281
.LBB12_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB12_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB12_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB12_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB12_342 Depth=1
	movl	$0, -16(%rbp)
.LBB12_344:                             # %for.cond2490
                                        #   Parent Loop BB12_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB12_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB12_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB12_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB12_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB12_348
.LBB12_347:                             # %if.else2518
                                        #   in Loop: Header=BB12_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB12_348:                             # %if.end2536
                                        #   in Loop: Header=BB12_344 Depth=2
	jmp	.LBB12_349
.LBB12_349:                             # %for.inc2537
                                        #   in Loop: Header=BB12_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_344
.LBB12_350:                             # %for.end2539
                                        #   in Loop: Header=BB12_342 Depth=1
	jmp	.LBB12_351
.LBB12_351:                             # %for.inc2540
                                        #   in Loop: Header=BB12_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_342
.LBB12_352:                             # %for.end2542
	jmp	.LBB12_353
.LBB12_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$2087005548, -380(%rbp) # imm = 0x7C652D6C
	jne	.LBB12_355
.LBB12_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_354
.Lfunc_end12:
	.size	dct_chroma.3, .Lfunc_end12-dct_chroma.3
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.4            # -- Begin function dct_chroma.4
	.p2align	4, 0x90
	.type	dct_chroma.4,@function
dct_chroma.4:                           # @dct_chroma.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1739015577, -380(%rbp) # imm = 0x67A74599
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB13_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB13_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB13_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB13_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB13_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB13_11
.LBB13_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB13_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB13_10
.LBB13_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB13_10:                              # %cond.end
.LBB13_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB13_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB13_14
.LBB13_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB13_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB13_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB13_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB13_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_19 Depth 2
                                        #       Child Loop BB13_21 Depth 3
                                        #         Child Loop BB13_25 Depth 4
                                        #       Child Loop BB13_31 Depth 3
                                        #         Child Loop BB13_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	$0, -28(%rbp)
.LBB13_19:                              # %for.cond56
                                        #   Parent Loop BB13_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_21 Depth 3
                                        #         Child Loop BB13_25 Depth 4
                                        #       Child Loop BB13_31 Depth 3
                                        #         Child Loop BB13_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	$0, -12(%rbp)
.LBB13_21:                              # %for.cond60
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB13_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_23:                              # %land.end64
                                        #   in Loop: Header=BB13_21 Depth=3
	testb	$1, %al
	jne	.LBB13_24
	jmp	.LBB13_30
.LBB13_24:                              # %for.body66
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB13_25:                              # %for.cond68
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        #       Parent Loop BB13_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB13_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB13_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB13_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_25
.LBB13_28:                              # %for.end
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB13_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_21
.LBB13_30:                              # %for.end141
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	$0, -16(%rbp)
.LBB13_31:                              # %for.cond142
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB13_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_33:                              # %land.end148
                                        #   in Loop: Header=BB13_31 Depth=3
	testb	$1, %al
	jne	.LBB13_34
	jmp	.LBB13_40
.LBB13_34:                              # %for.body150
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB13_35:                              # %for.cond152
                                        #   Parent Loop BB13_17 Depth=1
                                        #     Parent Loop BB13_19 Depth=2
                                        #       Parent Loop BB13_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB13_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB13_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB13_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_35
.LBB13_38:                              # %for.end189
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB13_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_31
.LBB13_40:                              # %for.end230
                                        #   in Loop: Header=BB13_19 Depth=2
	jmp	.LBB13_41
.LBB13_41:                              # %for.inc231
                                        #   in Loop: Header=BB13_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_19
.LBB13_42:                              # %for.end233
                                        #   in Loop: Header=BB13_17 Depth=1
	jmp	.LBB13_43
.LBB13_43:                              # %for.inc234
                                        #   in Loop: Header=BB13_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_17
.LBB13_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB13_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB13_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB13_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB13_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_50
.LBB13_49:                              # %if.else
                                        #   in Loop: Header=BB13_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_50:                              # %if.end349
                                        #   in Loop: Header=BB13_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB13_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB13_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB13_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB13_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB13_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB13_54:                              # %if.end359
                                        #   in Loop: Header=BB13_46 Depth=1
	jmp	.LBB13_55
.LBB13_55:                              # %if.end360
                                        #   in Loop: Header=BB13_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	$1, %eax
	jmp	.LBB13_59
.LBB13_58:                              # %cond.false370
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-136(%rbp), %eax
.LBB13_59:                              # %cond.end371
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB13_60:                              # %if.end384
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB13_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_46
.LBB13_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB13_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB13_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB13_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB13_68
.LBB13_67:                              # %if.else447
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB13_68:                              # %if.end461
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_73
.LBB13_69:                              # %if.else462
                                        #   in Loop: Header=BB13_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB13_72
.LBB13_71:                              # %if.else479
                                        #   in Loop: Header=BB13_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB13_72:                              # %if.end493
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_73
.LBB13_73:                              # %if.end494
                                        #   in Loop: Header=BB13_63 Depth=1
	jmp	.LBB13_74
.LBB13_74:                              # %for.inc495
                                        #   in Loop: Header=BB13_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_63
.LBB13_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB13_213
.LBB13_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB13_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB13_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB13_78 Depth=1
	movl	$0, -16(%rbp)
.LBB13_80:                              # %for.cond523
                                        #   Parent Loop BB13_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB13_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB13_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_80
.LBB13_83:                              # %for.end541
                                        #   in Loop: Header=BB13_78 Depth=1
	jmp	.LBB13_84
.LBB13_84:                              # %for.inc542
                                        #   in Loop: Header=BB13_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_78
.LBB13_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB13_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	$0, -12(%rbp)
.LBB13_88:                              # %for.cond605
                                        #   Parent Loop BB13_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB13_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB13_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_88
.LBB13_91:                              # %for.end634
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB13_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_86
.LBB13_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB13_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB13_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_98
.LBB13_97:                              # %if.else700
                                        #   in Loop: Header=BB13_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_98:                              # %if.end723
                                        #   in Loop: Header=BB13_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	$1, %eax
	jmp	.LBB13_102
.LBB13_101:                             # %cond.false735
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-136(%rbp), %eax
.LBB13_102:                             # %cond.end736
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB13_103:                             # %if.end748
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB13_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_94
.LBB13_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB13_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_108 Depth 2
                                        #     Child Loop BB13_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	$0, -12(%rbp)
.LBB13_108:                             # %for.cond823
                                        #   Parent Loop BB13_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB13_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB13_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_108
.LBB13_111:                             # %for.end835
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_112:                             # %for.cond852
                                        #   Parent Loop BB13_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB13_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB13_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB13_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB13_117
.LBB13_116:                             # %if.else915
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB13_117:                             # %if.end968
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_122
.LBB13_118:                             # %if.else969
                                        #   in Loop: Header=BB13_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB13_121
.LBB13_120:                             # %if.else1019
                                        #   in Loop: Header=BB13_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB13_121:                             # %if.end1066
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_122
.LBB13_122:                             # %if.end1067
                                        #   in Loop: Header=BB13_112 Depth=2
	jmp	.LBB13_123
.LBB13_123:                             # %for.inc1068
                                        #   in Loop: Header=BB13_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_112
.LBB13_124:                             # %for.end1070
                                        #   in Loop: Header=BB13_106 Depth=1
	jmp	.LBB13_125
.LBB13_125:                             # %for.inc1071
                                        #   in Loop: Header=BB13_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_106
.LBB13_126:                             # %for.end1073
	jmp	.LBB13_212
.LBB13_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB13_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB13_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB13_129 Depth=1
	movl	$0, -16(%rbp)
.LBB13_131:                             # %for.cond1083
                                        #   Parent Loop BB13_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB13_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB13_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_131
.LBB13_134:                             # %for.end1101
                                        #   in Loop: Header=BB13_129 Depth=1
	jmp	.LBB13_135
.LBB13_135:                             # %for.inc1102
                                        #   in Loop: Header=BB13_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_129
.LBB13_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB13_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB13_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_139:                             # %land.end1111
                                        #   in Loop: Header=BB13_137 Depth=1
	testb	$1, %al
	jne	.LBB13_140
	jmp	.LBB13_146
.LBB13_140:                             # %for.body1113
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	$0, -16(%rbp)
.LBB13_141:                             # %for.cond1114
                                        #   Parent Loop BB13_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB13_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB13_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_141
.LBB13_144:                             # %for.end1143
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB13_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_137
.LBB13_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB13_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB13_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_149:                             # %land.end1177
                                        #   in Loop: Header=BB13_147 Depth=1
	testb	$1, %al
	jne	.LBB13_150
	jmp	.LBB13_156
.LBB13_150:                             # %for.body1179
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	$0, -12(%rbp)
.LBB13_151:                             # %for.cond1180
                                        #   Parent Loop BB13_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB13_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB13_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_151
.LBB13_154:                             # %for.end1209
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB13_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_147
.LBB13_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB13_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB13_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB13_164
.LBB13_160:                             # %if.else1261
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB13_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_163
.LBB13_162:                             # %if.else1287
                                        #   in Loop: Header=BB13_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_163:                             # %if.end1310
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_164
.LBB13_164:                             # %if.end1311
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB13_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB13_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	$1, %eax
	jmp	.LBB13_168
.LBB13_167:                             # %cond.false1322
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-136(%rbp), %eax
.LBB13_168:                             # %cond.end1323
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB13_169:                             # %if.end1335
                                        #   in Loop: Header=BB13_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB13_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB13_171:                             # %if.end1347
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_172
.LBB13_172:                             # %for.inc1348
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_157
.LBB13_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB13_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_178 Depth 2
                                        #     Child Loop BB13_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB13_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB13_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_176:                             # %land.end1359
                                        #   in Loop: Header=BB13_174 Depth=1
	testb	$1, %al
	jne	.LBB13_177
	jmp	.LBB13_187
.LBB13_177:                             # %for.body1361
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	$0, -16(%rbp)
.LBB13_178:                             # %for.cond1362
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB13_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB13_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB13_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_178
.LBB13_181:                             # %for.end1374
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB13_182:                             # %for.cond1391
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB13_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB13_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB13_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_182
.LBB13_185:                             # %for.end1416
                                        #   in Loop: Header=BB13_174 Depth=1
	jmp	.LBB13_186
.LBB13_186:                             # %for.inc1417
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_174
.LBB13_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB13_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_192 Depth 2
                                        #     Child Loop BB13_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB13_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_190:                             # %land.end1426
                                        #   in Loop: Header=BB13_188 Depth=1
	testb	$1, %al
	jne	.LBB13_191
	jmp	.LBB13_210
.LBB13_191:                             # %for.body1428
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	$0, -12(%rbp)
.LBB13_192:                             # %for.cond1429
                                        #   Parent Loop BB13_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB13_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB13_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB13_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_192
.LBB13_195:                             # %for.end1441
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_196:                             # %for.cond1458
                                        #   Parent Loop BB13_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB13_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB13_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB13_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB13_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB13_201
.LBB13_200:                             # %if.else1521
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB13_201:                             # %if.end1574
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_206
.LBB13_202:                             # %if.else1575
                                        #   in Loop: Header=BB13_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB13_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB13_205
.LBB13_204:                             # %if.else1625
                                        #   in Loop: Header=BB13_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB13_205:                             # %if.end1672
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_206
.LBB13_206:                             # %if.end1673
                                        #   in Loop: Header=BB13_196 Depth=2
	jmp	.LBB13_207
.LBB13_207:                             # %for.inc1674
                                        #   in Loop: Header=BB13_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_196
.LBB13_208:                             # %for.end1676
                                        #   in Loop: Header=BB13_188 Depth=1
	jmp	.LBB13_209
.LBB13_209:                             # %for.inc1677
                                        #   in Loop: Header=BB13_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_188
.LBB13_210:                             # %for.end1679
	jmp	.LBB13_211
.LBB13_211:                             # %if.end1680
	jmp	.LBB13_212
.LBB13_212:                             # %if.end1681
	jmp	.LBB13_213
.LBB13_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB13_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_216 Depth 2
                                        #       Child Loop BB13_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB13_214 Depth=1
	movl	$0, -112(%rbp)
.LBB13_216:                             # %for.cond1689
                                        #   Parent Loop BB13_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB13_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB13_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB13_218:                             # %for.cond1722
                                        #   Parent Loop BB13_214 Depth=1
                                        #     Parent Loop BB13_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB13_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB13_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_223
.LBB13_222:                             # %if.then1731
                                        #   in Loop: Header=BB13_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_224
.LBB13_223:                             # %if.else1740
                                        #   in Loop: Header=BB13_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB13_224:                             # %if.end1749
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB13_230
.LBB13_226:                             # %if.else1761
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB13_229
.LBB13_228:                             # %if.else1792
                                        #   in Loop: Header=BB13_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB13_229:                             # %if.end1820
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_230
.LBB13_230:                             # %if.end1821
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB13_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB13_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB13_234
.LBB13_233:                             # %if.then1839
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB13_235
.LBB13_234:                             # %if.else1841
                                        #   in Loop: Header=BB13_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB13_235:                             # %if.end1848
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB13_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB13_247
.LBB13_237:                             # %if.else1872
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB13_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB13_241
.LBB13_240:                             # %if.else1893
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB13_241:                             # %if.end1908
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_246
.LBB13_242:                             # %if.else1909
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB13_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB13_245
.LBB13_244:                             # %if.else1924
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB13_245:                             # %if.end1936
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_246
.LBB13_246:                             # %if.end1937
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_247
.LBB13_247:                             # %if.end1938
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_248
.LBB13_248:                             # %if.end1939
                                        #   in Loop: Header=BB13_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB13_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_250:                             # %if.end1949
                                        #   in Loop: Header=BB13_218 Depth=3
	jmp	.LBB13_251
.LBB13_251:                             # %for.inc1950
                                        #   in Loop: Header=BB13_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_218
.LBB13_252:                             # %for.end1952
                                        #   in Loop: Header=BB13_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB13_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_216
.LBB13_254:                             # %for.end1957
                                        #   in Loop: Header=BB13_214 Depth=1
	jmp	.LBB13_255
.LBB13_255:                             # %for.inc1958
                                        #   in Loop: Header=BB13_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB13_214
.LBB13_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB13_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB13_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB13_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_261 Depth 2
                                        #       Child Loop BB13_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB13_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB13_259 Depth=1
	movl	$0, -112(%rbp)
.LBB13_261:                             # %for.cond1972
                                        #   Parent Loop BB13_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB13_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB13_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB13_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB13_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB13_264:                             # %if.end2016
                                        #   in Loop: Header=BB13_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB13_265:                             # %for.cond2018
                                        #   Parent Loop BB13_259 Depth=1
                                        #     Parent Loop BB13_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB13_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB13_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_270
.LBB13_269:                             # %if.then2030
                                        #   in Loop: Header=BB13_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_271
.LBB13_270:                             # %if.else2039
                                        #   in Loop: Header=BB13_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB13_271:                             # %if.end2048
                                        #   in Loop: Header=BB13_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB13_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB13_265
.LBB13_273:                             # %for.end2060
                                        #   in Loop: Header=BB13_261 Depth=2
	jmp	.LBB13_274
.LBB13_274:                             # %for.inc2061
                                        #   in Loop: Header=BB13_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB13_261
.LBB13_275:                             # %for.end2063
                                        #   in Loop: Header=BB13_259 Depth=1
	jmp	.LBB13_276
.LBB13_276:                             # %for.inc2064
                                        #   in Loop: Header=BB13_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB13_259
.LBB13_277:                             # %for.end2066
	jmp	.LBB13_278
.LBB13_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB13_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB13_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB13_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_285 Depth 2
                                        #       Child Loop BB13_287 Depth 3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
                                        #       Child Loop BB13_299 Depth 3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB13_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB13_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_283:                             # %land.end2079
                                        #   in Loop: Header=BB13_281 Depth=1
	testb	$1, %al
	jne	.LBB13_284
	jmp	.LBB13_340
.LBB13_284:                             # %for.body2081
                                        #   in Loop: Header=BB13_281 Depth=1
	movl	$0, -28(%rbp)
.LBB13_285:                             # %for.cond2082
                                        #   Parent Loop BB13_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_287 Depth 3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
                                        #       Child Loop BB13_299 Depth 3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	$0, -12(%rbp)
.LBB13_287:                             # %for.cond2087
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_289 Depth 4
                                        #         Child Loop BB13_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB13_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	$0, -16(%rbp)
.LBB13_289:                             # %for.cond2091
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB13_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB13_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB13_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_289
.LBB13_292:                             # %for.end2106
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB13_293:                             # %for.cond2125
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB13_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB13_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB13_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_293
.LBB13_296:                             # %for.end2156
                                        #   in Loop: Header=BB13_287 Depth=3
	jmp	.LBB13_297
.LBB13_297:                             # %for.inc2157
                                        #   in Loop: Header=BB13_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_287
.LBB13_298:                             # %for.end2159
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	$0, -16(%rbp)
.LBB13_299:                             # %for.cond2160
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_303 Depth 4
                                        #         Child Loop BB13_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB13_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB13_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB13_301:                             # %land.end2166
                                        #   in Loop: Header=BB13_299 Depth=3
	testb	$1, %al
	jne	.LBB13_302
	jmp	.LBB13_336
.LBB13_302:                             # %for.body2168
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	$0, -12(%rbp)
.LBB13_303:                             # %for.cond2169
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB13_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB13_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB13_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_303
.LBB13_306:                             # %for.end2184
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB13_307:                             # %for.cond2203
                                        #   Parent Loop BB13_281 Depth=1
                                        #     Parent Loop BB13_285 Depth=2
                                        #       Parent Loop BB13_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB13_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB13_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB13_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB13_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB13_312
.LBB13_311:                             # %cond.false2231
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB13_312:                             # %cond.end2250
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB13_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB13_318
.LBB13_314:                             # %cond.false2257
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB13_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_317
.LBB13_316:                             # %cond.false2279
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB13_317:                             # %cond.end2298
                                        #   in Loop: Header=BB13_307 Depth=4
.LBB13_318:                             # %cond.end2300
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB13_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB13_321
.LBB13_320:                             # %cond.false2333
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB13_321:                             # %cond.end2352
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB13_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB13_327
.LBB13_323:                             # %cond.false2359
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB13_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB13_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_326
.LBB13_325:                             # %cond.false2381
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB13_326:                             # %cond.end2400
                                        #   in Loop: Header=BB13_307 Depth=4
.LBB13_327:                             # %cond.end2402
                                        #   in Loop: Header=BB13_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB13_332
.LBB13_328:                             # %if.else2412
                                        #   in Loop: Header=BB13_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB13_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB13_331
.LBB13_330:                             # %if.else2439
                                        #   in Loop: Header=BB13_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_331:                             # %if.end2468
                                        #   in Loop: Header=BB13_307 Depth=4
	jmp	.LBB13_332
.LBB13_332:                             # %if.end2469
                                        #   in Loop: Header=BB13_307 Depth=4
	jmp	.LBB13_333
.LBB13_333:                             # %for.inc2470
                                        #   in Loop: Header=BB13_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_307
.LBB13_334:                             # %for.end2472
                                        #   in Loop: Header=BB13_299 Depth=3
	jmp	.LBB13_335
.LBB13_335:                             # %for.inc2473
                                        #   in Loop: Header=BB13_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_299
.LBB13_336:                             # %for.end2475
                                        #   in Loop: Header=BB13_285 Depth=2
	jmp	.LBB13_337
.LBB13_337:                             # %for.inc2476
                                        #   in Loop: Header=BB13_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_285
.LBB13_338:                             # %for.end2478
                                        #   in Loop: Header=BB13_281 Depth=1
	jmp	.LBB13_339
.LBB13_339:                             # %for.inc2479
                                        #   in Loop: Header=BB13_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_281
.LBB13_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB13_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB13_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB13_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB13_342 Depth=1
	movl	$0, -16(%rbp)
.LBB13_344:                             # %for.cond2490
                                        #   Parent Loop BB13_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB13_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB13_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB13_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB13_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB13_348
.LBB13_347:                             # %if.else2518
                                        #   in Loop: Header=BB13_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB13_348:                             # %if.end2536
                                        #   in Loop: Header=BB13_344 Depth=2
	jmp	.LBB13_349
.LBB13_349:                             # %for.inc2537
                                        #   in Loop: Header=BB13_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_344
.LBB13_350:                             # %for.end2539
                                        #   in Loop: Header=BB13_342 Depth=1
	jmp	.LBB13_351
.LBB13_351:                             # %for.inc2540
                                        #   in Loop: Header=BB13_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_342
.LBB13_352:                             # %for.end2542
	jmp	.LBB13_353
.LBB13_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$1739015577, -380(%rbp) # imm = 0x67A74599
	jne	.LBB13_355
.LBB13_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_354
.Lfunc_end13:
	.size	dct_chroma.4, .Lfunc_end13-dct_chroma.4
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.5            # -- Begin function dct_chroma.5
	.p2align	4, 0x90
	.type	dct_chroma.5,@function
dct_chroma.5:                           # @dct_chroma.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1787042364, -380(%rbp) # imm = 0x6A841A3C
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB14_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB14_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB14_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB14_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB14_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB14_11
.LBB14_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB14_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB14_10
.LBB14_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB14_10:                              # %cond.end
.LBB14_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB14_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB14_14
.LBB14_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB14_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB14_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB14_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB14_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_19 Depth 2
                                        #       Child Loop BB14_21 Depth 3
                                        #         Child Loop BB14_25 Depth 4
                                        #       Child Loop BB14_31 Depth 3
                                        #         Child Loop BB14_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB14_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	$0, -24(%rbp)
.LBB14_19:                              # %for.cond56
                                        #   Parent Loop BB14_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_21 Depth 3
                                        #         Child Loop BB14_25 Depth 4
                                        #       Child Loop BB14_31 Depth 3
                                        #         Child Loop BB14_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB14_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$0, -12(%rbp)
.LBB14_21:                              # %for.cond60
                                        #   Parent Loop BB14_17 Depth=1
                                        #     Parent Loop BB14_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB14_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_23:                              # %land.end64
                                        #   in Loop: Header=BB14_21 Depth=3
	testb	$1, %al
	jne	.LBB14_24
	jmp	.LBB14_30
.LBB14_24:                              # %for.body66
                                        #   in Loop: Header=BB14_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB14_25:                              # %for.cond68
                                        #   Parent Loop BB14_17 Depth=1
                                        #     Parent Loop BB14_19 Depth=2
                                        #       Parent Loop BB14_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB14_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB14_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_25
.LBB14_28:                              # %for.end
                                        #   in Loop: Header=BB14_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB14_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_21
.LBB14_30:                              # %for.end141
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	$0, -16(%rbp)
.LBB14_31:                              # %for.cond142
                                        #   Parent Loop BB14_17 Depth=1
                                        #     Parent Loop BB14_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB14_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_33:                              # %land.end148
                                        #   in Loop: Header=BB14_31 Depth=3
	testb	$1, %al
	jne	.LBB14_34
	jmp	.LBB14_40
.LBB14_34:                              # %for.body150
                                        #   in Loop: Header=BB14_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB14_35:                              # %for.cond152
                                        #   Parent Loop BB14_17 Depth=1
                                        #     Parent Loop BB14_19 Depth=2
                                        #       Parent Loop BB14_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB14_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB14_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_35
.LBB14_38:                              # %for.end189
                                        #   in Loop: Header=BB14_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB14_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_31
.LBB14_40:                              # %for.end230
                                        #   in Loop: Header=BB14_19 Depth=2
	jmp	.LBB14_41
.LBB14_41:                              # %for.inc231
                                        #   in Loop: Header=BB14_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_19
.LBB14_42:                              # %for.end233
                                        #   in Loop: Header=BB14_17 Depth=1
	jmp	.LBB14_43
.LBB14_43:                              # %for.inc234
                                        #   in Loop: Header=BB14_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_17
.LBB14_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB14_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB14_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB14_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB14_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB14_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_50
.LBB14_49:                              # %if.else
                                        #   in Loop: Header=BB14_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB14_50:                              # %if.end349
                                        #   in Loop: Header=BB14_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB14_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB14_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB14_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB14_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB14_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB14_54:                              # %if.end359
                                        #   in Loop: Header=BB14_46 Depth=1
	jmp	.LBB14_55
.LBB14_55:                              # %if.end360
                                        #   in Loop: Header=BB14_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB14_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB14_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	$1, %eax
	jmp	.LBB14_59
.LBB14_58:                              # %cond.false370
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	-132(%rbp), %eax
.LBB14_59:                              # %cond.end371
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB14_60:                              # %if.end384
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB14_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_46
.LBB14_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB14_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB14_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB14_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB14_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB14_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB14_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB14_68
.LBB14_67:                              # %if.else447
                                        #   in Loop: Header=BB14_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB14_68:                              # %if.end461
                                        #   in Loop: Header=BB14_63 Depth=1
	jmp	.LBB14_73
.LBB14_69:                              # %if.else462
                                        #   in Loop: Header=BB14_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB14_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB14_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB14_72
.LBB14_71:                              # %if.else479
                                        #   in Loop: Header=BB14_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB14_72:                              # %if.end493
                                        #   in Loop: Header=BB14_63 Depth=1
	jmp	.LBB14_73
.LBB14_73:                              # %if.end494
                                        #   in Loop: Header=BB14_63 Depth=1
	jmp	.LBB14_74
.LBB14_74:                              # %for.inc495
                                        #   in Loop: Header=BB14_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_63
.LBB14_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB14_213
.LBB14_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB14_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB14_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB14_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB14_78 Depth=1
	movl	$0, -16(%rbp)
.LBB14_80:                              # %for.cond523
                                        #   Parent Loop BB14_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB14_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB14_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB14_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_80
.LBB14_83:                              # %for.end541
                                        #   in Loop: Header=BB14_78 Depth=1
	jmp	.LBB14_84
.LBB14_84:                              # %for.inc542
                                        #   in Loop: Header=BB14_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_78
.LBB14_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB14_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB14_86 Depth=1
	movl	$0, -12(%rbp)
.LBB14_88:                              # %for.cond605
                                        #   Parent Loop BB14_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB14_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_88
.LBB14_91:                              # %for.end634
                                        #   in Loop: Header=BB14_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB14_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_86
.LBB14_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB14_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB14_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB14_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB14_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB14_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_98
.LBB14_97:                              # %if.else700
                                        #   in Loop: Header=BB14_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB14_98:                              # %if.end723
                                        #   in Loop: Header=BB14_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB14_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB14_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	$1, %eax
	jmp	.LBB14_102
.LBB14_101:                             # %cond.false735
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	-132(%rbp), %eax
.LBB14_102:                             # %cond.end736
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB14_103:                             # %if.end748
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB14_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_94
.LBB14_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB14_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_108 Depth 2
                                        #     Child Loop BB14_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB14_106 Depth=1
	movl	$0, -12(%rbp)
.LBB14_108:                             # %for.cond823
                                        #   Parent Loop BB14_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB14_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB14_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_108
.LBB14_111:                             # %for.end835
                                        #   in Loop: Header=BB14_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_112:                             # %for.cond852
                                        #   Parent Loop BB14_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB14_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB14_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB14_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB14_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB14_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB14_117
.LBB14_116:                             # %if.else915
                                        #   in Loop: Header=BB14_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB14_117:                             # %if.end968
                                        #   in Loop: Header=BB14_112 Depth=2
	jmp	.LBB14_122
.LBB14_118:                             # %if.else969
                                        #   in Loop: Header=BB14_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB14_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB14_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB14_121
.LBB14_120:                             # %if.else1019
                                        #   in Loop: Header=BB14_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB14_121:                             # %if.end1066
                                        #   in Loop: Header=BB14_112 Depth=2
	jmp	.LBB14_122
.LBB14_122:                             # %if.end1067
                                        #   in Loop: Header=BB14_112 Depth=2
	jmp	.LBB14_123
.LBB14_123:                             # %for.inc1068
                                        #   in Loop: Header=BB14_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_112
.LBB14_124:                             # %for.end1070
                                        #   in Loop: Header=BB14_106 Depth=1
	jmp	.LBB14_125
.LBB14_125:                             # %for.inc1071
                                        #   in Loop: Header=BB14_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_106
.LBB14_126:                             # %for.end1073
	jmp	.LBB14_212
.LBB14_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB14_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB14_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB14_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB14_129 Depth=1
	movl	$0, -16(%rbp)
.LBB14_131:                             # %for.cond1083
                                        #   Parent Loop BB14_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB14_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB14_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB14_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_131
.LBB14_134:                             # %for.end1101
                                        #   in Loop: Header=BB14_129 Depth=1
	jmp	.LBB14_135
.LBB14_135:                             # %for.inc1102
                                        #   in Loop: Header=BB14_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_129
.LBB14_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB14_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB14_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_139:                             # %land.end1111
                                        #   in Loop: Header=BB14_137 Depth=1
	testb	$1, %al
	jne	.LBB14_140
	jmp	.LBB14_146
.LBB14_140:                             # %for.body1113
                                        #   in Loop: Header=BB14_137 Depth=1
	movl	$0, -16(%rbp)
.LBB14_141:                             # %for.cond1114
                                        #   Parent Loop BB14_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB14_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB14_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_141
.LBB14_144:                             # %for.end1143
                                        #   in Loop: Header=BB14_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB14_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_137
.LBB14_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB14_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB14_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_149:                             # %land.end1177
                                        #   in Loop: Header=BB14_147 Depth=1
	testb	$1, %al
	jne	.LBB14_150
	jmp	.LBB14_156
.LBB14_150:                             # %for.body1179
                                        #   in Loop: Header=BB14_147 Depth=1
	movl	$0, -12(%rbp)
.LBB14_151:                             # %for.cond1180
                                        #   Parent Loop BB14_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB14_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB14_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_151
.LBB14_154:                             # %for.end1209
                                        #   in Loop: Header=BB14_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB14_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_147
.LBB14_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB14_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB14_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB14_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB14_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB14_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB14_164
.LBB14_160:                             # %if.else1261
                                        #   in Loop: Header=BB14_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB14_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB14_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_163
.LBB14_162:                             # %if.else1287
                                        #   in Loop: Header=BB14_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB14_163:                             # %if.end1310
                                        #   in Loop: Header=BB14_157 Depth=1
	jmp	.LBB14_164
.LBB14_164:                             # %if.end1311
                                        #   in Loop: Header=BB14_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB14_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB14_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	$1, %eax
	jmp	.LBB14_168
.LBB14_167:                             # %cond.false1322
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-132(%rbp), %eax
.LBB14_168:                             # %cond.end1323
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB14_169:                             # %if.end1335
                                        #   in Loop: Header=BB14_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB14_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB14_171:                             # %if.end1347
                                        #   in Loop: Header=BB14_157 Depth=1
	jmp	.LBB14_172
.LBB14_172:                             # %for.inc1348
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_157
.LBB14_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB14_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_178 Depth 2
                                        #     Child Loop BB14_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB14_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB14_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_176:                             # %land.end1359
                                        #   in Loop: Header=BB14_174 Depth=1
	testb	$1, %al
	jne	.LBB14_177
	jmp	.LBB14_187
.LBB14_177:                             # %for.body1361
                                        #   in Loop: Header=BB14_174 Depth=1
	movl	$0, -16(%rbp)
.LBB14_178:                             # %for.cond1362
                                        #   Parent Loop BB14_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB14_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB14_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_178
.LBB14_181:                             # %for.end1374
                                        #   in Loop: Header=BB14_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB14_182:                             # %for.cond1391
                                        #   Parent Loop BB14_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB14_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB14_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB14_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_182
.LBB14_185:                             # %for.end1416
                                        #   in Loop: Header=BB14_174 Depth=1
	jmp	.LBB14_186
.LBB14_186:                             # %for.inc1417
                                        #   in Loop: Header=BB14_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_174
.LBB14_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB14_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_192 Depth 2
                                        #     Child Loop BB14_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB14_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_190:                             # %land.end1426
                                        #   in Loop: Header=BB14_188 Depth=1
	testb	$1, %al
	jne	.LBB14_191
	jmp	.LBB14_210
.LBB14_191:                             # %for.body1428
                                        #   in Loop: Header=BB14_188 Depth=1
	movl	$0, -12(%rbp)
.LBB14_192:                             # %for.cond1429
                                        #   Parent Loop BB14_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB14_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB14_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB14_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_192
.LBB14_195:                             # %for.end1441
                                        #   in Loop: Header=BB14_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_196:                             # %for.cond1458
                                        #   Parent Loop BB14_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB14_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB14_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB14_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB14_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB14_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB14_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB14_201
.LBB14_200:                             # %if.else1521
                                        #   in Loop: Header=BB14_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB14_201:                             # %if.end1574
                                        #   in Loop: Header=BB14_196 Depth=2
	jmp	.LBB14_206
.LBB14_202:                             # %if.else1575
                                        #   in Loop: Header=BB14_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB14_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB14_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB14_205
.LBB14_204:                             # %if.else1625
                                        #   in Loop: Header=BB14_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB14_205:                             # %if.end1672
                                        #   in Loop: Header=BB14_196 Depth=2
	jmp	.LBB14_206
.LBB14_206:                             # %if.end1673
                                        #   in Loop: Header=BB14_196 Depth=2
	jmp	.LBB14_207
.LBB14_207:                             # %for.inc1674
                                        #   in Loop: Header=BB14_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_196
.LBB14_208:                             # %for.end1676
                                        #   in Loop: Header=BB14_188 Depth=1
	jmp	.LBB14_209
.LBB14_209:                             # %for.inc1677
                                        #   in Loop: Header=BB14_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_188
.LBB14_210:                             # %for.end1679
	jmp	.LBB14_211
.LBB14_211:                             # %if.end1680
	jmp	.LBB14_212
.LBB14_212:                             # %if.end1681
	jmp	.LBB14_213
.LBB14_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB14_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_216 Depth 2
                                        #       Child Loop BB14_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB14_214 Depth=1
	movl	$0, -116(%rbp)
.LBB14_216:                             # %for.cond1689
                                        #   Parent Loop BB14_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB14_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB14_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB14_218:                             # %for.cond1722
                                        #   Parent Loop BB14_214 Depth=1
                                        #     Parent Loop BB14_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB14_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_223
.LBB14_222:                             # %if.then1731
                                        #   in Loop: Header=BB14_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_224
.LBB14_223:                             # %if.else1740
                                        #   in Loop: Header=BB14_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_224:                             # %if.end1749
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB14_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB14_230
.LBB14_226:                             # %if.else1761
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB14_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB14_229
.LBB14_228:                             # %if.else1792
                                        #   in Loop: Header=BB14_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB14_229:                             # %if.end1820
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_230
.LBB14_230:                             # %if.end1821
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB14_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB14_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB14_234
.LBB14_233:                             # %if.then1839
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB14_235
.LBB14_234:                             # %if.else1841
                                        #   in Loop: Header=BB14_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB14_235:                             # %if.end1848
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB14_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB14_247
.LBB14_237:                             # %if.else1872
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB14_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB14_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB14_241
.LBB14_240:                             # %if.else1893
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB14_241:                             # %if.end1908
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_246
.LBB14_242:                             # %if.else1909
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB14_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB14_245
.LBB14_244:                             # %if.else1924
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB14_245:                             # %if.end1936
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_246
.LBB14_246:                             # %if.end1937
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_247
.LBB14_247:                             # %if.end1938
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_248
.LBB14_248:                             # %if.end1939
                                        #   in Loop: Header=BB14_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB14_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_250:                             # %if.end1949
                                        #   in Loop: Header=BB14_218 Depth=3
	jmp	.LBB14_251
.LBB14_251:                             # %for.inc1950
                                        #   in Loop: Header=BB14_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_218
.LBB14_252:                             # %for.end1952
                                        #   in Loop: Header=BB14_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB14_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB14_216
.LBB14_254:                             # %for.end1957
                                        #   in Loop: Header=BB14_214 Depth=1
	jmp	.LBB14_255
.LBB14_255:                             # %for.inc1958
                                        #   in Loop: Header=BB14_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB14_214
.LBB14_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB14_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB14_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -112(%rbp)
.LBB14_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_261 Depth 2
                                        #       Child Loop BB14_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB14_259 Depth=1
	movl	$0, -116(%rbp)
.LBB14_261:                             # %for.cond1972
                                        #   Parent Loop BB14_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB14_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB14_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB14_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB14_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB14_264:                             # %if.end2016
                                        #   in Loop: Header=BB14_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB14_265:                             # %for.cond2018
                                        #   Parent Loop BB14_259 Depth=1
                                        #     Parent Loop BB14_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB14_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB14_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB14_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB14_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB14_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_270
.LBB14_269:                             # %if.then2030
                                        #   in Loop: Header=BB14_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_271
.LBB14_270:                             # %if.else2039
                                        #   in Loop: Header=BB14_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB14_271:                             # %if.end2048
                                        #   in Loop: Header=BB14_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB14_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB14_265
.LBB14_273:                             # %for.end2060
                                        #   in Loop: Header=BB14_261 Depth=2
	jmp	.LBB14_274
.LBB14_274:                             # %for.inc2061
                                        #   in Loop: Header=BB14_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB14_261
.LBB14_275:                             # %for.end2063
                                        #   in Loop: Header=BB14_259 Depth=1
	jmp	.LBB14_276
.LBB14_276:                             # %for.inc2064
                                        #   in Loop: Header=BB14_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB14_259
.LBB14_277:                             # %for.end2066
	jmp	.LBB14_278
.LBB14_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB14_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB14_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB14_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_285 Depth 2
                                        #       Child Loop BB14_287 Depth 3
                                        #         Child Loop BB14_289 Depth 4
                                        #         Child Loop BB14_293 Depth 4
                                        #       Child Loop BB14_299 Depth 3
                                        #         Child Loop BB14_303 Depth 4
                                        #         Child Loop BB14_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB14_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB14_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_283:                             # %land.end2079
                                        #   in Loop: Header=BB14_281 Depth=1
	testb	$1, %al
	jne	.LBB14_284
	jmp	.LBB14_340
.LBB14_284:                             # %for.body2081
                                        #   in Loop: Header=BB14_281 Depth=1
	movl	$0, -24(%rbp)
.LBB14_285:                             # %for.cond2082
                                        #   Parent Loop BB14_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_287 Depth 3
                                        #         Child Loop BB14_289 Depth 4
                                        #         Child Loop BB14_293 Depth 4
                                        #       Child Loop BB14_299 Depth 3
                                        #         Child Loop BB14_303 Depth 4
                                        #         Child Loop BB14_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB14_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB14_285 Depth=2
	movl	$0, -12(%rbp)
.LBB14_287:                             # %for.cond2087
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_289 Depth 4
                                        #         Child Loop BB14_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB14_287 Depth=3
	movl	$0, -16(%rbp)
.LBB14_289:                             # %for.cond2091
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        #       Parent Loop BB14_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB14_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB14_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB14_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_289
.LBB14_292:                             # %for.end2106
                                        #   in Loop: Header=BB14_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB14_293:                             # %for.cond2125
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        #       Parent Loop BB14_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB14_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB14_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB14_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_293
.LBB14_296:                             # %for.end2156
                                        #   in Loop: Header=BB14_287 Depth=3
	jmp	.LBB14_297
.LBB14_297:                             # %for.inc2157
                                        #   in Loop: Header=BB14_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_287
.LBB14_298:                             # %for.end2159
                                        #   in Loop: Header=BB14_285 Depth=2
	movl	$0, -16(%rbp)
.LBB14_299:                             # %for.cond2160
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_303 Depth 4
                                        #         Child Loop BB14_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB14_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB14_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB14_301:                             # %land.end2166
                                        #   in Loop: Header=BB14_299 Depth=3
	testb	$1, %al
	jne	.LBB14_302
	jmp	.LBB14_336
.LBB14_302:                             # %for.body2168
                                        #   in Loop: Header=BB14_299 Depth=3
	movl	$0, -12(%rbp)
.LBB14_303:                             # %for.cond2169
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        #       Parent Loop BB14_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB14_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB14_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB14_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_303
.LBB14_306:                             # %for.end2184
                                        #   in Loop: Header=BB14_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB14_307:                             # %for.cond2203
                                        #   Parent Loop BB14_281 Depth=1
                                        #     Parent Loop BB14_285 Depth=2
                                        #       Parent Loop BB14_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB14_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB14_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB14_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB14_312
.LBB14_311:                             # %cond.false2231
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB14_312:                             # %cond.end2250
                                        #   in Loop: Header=BB14_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB14_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB14_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB14_318
.LBB14_314:                             # %cond.false2257
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB14_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB14_317
.LBB14_316:                             # %cond.false2279
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB14_317:                             # %cond.end2298
                                        #   in Loop: Header=BB14_307 Depth=4
.LBB14_318:                             # %cond.end2300
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB14_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB14_321
.LBB14_320:                             # %cond.false2333
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB14_321:                             # %cond.end2352
                                        #   in Loop: Header=BB14_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB14_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB14_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB14_327
.LBB14_323:                             # %cond.false2359
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB14_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB14_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB14_326
.LBB14_325:                             # %cond.false2381
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB14_326:                             # %cond.end2400
                                        #   in Loop: Header=BB14_307 Depth=4
.LBB14_327:                             # %cond.end2402
                                        #   in Loop: Header=BB14_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB14_332
.LBB14_328:                             # %if.else2412
                                        #   in Loop: Header=BB14_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB14_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB14_331
.LBB14_330:                             # %if.else2439
                                        #   in Loop: Header=BB14_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_331:                             # %if.end2468
                                        #   in Loop: Header=BB14_307 Depth=4
	jmp	.LBB14_332
.LBB14_332:                             # %if.end2469
                                        #   in Loop: Header=BB14_307 Depth=4
	jmp	.LBB14_333
.LBB14_333:                             # %for.inc2470
                                        #   in Loop: Header=BB14_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_307
.LBB14_334:                             # %for.end2472
                                        #   in Loop: Header=BB14_299 Depth=3
	jmp	.LBB14_335
.LBB14_335:                             # %for.inc2473
                                        #   in Loop: Header=BB14_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_299
.LBB14_336:                             # %for.end2475
                                        #   in Loop: Header=BB14_285 Depth=2
	jmp	.LBB14_337
.LBB14_337:                             # %for.inc2476
                                        #   in Loop: Header=BB14_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_285
.LBB14_338:                             # %for.end2478
                                        #   in Loop: Header=BB14_281 Depth=1
	jmp	.LBB14_339
.LBB14_339:                             # %for.inc2479
                                        #   in Loop: Header=BB14_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_281
.LBB14_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB14_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB14_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB14_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB14_342 Depth=1
	movl	$0, -16(%rbp)
.LBB14_344:                             # %for.cond2490
                                        #   Parent Loop BB14_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB14_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB14_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB14_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB14_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB14_348
.LBB14_347:                             # %if.else2518
                                        #   in Loop: Header=BB14_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB14_348:                             # %if.end2536
                                        #   in Loop: Header=BB14_344 Depth=2
	jmp	.LBB14_349
.LBB14_349:                             # %for.inc2537
                                        #   in Loop: Header=BB14_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_344
.LBB14_350:                             # %for.end2539
                                        #   in Loop: Header=BB14_342 Depth=1
	jmp	.LBB14_351
.LBB14_351:                             # %for.inc2540
                                        #   in Loop: Header=BB14_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_342
.LBB14_352:                             # %for.end2542
	jmp	.LBB14_353
.LBB14_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1787042364, -380(%rbp) # imm = 0x6A841A3C
	jne	.LBB14_355
.LBB14_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_354
.Lfunc_end14:
	.size	dct_chroma.5, .Lfunc_end14-dct_chroma.5
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.6              # -- Begin function dct_luma.6
	.p2align	4, 0x90
	.type	dct_luma.6,@function
dct_luma.6:                             # @dct_luma.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$872864095, -148(%rbp)  # imm = 0x3406D95F
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB15_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB15_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB15_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_5:                               # %land.end32
                                        #   in Loop: Header=BB15_3 Depth=1
	testb	$1, %al
	jne	.LBB15_6
	jmp	.LBB15_12
.LBB15_6:                               # %for.body
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	$0, -16(%rbp)
.LBB15_7:                               # %for.cond34
                                        #   Parent Loop BB15_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_7
.LBB15_10:                              # %for.end
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB15_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_3
.LBB15_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB15_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB15_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_15:                              # %land.end101
                                        #   in Loop: Header=BB15_13 Depth=1
	testb	$1, %al
	jne	.LBB15_16
	jmp	.LBB15_22
.LBB15_16:                              # %for.body103
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	$0, -12(%rbp)
.LBB15_17:                              # %for.cond104
                                        #   Parent Loop BB15_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB15_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB15_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_17
.LBB15_20:                              # %for.end136
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB15_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_13
.LBB15_22:                              # %for.end169
	movl	$0, -112(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB15_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB15_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB15_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_28
.LBB15_27:                              # %if.then
                                        #   in Loop: Header=BB15_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_29
.LBB15_28:                              # %if.else
                                        #   in Loop: Header=BB15_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB15_29:                              # %if.end
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB15_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB15_35
.LBB15_31:                              # %if.else199
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB15_34
.LBB15_33:                              # %if.else223
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB15_34:                              # %if.end245
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_35
.LBB15_35:                              # %if.end246
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB15_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	$1, -112(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB15_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB15_39
.LBB15_38:                              # %if.then254
                                        #   in Loop: Header=BB15_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB15_40
.LBB15_39:                              # %if.else256
                                        #   in Loop: Header=BB15_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB15_40:                              # %if.end263
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB15_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB15_52
.LBB15_42:                              # %if.else283
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB15_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB15_46
.LBB15_45:                              # %if.else301
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB15_46:                              # %if.end314
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_51
.LBB15_47:                              # %if.else315
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB15_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB15_50
.LBB15_49:                              # %if.else328
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB15_50:                              # %if.end338
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_51
.LBB15_51:                              # %if.end339
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_52
.LBB15_52:                              # %if.end340
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_53
.LBB15_53:                              # %if.end341
                                        #   in Loop: Header=BB15_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB15_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_55:                              # %if.end349
                                        #   in Loop: Header=BB15_23 Depth=1
	jmp	.LBB15_56
.LBB15_56:                              # %for.inc350
                                        #   in Loop: Header=BB15_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB15_23
.LBB15_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB15_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_62 Depth 2
                                        #     Child Loop BB15_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB15_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB15_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_60:                              # %land.end361
                                        #   in Loop: Header=BB15_58 Depth=1
	testb	$1, %al
	jne	.LBB15_61
	jmp	.LBB15_71
.LBB15_61:                              # %for.body363
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	$0, -16(%rbp)
.LBB15_62:                              # %for.cond364
                                        #   Parent Loop BB15_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB15_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB15_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_62
.LBB15_65:                              # %for.end377
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB15_66:                              # %for.cond396
                                        #   Parent Loop BB15_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB15_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB15_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB15_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_66
.LBB15_69:                              # %for.end423
                                        #   in Loop: Header=BB15_58 Depth=1
	jmp	.LBB15_70
.LBB15_70:                              # %for.inc424
                                        #   in Loop: Header=BB15_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_58
.LBB15_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB15_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_76 Depth 2
                                        #     Child Loop BB15_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB15_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB15_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB15_74:                              # %land.end433
                                        #   in Loop: Header=BB15_72 Depth=1
	testb	$1, %al
	jne	.LBB15_75
	jmp	.LBB15_109
.LBB15_75:                              # %for.body435
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	$0, -12(%rbp)
.LBB15_76:                              # %for.cond436
                                        #   Parent Loop BB15_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB15_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB15_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_76
.LBB15_79:                              # %for.end449
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB15_80:                              # %for.cond468
                                        #   Parent Loop BB15_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB15_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB15_85
.LBB15_84:                              # %cond.false
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_85:                              # %cond.end
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB15_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB15_91
.LBB15_87:                              # %cond.false518
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB15_90
.LBB15_89:                              # %cond.false540
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_90:                              # %cond.end559
                                        #   in Loop: Header=BB15_80 Depth=2
.LBB15_91:                              # %cond.end561
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB15_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB15_94
.LBB15_93:                              # %cond.false592
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB15_94:                              # %cond.end611
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB15_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB15_100
.LBB15_96:                              # %cond.false618
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB15_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB15_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB15_99
.LBB15_98:                              # %cond.false640
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB15_99:                              # %cond.end659
                                        #   in Loop: Header=BB15_80 Depth=2
.LBB15_100:                             # %cond.end661
                                        #   in Loop: Header=BB15_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_105
.LBB15_101:                             # %if.else669
                                        #   in Loop: Header=BB15_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB15_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB15_104
.LBB15_103:                             # %if.else692
                                        #   in Loop: Header=BB15_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB15_104:                             # %if.end717
                                        #   in Loop: Header=BB15_80 Depth=2
	jmp	.LBB15_105
.LBB15_105:                             # %if.end718
                                        #   in Loop: Header=BB15_80 Depth=2
	jmp	.LBB15_106
.LBB15_106:                             # %for.inc719
                                        #   in Loop: Header=BB15_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_80
.LBB15_107:                             # %for.end721
                                        #   in Loop: Header=BB15_72 Depth=1
	jmp	.LBB15_108
.LBB15_108:                             # %for.inc722
                                        #   in Loop: Header=BB15_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_72
.LBB15_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB15_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB15_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB15_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB15_111 Depth=1
	movl	$0, -16(%rbp)
.LBB15_113:                             # %for.cond732
                                        #   Parent Loop BB15_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB15_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB15_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB15_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB15_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB15_117
.LBB15_116:                             # %if.else761
                                        #   in Loop: Header=BB15_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB15_117:                             # %if.end779
                                        #   in Loop: Header=BB15_113 Depth=2
	jmp	.LBB15_118
.LBB15_118:                             # %for.inc780
                                        #   in Loop: Header=BB15_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_113
.LBB15_119:                             # %for.end782
                                        #   in Loop: Header=BB15_111 Depth=1
	jmp	.LBB15_120
.LBB15_120:                             # %for.inc783
                                        #   in Loop: Header=BB15_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_111
.LBB15_121:                             # %for.end785
	jmp	.LBB15_122
.LBB15_122:                             # %if.end786
	movl	-112(%rbp), %ebx
	cmpl	$872864095, -148(%rbp)  # imm = 0x3406D95F
	jne	.LBB15_124
.LBB15_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_123
.Lfunc_end15:
	.size	dct_luma.6, .Lfunc_end15-dct_luma.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.7
.LCPI16_0:
	.quad	4616189618054758400     # double 4
.LCPI16_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI16_2:
	.quad	4611686018427387904     # double 2
.LCPI16_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.7
	.p2align	4, 0x90
	.type	dct_luma_sp.7,@function
dct_luma_sp.7:                          # @dct_luma_sp.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI16_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI16_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$272112619, -216(%rbp)  # imm = 0x10381BEB
	movl	%edi, -116(%rbp)
	movl	%esi, -136(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-136(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -180(%rbp)
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -200(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI16_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI16_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -124(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -120(%rbp)
	movl	-196(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -184(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	$0, -12(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -16(%rbp)
.LBB16_3:                               # %for.cond38
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_3
.LBB16_6:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc66
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_1
.LBB16_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB16_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	$0, -16(%rbp)
.LBB16_11:                              # %for.cond73
                                        #   Parent Loop BB16_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB16_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_11
.LBB16_14:                              # %for.end106
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB16_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_9
.LBB16_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB16_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	$0, -12(%rbp)
.LBB16_19:                              # %for.cond144
                                        #   Parent Loop BB16_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB16_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_19
.LBB16_22:                              # %for.end177
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB16_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_17
.LBB16_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB16_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	$0, -16(%rbp)
.LBB16_27:                              # %for.cond215
                                        #   Parent Loop BB16_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB16_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_27
.LBB16_30:                              # %for.end244
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB16_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_25
.LBB16_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB16_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	$0, -12(%rbp)
.LBB16_35:                              # %for.cond278
                                        #   Parent Loop BB16_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB16_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB16_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_35
.LBB16_38:                              # %for.end307
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB16_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_33
.LBB16_40:                              # %for.end336
	movl	$0, -208(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -68(%rbp)
.LBB16_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB16_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB16_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB16_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB16_46
.LBB16_45:                              # %if.then
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_47
.LBB16_46:                              # %if.else
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB16_47:                              # %if.end
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-184(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB16_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB16_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB16_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB16_55
	jp	.LBB16_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB16_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB16_54
.LBB16_53:                              # %cond.false
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-56(%rbp), %eax
.LBB16_54:                              # %cond.end
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB16_59
.LBB16_55:                              # %if.else500
                                        #   in Loop: Header=BB16_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB16_58
.LBB16_57:                              # %if.else504
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB16_58:                              # %if.end505
                                        #   in Loop: Header=BB16_41 Depth=1
	jmp	.LBB16_59
.LBB16_59:                              # %if.end506
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB16_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB16_62
.LBB16_61:                              # %cond.false510
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-140(%rbp), %eax
.LBB16_62:                              # %cond.end511
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -132(%rbp)
	jmp	.LBB16_73
.LBB16_63:                              # %if.else513
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB16_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -132(%rbp)
	jmp	.LBB16_72
.LBB16_65:                              # %if.else517
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB16_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB16_68
.LBB16_67:                              # %cond.false521
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-56(%rbp), %eax
.LBB16_68:                              # %cond.end522
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB16_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB16_71
.LBB16_70:                              # %cond.false527
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-140(%rbp), %eax
.LBB16_71:                              # %cond.end528
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	%eax, -132(%rbp)
.LBB16_72:                              # %if.end530
                                        #   in Loop: Header=BB16_41 Depth=1
	jmp	.LBB16_73
.LBB16_73:                              # %if.end531
                                        #   in Loop: Header=BB16_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB16_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	$1, -208(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB16_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB16_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB16_77
.LBB16_76:                              # %if.else539
                                        #   in Loop: Header=BB16_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB16_77:                              # %if.end546
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-132(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB16_78:                              # %if.end568
                                        #   in Loop: Header=BB16_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-196(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB16_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB16_41
.LBB16_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB16_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_83 Depth 2
                                        #     Child Loop BB16_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	$0, -16(%rbp)
.LBB16_83:                              # %for.cond607
                                        #   Parent Loop BB16_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB16_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB16_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_83
.LBB16_86:                              # %for.end620
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB16_87:                              # %for.cond639
                                        #   Parent Loop BB16_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB16_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB16_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB16_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_87
.LBB16_90:                              # %for.end666
                                        #   in Loop: Header=BB16_81 Depth=1
	jmp	.LBB16_91
.LBB16_91:                              # %for.inc667
                                        #   in Loop: Header=BB16_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_81
.LBB16_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB16_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_95 Depth 2
                                        #     Child Loop BB16_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	$0, -12(%rbp)
.LBB16_95:                              # %for.cond674
                                        #   Parent Loop BB16_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB16_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB16_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_95
.LBB16_98:                              # %for.end687
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB16_99:                              # %for.cond706
                                        #   Parent Loop BB16_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB16_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_103
.LBB16_102:                             # %cond.false721
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_103:                             # %cond.end729
                                        #   in Loop: Header=BB16_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_109
.LBB16_105:                             # %cond.false735
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_108
.LBB16_107:                             # %cond.false746
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_108:                             # %cond.end754
                                        #   in Loop: Header=BB16_99 Depth=2
.LBB16_109:                             # %cond.end756
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB16_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB16_112
.LBB16_111:                             # %cond.false774
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB16_112:                             # %cond.end782
                                        #   in Loop: Header=BB16_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB16_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_118
.LBB16_114:                             # %cond.false788
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB16_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB16_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB16_117
.LBB16_116:                             # %cond.false799
                                        #   in Loop: Header=BB16_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_117:                             # %cond.end807
                                        #   in Loop: Header=BB16_99 Depth=2
.LBB16_118:                             # %cond.end809
                                        #   in Loop: Header=BB16_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB16_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_99
.LBB16_120:                             # %for.end818
                                        #   in Loop: Header=BB16_93 Depth=1
	jmp	.LBB16_121
.LBB16_121:                             # %for.inc819
                                        #   in Loop: Header=BB16_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_93
.LBB16_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB16_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB16_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB16_123 Depth=1
	movl	$0, -16(%rbp)
.LBB16_125:                             # %for.cond826
                                        #   Parent Loop BB16_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB16_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB16_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB16_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_125
.LBB16_128:                             # %for.end846
                                        #   in Loop: Header=BB16_123 Depth=1
	jmp	.LBB16_129
.LBB16_129:                             # %for.inc847
                                        #   in Loop: Header=BB16_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_123
.LBB16_130:                             # %for.end849
	movl	-208(%rbp), %ebx
	cmpl	$272112619, -216(%rbp)  # imm = 0x10381BEB
	jne	.LBB16_132
.LBB16_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_131
.Lfunc_end16:
	.size	dct_luma_sp.7, .Lfunc_end16-dct_luma_sp.7
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.8          # -- Begin function copyblock_sp.8
	.p2align	4, 0x90
	.type	copyblock_sp.8,@function
copyblock_sp.8:                         # @copyblock_sp.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$96112499, -92(%rbp)    # imm = 0x5BA8F73
	movl	%edi, -80(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -8(%rbp)
.LBB17_3:                               # %for.cond4
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_3
.LBB17_6:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_7
.LBB17_7:                               # %for.inc17
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB17_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	$0, -8(%rbp)
.LBB17_11:                              # %for.cond24
                                        #   Parent Loop BB17_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB17_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB17_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB17_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_11
.LBB17_14:                              # %for.end53
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB17_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_9
.LBB17_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB17_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	$0, -4(%rbp)
.LBB17_19:                              # %for.cond86
                                        #   Parent Loop BB17_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB17_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB17_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB17_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_19
.LBB17_22:                              # %for.end115
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB17_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_17
.LBB17_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB17_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	$0, -8(%rbp)
.LBB17_27:                              # %for.cond149
                                        #   Parent Loop BB17_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB17_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB17_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_27
.LBB17_30:                              # %for.end184
                                        #   in Loop: Header=BB17_25 Depth=1
	jmp	.LBB17_31
.LBB17_31:                              # %for.inc185
                                        #   in Loop: Header=BB17_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_25
.LBB17_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB17_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_35 Depth 2
                                        #     Child Loop BB17_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	$0, -8(%rbp)
.LBB17_35:                              # %for.cond192
                                        #   Parent Loop BB17_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB17_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB17_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_35
.LBB17_38:                              # %for.end205
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB17_39:                              # %for.cond224
                                        #   Parent Loop BB17_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB17_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB17_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB17_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_39
.LBB17_42:                              # %for.end251
                                        #   in Loop: Header=BB17_33 Depth=1
	jmp	.LBB17_43
.LBB17_43:                              # %for.inc252
                                        #   in Loop: Header=BB17_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_33
.LBB17_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB17_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_47 Depth 2
                                        #     Child Loop BB17_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB17_45 Depth=1
	movl	$0, -4(%rbp)
.LBB17_47:                              # %for.cond259
                                        #   Parent Loop BB17_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB17_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB17_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_47
.LBB17_50:                              # %for.end272
                                        #   in Loop: Header=BB17_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB17_51:                              # %for.cond291
                                        #   Parent Loop BB17_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB17_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB17_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_55
.LBB17_54:                              # %cond.false
                                        #   in Loop: Header=BB17_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB17_55:                              # %cond.end
                                        #   in Loop: Header=BB17_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB17_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB17_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_61
.LBB17_57:                              # %cond.false316
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB17_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_60
.LBB17_59:                              # %cond.false327
                                        #   in Loop: Header=BB17_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_60:                              # %cond.end335
                                        #   in Loop: Header=BB17_51 Depth=2
.LBB17_61:                              # %cond.end337
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB17_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB17_64
.LBB17_63:                              # %cond.false355
                                        #   in Loop: Header=BB17_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB17_64:                              # %cond.end363
                                        #   in Loop: Header=BB17_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB17_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB17_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_70
.LBB17_66:                              # %cond.false369
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB17_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB17_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB17_69
.LBB17_68:                              # %cond.false380
                                        #   in Loop: Header=BB17_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_69:                              # %cond.end388
                                        #   in Loop: Header=BB17_51 Depth=2
.LBB17_70:                              # %cond.end390
                                        #   in Loop: Header=BB17_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB17_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_51
.LBB17_72:                              # %for.end399
                                        #   in Loop: Header=BB17_45 Depth=1
	jmp	.LBB17_73
.LBB17_73:                              # %for.inc400
                                        #   in Loop: Header=BB17_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_45
.LBB17_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB17_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB17_75 Depth=1
	movl	$0, -8(%rbp)
.LBB17_77:                              # %for.cond407
                                        #   Parent Loop BB17_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB17_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB17_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_77
.LBB17_80:                              # %for.end427
                                        #   in Loop: Header=BB17_75 Depth=1
	jmp	.LBB17_81
.LBB17_81:                              # %for.inc428
                                        #   in Loop: Header=BB17_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_75
.LBB17_82:                              # %for.end430
	cmpl	$96112499, -92(%rbp)    # imm = 0x5BA8F73
	jne	.LBB17_84
.LBB17_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_83
.Lfunc_end17:
	.size	copyblock_sp.8, .Lfunc_end17-copyblock_sp.8
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.9        # -- Begin function dct_luma_16x16.9
	.p2align	4, 0x90
	.type	dct_luma_16x16.9,@function
dct_luma_16x16.9:                       # @dct_luma_16x16.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$480035, -132(%rbp)     # imm = 0x75323
	movl	%edi, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB18_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB18_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB18_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB18_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	$0, -16(%rbp)
.LBB18_5:                               # %for.cond16
                                        #   Parent Loop BB18_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB18_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB18_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB18_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB18_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB18_9
.LBB18_8:                               # %if.else
                                        #   in Loop: Header=BB18_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB18_9:                               # %if.end
                                        #   in Loop: Header=BB18_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB18_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_5
.LBB18_11:                              # %for.end
                                        #   in Loop: Header=BB18_3 Depth=1
	jmp	.LBB18_12
.LBB18_12:                              # %for.inc61
                                        #   in Loop: Header=BB18_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_3
.LBB18_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB18_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_18 Depth 2
                                        #       Child Loop BB18_20 Depth 3
                                        #         Child Loop BB18_22 Depth 4
                                        #       Child Loop BB18_28 Depth 3
                                        #         Child Loop BB18_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB18_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB18_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_16:                              # %land.end69
                                        #   in Loop: Header=BB18_14 Depth=1
	testb	$1, %al
	jne	.LBB18_17
	jmp	.LBB18_39
.LBB18_17:                              # %for.body71
                                        #   in Loop: Header=BB18_14 Depth=1
	movl	$0, -24(%rbp)
.LBB18_18:                              # %for.cond72
                                        #   Parent Loop BB18_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_20 Depth 3
                                        #         Child Loop BB18_22 Depth 4
                                        #       Child Loop BB18_28 Depth 3
                                        #         Child Loop BB18_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB18_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB18_18 Depth=2
	movl	$0, -12(%rbp)
.LBB18_20:                              # %for.cond76
                                        #   Parent Loop BB18_14 Depth=1
                                        #     Parent Loop BB18_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB18_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB18_20 Depth=3
	movl	$0, -16(%rbp)
.LBB18_22:                              # %for.cond80
                                        #   Parent Loop BB18_14 Depth=1
                                        #     Parent Loop BB18_18 Depth=2
                                        #       Parent Loop BB18_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB18_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB18_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB18_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_22
.LBB18_25:                              # %for.end125
                                        #   in Loop: Header=BB18_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB18_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_20
.LBB18_27:                              # %for.end169
                                        #   in Loop: Header=BB18_18 Depth=2
	movl	$0, -16(%rbp)
.LBB18_28:                              # %for.cond170
                                        #   Parent Loop BB18_14 Depth=1
                                        #     Parent Loop BB18_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB18_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB18_28 Depth=3
	movl	$0, -12(%rbp)
.LBB18_30:                              # %for.cond174
                                        #   Parent Loop BB18_14 Depth=1
                                        #     Parent Loop BB18_18 Depth=2
                                        #       Parent Loop BB18_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB18_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB18_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB18_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_30
.LBB18_33:                              # %for.end219
                                        #   in Loop: Header=BB18_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB18_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_28
.LBB18_35:                              # %for.end264
                                        #   in Loop: Header=BB18_18 Depth=2
	jmp	.LBB18_36
.LBB18_36:                              # %for.inc265
                                        #   in Loop: Header=BB18_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_18
.LBB18_37:                              # %for.end267
                                        #   in Loop: Header=BB18_14 Depth=1
	jmp	.LBB18_38
.LBB18_38:                              # %for.inc268
                                        #   in Loop: Header=BB18_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_14
.LBB18_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB18_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB18_40 Depth=1
	movl	$0, -16(%rbp)
.LBB18_42:                              # %for.cond275
                                        #   Parent Loop BB18_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB18_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB18_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_42
.LBB18_45:                              # %for.end291
                                        #   in Loop: Header=BB18_40 Depth=1
	jmp	.LBB18_46
.LBB18_46:                              # %for.inc292
                                        #   in Loop: Header=BB18_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_40
.LBB18_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB18_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB18_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB18_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_50:                              # %land.end301
                                        #   in Loop: Header=BB18_48 Depth=1
	testb	$1, %al
	jne	.LBB18_51
	jmp	.LBB18_57
.LBB18_51:                              # %for.body303
                                        #   in Loop: Header=BB18_48 Depth=1
	movl	$0, -16(%rbp)
.LBB18_52:                              # %for.cond304
                                        #   Parent Loop BB18_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB18_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB18_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_52
.LBB18_55:                              # %for.end333
                                        #   in Loop: Header=BB18_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB18_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_48
.LBB18_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB18_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB18_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB18_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_60:                              # %land.end367
                                        #   in Loop: Header=BB18_58 Depth=1
	testb	$1, %al
	jne	.LBB18_61
	jmp	.LBB18_67
.LBB18_61:                              # %for.body369
                                        #   in Loop: Header=BB18_58 Depth=1
	movl	$0, -12(%rbp)
.LBB18_62:                              # %for.cond370
                                        #   Parent Loop BB18_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB18_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB18_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_62
.LBB18_65:                              # %for.end399
                                        #   in Loop: Header=BB18_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB18_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_58
.LBB18_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB18_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB18_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB18_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB18_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB18_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB18_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB18_73
.LBB18_72:                              # %if.then437
                                        #   in Loop: Header=BB18_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_74
.LBB18_73:                              # %if.else446
                                        #   in Loop: Header=BB18_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB18_74:                              # %if.end455
                                        #   in Loop: Header=BB18_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB18_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB18_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB18_77
.LBB18_76:                              # %if.else463
                                        #   in Loop: Header=BB18_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB18_77:                              # %if.end481
                                        #   in Loop: Header=BB18_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB18_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB18_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB18_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB18_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB18_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB18_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB18_81:                              # %if.end492
                                        #   in Loop: Header=BB18_68 Depth=1
	jmp	.LBB18_82
.LBB18_82:                              # %if.end493
                                        #   in Loop: Header=BB18_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB18_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB18_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB18_84:                              # %if.end507
                                        #   in Loop: Header=BB18_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB18_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB18_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB18_86:                              # %if.end519
                                        #   in Loop: Header=BB18_68 Depth=1
	jmp	.LBB18_87
.LBB18_87:                              # %for.inc520
                                        #   in Loop: Header=BB18_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB18_68
.LBB18_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB18_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_93 Depth 2
                                        #     Child Loop BB18_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB18_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB18_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_91:                              # %land.end531
                                        #   in Loop: Header=BB18_89 Depth=1
	testb	$1, %al
	jne	.LBB18_92
	jmp	.LBB18_102
.LBB18_92:                              # %for.body533
                                        #   in Loop: Header=BB18_89 Depth=1
	movl	$0, -16(%rbp)
.LBB18_93:                              # %for.cond534
                                        #   Parent Loop BB18_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB18_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB18_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB18_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_93
.LBB18_96:                              # %for.end546
                                        #   in Loop: Header=BB18_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB18_97:                              # %for.cond563
                                        #   Parent Loop BB18_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB18_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB18_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB18_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_97
.LBB18_100:                             # %for.end588
                                        #   in Loop: Header=BB18_89 Depth=1
	jmp	.LBB18_101
.LBB18_101:                             # %for.inc589
                                        #   in Loop: Header=BB18_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_89
.LBB18_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB18_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_107 Depth 2
                                        #     Child Loop BB18_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB18_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB18_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_105:                             # %land.end598
                                        #   in Loop: Header=BB18_103 Depth=1
	testb	$1, %al
	jne	.LBB18_106
	jmp	.LBB18_119
.LBB18_106:                             # %for.body600
                                        #   in Loop: Header=BB18_103 Depth=1
	movl	$0, -12(%rbp)
.LBB18_107:                             # %for.cond601
                                        #   Parent Loop BB18_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB18_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB18_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB18_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_107
.LBB18_110:                             # %for.end613
                                        #   in Loop: Header=BB18_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB18_111:                             # %for.cond630
                                        #   Parent Loop BB18_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB18_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB18_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB18_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB18_115
.LBB18_114:                             # %if.else680
                                        #   in Loop: Header=BB18_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB18_115:                             # %if.end717
                                        #   in Loop: Header=BB18_111 Depth=2
	jmp	.LBB18_116
.LBB18_116:                             # %for.inc718
                                        #   in Loop: Header=BB18_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_111
.LBB18_117:                             # %for.end720
                                        #   in Loop: Header=BB18_103 Depth=1
	jmp	.LBB18_118
.LBB18_118:                             # %for.inc721
                                        #   in Loop: Header=BB18_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_103
.LBB18_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB18_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_122 Depth 2
                                        #       Child Loop BB18_124 Depth 3
                                        #       Child Loop BB18_143 Depth 3
                                        #         Child Loop BB18_147 Depth 4
                                        #         Child Loop BB18_151 Depth 4
                                        #       Child Loop BB18_157 Depth 3
                                        #         Child Loop BB18_161 Depth 4
                                        #         Child Loop BB18_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB18_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB18_120 Depth=1
	movl	$0, -24(%rbp)
.LBB18_122:                             # %for.cond728
                                        #   Parent Loop BB18_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_124 Depth 3
                                        #       Child Loop BB18_143 Depth 3
                                        #         Child Loop BB18_147 Depth 4
                                        #         Child Loop BB18_151 Depth 4
                                        #       Child Loop BB18_157 Depth 3
                                        #         Child Loop BB18_161 Depth 4
                                        #         Child Loop BB18_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB18_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB18_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB18_124:                             # %for.cond751
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB18_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB18_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB18_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB18_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB18_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB18_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB18_129
.LBB18_128:                             # %if.then762
                                        #   in Loop: Header=BB18_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_130
.LBB18_129:                             # %if.else771
                                        #   in Loop: Header=BB18_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB18_130:                             # %if.end780
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB18_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB18_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB18_133
.LBB18_132:                             # %if.else793
                                        #   in Loop: Header=BB18_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB18_133:                             # %if.end818
                                        #   in Loop: Header=BB18_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB18_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	$15, -112(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB18_135:                             # %if.end836
                                        #   in Loop: Header=BB18_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB18_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB18_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB18_139
.LBB18_138:                             # %if.else871
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB18_139:                             # %if.end889
                                        #   in Loop: Header=BB18_124 Depth=3
	jmp	.LBB18_140
.LBB18_140:                             # %if.end890
                                        #   in Loop: Header=BB18_124 Depth=3
	jmp	.LBB18_141
.LBB18_141:                             # %for.inc891
                                        #   in Loop: Header=BB18_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB18_124
.LBB18_142:                             # %for.end893
                                        #   in Loop: Header=BB18_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB18_143:                             # %for.cond896
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_147 Depth 4
                                        #         Child Loop BB18_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB18_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB18_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_145:                             # %land.end902
                                        #   in Loop: Header=BB18_143 Depth=3
	testb	$1, %al
	jne	.LBB18_146
	jmp	.LBB18_156
.LBB18_146:                             # %for.body904
                                        #   in Loop: Header=BB18_143 Depth=3
	movl	$0, -16(%rbp)
.LBB18_147:                             # %for.cond905
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        #       Parent Loop BB18_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB18_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB18_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB18_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_147
.LBB18_150:                             # %for.end921
                                        #   in Loop: Header=BB18_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB18_151:                             # %for.cond940
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        #       Parent Loop BB18_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB18_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB18_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB18_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_151
.LBB18_154:                             # %for.end973
                                        #   in Loop: Header=BB18_143 Depth=3
	jmp	.LBB18_155
.LBB18_155:                             # %for.inc974
                                        #   in Loop: Header=BB18_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_143
.LBB18_156:                             # %for.end976
                                        #   in Loop: Header=BB18_122 Depth=2
	movl	$0, -16(%rbp)
.LBB18_157:                             # %for.cond977
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB18_161 Depth 4
                                        #         Child Loop BB18_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB18_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB18_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB18_159:                             # %land.end983
                                        #   in Loop: Header=BB18_157 Depth=3
	testb	$1, %al
	jne	.LBB18_160
	jmp	.LBB18_170
.LBB18_160:                             # %for.body985
                                        #   in Loop: Header=BB18_157 Depth=3
	movl	$0, -12(%rbp)
.LBB18_161:                             # %for.cond986
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        #       Parent Loop BB18_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB18_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB18_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB18_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_161
.LBB18_164:                             # %for.end1002
                                        #   in Loop: Header=BB18_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB18_165:                             # %for.cond1021
                                        #   Parent Loop BB18_120 Depth=1
                                        #     Parent Loop BB18_122 Depth=2
                                        #       Parent Loop BB18_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB18_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB18_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB18_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_165
.LBB18_168:                             # %for.end1054
                                        #   in Loop: Header=BB18_157 Depth=3
	jmp	.LBB18_169
.LBB18_169:                             # %for.inc1055
                                        #   in Loop: Header=BB18_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_157
.LBB18_170:                             # %for.end1057
                                        #   in Loop: Header=BB18_122 Depth=2
	jmp	.LBB18_171
.LBB18_171:                             # %for.inc1058
                                        #   in Loop: Header=BB18_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_122
.LBB18_172:                             # %for.end1060
                                        #   in Loop: Header=BB18_120 Depth=1
	jmp	.LBB18_173
.LBB18_173:                             # %for.inc1061
                                        #   in Loop: Header=BB18_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_120
.LBB18_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB18_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB18_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB18_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB18_176 Depth=1
	movl	$0, -16(%rbp)
.LBB18_178:                             # %for.cond1071
                                        #   Parent Loop BB18_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB18_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB18_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB18_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_178
.LBB18_181:                             # %for.end1093
                                        #   in Loop: Header=BB18_176 Depth=1
	jmp	.LBB18_182
.LBB18_182:                             # %for.inc1094
                                        #   in Loop: Header=BB18_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_176
.LBB18_183:                             # %for.end1096
	jmp	.LBB18_196
.LBB18_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB18_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB18_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB18_185 Depth=1
	movl	$0, -16(%rbp)
.LBB18_187:                             # %for.cond1102
                                        #   Parent Loop BB18_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB18_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB18_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB18_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB18_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB18_191
.LBB18_190:                             # %if.else1125
                                        #   in Loop: Header=BB18_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB18_191:                             # %if.end1145
                                        #   in Loop: Header=BB18_187 Depth=2
	jmp	.LBB18_192
.LBB18_192:                             # %for.inc1146
                                        #   in Loop: Header=BB18_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_187
.LBB18_193:                             # %for.end1148
                                        #   in Loop: Header=BB18_185 Depth=1
	jmp	.LBB18_194
.LBB18_194:                             # %for.inc1149
                                        #   in Loop: Header=BB18_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_185
.LBB18_195:                             # %for.end1151
	jmp	.LBB18_196
.LBB18_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB18_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB18_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB18_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB18_198 Depth=1
	movl	$0, -16(%rbp)
.LBB18_200:                             # %for.cond1160
                                        #   Parent Loop BB18_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB18_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB18_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB18_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB18_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB18_213
.LBB18_203:                             # %if.else1186
                                        #   in Loop: Header=BB18_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB18_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB18_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB18_206
.LBB18_205:                             # %cond.false
                                        #   in Loop: Header=BB18_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB18_206:                             # %cond.end
                                        #   in Loop: Header=BB18_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB18_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB18_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB18_212
.LBB18_208:                             # %cond.false1229
                                        #   in Loop: Header=BB18_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB18_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB18_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB18_211
.LBB18_210:                             # %cond.false1250
                                        #   in Loop: Header=BB18_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB18_211:                             # %cond.end1268
                                        #   in Loop: Header=BB18_200 Depth=2
.LBB18_212:                             # %cond.end1270
                                        #   in Loop: Header=BB18_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB18_213:                             # %if.end1282
                                        #   in Loop: Header=BB18_200 Depth=2
	jmp	.LBB18_214
.LBB18_214:                             # %for.inc1283
                                        #   in Loop: Header=BB18_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_200
.LBB18_215:                             # %for.end1285
                                        #   in Loop: Header=BB18_198 Depth=1
	jmp	.LBB18_216
.LBB18_216:                             # %for.inc1286
                                        #   in Loop: Header=BB18_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_198
.LBB18_217:                             # %for.end1288
	jmp	.LBB18_218
.LBB18_218:                             # %if.end1289
	movl	-112(%rbp), %ebx
	cmpl	$480035, -132(%rbp)     # imm = 0x75323
	jne	.LBB18_220
.LBB18_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_219
.Lfunc_end18:
	.size	dct_luma_16x16.9, .Lfunc_end18-dct_luma_16x16.9
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.10         # -- Begin function copyblock_sp.10
	.p2align	4, 0x90
	.type	copyblock_sp.10,@function
copyblock_sp.10:                        # @copyblock_sp.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$95906014, -92(%rbp)    # imm = 0x5B768DE
	movl	%edi, -76(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_3:                               # %for.cond4
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc17
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB19_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	$0, -8(%rbp)
.LBB19_11:                              # %for.cond24
                                        #   Parent Loop BB19_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB19_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB19_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_11
.LBB19_14:                              # %for.end53
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB19_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_9
.LBB19_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB19_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	$0, -4(%rbp)
.LBB19_19:                              # %for.cond86
                                        #   Parent Loop BB19_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB19_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_19
.LBB19_22:                              # %for.end115
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_17
.LBB19_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB19_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$0, -8(%rbp)
.LBB19_27:                              # %for.cond149
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_27
.LBB19_30:                              # %for.end184
                                        #   in Loop: Header=BB19_25 Depth=1
	jmp	.LBB19_31
.LBB19_31:                              # %for.inc185
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_25
.LBB19_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB19_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_35 Depth 2
                                        #     Child Loop BB19_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	$0, -8(%rbp)
.LBB19_35:                              # %for.cond192
                                        #   Parent Loop BB19_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB19_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB19_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_35
.LBB19_38:                              # %for.end205
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB19_39:                              # %for.cond224
                                        #   Parent Loop BB19_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB19_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_39
.LBB19_42:                              # %for.end251
                                        #   in Loop: Header=BB19_33 Depth=1
	jmp	.LBB19_43
.LBB19_43:                              # %for.inc252
                                        #   in Loop: Header=BB19_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_33
.LBB19_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB19_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_47 Depth 2
                                        #     Child Loop BB19_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	$0, -4(%rbp)
.LBB19_47:                              # %for.cond259
                                        #   Parent Loop BB19_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB19_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB19_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_47
.LBB19_50:                              # %for.end272
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB19_51:                              # %for.cond291
                                        #   Parent Loop BB19_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB19_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB19_55
.LBB19_54:                              # %cond.false
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB19_55:                              # %cond.end
                                        #   in Loop: Header=BB19_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB19_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_61
.LBB19_57:                              # %cond.false316
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB19_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_60
.LBB19_59:                              # %cond.false327
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB19_60:                              # %cond.end335
                                        #   in Loop: Header=BB19_51 Depth=2
.LBB19_61:                              # %cond.end337
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB19_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB19_64
.LBB19_63:                              # %cond.false355
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB19_64:                              # %cond.end363
                                        #   in Loop: Header=BB19_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB19_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB19_70
.LBB19_66:                              # %cond.false369
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB19_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB19_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB19_69
.LBB19_68:                              # %cond.false380
                                        #   in Loop: Header=BB19_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB19_69:                              # %cond.end388
                                        #   in Loop: Header=BB19_51 Depth=2
.LBB19_70:                              # %cond.end390
                                        #   in Loop: Header=BB19_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB19_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_51
.LBB19_72:                              # %for.end399
                                        #   in Loop: Header=BB19_45 Depth=1
	jmp	.LBB19_73
.LBB19_73:                              # %for.inc400
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_45
.LBB19_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB19_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB19_75 Depth=1
	movl	$0, -8(%rbp)
.LBB19_77:                              # %for.cond407
                                        #   Parent Loop BB19_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB19_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB19_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_77
.LBB19_80:                              # %for.end427
                                        #   in Loop: Header=BB19_75 Depth=1
	jmp	.LBB19_81
.LBB19_81:                              # %for.inc428
                                        #   in Loop: Header=BB19_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_75
.LBB19_82:                              # %for.end430
	cmpl	$95906014, -92(%rbp)    # imm = 0x5B768DE
	jne	.LBB19_84
.LBB19_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_83
.Lfunc_end19:
	.size	copyblock_sp.10, .Lfunc_end19-copyblock_sp.10
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.11 # -- Begin function intrapred_luma_16x16.11
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.11,@function
intrapred_luma_16x16.11:                # @intrapred_luma_16x16.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$404098410, -92(%rbp)   # imm = 0x18160D6A
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB20_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_1
.LBB20_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB20_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB20_20
.LBB20_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB20_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_9
.LBB20_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB20_9
.LBB20_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB20_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB20_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB20_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB20_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB20_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_14
.LBB20_13:                              # %cond.false23
                                        #   in Loop: Header=BB20_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB20_14
.LBB20_14:                              # %cond.end24
                                        #   in Loop: Header=BB20_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB20_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_10
.LBB20_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB20_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB20_19
.LBB20_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB20_19
.LBB20_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB20_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB20_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB20_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB20_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB20_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB20_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB20_24:                              # %if.end51
                                        #   in Loop: Header=BB20_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB20_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB20_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB20_26:                              # %if.end68
                                        #   in Loop: Header=BB20_21 Depth=1
	jmp	.LBB20_27
.LBB20_27:                              # %for.inc69
                                        #   in Loop: Header=BB20_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_21
.LBB20_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB20_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB20_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB20_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB20_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB20_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB20_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB20_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB20_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB20_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB20_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB20_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB20_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB20_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB20_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB20_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB20_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB20_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB20_44:                              # %if.end114
                                        #   in Loop: Header=BB20_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB20_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB20_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB20_46:                              # %if.end133
                                        #   in Loop: Header=BB20_41 Depth=1
	jmp	.LBB20_47
.LBB20_47:                              # %for.inc134
                                        #   in Loop: Header=BB20_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_41
.LBB20_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB20_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB20_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB20_49 Depth=1
	movl	$0, -4(%rbp)
.LBB20_51:                              # %for.cond141
                                        #   Parent Loop BB20_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB20_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB20_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB20_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_51
.LBB20_54:                              # %for.end173
                                        #   in Loop: Header=BB20_49 Depth=1
	jmp	.LBB20_55
.LBB20_55:                              # %for.inc174
                                        #   in Loop: Header=BB20_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_49
.LBB20_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB20_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB20_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB20_60
.LBB20_59:                              # %if.then181
	jmp	.LBB20_85
.LBB20_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB20_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB20_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB20_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB20_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB20_65
.LBB20_64:                              # %if.else210
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB20_65:                              # %if.end232
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB20_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_61
.LBB20_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB20_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB20_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	$0, -4(%rbp)
.LBB20_70:                              # %for.cond293
                                        #   Parent Loop BB20_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB20_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_74
.LBB20_73:                              # %cond.false309
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_74:                              # %cond.end318
                                        #   in Loop: Header=BB20_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB20_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB20_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB20_80
.LBB20_76:                              # %cond.false323
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB20_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB20_79
.LBB20_78:                              # %cond.false337
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB20_79:                              # %cond.end346
                                        #   in Loop: Header=BB20_70 Depth=2
.LBB20_80:                              # %cond.end348
                                        #   in Loop: Header=BB20_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB20_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_70
.LBB20_82:                              # %for.end359
                                        #   in Loop: Header=BB20_68 Depth=1
	jmp	.LBB20_83
.LBB20_83:                              # %for.inc360
                                        #   in Loop: Header=BB20_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_68
.LBB20_84:                              # %for.end362.loopexit
	jmp	.LBB20_85
.LBB20_85:                              # %for.end362
	cmpl	$404098410, -92(%rbp)   # imm = 0x18160D6A
	jne	.LBB20_87
.LBB20_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_86
.Lfunc_end20:
	.size	intrapred_luma_16x16.11, .Lfunc_end20-intrapred_luma_16x16.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.12
.LCPI21_0:
	.quad	4616189618054758400     # double 4
.LCPI21_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI21_2:
	.quad	4611686018427387904     # double 2
.LCPI21_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.12
	.p2align	4, 0x90
	.type	dct_luma_sp.12,@function
dct_luma_sp.12:                         # @dct_luma_sp.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI21_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI21_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$432790159, -212(%rbp)  # imm = 0x19CBDA8F
	movl	%edi, -116(%rbp)
	movl	%esi, -124(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -196(%rbp)
	movl	-196(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-196(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -208(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI21_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI21_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -180(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -140(%rbp)
	movl	-180(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -188(%rbp)
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -16(%rbp)
.LBB21_3:                               # %for.cond38
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-124(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_3
.LBB21_6:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_7
.LBB21_7:                               # %for.inc66
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_1
.LBB21_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB21_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	$0, -16(%rbp)
.LBB21_11:                              # %for.cond73
                                        #   Parent Loop BB21_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB21_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB21_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_11
.LBB21_14:                              # %for.end106
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB21_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_9
.LBB21_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB21_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	$0, -12(%rbp)
.LBB21_19:                              # %for.cond144
                                        #   Parent Loop BB21_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_19
.LBB21_22:                              # %for.end177
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_17
.LBB21_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB21_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	$0, -16(%rbp)
.LBB21_27:                              # %for.cond215
                                        #   Parent Loop BB21_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB21_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_27
.LBB21_30:                              # %for.end244
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB21_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_25
.LBB21_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB21_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	$0, -12(%rbp)
.LBB21_35:                              # %for.cond278
                                        #   Parent Loop BB21_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB21_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB21_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_35
.LBB21_38:                              # %for.end307
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB21_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_33
.LBB21_40:                              # %for.end336
	movl	$0, -184(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -64(%rbp)
.LBB21_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB21_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB21_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB21_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB21_46
.LBB21_45:                              # %if.then
                                        #   in Loop: Header=BB21_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_47
.LBB21_46:                              # %if.else
                                        #   in Loop: Header=BB21_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB21_47:                              # %if.end
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB21_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB21_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB21_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB21_55
	jp	.LBB21_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB21_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB21_54
.LBB21_53:                              # %cond.false
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-56(%rbp), %eax
.LBB21_54:                              # %cond.end
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB21_59
.LBB21_55:                              # %if.else500
                                        #   in Loop: Header=BB21_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB21_58
.LBB21_57:                              # %if.else504
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB21_58:                              # %if.end505
                                        #   in Loop: Header=BB21_41 Depth=1
	jmp	.LBB21_59
.LBB21_59:                              # %if.end506
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB21_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false510
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-120(%rbp), %eax
.LBB21_62:                              # %cond.end511
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	%eax, -136(%rbp)
	jmp	.LBB21_73
.LBB21_63:                              # %if.else513
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB21_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB21_72
.LBB21_65:                              # %if.else517
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB21_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB21_68
.LBB21_67:                              # %cond.false521
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-56(%rbp), %eax
.LBB21_68:                              # %cond.end522
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB21_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-104(%rbp), %eax
	jmp	.LBB21_71
.LBB21_70:                              # %cond.false527
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-120(%rbp), %eax
.LBB21_71:                              # %cond.end528
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	%eax, -136(%rbp)
.LBB21_72:                              # %if.end530
                                        #   in Loop: Header=BB21_41 Depth=1
	jmp	.LBB21_73
.LBB21_73:                              # %if.end531
                                        #   in Loop: Header=BB21_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB21_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	$1, -184(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB21_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB21_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB21_77
.LBB21_76:                              # %if.else539
                                        #   in Loop: Header=BB21_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB21_77:                              # %if.end546
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movq	-240(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB21_78:                              # %if.end568
                                        #   in Loop: Header=BB21_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-140(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB21_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB21_41
.LBB21_80:                              # %for.end600
	movq	-240(%rbp), %rax
	movslq	-108(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB21_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_83 Depth 2
                                        #     Child Loop BB21_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB21_81 Depth=1
	movl	$0, -16(%rbp)
.LBB21_83:                              # %for.cond607
                                        #   Parent Loop BB21_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB21_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB21_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_83
.LBB21_86:                              # %for.end620
                                        #   in Loop: Header=BB21_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB21_87:                              # %for.cond639
                                        #   Parent Loop BB21_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB21_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB21_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB21_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_87
.LBB21_90:                              # %for.end666
                                        #   in Loop: Header=BB21_81 Depth=1
	jmp	.LBB21_91
.LBB21_91:                              # %for.inc667
                                        #   in Loop: Header=BB21_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_81
.LBB21_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB21_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_95 Depth 2
                                        #     Child Loop BB21_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB21_93 Depth=1
	movl	$0, -12(%rbp)
.LBB21_95:                              # %for.cond674
                                        #   Parent Loop BB21_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB21_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB21_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_95
.LBB21_98:                              # %for.end687
                                        #   in Loop: Header=BB21_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB21_99:                              # %for.cond706
                                        #   Parent Loop BB21_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB21_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB21_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB21_103
.LBB21_102:                             # %cond.false721
                                        #   in Loop: Header=BB21_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB21_103:                             # %cond.end729
                                        #   in Loop: Header=BB21_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB21_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB21_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_109
.LBB21_105:                             # %cond.false735
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB21_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_108
.LBB21_107:                             # %cond.false746
                                        #   in Loop: Header=BB21_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_108:                             # %cond.end754
                                        #   in Loop: Header=BB21_99 Depth=2
.LBB21_109:                             # %cond.end756
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB21_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB21_112
.LBB21_111:                             # %cond.false774
                                        #   in Loop: Header=BB21_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB21_112:                             # %cond.end782
                                        #   in Loop: Header=BB21_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB21_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB21_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_118
.LBB21_114:                             # %cond.false788
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB21_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB21_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_117
.LBB21_116:                             # %cond.false799
                                        #   in Loop: Header=BB21_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_117:                             # %cond.end807
                                        #   in Loop: Header=BB21_99 Depth=2
.LBB21_118:                             # %cond.end809
                                        #   in Loop: Header=BB21_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB21_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_99
.LBB21_120:                             # %for.end818
                                        #   in Loop: Header=BB21_93 Depth=1
	jmp	.LBB21_121
.LBB21_121:                             # %for.inc819
                                        #   in Loop: Header=BB21_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_93
.LBB21_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB21_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB21_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB21_123 Depth=1
	movl	$0, -16(%rbp)
.LBB21_125:                             # %for.cond826
                                        #   Parent Loop BB21_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB21_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-124(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB21_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_125
.LBB21_128:                             # %for.end846
                                        #   in Loop: Header=BB21_123 Depth=1
	jmp	.LBB21_129
.LBB21_129:                             # %for.inc847
                                        #   in Loop: Header=BB21_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_123
.LBB21_130:                             # %for.end849
	movl	-184(%rbp), %ebx
	cmpl	$432790159, -212(%rbp)  # imm = 0x19CBDA8F
	jne	.LBB21_132
.LBB21_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_131
.Lfunc_end21:
	.size	dct_luma_sp.12, .Lfunc_end21-dct_luma_sp.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.13
.LCPI22_0:
	.quad	4616189618054758400     # double 4
.LCPI22_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI22_2:
	.quad	4611686018427387904     # double 2
.LCPI22_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.13
	.p2align	4, 0x90
	.type	dct_luma_sp.13,@function
dct_luma_sp.13:                         # @dct_luma_sp.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI22_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI22_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1592105806, -212(%rbp) # imm = 0x5EE59B4E
	movl	%edi, -116(%rbp)
	movl	%esi, -128(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-128(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -196(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI22_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI22_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -108(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -184(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-184(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -140(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	$0, -12(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -16(%rbp)
.LBB22_3:                               # %for.cond38
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_3
.LBB22_6:                               # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_7
.LBB22_7:                               # %for.inc66
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_1
.LBB22_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB22_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB22_9 Depth=1
	movl	$0, -16(%rbp)
.LBB22_11:                              # %for.cond73
                                        #   Parent Loop BB22_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB22_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB22_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_11
.LBB22_14:                              # %for.end106
                                        #   in Loop: Header=BB22_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB22_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_9
.LBB22_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB22_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	$0, -12(%rbp)
.LBB22_19:                              # %for.cond144
                                        #   Parent Loop BB22_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_19
.LBB22_22:                              # %for.end177
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_17
.LBB22_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB22_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	$0, -16(%rbp)
.LBB22_27:                              # %for.cond215
                                        #   Parent Loop BB22_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_27
.LBB22_30:                              # %for.end244
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_25
.LBB22_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB22_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB22_33 Depth=1
	movl	$0, -12(%rbp)
.LBB22_35:                              # %for.cond278
                                        #   Parent Loop BB22_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB22_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB22_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_35
.LBB22_38:                              # %for.end307
                                        #   in Loop: Header=BB22_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB22_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_33
.LBB22_40:                              # %for.end336
	movl	$0, -180(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -64(%rbp)
.LBB22_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB22_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB22_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB22_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB22_46
.LBB22_45:                              # %if.then
                                        #   in Loop: Header=BB22_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_47
.LBB22_46:                              # %if.else
                                        #   in Loop: Header=BB22_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB22_47:                              # %if.end
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-192(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB22_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB22_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB22_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-24(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-56(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-168(%rbp), %xmm0
	jne	.LBB22_55
	jp	.LBB22_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB22_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB22_54
.LBB22_53:                              # %cond.false
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-56(%rbp), %eax
.LBB22_54:                              # %cond.end
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB22_59
.LBB22_55:                              # %if.else500
                                        #   in Loop: Header=BB22_41 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-168(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB22_58
.LBB22_57:                              # %if.else504
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB22_58:                              # %if.end505
                                        #   in Loop: Header=BB22_41 Depth=1
	jmp	.LBB22_59
.LBB22_59:                              # %if.end506
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB22_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB22_62
.LBB22_61:                              # %cond.false510
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-124(%rbp), %eax
.LBB22_62:                              # %cond.end511
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	%eax, -120(%rbp)
	jmp	.LBB22_73
.LBB22_63:                              # %if.else513
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB22_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB22_72
.LBB22_65:                              # %if.else517
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB22_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB22_68
.LBB22_67:                              # %cond.false521
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-56(%rbp), %eax
.LBB22_68:                              # %cond.end522
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB22_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB22_71
.LBB22_70:                              # %cond.false527
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-124(%rbp), %eax
.LBB22_71:                              # %cond.end528
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	%eax, -120(%rbp)
.LBB22_72:                              # %if.end530
                                        #   in Loop: Header=BB22_41 Depth=1
	jmp	.LBB22_73
.LBB22_73:                              # %if.end531
                                        #   in Loop: Header=BB22_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB22_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	$1, -180(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB22_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB22_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB22_77
.LBB22_76:                              # %if.else539
                                        #   in Loop: Header=BB22_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB22_77:                              # %if.end546
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -68(%rbp)
	movl	-60(%rbp), %edi
	movl	-120(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB22_78:                              # %if.end568
                                        #   in Loop: Header=BB22_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-184(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB22_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB22_41
.LBB22_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB22_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_83 Depth 2
                                        #     Child Loop BB22_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB22_81 Depth=1
	movl	$0, -16(%rbp)
.LBB22_83:                              # %for.cond607
                                        #   Parent Loop BB22_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB22_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB22_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_83
.LBB22_86:                              # %for.end620
                                        #   in Loop: Header=BB22_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB22_87:                              # %for.cond639
                                        #   Parent Loop BB22_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB22_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB22_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB22_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_87
.LBB22_90:                              # %for.end666
                                        #   in Loop: Header=BB22_81 Depth=1
	jmp	.LBB22_91
.LBB22_91:                              # %for.inc667
                                        #   in Loop: Header=BB22_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_81
.LBB22_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB22_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_95 Depth 2
                                        #     Child Loop BB22_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB22_93 Depth=1
	movl	$0, -12(%rbp)
.LBB22_95:                              # %for.cond674
                                        #   Parent Loop BB22_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB22_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB22_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_95
.LBB22_98:                              # %for.end687
                                        #   in Loop: Header=BB22_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB22_99:                              # %for.cond706
                                        #   Parent Loop BB22_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB22_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB22_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB22_103
.LBB22_102:                             # %cond.false721
                                        #   in Loop: Header=BB22_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB22_103:                             # %cond.end729
                                        #   in Loop: Header=BB22_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB22_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB22_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_109
.LBB22_105:                             # %cond.false735
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB22_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_108
.LBB22_107:                             # %cond.false746
                                        #   in Loop: Header=BB22_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB22_108:                             # %cond.end754
                                        #   in Loop: Header=BB22_99 Depth=2
.LBB22_109:                             # %cond.end756
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB22_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB22_112
.LBB22_111:                             # %cond.false774
                                        #   in Loop: Header=BB22_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB22_112:                             # %cond.end782
                                        #   in Loop: Header=BB22_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB22_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB22_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_118
.LBB22_114:                             # %cond.false788
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB22_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB22_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_117
.LBB22_116:                             # %cond.false799
                                        #   in Loop: Header=BB22_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB22_117:                             # %cond.end807
                                        #   in Loop: Header=BB22_99 Depth=2
.LBB22_118:                             # %cond.end809
                                        #   in Loop: Header=BB22_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB22_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_99
.LBB22_120:                             # %for.end818
                                        #   in Loop: Header=BB22_93 Depth=1
	jmp	.LBB22_121
.LBB22_121:                             # %for.inc819
                                        #   in Loop: Header=BB22_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_93
.LBB22_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB22_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB22_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB22_123 Depth=1
	movl	$0, -16(%rbp)
.LBB22_125:                             # %for.cond826
                                        #   Parent Loop BB22_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB22_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB22_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_125
.LBB22_128:                             # %for.end846
                                        #   in Loop: Header=BB22_123 Depth=1
	jmp	.LBB22_129
.LBB22_129:                             # %for.inc847
                                        #   in Loop: Header=BB22_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_123
.LBB22_130:                             # %for.end849
	movl	-180(%rbp), %ebx
	cmpl	$1592105806, -212(%rbp) # imm = 0x5EE59B4E
	jne	.LBB22_132
.LBB22_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_131
.Lfunc_end22:
	.size	dct_luma_sp.13, .Lfunc_end22-dct_luma_sp.13
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.14       # -- Begin function intrapred_luma.14
	.p2align	4, 0x90
	.type	intrapred_luma.14,@function
intrapred_luma.14:                      # @intrapred_luma.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1950382725, -172(%rbp) # imm = 0x74407A85
	movl	%edi, -116(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -208(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_1
.LBB23_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-200(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB23_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB23_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB23_10
.LBB23_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB23_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB23_9:                               # %lor.end
.LBB23_10:                              # %land.end
	xorb	$-1, %al
.LBB23_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB23_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB23_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB23_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB23_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB23_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_17
.LBB23_16:                              # %cond.false
                                        #   in Loop: Header=BB23_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB23_17
.LBB23_17:                              # %cond.end
                                        #   in Loop: Header=BB23_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB23_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_13
.LBB23_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB23_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_22
.LBB23_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB23_22
.LBB23_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB23_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_25
.LBB23_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB23_25
.LBB23_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB23_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-196(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB23_28
.LBB23_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB23_28
.LBB23_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB23_30
.LBB23_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-200(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB23_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-208(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB23_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB23_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB23_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB23_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB23_36
.LBB23_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB23_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB23_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB23_39
.LBB23_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB23_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB23_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_42
.LBB23_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB23_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB23_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-184(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB23_45
.LBB23_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB23_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB23_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB23_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB23_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB23_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_46
.LBB23_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB23_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB23_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB23_61
.LBB23_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB23_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB23_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB23_60
.LBB23_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB23_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB23_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB23_59
.LBB23_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB23_59:                              # %if.end284
	jmp	.LBB23_60
.LBB23_60:                              # %if.end285
	jmp	.LBB23_61
.LBB23_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB23_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB23_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB23_62 Depth=1
	movl	$0, -4(%rbp)
.LBB23_64:                              # %for.cond291
                                        #   Parent Loop BB23_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB23_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB23_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_64
.LBB23_67:                              # %for.end304
                                        #   in Loop: Header=BB23_62 Depth=1
	jmp	.LBB23_68
.LBB23_68:                              # %for.inc305
                                        #   in Loop: Header=BB23_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB23_62
.LBB23_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB23_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB23_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB23_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_70
.LBB23_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB23_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB23_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB23_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB23_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB23_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB23_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB23_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB23_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB23_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB23_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB23_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB23_85:                              # %if.end1174
	cmpl	$1950382725, -172(%rbp) # imm = 0x74407A85
	jne	.LBB23_87
.LBB23_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_86
.Lfunc_end23:
	.size	intrapred_luma.14, .Lfunc_end23-intrapred_luma.14
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.15         # -- Begin function copyblock_sp.15
	.p2align	4, 0x90
	.type	copyblock_sp.15,@function
copyblock_sp.15:                        # @copyblock_sp.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1191155434, -88(%rbp)  # imm = 0x46FF96EA
	movl	%edi, -80(%rbp)
	movl	%esi, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -8(%rbp)
.LBB24_3:                               # %for.cond4
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_3
.LBB24_6:                               # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_7
.LBB24_7:                               # %for.inc17
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB24_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB24_9 Depth=1
	movl	$0, -8(%rbp)
.LBB24_11:                              # %for.cond24
                                        #   Parent Loop BB24_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB24_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB24_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB24_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_11
.LBB24_14:                              # %for.end53
                                        #   in Loop: Header=BB24_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB24_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_9
.LBB24_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB24_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB24_17 Depth=1
	movl	$0, -4(%rbp)
.LBB24_19:                              # %for.cond86
                                        #   Parent Loop BB24_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB24_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB24_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_19
.LBB24_22:                              # %for.end115
                                        #   in Loop: Header=BB24_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB24_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_17
.LBB24_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB24_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB24_25 Depth=1
	movl	$0, -8(%rbp)
.LBB24_27:                              # %for.cond149
                                        #   Parent Loop BB24_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB24_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB24_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_27
.LBB24_30:                              # %for.end184
                                        #   in Loop: Header=BB24_25 Depth=1
	jmp	.LBB24_31
.LBB24_31:                              # %for.inc185
                                        #   in Loop: Header=BB24_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_25
.LBB24_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB24_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_35 Depth 2
                                        #     Child Loop BB24_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB24_33 Depth=1
	movl	$0, -8(%rbp)
.LBB24_35:                              # %for.cond192
                                        #   Parent Loop BB24_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB24_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB24_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_35
.LBB24_38:                              # %for.end205
                                        #   in Loop: Header=BB24_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB24_39:                              # %for.cond224
                                        #   Parent Loop BB24_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB24_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB24_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_39
.LBB24_42:                              # %for.end251
                                        #   in Loop: Header=BB24_33 Depth=1
	jmp	.LBB24_43
.LBB24_43:                              # %for.inc252
                                        #   in Loop: Header=BB24_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_33
.LBB24_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB24_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_47 Depth 2
                                        #     Child Loop BB24_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB24_45 Depth=1
	movl	$0, -4(%rbp)
.LBB24_47:                              # %for.cond259
                                        #   Parent Loop BB24_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB24_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB24_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_47
.LBB24_50:                              # %for.end272
                                        #   in Loop: Header=BB24_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB24_51:                              # %for.cond291
                                        #   Parent Loop BB24_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB24_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB24_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB24_55
.LBB24_54:                              # %cond.false
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB24_55:                              # %cond.end
                                        #   in Loop: Header=BB24_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB24_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB24_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_61
.LBB24_57:                              # %cond.false316
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB24_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB24_60
.LBB24_59:                              # %cond.false327
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_60:                              # %cond.end335
                                        #   in Loop: Header=BB24_51 Depth=2
.LBB24_61:                              # %cond.end337
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB24_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB24_64
.LBB24_63:                              # %cond.false355
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB24_64:                              # %cond.end363
                                        #   in Loop: Header=BB24_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB24_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB24_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_70
.LBB24_66:                              # %cond.false369
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB24_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB24_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB24_69
.LBB24_68:                              # %cond.false380
                                        #   in Loop: Header=BB24_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_69:                              # %cond.end388
                                        #   in Loop: Header=BB24_51 Depth=2
.LBB24_70:                              # %cond.end390
                                        #   in Loop: Header=BB24_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB24_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_51
.LBB24_72:                              # %for.end399
                                        #   in Loop: Header=BB24_45 Depth=1
	jmp	.LBB24_73
.LBB24_73:                              # %for.inc400
                                        #   in Loop: Header=BB24_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_45
.LBB24_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB24_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB24_75 Depth=1
	movl	$0, -8(%rbp)
.LBB24_77:                              # %for.cond407
                                        #   Parent Loop BB24_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB24_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB24_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB24_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_77
.LBB24_80:                              # %for.end427
                                        #   in Loop: Header=BB24_75 Depth=1
	jmp	.LBB24_81
.LBB24_81:                              # %for.inc428
                                        #   in Loop: Header=BB24_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_75
.LBB24_82:                              # %for.end430
	cmpl	$1191155434, -88(%rbp)  # imm = 0x46FF96EA
	jne	.LBB24_84
.LBB24_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_83
.Lfunc_end24:
	.size	copyblock_sp.15, .Lfunc_end24-copyblock_sp.15
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.16        # -- Begin function dct_chroma4x4.16
	.p2align	4, 0x90
	.type	dct_chroma4x4.16,@function
dct_chroma4x4.16:                       # @dct_chroma4x4.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1354243139, -148(%rbp) # imm = 0x50B81C43
	movl	%edi, -24(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB25_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB25_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB25_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB25_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB25_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB25_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB25_8
.LBB25_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB25_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB25_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB25_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB25_10 Depth=1
	movl	$0, -16(%rbp)
.LBB25_12:                              # %for.cond31
                                        #   Parent Loop BB25_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB25_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB25_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_12
.LBB25_15:                              # %for.end
                                        #   in Loop: Header=BB25_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB25_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_10
.LBB25_17:                              # %for.end92
	jmp	.LBB25_18
.LBB25_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB25_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB25_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB25_20 Depth=1
	movl	$0, -12(%rbp)
.LBB25_22:                              # %for.cond99
                                        #   Parent Loop BB25_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_22
.LBB25_25:                              # %for.end132
                                        #   in Loop: Header=BB25_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB25_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_20
.LBB25_27:                              # %for.end165
	jmp	.LBB25_28
.LBB25_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB25_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB25_34
.LBB25_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB25_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_33
.LBB25_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB25_33:                              # %if.end213
	jmp	.LBB25_34
.LBB25_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB25_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB25_46
.LBB25_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB25_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB25_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB25_40
.LBB25_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB25_40:                              # %if.end290
	jmp	.LBB25_45
.LBB25_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB25_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB25_44
.LBB25_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB25_44:                              # %if.end328
	jmp	.LBB25_45
.LBB25_45:                              # %if.end329
	jmp	.LBB25_46
.LBB25_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB25_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB25_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB25_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB25_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB25_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB25_54
.LBB25_50:                              # %if.else352
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB25_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB25_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_53
.LBB25_52:                              # %if.else381
                                        #   in Loop: Header=BB25_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB25_53:                              # %if.end407
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_54
.LBB25_54:                              # %if.end408
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB25_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB25_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB25_58
.LBB25_57:                              # %if.then415
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	$1, -132(%rbp)
.LBB25_58:                              # %if.end416
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB25_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB25_70
.LBB25_60:                              # %if.else436
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB25_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB25_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB25_64
.LBB25_63:                              # %if.else457
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB25_64:                              # %if.end472
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_69
.LBB25_65:                              # %if.else473
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB25_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB25_68
.LBB25_67:                              # %if.else488
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB25_68:                              # %if.end500
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_69
.LBB25_69:                              # %if.end501
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_70
.LBB25_70:                              # %if.end502
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_71
.LBB25_71:                              # %if.end503
                                        #   in Loop: Header=BB25_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB25_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB25_73:                              # %if.end511
                                        #   in Loop: Header=BB25_47 Depth=1
	jmp	.LBB25_74
.LBB25_74:                              # %for.inc512
                                        #   in Loop: Header=BB25_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB25_47
.LBB25_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB25_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB25_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_79 Depth 2
                                        #     Child Loop BB25_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB25_77 Depth=1
	movl	$0, -16(%rbp)
.LBB25_79:                              # %for.cond523
                                        #   Parent Loop BB25_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB25_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB25_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_79
.LBB25_82:                              # %for.end536
                                        #   in Loop: Header=BB25_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB25_83:                              # %for.cond555
                                        #   Parent Loop BB25_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB25_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB25_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB25_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_83
.LBB25_86:                              # %for.end582
                                        #   in Loop: Header=BB25_77 Depth=1
	jmp	.LBB25_87
.LBB25_87:                              # %for.inc583
                                        #   in Loop: Header=BB25_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_77
.LBB25_88:                              # %for.end585
	jmp	.LBB25_89
.LBB25_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB25_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB25_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_93 Depth 2
                                        #     Child Loop BB25_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB25_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB25_91 Depth=1
	movl	$0, -12(%rbp)
.LBB25_93:                              # %for.cond593
                                        #   Parent Loop BB25_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB25_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB25_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB25_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_93
.LBB25_96:                              # %for.end606
                                        #   in Loop: Header=BB25_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB25_97:                              # %for.cond625
                                        #   Parent Loop BB25_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB25_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB25_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB25_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_97
.LBB25_100:                             # %for.end656
                                        #   in Loop: Header=BB25_91 Depth=1
	jmp	.LBB25_101
.LBB25_101:                             # %for.inc657
                                        #   in Loop: Header=BB25_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_91
.LBB25_102:                             # %for.end659
	jmp	.LBB25_103
.LBB25_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1354243139, -148(%rbp) # imm = 0x50B81C43
	jne	.LBB25_105
.LBB25_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_104
.Lfunc_end25:
	.size	dct_chroma4x4.16, .Lfunc_end25-dct_chroma4x4.16
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.17        # -- Begin function dct_chroma_DC.17
	.p2align	4, 0x90
	.type	dct_chroma_DC.17,@function
dct_chroma_DC.17:                       # @dct_chroma_DC.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1753195356, -44(%rbp)  # imm = 0x687FA35C
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB26_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB26_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB26_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$1, %eax
	jmp	.LBB26_6
.LBB26_5:                               # %cond.false
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-20(%rbp), %eax
.LBB26_6:                               # %cond.end
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -24(%rbp)
.LBB26_7:                               # %if.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_1
.LBB26_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1753195356, -44(%rbp)  # imm = 0x687FA35C
	jne	.LBB26_11
.LBB26_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_10
.Lfunc_end26:
	.size	dct_chroma_DC.17, .Lfunc_end26-dct_chroma_DC.17
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.18 # -- Begin function intrapred_luma_16x16.18
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.18,@function
intrapred_luma_16x16.18:                # @intrapred_luma_16x16.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$833237275, -92(%rbp)   # imm = 0x31AA311B
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_1
.LBB27_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB27_20
.LBB27_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB27_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_9
.LBB27_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB27_9
.LBB27_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB27_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB27_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB27_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB27_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB27_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_14
.LBB27_13:                              # %cond.false23
                                        #   in Loop: Header=BB27_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB27_14
.LBB27_14:                              # %cond.end24
                                        #   in Loop: Header=BB27_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_10
.LBB27_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB27_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB27_19
.LBB27_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB27_19
.LBB27_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB27_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB27_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB27_24:                              # %if.end51
                                        #   in Loop: Header=BB27_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB27_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB27_26:                              # %if.end68
                                        #   in Loop: Header=BB27_21 Depth=1
	jmp	.LBB27_27
.LBB27_27:                              # %for.inc69
                                        #   in Loop: Header=BB27_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_21
.LBB27_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB27_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB27_31
# %bb.30:                               # %if.then74
	movl	-40(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB27_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB27_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB27_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB27_37
# %bb.36:                               # %if.then88
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB27_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB27_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB27_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB27_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB27_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB27_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB27_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB27_44:                              # %if.end114
                                        #   in Loop: Header=BB27_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB27_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB27_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB27_46:                              # %if.end133
                                        #   in Loop: Header=BB27_41 Depth=1
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc134
                                        #   in Loop: Header=BB27_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_41
.LBB27_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB27_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	$0, -4(%rbp)
.LBB27_51:                              # %for.cond141
                                        #   Parent Loop BB27_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_51
.LBB27_54:                              # %for.end173
                                        #   in Loop: Header=BB27_49 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc174
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_49
.LBB27_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB27_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB27_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB27_60
.LBB27_59:                              # %if.then181
	jmp	.LBB27_85
.LBB27_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB27_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB27_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB27_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB27_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB27_65
.LBB27_64:                              # %if.else210
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB27_65:                              # %if.end232
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB27_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB27_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	$0, -4(%rbp)
.LBB27_70:                              # %for.cond293
                                        #   Parent Loop BB27_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_74
.LBB27_73:                              # %cond.false309
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_74:                              # %cond.end318
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB27_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB27_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB27_80
.LBB27_76:                              # %cond.false323
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB27_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_79
.LBB27_78:                              # %cond.false337
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB27_79:                              # %cond.end346
                                        #   in Loop: Header=BB27_70 Depth=2
.LBB27_80:                              # %cond.end348
                                        #   in Loop: Header=BB27_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB27_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_70
.LBB27_82:                              # %for.end359
                                        #   in Loop: Header=BB27_68 Depth=1
	jmp	.LBB27_83
.LBB27_83:                              # %for.inc360
                                        #   in Loop: Header=BB27_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_68
.LBB27_84:                              # %for.end362.loopexit
	jmp	.LBB27_85
.LBB27_85:                              # %for.end362
	cmpl	$833237275, -92(%rbp)   # imm = 0x31AA311B
	jne	.LBB27_87
.LBB27_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_86
.Lfunc_end27:
	.size	intrapred_luma_16x16.18, .Lfunc_end27-intrapred_luma_16x16.18
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.19        # -- Begin function dct_chroma4x4.19
	.p2align	4, 0x90
	.type	dct_chroma4x4.19,@function
dct_chroma4x4.19:                       # @dct_chroma4x4.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1768371637, -148(%rbp) # imm = 0x696735B5
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB28_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB28_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB28_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB28_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB28_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB28_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB28_8
.LBB28_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB28_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB28_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB28_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	$0, -16(%rbp)
.LBB28_12:                              # %for.cond31
                                        #   Parent Loop BB28_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB28_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB28_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_12
.LBB28_15:                              # %for.end
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB28_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_10
.LBB28_17:                              # %for.end92
	jmp	.LBB28_18
.LBB28_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB28_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB28_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	$0, -12(%rbp)
.LBB28_22:                              # %for.cond99
                                        #   Parent Loop BB28_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB28_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB28_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_22
.LBB28_25:                              # %for.end132
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB28_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_20
.LBB28_27:                              # %for.end165
	jmp	.LBB28_28
.LBB28_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB28_34
.LBB28_30:                              # %if.else
	cmpl	$1, -76(%rbp)
	jne	.LBB28_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_33
.LBB28_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB28_33:                              # %if.end213
	jmp	.LBB28_34
.LBB28_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB28_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_46
.LBB28_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB28_41
# %bb.37:                               # %if.then248
	cmpl	$1, -76(%rbp)
	jne	.LBB28_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_40
.LBB28_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB28_40:                              # %if.end290
	jmp	.LBB28_45
.LBB28_41:                              # %if.else291
	cmpl	$1, -76(%rbp)
	jne	.LBB28_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB28_44
.LBB28_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB28_44:                              # %if.end328
	jmp	.LBB28_45
.LBB28_45:                              # %if.end329
	jmp	.LBB28_46
.LBB28_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB28_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB28_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB28_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB28_54
.LBB28_50:                              # %if.else352
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB28_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_53
.LBB28_52:                              # %if.else381
                                        #   in Loop: Header=BB28_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB28_53:                              # %if.end407
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_54
.LBB28_54:                              # %if.end408
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB28_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB28_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB28_58
.LBB28_57:                              # %if.then415
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	$1, -132(%rbp)
.LBB28_58:                              # %if.end416
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB28_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB28_70
.LBB28_60:                              # %if.else436
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB28_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB28_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB28_64
.LBB28_63:                              # %if.else457
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB28_64:                              # %if.end472
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_69
.LBB28_65:                              # %if.else473
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB28_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB28_68
.LBB28_67:                              # %if.else488
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB28_68:                              # %if.end500
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_69
.LBB28_69:                              # %if.end501
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_70
.LBB28_70:                              # %if.end502
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_71
.LBB28_71:                              # %if.end503
                                        #   in Loop: Header=BB28_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB28_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB28_73:                              # %if.end511
                                        #   in Loop: Header=BB28_47 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %for.inc512
                                        #   in Loop: Header=BB28_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB28_47
.LBB28_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB28_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB28_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_79 Depth 2
                                        #     Child Loop BB28_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	$0, -16(%rbp)
.LBB28_79:                              # %for.cond523
                                        #   Parent Loop BB28_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB28_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB28_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_79
.LBB28_82:                              # %for.end536
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB28_83:                              # %for.cond555
                                        #   Parent Loop BB28_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB28_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB28_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB28_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_83
.LBB28_86:                              # %for.end582
                                        #   in Loop: Header=BB28_77 Depth=1
	jmp	.LBB28_87
.LBB28_87:                              # %for.inc583
                                        #   in Loop: Header=BB28_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_77
.LBB28_88:                              # %for.end585
	jmp	.LBB28_89
.LBB28_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB28_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB28_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_93 Depth 2
                                        #     Child Loop BB28_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB28_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	$0, -12(%rbp)
.LBB28_93:                              # %for.cond593
                                        #   Parent Loop BB28_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB28_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB28_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB28_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_93
.LBB28_96:                              # %for.end606
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB28_97:                              # %for.cond625
                                        #   Parent Loop BB28_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB28_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB28_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_97
.LBB28_100:                             # %for.end656
                                        #   in Loop: Header=BB28_91 Depth=1
	jmp	.LBB28_101
.LBB28_101:                             # %for.inc657
                                        #   in Loop: Header=BB28_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_91
.LBB28_102:                             # %for.end659
	jmp	.LBB28_103
.LBB28_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1768371637, -148(%rbp) # imm = 0x696735B5
	jne	.LBB28_105
.LBB28_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_104
.Lfunc_end28:
	.size	dct_chroma4x4.19, .Lfunc_end28-dct_chroma4x4.19
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.20       # -- Begin function intrapred_luma.20
	.p2align	4, 0x90
	.type	intrapred_luma.20,@function
intrapred_luma.20:                      # @intrapred_luma.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1425388997, -172(%rbp) # imm = 0x54F5B5C5
	movl	%edi, -116(%rbp)
	movl	%esi, -112(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -192(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_1
.LBB29_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-216(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB29_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB29_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB29_10
.LBB29_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB29_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB29_9:                               # %lor.end
.LBB29_10:                              # %land.end
	xorb	$-1, %al
.LBB29_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB29_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB29_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB29_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB29_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB29_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_17
.LBB29_16:                              # %cond.false
                                        #   in Loop: Header=BB29_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB29_17
.LBB29_17:                              # %cond.end
                                        #   in Loop: Header=BB29_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB29_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_13
.LBB29_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB29_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_22
.LBB29_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB29_22
.LBB29_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB29_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB29_25
.LBB29_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -216(%rbp)
	je	.LBB29_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB29_28
.LBB29_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB29_28
.LBB29_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB29_30
.LBB29_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-216(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB29_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB29_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB29_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB29_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB29_36
.LBB29_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB29_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB29_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_39
.LBB29_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB29_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB29_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_42
.LBB29_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB29_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB29_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-196(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-200(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB29_45
.LBB29_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB29_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB29_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB29_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB29_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB29_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_46
.LBB29_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB29_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB29_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB29_61
.LBB29_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB29_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB29_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB29_60
.LBB29_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB29_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB29_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB29_59
.LBB29_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB29_59:                              # %if.end284
	jmp	.LBB29_60
.LBB29_60:                              # %if.end285
	jmp	.LBB29_61
.LBB29_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB29_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB29_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB29_62 Depth=1
	movl	$0, -4(%rbp)
.LBB29_64:                              # %for.cond291
                                        #   Parent Loop BB29_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB29_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB29_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_64
.LBB29_67:                              # %for.end304
                                        #   in Loop: Header=BB29_62 Depth=1
	jmp	.LBB29_68
.LBB29_68:                              # %for.inc305
                                        #   in Loop: Header=BB29_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB29_62
.LBB29_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB29_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB29_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB29_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_70
.LBB29_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB29_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB29_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB29_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB29_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB29_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB29_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB29_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB29_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB29_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB29_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB29_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB29_85:                              # %if.end1174
	cmpl	$1425388997, -172(%rbp) # imm = 0x54F5B5C5
	jne	.LBB29_87
.LBB29_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_86
.Lfunc_end29:
	.size	intrapred_luma.20, .Lfunc_end29-intrapred_luma.20
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.21           # -- Begin function dct_chroma.21
	.p2align	4, 0x90
	.type	dct_chroma.21,@function
dct_chroma.21:                          # @dct_chroma.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$2007639663, -380(%rbp) # imm = 0x77AA266F
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB30_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB30_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB30_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -108(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB30_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB30_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -104(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB30_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB30_11
.LBB30_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB30_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB30_10
.LBB30_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB30_10:                              # %cond.end
.LBB30_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB30_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB30_14
.LBB30_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB30_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB30_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -108(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-108(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB30_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB30_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
                                        #       Child Loop BB30_21 Depth 3
                                        #         Child Loop BB30_25 Depth 4
                                        #       Child Loop BB30_31 Depth 3
                                        #         Child Loop BB30_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB30_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	$0, -24(%rbp)
.LBB30_19:                              # %for.cond56
                                        #   Parent Loop BB30_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_21 Depth 3
                                        #         Child Loop BB30_25 Depth 4
                                        #       Child Loop BB30_31 Depth 3
                                        #         Child Loop BB30_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB30_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$0, -12(%rbp)
.LBB30_21:                              # %for.cond60
                                        #   Parent Loop BB30_17 Depth=1
                                        #     Parent Loop BB30_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB30_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB30_21 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_23:                              # %land.end64
                                        #   in Loop: Header=BB30_21 Depth=3
	testb	$1, %al
	jne	.LBB30_24
	jmp	.LBB30_30
.LBB30_24:                              # %for.body66
                                        #   in Loop: Header=BB30_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB30_25:                              # %for.cond68
                                        #   Parent Loop BB30_17 Depth=1
                                        #     Parent Loop BB30_19 Depth=2
                                        #       Parent Loop BB30_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB30_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB30_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB30_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_25
.LBB30_28:                              # %for.end
                                        #   in Loop: Header=BB30_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB30_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_21
.LBB30_30:                              # %for.end141
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	$0, -16(%rbp)
.LBB30_31:                              # %for.cond142
                                        #   Parent Loop BB30_17 Depth=1
                                        #     Parent Loop BB30_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB30_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB30_31 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_33:                              # %land.end148
                                        #   in Loop: Header=BB30_31 Depth=3
	testb	$1, %al
	jne	.LBB30_34
	jmp	.LBB30_40
.LBB30_34:                              # %for.body150
                                        #   in Loop: Header=BB30_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB30_35:                              # %for.cond152
                                        #   Parent Loop BB30_17 Depth=1
                                        #     Parent Loop BB30_19 Depth=2
                                        #       Parent Loop BB30_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB30_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB30_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB30_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_35
.LBB30_38:                              # %for.end189
                                        #   in Loop: Header=BB30_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB30_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_31
.LBB30_40:                              # %for.end230
                                        #   in Loop: Header=BB30_19 Depth=2
	jmp	.LBB30_41
.LBB30_41:                              # %for.inc231
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_19
.LBB30_42:                              # %for.end233
                                        #   in Loop: Header=BB30_17 Depth=1
	jmp	.LBB30_43
.LBB30_43:                              # %for.inc234
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_17
.LBB30_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB30_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB30_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB30_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB30_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB30_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_50
.LBB30_49:                              # %if.else
                                        #   in Loop: Header=BB30_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB30_50:                              # %if.end349
                                        #   in Loop: Header=BB30_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB30_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB30_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB30_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB30_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB30_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB30_54:                              # %if.end359
                                        #   in Loop: Header=BB30_46 Depth=1
	jmp	.LBB30_55
.LBB30_55:                              # %if.end360
                                        #   in Loop: Header=BB30_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB30_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB30_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	$1, %eax
	jmp	.LBB30_59
.LBB30_58:                              # %cond.false370
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	-136(%rbp), %eax
.LBB30_59:                              # %cond.end371
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB30_60:                              # %if.end384
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB30_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_46
.LBB30_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB30_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB30_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB30_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB30_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB30_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB30_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB30_68
.LBB30_67:                              # %if.else447
                                        #   in Loop: Header=BB30_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB30_68:                              # %if.end461
                                        #   in Loop: Header=BB30_63 Depth=1
	jmp	.LBB30_73
.LBB30_69:                              # %if.else462
                                        #   in Loop: Header=BB30_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB30_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB30_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB30_72
.LBB30_71:                              # %if.else479
                                        #   in Loop: Header=BB30_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB30_72:                              # %if.end493
                                        #   in Loop: Header=BB30_63 Depth=1
	jmp	.LBB30_73
.LBB30_73:                              # %if.end494
                                        #   in Loop: Header=BB30_63 Depth=1
	jmp	.LBB30_74
.LBB30_74:                              # %for.inc495
                                        #   in Loop: Header=BB30_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_63
.LBB30_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB30_213
.LBB30_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB30_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB30_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB30_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB30_78 Depth=1
	movl	$0, -16(%rbp)
.LBB30_80:                              # %for.cond523
                                        #   Parent Loop BB30_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB30_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB30_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB30_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_80
.LBB30_83:                              # %for.end541
                                        #   in Loop: Header=BB30_78 Depth=1
	jmp	.LBB30_84
.LBB30_84:                              # %for.inc542
                                        #   in Loop: Header=BB30_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_78
.LBB30_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB30_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	$0, -12(%rbp)
.LBB30_88:                              # %for.cond605
                                        #   Parent Loop BB30_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB30_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_88
.LBB30_91:                              # %for.end634
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB30_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_86
.LBB30_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB30_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB30_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB30_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB30_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB30_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_98
.LBB30_97:                              # %if.else700
                                        #   in Loop: Header=BB30_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB30_98:                              # %if.end723
                                        #   in Loop: Header=BB30_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB30_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB30_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	$1, %eax
	jmp	.LBB30_102
.LBB30_101:                             # %cond.false735
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	-136(%rbp), %eax
.LBB30_102:                             # %cond.end736
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB30_103:                             # %if.end748
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB30_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_94
.LBB30_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB30_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_108 Depth 2
                                        #     Child Loop BB30_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB30_106 Depth=1
	movl	$0, -12(%rbp)
.LBB30_108:                             # %for.cond823
                                        #   Parent Loop BB30_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB30_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB30_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_108
.LBB30_111:                             # %for.end835
                                        #   in Loop: Header=BB30_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB30_112:                             # %for.cond852
                                        #   Parent Loop BB30_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB30_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -108(%rbp)
	jge	.LBB30_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB30_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB30_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB30_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB30_117
.LBB30_116:                             # %if.else915
                                        #   in Loop: Header=BB30_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-108(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-108(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB30_117:                             # %if.end968
                                        #   in Loop: Header=BB30_112 Depth=2
	jmp	.LBB30_122
.LBB30_118:                             # %if.else969
                                        #   in Loop: Header=BB30_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB30_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB30_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB30_121
.LBB30_120:                             # %if.else1019
                                        #   in Loop: Header=BB30_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-108(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB30_121:                             # %if.end1066
                                        #   in Loop: Header=BB30_112 Depth=2
	jmp	.LBB30_122
.LBB30_122:                             # %if.end1067
                                        #   in Loop: Header=BB30_112 Depth=2
	jmp	.LBB30_123
.LBB30_123:                             # %for.inc1068
                                        #   in Loop: Header=BB30_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_112
.LBB30_124:                             # %for.end1070
                                        #   in Loop: Header=BB30_106 Depth=1
	jmp	.LBB30_125
.LBB30_125:                             # %for.inc1071
                                        #   in Loop: Header=BB30_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_106
.LBB30_126:                             # %for.end1073
	jmp	.LBB30_212
.LBB30_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB30_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB30_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB30_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB30_129 Depth=1
	movl	$0, -16(%rbp)
.LBB30_131:                             # %for.cond1083
                                        #   Parent Loop BB30_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB30_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB30_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB30_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_131
.LBB30_134:                             # %for.end1101
                                        #   in Loop: Header=BB30_129 Depth=1
	jmp	.LBB30_135
.LBB30_135:                             # %for.inc1102
                                        #   in Loop: Header=BB30_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_129
.LBB30_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB30_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB30_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB30_137 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_139:                             # %land.end1111
                                        #   in Loop: Header=BB30_137 Depth=1
	testb	$1, %al
	jne	.LBB30_140
	jmp	.LBB30_146
.LBB30_140:                             # %for.body1113
                                        #   in Loop: Header=BB30_137 Depth=1
	movl	$0, -16(%rbp)
.LBB30_141:                             # %for.cond1114
                                        #   Parent Loop BB30_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB30_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB30_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_141
.LBB30_144:                             # %for.end1143
                                        #   in Loop: Header=BB30_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB30_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_137
.LBB30_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB30_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB30_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB30_147 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_149:                             # %land.end1177
                                        #   in Loop: Header=BB30_147 Depth=1
	testb	$1, %al
	jne	.LBB30_150
	jmp	.LBB30_156
.LBB30_150:                             # %for.body1179
                                        #   in Loop: Header=BB30_147 Depth=1
	movl	$0, -12(%rbp)
.LBB30_151:                             # %for.cond1180
                                        #   Parent Loop BB30_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB30_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB30_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_151
.LBB30_154:                             # %for.end1209
                                        #   in Loop: Header=BB30_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB30_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_147
.LBB30_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB30_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB30_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB30_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB30_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB30_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB30_164
.LBB30_160:                             # %if.else1261
                                        #   in Loop: Header=BB30_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB30_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB30_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_163
.LBB30_162:                             # %if.else1287
                                        #   in Loop: Header=BB30_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB30_163:                             # %if.end1310
                                        #   in Loop: Header=BB30_157 Depth=1
	jmp	.LBB30_164
.LBB30_164:                             # %if.end1311
                                        #   in Loop: Header=BB30_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB30_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB30_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	$1, %eax
	jmp	.LBB30_168
.LBB30_167:                             # %cond.false1322
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	-136(%rbp), %eax
.LBB30_168:                             # %cond.end1323
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB30_169:                             # %if.end1335
                                        #   in Loop: Header=BB30_157 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB30_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB30_171:                             # %if.end1347
                                        #   in Loop: Header=BB30_157 Depth=1
	jmp	.LBB30_172
.LBB30_172:                             # %for.inc1348
                                        #   in Loop: Header=BB30_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_157
.LBB30_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB30_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_178 Depth 2
                                        #     Child Loop BB30_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB30_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB30_174 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_176:                             # %land.end1359
                                        #   in Loop: Header=BB30_174 Depth=1
	testb	$1, %al
	jne	.LBB30_177
	jmp	.LBB30_187
.LBB30_177:                             # %for.body1361
                                        #   in Loop: Header=BB30_174 Depth=1
	movl	$0, -16(%rbp)
.LBB30_178:                             # %for.cond1362
                                        #   Parent Loop BB30_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB30_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB30_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_178
.LBB30_181:                             # %for.end1374
                                        #   in Loop: Header=BB30_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB30_182:                             # %for.cond1391
                                        #   Parent Loop BB30_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB30_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB30_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB30_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_182
.LBB30_185:                             # %for.end1416
                                        #   in Loop: Header=BB30_174 Depth=1
	jmp	.LBB30_186
.LBB30_186:                             # %for.inc1417
                                        #   in Loop: Header=BB30_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_174
.LBB30_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB30_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_192 Depth 2
                                        #     Child Loop BB30_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB30_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB30_188 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_190:                             # %land.end1426
                                        #   in Loop: Header=BB30_188 Depth=1
	testb	$1, %al
	jne	.LBB30_191
	jmp	.LBB30_210
.LBB30_191:                             # %for.body1428
                                        #   in Loop: Header=BB30_188 Depth=1
	movl	$0, -12(%rbp)
.LBB30_192:                             # %for.cond1429
                                        #   Parent Loop BB30_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB30_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB30_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB30_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_192
.LBB30_195:                             # %for.end1441
                                        #   in Loop: Header=BB30_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB30_196:                             # %for.cond1458
                                        #   Parent Loop BB30_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB30_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB30_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB30_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB30_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB30_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB30_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB30_201
.LBB30_200:                             # %if.else1521
                                        #   in Loop: Header=BB30_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB30_201:                             # %if.end1574
                                        #   in Loop: Header=BB30_196 Depth=2
	jmp	.LBB30_206
.LBB30_202:                             # %if.else1575
                                        #   in Loop: Header=BB30_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB30_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB30_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB30_205
.LBB30_204:                             # %if.else1625
                                        #   in Loop: Header=BB30_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB30_205:                             # %if.end1672
                                        #   in Loop: Header=BB30_196 Depth=2
	jmp	.LBB30_206
.LBB30_206:                             # %if.end1673
                                        #   in Loop: Header=BB30_196 Depth=2
	jmp	.LBB30_207
.LBB30_207:                             # %for.inc1674
                                        #   in Loop: Header=BB30_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_196
.LBB30_208:                             # %for.end1676
                                        #   in Loop: Header=BB30_188 Depth=1
	jmp	.LBB30_209
.LBB30_209:                             # %for.inc1677
                                        #   in Loop: Header=BB30_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_188
.LBB30_210:                             # %for.end1679
	jmp	.LBB30_211
.LBB30_211:                             # %if.end1680
	jmp	.LBB30_212
.LBB30_212:                             # %if.end1681
	jmp	.LBB30_213
.LBB30_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB30_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_216 Depth 2
                                        #       Child Loop BB30_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB30_214 Depth=1
	movl	$0, -112(%rbp)
.LBB30_216:                             # %for.cond1689
                                        #   Parent Loop BB30_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB30_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB30_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB30_218:                             # %for.cond1722
                                        #   Parent Loop BB30_214 Depth=1
                                        #     Parent Loop BB30_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB30_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB30_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_223
.LBB30_222:                             # %if.then1731
                                        #   in Loop: Header=BB30_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_224
.LBB30_223:                             # %if.else1740
                                        #   in Loop: Header=BB30_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB30_224:                             # %if.end1749
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB30_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB30_230
.LBB30_226:                             # %if.else1761
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB30_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_229
.LBB30_228:                             # %if.else1792
                                        #   in Loop: Header=BB30_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB30_229:                             # %if.end1820
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_230
.LBB30_230:                             # %if.end1821
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB30_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB30_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$0, -104(%rbp)
	je	.LBB30_234
.LBB30_233:                             # %if.then1839
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB30_235
.LBB30_234:                             # %if.else1841
                                        #   in Loop: Header=BB30_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB30_235:                             # %if.end1848
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB30_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB30_247
.LBB30_237:                             # %if.else1872
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB30_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB30_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB30_241
.LBB30_240:                             # %if.else1893
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB30_241:                             # %if.end1908
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_246
.LBB30_242:                             # %if.else1909
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB30_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB30_245
.LBB30_244:                             # %if.else1924
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB30_245:                             # %if.end1936
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_246
.LBB30_246:                             # %if.end1937
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_247
.LBB30_247:                             # %if.end1938
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_248
.LBB30_248:                             # %if.end1939
                                        #   in Loop: Header=BB30_218 Depth=3
	cmpl	$0, -104(%rbp)
	jne	.LBB30_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB30_250:                             # %if.end1949
                                        #   in Loop: Header=BB30_218 Depth=3
	jmp	.LBB30_251
.LBB30_251:                             # %for.inc1950
                                        #   in Loop: Header=BB30_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_218
.LBB30_252:                             # %for.end1952
                                        #   in Loop: Header=BB30_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB30_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB30_216
.LBB30_254:                             # %for.end1957
                                        #   in Loop: Header=BB30_214 Depth=1
	jmp	.LBB30_255
.LBB30_255:                             # %for.inc1958
                                        #   in Loop: Header=BB30_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB30_214
.LBB30_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB30_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -104(%rbp)
	jne	.LBB30_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB30_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_261 Depth 2
                                        #       Child Loop BB30_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB30_259 Depth=1
	movl	$0, -112(%rbp)
.LBB30_261:                             # %for.cond1972
                                        #   Parent Loop BB30_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB30_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB30_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB30_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB30_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB30_264:                             # %if.end2016
                                        #   in Loop: Header=BB30_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB30_265:                             # %for.cond2018
                                        #   Parent Loop BB30_259 Depth=1
                                        #     Parent Loop BB30_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB30_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB30_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB30_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB30_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB30_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_270
.LBB30_269:                             # %if.then2030
                                        #   in Loop: Header=BB30_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_271
.LBB30_270:                             # %if.else2039
                                        #   in Loop: Header=BB30_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB30_271:                             # %if.end2048
                                        #   in Loop: Header=BB30_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB30_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_265
.LBB30_273:                             # %for.end2060
                                        #   in Loop: Header=BB30_261 Depth=2
	jmp	.LBB30_274
.LBB30_274:                             # %for.inc2061
                                        #   in Loop: Header=BB30_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB30_261
.LBB30_275:                             # %for.end2063
                                        #   in Loop: Header=BB30_259 Depth=1
	jmp	.LBB30_276
.LBB30_276:                             # %for.inc2064
                                        #   in Loop: Header=BB30_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB30_259
.LBB30_277:                             # %for.end2066
	jmp	.LBB30_278
.LBB30_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB30_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB30_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB30_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_285 Depth 2
                                        #       Child Loop BB30_287 Depth 3
                                        #         Child Loop BB30_289 Depth 4
                                        #         Child Loop BB30_293 Depth 4
                                        #       Child Loop BB30_299 Depth 3
                                        #         Child Loop BB30_303 Depth 4
                                        #         Child Loop BB30_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB30_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB30_281 Depth=1
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_283:                             # %land.end2079
                                        #   in Loop: Header=BB30_281 Depth=1
	testb	$1, %al
	jne	.LBB30_284
	jmp	.LBB30_340
.LBB30_284:                             # %for.body2081
                                        #   in Loop: Header=BB30_281 Depth=1
	movl	$0, -24(%rbp)
.LBB30_285:                             # %for.cond2082
                                        #   Parent Loop BB30_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_287 Depth 3
                                        #         Child Loop BB30_289 Depth 4
                                        #         Child Loop BB30_293 Depth 4
                                        #       Child Loop BB30_299 Depth 3
                                        #         Child Loop BB30_303 Depth 4
                                        #         Child Loop BB30_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB30_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB30_285 Depth=2
	movl	$0, -12(%rbp)
.LBB30_287:                             # %for.cond2087
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_289 Depth 4
                                        #         Child Loop BB30_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB30_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB30_287 Depth=3
	movl	$0, -16(%rbp)
.LBB30_289:                             # %for.cond2091
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        #       Parent Loop BB30_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB30_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB30_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB30_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_289
.LBB30_292:                             # %for.end2106
                                        #   in Loop: Header=BB30_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB30_293:                             # %for.cond2125
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        #       Parent Loop BB30_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB30_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB30_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB30_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_293
.LBB30_296:                             # %for.end2156
                                        #   in Loop: Header=BB30_287 Depth=3
	jmp	.LBB30_297
.LBB30_297:                             # %for.inc2157
                                        #   in Loop: Header=BB30_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_287
.LBB30_298:                             # %for.end2159
                                        #   in Loop: Header=BB30_285 Depth=2
	movl	$0, -16(%rbp)
.LBB30_299:                             # %for.cond2160
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_303 Depth 4
                                        #         Child Loop BB30_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB30_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB30_299 Depth=3
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB30_301:                             # %land.end2166
                                        #   in Loop: Header=BB30_299 Depth=3
	testb	$1, %al
	jne	.LBB30_302
	jmp	.LBB30_336
.LBB30_302:                             # %for.body2168
                                        #   in Loop: Header=BB30_299 Depth=3
	movl	$0, -12(%rbp)
.LBB30_303:                             # %for.cond2169
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        #       Parent Loop BB30_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB30_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB30_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB30_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_303
.LBB30_306:                             # %for.end2184
                                        #   in Loop: Header=BB30_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB30_307:                             # %for.cond2203
                                        #   Parent Loop BB30_281 Depth=1
                                        #     Parent Loop BB30_285 Depth=2
                                        #       Parent Loop BB30_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB30_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB30_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB30_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB30_312
.LBB30_311:                             # %cond.false2231
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB30_312:                             # %cond.end2250
                                        #   in Loop: Header=BB30_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB30_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB30_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB30_318
.LBB30_314:                             # %cond.false2257
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB30_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB30_317
.LBB30_316:                             # %cond.false2279
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB30_317:                             # %cond.end2298
                                        #   in Loop: Header=BB30_307 Depth=4
.LBB30_318:                             # %cond.end2300
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB30_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB30_321
.LBB30_320:                             # %cond.false2333
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB30_321:                             # %cond.end2352
                                        #   in Loop: Header=BB30_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB30_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB30_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB30_327
.LBB30_323:                             # %cond.false2359
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB30_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB30_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB30_326
.LBB30_325:                             # %cond.false2381
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB30_326:                             # %cond.end2400
                                        #   in Loop: Header=BB30_307 Depth=4
.LBB30_327:                             # %cond.end2402
                                        #   in Loop: Header=BB30_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB30_332
.LBB30_328:                             # %if.else2412
                                        #   in Loop: Header=BB30_307 Depth=4
	cmpl	$0, -104(%rbp)
	je	.LBB30_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB30_331
.LBB30_330:                             # %if.else2439
                                        #   in Loop: Header=BB30_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB30_331:                             # %if.end2468
                                        #   in Loop: Header=BB30_307 Depth=4
	jmp	.LBB30_332
.LBB30_332:                             # %if.end2469
                                        #   in Loop: Header=BB30_307 Depth=4
	jmp	.LBB30_333
.LBB30_333:                             # %for.inc2470
                                        #   in Loop: Header=BB30_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_307
.LBB30_334:                             # %for.end2472
                                        #   in Loop: Header=BB30_299 Depth=3
	jmp	.LBB30_335
.LBB30_335:                             # %for.inc2473
                                        #   in Loop: Header=BB30_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_299
.LBB30_336:                             # %for.end2475
                                        #   in Loop: Header=BB30_285 Depth=2
	jmp	.LBB30_337
.LBB30_337:                             # %for.inc2476
                                        #   in Loop: Header=BB30_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_285
.LBB30_338:                             # %for.end2478
                                        #   in Loop: Header=BB30_281 Depth=1
	jmp	.LBB30_339
.LBB30_339:                             # %for.inc2479
                                        #   in Loop: Header=BB30_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_281
.LBB30_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB30_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB30_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB30_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB30_342 Depth=1
	movl	$0, -16(%rbp)
.LBB30_344:                             # %for.cond2490
                                        #   Parent Loop BB30_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB30_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB30_344 Depth=2
	cmpl	$0, -104(%rbp)
	je	.LBB30_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB30_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB30_348
.LBB30_347:                             # %if.else2518
                                        #   in Loop: Header=BB30_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB30_348:                             # %if.end2536
                                        #   in Loop: Header=BB30_344 Depth=2
	jmp	.LBB30_349
.LBB30_349:                             # %for.inc2537
                                        #   in Loop: Header=BB30_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_344
.LBB30_350:                             # %for.end2539
                                        #   in Loop: Header=BB30_342 Depth=1
	jmp	.LBB30_351
.LBB30_351:                             # %for.inc2540
                                        #   in Loop: Header=BB30_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_342
.LBB30_352:                             # %for.end2542
	jmp	.LBB30_353
.LBB30_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$2007639663, -380(%rbp) # imm = 0x77AA266F
	jne	.LBB30_355
.LBB30_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_354
.Lfunc_end30:
	.size	dct_chroma.21, .Lfunc_end30-dct_chroma.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.22
.LCPI31_0:
	.quad	4616189618054758400     # double 4
.LCPI31_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI31_2:
	.quad	4611686018427387904     # double 2
.LCPI31_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.22
	.p2align	4, 0x90
	.type	dct_chroma_sp.22,@function
dct_chroma_sp.22:                       # @dct_chroma_sp.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI31_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI31_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1077342196, -268(%rbp) # imm = 0x4036EFF4
	movl	%edi, -116(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI31_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI31_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB31_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB31_6
.LBB31_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB31_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB31_5:                               # %cond.end
.LBB31_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB31_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB31_12
.LBB31_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB31_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB31_11
.LBB31_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB31_11:                              # %cond.end41
.LBB31_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB31_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB31_15
.LBB31_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB31_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB31_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB31_18
.LBB31_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB31_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-120(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB31_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB31_21
.LBB31_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB31_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB31_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB31_24
.LBB31_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB31_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB31_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB31_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	$0, -16(%rbp)
.LBB31_27:                              # %for.cond97
                                        #   Parent Loop BB31_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB31_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB31_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB31_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_27
.LBB31_30:                              # %for.end
                                        #   in Loop: Header=BB31_25 Depth=1
	jmp	.LBB31_31
.LBB31_31:                              # %for.inc121
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_25
.LBB31_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB31_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_35 Depth 2
                                        #       Child Loop BB31_37 Depth 3
                                        #         Child Loop BB31_39 Depth 4
                                        #       Child Loop BB31_45 Depth 3
                                        #         Child Loop BB31_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB31_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	$0, -24(%rbp)
.LBB31_35:                              # %for.cond128
                                        #   Parent Loop BB31_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_37 Depth 3
                                        #         Child Loop BB31_39 Depth 4
                                        #       Child Loop BB31_45 Depth 3
                                        #         Child Loop BB31_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB31_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB31_35 Depth=2
	movl	$0, -12(%rbp)
.LBB31_37:                              # %for.cond132
                                        #   Parent Loop BB31_33 Depth=1
                                        #     Parent Loop BB31_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB31_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB31_39:                              # %for.cond137
                                        #   Parent Loop BB31_33 Depth=1
                                        #     Parent Loop BB31_35 Depth=2
                                        #       Parent Loop BB31_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB31_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB31_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB31_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_39
.LBB31_42:                              # %for.end174
                                        #   in Loop: Header=BB31_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB31_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_37
.LBB31_44:                              # %for.end214
                                        #   in Loop: Header=BB31_35 Depth=2
	movl	$0, -16(%rbp)
.LBB31_45:                              # %for.cond215
                                        #   Parent Loop BB31_33 Depth=1
                                        #     Parent Loop BB31_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB31_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB31_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB31_47:                              # %for.cond220
                                        #   Parent Loop BB31_33 Depth=1
                                        #     Parent Loop BB31_35 Depth=2
                                        #       Parent Loop BB31_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB31_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB31_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB31_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_47
.LBB31_50:                              # %for.end257
                                        #   in Loop: Header=BB31_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB31_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_45
.LBB31_52:                              # %for.end298
                                        #   in Loop: Header=BB31_35 Depth=2
	jmp	.LBB31_53
.LBB31_53:                              # %for.inc299
                                        #   in Loop: Header=BB31_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_35
.LBB31_54:                              # %for.end301
                                        #   in Loop: Header=BB31_33 Depth=1
	jmp	.LBB31_55
.LBB31_55:                              # %for.inc302
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_33
.LBB31_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB31_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_59 Depth 2
                                        #       Child Loop BB31_61 Depth 3
                                        #         Child Loop BB31_63 Depth 4
                                        #       Child Loop BB31_69 Depth 3
                                        #         Child Loop BB31_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB31_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB31_57 Depth=1
	movl	$0, -24(%rbp)
.LBB31_59:                              # %for.cond309
                                        #   Parent Loop BB31_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_61 Depth 3
                                        #         Child Loop BB31_63 Depth 4
                                        #       Child Loop BB31_69 Depth 3
                                        #         Child Loop BB31_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB31_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB31_59 Depth=2
	movl	$0, -12(%rbp)
.LBB31_61:                              # %for.cond313
                                        #   Parent Loop BB31_57 Depth=1
                                        #     Parent Loop BB31_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB31_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB31_63:                              # %for.cond318
                                        #   Parent Loop BB31_57 Depth=1
                                        #     Parent Loop BB31_59 Depth=2
                                        #       Parent Loop BB31_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB31_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB31_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB31_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_63
.LBB31_66:                              # %for.end351
                                        #   in Loop: Header=BB31_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB31_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_61
.LBB31_68:                              # %for.end387
                                        #   in Loop: Header=BB31_59 Depth=2
	movl	$0, -16(%rbp)
.LBB31_69:                              # %for.cond388
                                        #   Parent Loop BB31_57 Depth=1
                                        #     Parent Loop BB31_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB31_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB31_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB31_71:                              # %for.cond393
                                        #   Parent Loop BB31_57 Depth=1
                                        #     Parent Loop BB31_59 Depth=2
                                        #       Parent Loop BB31_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB31_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB31_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB31_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_71
.LBB31_74:                              # %for.end426
                                        #   in Loop: Header=BB31_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB31_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_69
.LBB31_76:                              # %for.end463
                                        #   in Loop: Header=BB31_59 Depth=2
	jmp	.LBB31_77
.LBB31_77:                              # %for.inc464
                                        #   in Loop: Header=BB31_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_59
.LBB31_78:                              # %for.end466
                                        #   in Loop: Header=BB31_57 Depth=1
	jmp	.LBB31_79
.LBB31_79:                              # %for.inc467
                                        #   in Loop: Header=BB31_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_57
.LBB31_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB31_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB31_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB31_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB31_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB31_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB31_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB31_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB31_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB31_90
	jp	.LBB31_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB31_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB31_89
.LBB31_88:                              # %cond.false691
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-44(%rbp), %eax
.LBB31_89:                              # %cond.end692
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB31_94
.LBB31_90:                              # %if.else
                                        #   in Loop: Header=BB31_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_93
.LBB31_92:                              # %if.else697
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB31_93:                              # %if.end
                                        #   in Loop: Header=BB31_81 Depth=1
	jmp	.LBB31_94
.LBB31_94:                              # %if.end698
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB31_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB31_97
.LBB31_96:                              # %cond.false702
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-104(%rbp), %eax
.LBB31_97:                              # %cond.end703
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB31_108
.LBB31_98:                              # %if.else705
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB31_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB31_107
.LBB31_100:                             # %if.else709
                                        #   in Loop: Header=BB31_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB31_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB31_103
.LBB31_102:                             # %cond.false713
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-44(%rbp), %eax
.LBB31_103:                             # %cond.end714
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB31_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB31_106
.LBB31_105:                             # %cond.false719
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-104(%rbp), %eax
.LBB31_106:                             # %cond.end720
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB31_107:                             # %if.end722
                                        #   in Loop: Header=BB31_81 Depth=1
	jmp	.LBB31_108
.LBB31_108:                             # %if.end723
                                        #   in Loop: Header=BB31_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB31_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB31_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB31_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB31_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB31_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB31_112:                             # %if.end734
                                        #   in Loop: Header=BB31_81 Depth=1
	jmp	.LBB31_113
.LBB31_113:                             # %if.end735
                                        #   in Loop: Header=BB31_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB31_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB31_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	$1, %eax
	jmp	.LBB31_117
.LBB31_116:                             # %cond.false745
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-204(%rbp), %eax
.LBB31_117:                             # %cond.end746
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB31_118:                             # %if.end763
                                        #   in Loop: Header=BB31_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB31_81
.LBB31_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -20(%rbp)
.LBB31_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_123 Depth 2
                                        #       Child Loop BB31_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB31_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB31_121 Depth=1
	movl	$0, -24(%rbp)
.LBB31_123:                             # %for.cond839
                                        #   Parent Loop BB31_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB31_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB31_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB31_125:                             # %for.cond860
                                        #   Parent Loop BB31_121 Depth=1
                                        #     Parent Loop BB31_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB31_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB31_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB31_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB31_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB31_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB31_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB31_130
.LBB31_129:                             # %if.then867
                                        #   in Loop: Header=BB31_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_131
.LBB31_130:                             # %if.else876
                                        #   in Loop: Header=BB31_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB31_131:                             # %if.end885
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB31_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB31_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB31_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB31_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB31_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB31_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB31_139
	jp	.LBB31_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB31_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB31_138
.LBB31_137:                             # %cond.false1047
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-44(%rbp), %eax
.LBB31_138:                             # %cond.end1048
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB31_143
.LBB31_139:                             # %if.else1050
                                        #   in Loop: Header=BB31_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB31_142
.LBB31_141:                             # %if.else1054
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB31_142:                             # %if.end1055
                                        #   in Loop: Header=BB31_125 Depth=3
	jmp	.LBB31_143
.LBB31_143:                             # %if.end1056
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB31_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB31_146
.LBB31_145:                             # %cond.false1060
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-104(%rbp), %eax
.LBB31_146:                             # %cond.end1061
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB31_157
.LBB31_147:                             # %if.else1063
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB31_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB31_156
.LBB31_149:                             # %if.else1067
                                        #   in Loop: Header=BB31_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB31_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB31_152
.LBB31_151:                             # %cond.false1071
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-44(%rbp), %eax
.LBB31_152:                             # %cond.end1072
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB31_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB31_155
.LBB31_154:                             # %cond.false1077
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-104(%rbp), %eax
.LBB31_155:                             # %cond.end1078
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB31_156:                             # %if.end1080
                                        #   in Loop: Header=BB31_125 Depth=3
	jmp	.LBB31_157
.LBB31_157:                             # %if.end1081
                                        #   in Loop: Header=BB31_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB31_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB31_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB31_161
.LBB31_160:                             # %if.else1099
                                        #   in Loop: Header=BB31_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB31_161:                             # %if.end1106
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB31_162:                             # %if.end1128
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB31_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB31_125
.LBB31_164:                             # %for.end1164
                                        #   in Loop: Header=BB31_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB31_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_123
.LBB31_166:                             # %for.end1169
                                        #   in Loop: Header=BB31_121 Depth=1
	jmp	.LBB31_167
.LBB31_167:                             # %for.inc1170
                                        #   in Loop: Header=BB31_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_121
.LBB31_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB31_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB31_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB31_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_173 Depth 2
                                        #       Child Loop BB31_175 Depth 3
                                        #         Child Loop BB31_177 Depth 4
                                        #         Child Loop BB31_181 Depth 4
                                        #       Child Loop BB31_187 Depth 3
                                        #         Child Loop BB31_189 Depth 4
                                        #         Child Loop BB31_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB31_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB31_171 Depth=1
	movl	$0, -24(%rbp)
.LBB31_173:                             # %for.cond1181
                                        #   Parent Loop BB31_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_175 Depth 3
                                        #         Child Loop BB31_177 Depth 4
                                        #         Child Loop BB31_181 Depth 4
                                        #       Child Loop BB31_187 Depth 3
                                        #         Child Loop BB31_189 Depth 4
                                        #         Child Loop BB31_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB31_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB31_173 Depth=2
	movl	$0, -12(%rbp)
.LBB31_175:                             # %for.cond1185
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_177 Depth 4
                                        #         Child Loop BB31_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB31_175 Depth=3
	movl	$0, -16(%rbp)
.LBB31_177:                             # %for.cond1189
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        #       Parent Loop BB31_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB31_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB31_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB31_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_177
.LBB31_180:                             # %for.end1204
                                        #   in Loop: Header=BB31_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB31_181:                             # %for.cond1223
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        #       Parent Loop BB31_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB31_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB31_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB31_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_181
.LBB31_184:                             # %for.end1254
                                        #   in Loop: Header=BB31_175 Depth=3
	jmp	.LBB31_185
.LBB31_185:                             # %for.inc1255
                                        #   in Loop: Header=BB31_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_175
.LBB31_186:                             # %for.end1257
                                        #   in Loop: Header=BB31_173 Depth=2
	movl	$0, -16(%rbp)
.LBB31_187:                             # %for.cond1258
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB31_189 Depth 4
                                        #         Child Loop BB31_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB31_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB31_187 Depth=3
	movl	$0, -12(%rbp)
.LBB31_189:                             # %for.cond1262
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        #       Parent Loop BB31_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB31_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB31_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB31_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_189
.LBB31_192:                             # %for.end1277
                                        #   in Loop: Header=BB31_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB31_193:                             # %for.cond1296
                                        #   Parent Loop BB31_171 Depth=1
                                        #     Parent Loop BB31_173 Depth=2
                                        #       Parent Loop BB31_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB31_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB31_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB31_197
.LBB31_196:                             # %cond.false1311
                                        #   in Loop: Header=BB31_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB31_197:                             # %cond.end1319
                                        #   in Loop: Header=BB31_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB31_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB31_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB31_203
.LBB31_199:                             # %cond.false1325
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB31_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_202
.LBB31_201:                             # %cond.false1336
                                        #   in Loop: Header=BB31_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB31_202:                             # %cond.end1344
                                        #   in Loop: Header=BB31_193 Depth=4
.LBB31_203:                             # %cond.end1346
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB31_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB31_206
.LBB31_205:                             # %cond.false1366
                                        #   in Loop: Header=BB31_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB31_206:                             # %cond.end1374
                                        #   in Loop: Header=BB31_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB31_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB31_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB31_212
.LBB31_208:                             # %cond.false1380
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB31_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB31_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB31_211
.LBB31_210:                             # %cond.false1391
                                        #   in Loop: Header=BB31_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB31_211:                             # %cond.end1399
                                        #   in Loop: Header=BB31_193 Depth=4
.LBB31_212:                             # %cond.end1401
                                        #   in Loop: Header=BB31_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB31_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_193
.LBB31_214:                             # %for.end1412
                                        #   in Loop: Header=BB31_187 Depth=3
	jmp	.LBB31_215
.LBB31_215:                             # %for.inc1413
                                        #   in Loop: Header=BB31_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_187
.LBB31_216:                             # %for.end1415
                                        #   in Loop: Header=BB31_173 Depth=2
	jmp	.LBB31_217
.LBB31_217:                             # %for.inc1416
                                        #   in Loop: Header=BB31_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_173
.LBB31_218:                             # %for.end1418
                                        #   in Loop: Header=BB31_171 Depth=1
	jmp	.LBB31_219
.LBB31_219:                             # %for.inc1419
                                        #   in Loop: Header=BB31_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_171
.LBB31_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB31_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB31_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB31_221 Depth=1
	movl	$0, -16(%rbp)
.LBB31_223:                             # %for.cond1426
                                        #   Parent Loop BB31_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB31_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB31_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-116(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB31_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_223
.LBB31_226:                             # %for.end1446
                                        #   in Loop: Header=BB31_221 Depth=1
	jmp	.LBB31_227
.LBB31_227:                             # %for.inc1447
                                        #   in Loop: Header=BB31_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_221
.LBB31_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1077342196, -268(%rbp) # imm = 0x4036EFF4
	jne	.LBB31_230
.LBB31_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_229
.Lfunc_end31:
	.size	dct_chroma_sp.22, .Lfunc_end31-dct_chroma_sp.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.23
.LCPI32_0:
	.quad	4616189618054758400     # double 4
.LCPI32_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI32_2:
	.quad	4611686018427387904     # double 2
.LCPI32_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.23
	.p2align	4, 0x90
	.type	dct_luma_sp.23,@function
dct_luma_sp.23:                         # @dct_luma_sp.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI32_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1097583850, -212(%rbp) # imm = 0x416BCCEA
	movl	%edi, -116(%rbp)
	movl	%esi, -120(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -204(%rbp)
	movl	-208(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI32_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -224(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -140(%rbp)
	movq	-176(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -192(%rbp)
	movq	-176(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -132(%rbp)
	movl	-192(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -200(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -16(%rbp)
.LBB32_3:                               # %for.cond38
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_3
.LBB32_6:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_7
.LBB32_7:                               # %for.inc66
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_1
.LBB32_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB32_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	$0, -16(%rbp)
.LBB32_11:                              # %for.cond73
                                        #   Parent Loop BB32_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB32_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB32_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_11
.LBB32_14:                              # %for.end106
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB32_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_9
.LBB32_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB32_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	$0, -12(%rbp)
.LBB32_19:                              # %for.cond144
                                        #   Parent Loop BB32_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB32_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB32_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_19
.LBB32_22:                              # %for.end177
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB32_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_17
.LBB32_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB32_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	$0, -16(%rbp)
.LBB32_27:                              # %for.cond215
                                        #   Parent Loop BB32_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB32_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_27
.LBB32_30:                              # %for.end244
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB32_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_25
.LBB32_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB32_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	$0, -12(%rbp)
.LBB32_35:                              # %for.cond278
                                        #   Parent Loop BB32_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB32_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB32_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_35
.LBB32_38:                              # %for.end307
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB32_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_33
.LBB32_40:                              # %for.end336
	movl	$0, -196(%rbp)
	movl	$-1, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -64(%rbp)
.LBB32_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -64(%rbp)
	jge	.LBB32_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB32_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB32_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB32_46
.LBB32_45:                              # %if.then
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_47
.LBB32_46:                              # %if.else
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-64(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB32_47:                              # %if.end
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -104(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-200(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	je	.LBB32_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB32_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB32_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movl	-20(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-60(%rbp), %edi
	movl	-68(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB32_55
	jp	.LBB32_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-60(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB32_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB32_54
.LBB32_53:                              # %cond.false
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-60(%rbp), %eax
.LBB32_54:                              # %cond.end
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -56(%rbp)
	jmp	.LBB32_59
.LBB32_55:                              # %if.else500
                                        #   in Loop: Header=BB32_41 Depth=1
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB32_58
.LBB32_57:                              # %if.else504
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB32_58:                              # %if.end505
                                        #   in Loop: Header=BB32_41 Depth=1
	jmp	.LBB32_59
.LBB32_59:                              # %if.end506
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB32_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB32_62
.LBB32_61:                              # %cond.false510
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-128(%rbp), %eax
.LBB32_62:                              # %cond.end511
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -136(%rbp)
	jmp	.LBB32_73
.LBB32_63:                              # %if.else513
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB32_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -136(%rbp)
	jmp	.LBB32_72
.LBB32_65:                              # %if.else517
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB32_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB32_68
.LBB32_67:                              # %cond.false521
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-60(%rbp), %eax
.LBB32_68:                              # %cond.end522
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -56(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB32_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB32_71
.LBB32_70:                              # %cond.false527
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-128(%rbp), %eax
.LBB32_71:                              # %cond.end528
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	%eax, -136(%rbp)
.LBB32_72:                              # %if.end530
                                        #   in Loop: Header=BB32_41 Depth=1
	jmp	.LBB32_73
.LBB32_73:                              # %if.end531
                                        #   in Loop: Header=BB32_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB32_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	$1, -196(%rbp)
	cmpl	$1, -56(%rbp)
	jle	.LBB32_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB32_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB32_77
.LBB32_76:                              # %if.else539
                                        #   in Loop: Header=BB32_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB32_77:                              # %if.end546
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-112(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	movl	$-1, -68(%rbp)
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -104(%rbp)
.LBB32_78:                              # %if.end568
                                        #   in Loop: Header=BB32_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-104(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-192(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB32_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB32_41
.LBB32_80:                              # %for.end600
	movq	-232(%rbp), %rax
	movslq	-112(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB32_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_83 Depth 2
                                        #     Child Loop BB32_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	$0, -16(%rbp)
.LBB32_83:                              # %for.cond607
                                        #   Parent Loop BB32_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB32_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB32_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_83
.LBB32_86:                              # %for.end620
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB32_87:                              # %for.cond639
                                        #   Parent Loop BB32_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB32_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB32_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB32_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_87
.LBB32_90:                              # %for.end666
                                        #   in Loop: Header=BB32_81 Depth=1
	jmp	.LBB32_91
.LBB32_91:                              # %for.inc667
                                        #   in Loop: Header=BB32_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_81
.LBB32_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB32_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_95 Depth 2
                                        #     Child Loop BB32_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	$0, -12(%rbp)
.LBB32_95:                              # %for.cond674
                                        #   Parent Loop BB32_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB32_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB32_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_95
.LBB32_98:                              # %for.end687
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB32_99:                              # %for.cond706
                                        #   Parent Loop BB32_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB32_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB32_103
.LBB32_102:                             # %cond.false721
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB32_103:                             # %cond.end729
                                        #   in Loop: Header=BB32_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB32_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_109
.LBB32_105:                             # %cond.false735
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_108
.LBB32_107:                             # %cond.false746
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_108:                             # %cond.end754
                                        #   in Loop: Header=BB32_99 Depth=2
.LBB32_109:                             # %cond.end756
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB32_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB32_112
.LBB32_111:                             # %cond.false774
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB32_112:                             # %cond.end782
                                        #   in Loop: Header=BB32_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB32_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_118
.LBB32_114:                             # %cond.false788
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB32_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB32_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB32_117
.LBB32_116:                             # %cond.false799
                                        #   in Loop: Header=BB32_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_117:                             # %cond.end807
                                        #   in Loop: Header=BB32_99 Depth=2
.LBB32_118:                             # %cond.end809
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB32_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_99
.LBB32_120:                             # %for.end818
                                        #   in Loop: Header=BB32_93 Depth=1
	jmp	.LBB32_121
.LBB32_121:                             # %for.inc819
                                        #   in Loop: Header=BB32_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_93
.LBB32_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB32_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB32_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB32_123 Depth=1
	movl	$0, -16(%rbp)
.LBB32_125:                             # %for.cond826
                                        #   Parent Loop BB32_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB32_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB32_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-120(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB32_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_125
.LBB32_128:                             # %for.end846
                                        #   in Loop: Header=BB32_123 Depth=1
	jmp	.LBB32_129
.LBB32_129:                             # %for.inc847
                                        #   in Loop: Header=BB32_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_123
.LBB32_130:                             # %for.end849
	movl	-196(%rbp), %ebx
	cmpl	$1097583850, -212(%rbp) # imm = 0x416BCCEA
	jne	.LBB32_132
.LBB32_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_131
.Lfunc_end32:
	.size	dct_luma_sp.23, .Lfunc_end32-dct_luma_sp.23
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.24        # -- Begin function dct_chroma_DC.24
	.p2align	4, 0x90
	.type	dct_chroma_DC.24,@function
dct_chroma_DC.24:                       # @dct_chroma_DC.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$348048338, -44(%rbp)   # imm = 0x14BECBD2
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB33_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB33_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB33_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$1, %eax
	jmp	.LBB33_6
.LBB33_5:                               # %cond.false
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-24(%rbp), %eax
.LBB33_6:                               # %cond.end
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -20(%rbp)
.LBB33_7:                               # %if.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_8
.LBB33_8:                               # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_1
.LBB33_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$348048338, -44(%rbp)   # imm = 0x14BECBD2
	jne	.LBB33_11
.LBB33_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_10
.Lfunc_end33:
	.size	dct_chroma_DC.24, .Lfunc_end33-dct_chroma_DC.24
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.25       # -- Begin function dct_luma_16x16.25
	.p2align	4, 0x90
	.type	dct_luma_16x16.25,@function
dct_luma_16x16.25:                      # @dct_luma_16x16.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$2021226574, -132(%rbp) # imm = 0x7879784E
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB34_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB34_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
.LBB34_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB34_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	$0, -16(%rbp)
.LBB34_5:                               # %for.cond16
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB34_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB34_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB34_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB34_9
.LBB34_8:                               # %if.else
                                        #   in Loop: Header=BB34_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB34_9:                               # %if.end
                                        #   in Loop: Header=BB34_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB34_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_5
.LBB34_11:                              # %for.end
                                        #   in Loop: Header=BB34_3 Depth=1
	jmp	.LBB34_12
.LBB34_12:                              # %for.inc61
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_3
.LBB34_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB34_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_18 Depth 2
                                        #       Child Loop BB34_20 Depth 3
                                        #         Child Loop BB34_22 Depth 4
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB34_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB34_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_16:                              # %land.end69
                                        #   in Loop: Header=BB34_14 Depth=1
	testb	$1, %al
	jne	.LBB34_17
	jmp	.LBB34_39
.LBB34_17:                              # %for.body71
                                        #   in Loop: Header=BB34_14 Depth=1
	movl	$0, -20(%rbp)
.LBB34_18:                              # %for.cond72
                                        #   Parent Loop BB34_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_20 Depth 3
                                        #         Child Loop BB34_22 Depth 4
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB34_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB34_18 Depth=2
	movl	$0, -12(%rbp)
.LBB34_20:                              # %for.cond76
                                        #   Parent Loop BB34_14 Depth=1
                                        #     Parent Loop BB34_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB34_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB34_20 Depth=3
	movl	$0, -16(%rbp)
.LBB34_22:                              # %for.cond80
                                        #   Parent Loop BB34_14 Depth=1
                                        #     Parent Loop BB34_18 Depth=2
                                        #       Parent Loop BB34_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB34_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB34_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB34_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_22
.LBB34_25:                              # %for.end125
                                        #   in Loop: Header=BB34_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB34_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_20
.LBB34_27:                              # %for.end169
                                        #   in Loop: Header=BB34_18 Depth=2
	movl	$0, -16(%rbp)
.LBB34_28:                              # %for.cond170
                                        #   Parent Loop BB34_14 Depth=1
                                        #     Parent Loop BB34_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB34_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	$0, -12(%rbp)
.LBB34_30:                              # %for.cond174
                                        #   Parent Loop BB34_14 Depth=1
                                        #     Parent Loop BB34_18 Depth=2
                                        #       Parent Loop BB34_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB34_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB34_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_30
.LBB34_33:                              # %for.end219
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_28
.LBB34_35:                              # %for.end264
                                        #   in Loop: Header=BB34_18 Depth=2
	jmp	.LBB34_36
.LBB34_36:                              # %for.inc265
                                        #   in Loop: Header=BB34_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_18
.LBB34_37:                              # %for.end267
                                        #   in Loop: Header=BB34_14 Depth=1
	jmp	.LBB34_38
.LBB34_38:                              # %for.inc268
                                        #   in Loop: Header=BB34_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_14
.LBB34_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB34_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	$0, -16(%rbp)
.LBB34_42:                              # %for.cond275
                                        #   Parent Loop BB34_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB34_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB34_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_42
.LBB34_45:                              # %for.end291
                                        #   in Loop: Header=BB34_40 Depth=1
	jmp	.LBB34_46
.LBB34_46:                              # %for.inc292
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_40
.LBB34_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB34_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB34_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_50:                              # %land.end301
                                        #   in Loop: Header=BB34_48 Depth=1
	testb	$1, %al
	jne	.LBB34_51
	jmp	.LBB34_57
.LBB34_51:                              # %for.body303
                                        #   in Loop: Header=BB34_48 Depth=1
	movl	$0, -16(%rbp)
.LBB34_52:                              # %for.cond304
                                        #   Parent Loop BB34_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB34_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB34_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_52
.LBB34_55:                              # %for.end333
                                        #   in Loop: Header=BB34_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB34_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_48
.LBB34_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB34_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB34_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_60:                              # %land.end367
                                        #   in Loop: Header=BB34_58 Depth=1
	testb	$1, %al
	jne	.LBB34_61
	jmp	.LBB34_67
.LBB34_61:                              # %for.body369
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	$0, -12(%rbp)
.LBB34_62:                              # %for.cond370
                                        #   Parent Loop BB34_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB34_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB34_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_62
.LBB34_65:                              # %for.end399
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB34_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_58
.LBB34_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB34_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB34_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB34_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB34_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB34_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB34_73
.LBB34_72:                              # %if.then437
                                        #   in Loop: Header=BB34_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_74
.LBB34_73:                              # %if.else446
                                        #   in Loop: Header=BB34_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_74:                              # %if.end455
                                        #   in Loop: Header=BB34_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB34_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB34_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB34_77
.LBB34_76:                              # %if.else463
                                        #   in Loop: Header=BB34_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-108(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB34_77:                              # %if.end481
                                        #   in Loop: Header=BB34_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB34_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB34_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB34_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB34_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB34_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB34_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB34_81:                              # %if.end492
                                        #   in Loop: Header=BB34_68 Depth=1
	jmp	.LBB34_82
.LBB34_82:                              # %if.end493
                                        #   in Loop: Header=BB34_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB34_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB34_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB34_84:                              # %if.end507
                                        #   in Loop: Header=BB34_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB34_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB34_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB34_86:                              # %if.end519
                                        #   in Loop: Header=BB34_68 Depth=1
	jmp	.LBB34_87
.LBB34_87:                              # %for.inc520
                                        #   in Loop: Header=BB34_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB34_68
.LBB34_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB34_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_93 Depth 2
                                        #     Child Loop BB34_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB34_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_91:                              # %land.end531
                                        #   in Loop: Header=BB34_89 Depth=1
	testb	$1, %al
	jne	.LBB34_92
	jmp	.LBB34_102
.LBB34_92:                              # %for.body533
                                        #   in Loop: Header=BB34_89 Depth=1
	movl	$0, -16(%rbp)
.LBB34_93:                              # %for.cond534
                                        #   Parent Loop BB34_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB34_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB34_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB34_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_93
.LBB34_96:                              # %for.end546
                                        #   in Loop: Header=BB34_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB34_97:                              # %for.cond563
                                        #   Parent Loop BB34_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB34_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB34_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB34_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_97
.LBB34_100:                             # %for.end588
                                        #   in Loop: Header=BB34_89 Depth=1
	jmp	.LBB34_101
.LBB34_101:                             # %for.inc589
                                        #   in Loop: Header=BB34_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_89
.LBB34_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB34_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_107 Depth 2
                                        #     Child Loop BB34_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB34_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_105:                             # %land.end598
                                        #   in Loop: Header=BB34_103 Depth=1
	testb	$1, %al
	jne	.LBB34_106
	jmp	.LBB34_119
.LBB34_106:                             # %for.body600
                                        #   in Loop: Header=BB34_103 Depth=1
	movl	$0, -12(%rbp)
.LBB34_107:                             # %for.cond601
                                        #   Parent Loop BB34_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB34_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB34_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_107
.LBB34_110:                             # %for.end613
                                        #   in Loop: Header=BB34_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_111:                             # %for.cond630
                                        #   Parent Loop BB34_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB34_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB34_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB34_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB34_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB34_115
.LBB34_114:                             # %if.else680
                                        #   in Loop: Header=BB34_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB34_115:                             # %if.end717
                                        #   in Loop: Header=BB34_111 Depth=2
	jmp	.LBB34_116
.LBB34_116:                             # %for.inc718
                                        #   in Loop: Header=BB34_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_111
.LBB34_117:                             # %for.end720
                                        #   in Loop: Header=BB34_103 Depth=1
	jmp	.LBB34_118
.LBB34_118:                             # %for.inc721
                                        #   in Loop: Header=BB34_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_103
.LBB34_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB34_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_122 Depth 2
                                        #       Child Loop BB34_124 Depth 3
                                        #       Child Loop BB34_143 Depth 3
                                        #         Child Loop BB34_147 Depth 4
                                        #         Child Loop BB34_151 Depth 4
                                        #       Child Loop BB34_157 Depth 3
                                        #         Child Loop BB34_161 Depth 4
                                        #         Child Loop BB34_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB34_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB34_120 Depth=1
	movl	$0, -20(%rbp)
.LBB34_122:                             # %for.cond728
                                        #   Parent Loop BB34_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_124 Depth 3
                                        #       Child Loop BB34_143 Depth 3
                                        #         Child Loop BB34_147 Depth 4
                                        #         Child Loop BB34_151 Depth 4
                                        #       Child Loop BB34_157 Depth 3
                                        #         Child Loop BB34_161 Depth 4
                                        #         Child Loop BB34_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB34_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB34_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB34_124:                             # %for.cond751
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB34_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB34_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB34_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB34_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB34_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB34_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB34_129
.LBB34_128:                             # %if.then762
                                        #   in Loop: Header=BB34_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_130
.LBB34_129:                             # %if.else771
                                        #   in Loop: Header=BB34_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB34_130:                             # %if.end780
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB34_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB34_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB34_133
.LBB34_132:                             # %if.else793
                                        #   in Loop: Header=BB34_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB34_133:                             # %if.end818
                                        #   in Loop: Header=BB34_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB34_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB34_135:                             # %if.end836
                                        #   in Loop: Header=BB34_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB34_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB34_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB34_139
.LBB34_138:                             # %if.else871
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB34_139:                             # %if.end889
                                        #   in Loop: Header=BB34_124 Depth=3
	jmp	.LBB34_140
.LBB34_140:                             # %if.end890
                                        #   in Loop: Header=BB34_124 Depth=3
	jmp	.LBB34_141
.LBB34_141:                             # %for.inc891
                                        #   in Loop: Header=BB34_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB34_124
.LBB34_142:                             # %for.end893
                                        #   in Loop: Header=BB34_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB34_143:                             # %for.cond896
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_147 Depth 4
                                        #         Child Loop BB34_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB34_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB34_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_145:                             # %land.end902
                                        #   in Loop: Header=BB34_143 Depth=3
	testb	$1, %al
	jne	.LBB34_146
	jmp	.LBB34_156
.LBB34_146:                             # %for.body904
                                        #   in Loop: Header=BB34_143 Depth=3
	movl	$0, -16(%rbp)
.LBB34_147:                             # %for.cond905
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        #       Parent Loop BB34_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB34_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB34_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB34_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_147
.LBB34_150:                             # %for.end921
                                        #   in Loop: Header=BB34_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB34_151:                             # %for.cond940
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        #       Parent Loop BB34_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB34_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB34_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB34_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_151
.LBB34_154:                             # %for.end973
                                        #   in Loop: Header=BB34_143 Depth=3
	jmp	.LBB34_155
.LBB34_155:                             # %for.inc974
                                        #   in Loop: Header=BB34_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_143
.LBB34_156:                             # %for.end976
                                        #   in Loop: Header=BB34_122 Depth=2
	movl	$0, -16(%rbp)
.LBB34_157:                             # %for.cond977
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_161 Depth 4
                                        #         Child Loop BB34_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB34_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB34_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB34_159:                             # %land.end983
                                        #   in Loop: Header=BB34_157 Depth=3
	testb	$1, %al
	jne	.LBB34_160
	jmp	.LBB34_170
.LBB34_160:                             # %for.body985
                                        #   in Loop: Header=BB34_157 Depth=3
	movl	$0, -12(%rbp)
.LBB34_161:                             # %for.cond986
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        #       Parent Loop BB34_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB34_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB34_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB34_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_161
.LBB34_164:                             # %for.end1002
                                        #   in Loop: Header=BB34_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB34_165:                             # %for.cond1021
                                        #   Parent Loop BB34_120 Depth=1
                                        #     Parent Loop BB34_122 Depth=2
                                        #       Parent Loop BB34_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB34_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB34_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_165
.LBB34_168:                             # %for.end1054
                                        #   in Loop: Header=BB34_157 Depth=3
	jmp	.LBB34_169
.LBB34_169:                             # %for.inc1055
                                        #   in Loop: Header=BB34_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_157
.LBB34_170:                             # %for.end1057
                                        #   in Loop: Header=BB34_122 Depth=2
	jmp	.LBB34_171
.LBB34_171:                             # %for.inc1058
                                        #   in Loop: Header=BB34_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_122
.LBB34_172:                             # %for.end1060
                                        #   in Loop: Header=BB34_120 Depth=1
	jmp	.LBB34_173
.LBB34_173:                             # %for.inc1061
                                        #   in Loop: Header=BB34_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_120
.LBB34_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB34_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB34_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB34_176 Depth=1
	movl	$0, -16(%rbp)
.LBB34_178:                             # %for.cond1071
                                        #   Parent Loop BB34_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB34_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB34_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB34_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_178
.LBB34_181:                             # %for.end1093
                                        #   in Loop: Header=BB34_176 Depth=1
	jmp	.LBB34_182
.LBB34_182:                             # %for.inc1094
                                        #   in Loop: Header=BB34_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_176
.LBB34_183:                             # %for.end1096
	jmp	.LBB34_196
.LBB34_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB34_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB34_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB34_185 Depth=1
	movl	$0, -16(%rbp)
.LBB34_187:                             # %for.cond1102
                                        #   Parent Loop BB34_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB34_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB34_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB34_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB34_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB34_191
.LBB34_190:                             # %if.else1125
                                        #   in Loop: Header=BB34_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB34_191:                             # %if.end1145
                                        #   in Loop: Header=BB34_187 Depth=2
	jmp	.LBB34_192
.LBB34_192:                             # %for.inc1146
                                        #   in Loop: Header=BB34_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_187
.LBB34_193:                             # %for.end1148
                                        #   in Loop: Header=BB34_185 Depth=1
	jmp	.LBB34_194
.LBB34_194:                             # %for.inc1149
                                        #   in Loop: Header=BB34_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_185
.LBB34_195:                             # %for.end1151
	jmp	.LBB34_196
.LBB34_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB34_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB34_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB34_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB34_198 Depth=1
	movl	$0, -16(%rbp)
.LBB34_200:                             # %for.cond1160
                                        #   Parent Loop BB34_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB34_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB34_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB34_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB34_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB34_213
.LBB34_203:                             # %if.else1186
                                        #   in Loop: Header=BB34_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB34_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB34_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB34_206
.LBB34_205:                             # %cond.false
                                        #   in Loop: Header=BB34_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB34_206:                             # %cond.end
                                        #   in Loop: Header=BB34_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB34_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB34_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB34_212
.LBB34_208:                             # %cond.false1229
                                        #   in Loop: Header=BB34_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB34_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB34_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB34_211
.LBB34_210:                             # %cond.false1250
                                        #   in Loop: Header=BB34_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB34_211:                             # %cond.end1268
                                        #   in Loop: Header=BB34_200 Depth=2
.LBB34_212:                             # %cond.end1270
                                        #   in Loop: Header=BB34_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB34_213:                             # %if.end1282
                                        #   in Loop: Header=BB34_200 Depth=2
	jmp	.LBB34_214
.LBB34_214:                             # %for.inc1283
                                        #   in Loop: Header=BB34_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_200
.LBB34_215:                             # %for.end1285
                                        #   in Loop: Header=BB34_198 Depth=1
	jmp	.LBB34_216
.LBB34_216:                             # %for.inc1286
                                        #   in Loop: Header=BB34_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_198
.LBB34_217:                             # %for.end1288
	jmp	.LBB34_218
.LBB34_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$2021226574, -132(%rbp) # imm = 0x7879784E
	jne	.LBB34_220
.LBB34_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_219
.Lfunc_end34:
	.size	dct_luma_16x16.25, .Lfunc_end34-dct_luma_16x16.25
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.26         # -- Begin function copyblock_sp.26
	.p2align	4, 0x90
	.type	copyblock_sp.26,@function
copyblock_sp.26:                        # @copyblock_sp.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$820282845, -88(%rbp)   # imm = 0x30E485DD
	movl	%edi, -80(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -84(%rbp)
	movl	-76(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond4
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc17
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB35_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	$0, -8(%rbp)
.LBB35_11:                              # %for.cond24
                                        #   Parent Loop BB35_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB35_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_11
.LBB35_14:                              # %for.end53
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB35_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_9
.LBB35_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB35_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -4(%rbp)
.LBB35_19:                              # %for.cond86
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_19
.LBB35_22:                              # %for.end115
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_17
.LBB35_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB35_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	$0, -8(%rbp)
.LBB35_27:                              # %for.cond149
                                        #   Parent Loop BB35_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-84(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_27
.LBB35_30:                              # %for.end184
                                        #   in Loop: Header=BB35_25 Depth=1
	jmp	.LBB35_31
.LBB35_31:                              # %for.inc185
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_25
.LBB35_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB35_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_35 Depth 2
                                        #     Child Loop BB35_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	$0, -8(%rbp)
.LBB35_35:                              # %for.cond192
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB35_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB35_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_35
.LBB35_38:                              # %for.end205
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB35_39:                              # %for.cond224
                                        #   Parent Loop BB35_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB35_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_39
.LBB35_42:                              # %for.end251
                                        #   in Loop: Header=BB35_33 Depth=1
	jmp	.LBB35_43
.LBB35_43:                              # %for.inc252
                                        #   in Loop: Header=BB35_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_33
.LBB35_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB35_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_47 Depth 2
                                        #     Child Loop BB35_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	$0, -4(%rbp)
.LBB35_47:                              # %for.cond259
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB35_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB35_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_47
.LBB35_50:                              # %for.end272
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB35_51:                              # %for.cond291
                                        #   Parent Loop BB35_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB35_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_55
.LBB35_54:                              # %cond.false
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_55:                              # %cond.end
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_61
.LBB35_57:                              # %cond.false316
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_60
.LBB35_59:                              # %cond.false327
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_60:                              # %cond.end335
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_61:                              # %cond.end337
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB35_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB35_64
.LBB35_63:                              # %cond.false355
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB35_64:                              # %cond.end363
                                        #   in Loop: Header=BB35_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB35_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB35_70
.LBB35_66:                              # %cond.false369
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB35_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB35_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB35_69
.LBB35_68:                              # %cond.false380
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB35_69:                              # %cond.end388
                                        #   in Loop: Header=BB35_51 Depth=2
.LBB35_70:                              # %cond.end390
                                        #   in Loop: Header=BB35_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB35_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_51
.LBB35_72:                              # %for.end399
                                        #   in Loop: Header=BB35_45 Depth=1
	jmp	.LBB35_73
.LBB35_73:                              # %for.inc400
                                        #   in Loop: Header=BB35_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_45
.LBB35_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	$0, -8(%rbp)
.LBB35_77:                              # %for.cond407
                                        #   Parent Loop BB35_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB35_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB35_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_77
.LBB35_80:                              # %for.end427
                                        #   in Loop: Header=BB35_75 Depth=1
	jmp	.LBB35_81
.LBB35_81:                              # %for.inc428
                                        #   in Loop: Header=BB35_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_82:                              # %for.end430
	cmpl	$820282845, -88(%rbp)   # imm = 0x30E485DD
	jne	.LBB35_84
.LBB35_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_83
.Lfunc_end35:
	.size	copyblock_sp.26, .Lfunc_end35-copyblock_sp.26
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.27         # -- Begin function copyblock_sp.27
	.p2align	4, 0x90
	.type	copyblock_sp.27,@function
copyblock_sp.27:                        # @copyblock_sp.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$17024492, -88(%rbp)    # imm = 0x103C5EC
	movl	%edi, -68(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond4
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_6:                               # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_7
.LBB36_7:                               # %for.inc17
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB36_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB36_9 Depth=1
	movl	$0, -8(%rbp)
.LBB36_11:                              # %for.cond24
                                        #   Parent Loop BB36_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB36_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB36_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB36_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_11
.LBB36_14:                              # %for.end53
                                        #   in Loop: Header=BB36_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB36_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_9
.LBB36_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB36_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	$0, -4(%rbp)
.LBB36_19:                              # %for.cond86
                                        #   Parent Loop BB36_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB36_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_19
.LBB36_22:                              # %for.end115
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_17
.LBB36_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB36_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	$0, -8(%rbp)
.LBB36_27:                              # %for.cond149
                                        #   Parent Loop BB36_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-80(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_27
.LBB36_30:                              # %for.end184
                                        #   in Loop: Header=BB36_25 Depth=1
	jmp	.LBB36_31
.LBB36_31:                              # %for.inc185
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_25
.LBB36_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB36_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_35 Depth 2
                                        #     Child Loop BB36_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	$0, -8(%rbp)
.LBB36_35:                              # %for.cond192
                                        #   Parent Loop BB36_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB36_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_35
.LBB36_38:                              # %for.end205
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB36_39:                              # %for.cond224
                                        #   Parent Loop BB36_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB36_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB36_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB36_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_39
.LBB36_42:                              # %for.end251
                                        #   in Loop: Header=BB36_33 Depth=1
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc252
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_33
.LBB36_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB36_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_47 Depth 2
                                        #     Child Loop BB36_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB36_45 Depth=1
	movl	$0, -4(%rbp)
.LBB36_47:                              # %for.cond259
                                        #   Parent Loop BB36_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB36_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_47
.LBB36_50:                              # %for.end272
                                        #   in Loop: Header=BB36_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB36_51:                              # %for.cond291
                                        #   Parent Loop BB36_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB36_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB36_55
.LBB36_54:                              # %cond.false
                                        #   in Loop: Header=BB36_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_55:                              # %cond.end
                                        #   in Loop: Header=BB36_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB36_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB36_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_61
.LBB36_57:                              # %cond.false316
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB36_60
.LBB36_59:                              # %cond.false327
                                        #   in Loop: Header=BB36_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_60:                              # %cond.end335
                                        #   in Loop: Header=BB36_51 Depth=2
.LBB36_61:                              # %cond.end337
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB36_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB36_64
.LBB36_63:                              # %cond.false355
                                        #   in Loop: Header=BB36_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB36_64:                              # %cond.end363
                                        #   in Loop: Header=BB36_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB36_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB36_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB36_70
.LBB36_66:                              # %cond.false369
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB36_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB36_69
.LBB36_68:                              # %cond.false380
                                        #   in Loop: Header=BB36_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB36_69:                              # %cond.end388
                                        #   in Loop: Header=BB36_51 Depth=2
.LBB36_70:                              # %cond.end390
                                        #   in Loop: Header=BB36_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB36_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_51
.LBB36_72:                              # %for.end399
                                        #   in Loop: Header=BB36_45 Depth=1
	jmp	.LBB36_73
.LBB36_73:                              # %for.inc400
                                        #   in Loop: Header=BB36_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_45
.LBB36_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB36_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB36_75 Depth=1
	movl	$0, -8(%rbp)
.LBB36_77:                              # %for.cond407
                                        #   Parent Loop BB36_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB36_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB36_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_77
.LBB36_80:                              # %for.end427
                                        #   in Loop: Header=BB36_75 Depth=1
	jmp	.LBB36_81
.LBB36_81:                              # %for.inc428
                                        #   in Loop: Header=BB36_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_75
.LBB36_82:                              # %for.end430
	cmpl	$17024492, -88(%rbp)    # imm = 0x103C5EC
	jne	.LBB36_84
.LBB36_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_83
.Lfunc_end36:
	.size	copyblock_sp.27, .Lfunc_end36-copyblock_sp.27
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.28        # -- Begin function dct_chroma4x4.28
	.p2align	4, 0x90
	.type	dct_chroma4x4.28,@function
dct_chroma4x4.28:                       # @dct_chroma4x4.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$500690090, -148(%rbp)  # imm = 0x1DD7ECAA
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB37_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB37_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB37_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB37_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB37_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB37_8
.LBB37_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB37_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB37_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	$0, -16(%rbp)
.LBB37_12:                              # %for.cond31
                                        #   Parent Loop BB37_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB37_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_12
.LBB37_15:                              # %for.end
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_10
.LBB37_17:                              # %for.end92
	jmp	.LBB37_18
.LBB37_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB37_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB37_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	$0, -12(%rbp)
.LBB37_22:                              # %for.cond99
                                        #   Parent Loop BB37_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB37_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_22
.LBB37_25:                              # %for.end132
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB37_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_20
.LBB37_27:                              # %for.end165
	jmp	.LBB37_28
.LBB37_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_34
.LBB37_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB37_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_33
.LBB37_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_33:                              # %if.end213
	jmp	.LBB37_34
.LBB37_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-104(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB37_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_46
.LBB37_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB37_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB37_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_40
.LBB37_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_40:                              # %if.end290
	jmp	.LBB37_45
.LBB37_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB37_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB37_44
.LBB37_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB37_44:                              # %if.end328
	jmp	.LBB37_45
.LBB37_45:                              # %if.end329
	jmp	.LBB37_46
.LBB37_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB37_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB37_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB37_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB37_54
.LBB37_50:                              # %if.else352
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB37_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_53
.LBB37_52:                              # %if.else381
                                        #   in Loop: Header=BB37_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB37_53:                              # %if.end407
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_54
.LBB37_54:                              # %if.end408
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB37_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB37_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB37_58
.LBB37_57:                              # %if.then415
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	$1, -132(%rbp)
.LBB37_58:                              # %if.end416
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB37_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB37_70
.LBB37_60:                              # %if.else436
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB37_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB37_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB37_64
.LBB37_63:                              # %if.else457
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB37_64:                              # %if.end472
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_65:                              # %if.else473
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB37_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB37_68
.LBB37_67:                              # %if.else488
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB37_68:                              # %if.end500
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_69
.LBB37_69:                              # %if.end501
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_70
.LBB37_70:                              # %if.end502
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %if.end503
                                        #   in Loop: Header=BB37_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB37_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB37_73:                              # %if.end511
                                        #   in Loop: Header=BB37_47 Depth=1
	jmp	.LBB37_74
.LBB37_74:                              # %for.inc512
                                        #   in Loop: Header=BB37_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB37_47
.LBB37_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB37_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB37_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_79 Depth 2
                                        #     Child Loop BB37_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	$0, -16(%rbp)
.LBB37_79:                              # %for.cond523
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB37_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB37_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_79
.LBB37_82:                              # %for.end536
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB37_83:                              # %for.cond555
                                        #   Parent Loop BB37_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB37_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB37_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_83
.LBB37_86:                              # %for.end582
                                        #   in Loop: Header=BB37_77 Depth=1
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc583
                                        #   in Loop: Header=BB37_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_77
.LBB37_88:                              # %for.end585
	jmp	.LBB37_89
.LBB37_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB37_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB37_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
                                        #     Child Loop BB37_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB37_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -12(%rbp)
.LBB37_93:                              # %for.cond593
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB37_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_93
.LBB37_96:                              # %for.end606
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB37_97:                              # %for.cond625
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB37_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB37_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_97
.LBB37_100:                             # %for.end656
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_101
.LBB37_101:                             # %for.inc657
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_91
.LBB37_102:                             # %for.end659
	jmp	.LBB37_103
.LBB37_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$500690090, -148(%rbp)  # imm = 0x1DD7ECAA
	jne	.LBB37_105
.LBB37_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_104
.Lfunc_end37:
	.size	dct_chroma4x4.28, .Lfunc_end37-dct_chroma4x4.28
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.29           # -- Begin function dct_chroma.29
	.p2align	4, 0x90
	.type	dct_chroma.29,@function
dct_chroma.29:                          # @dct_chroma.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$121661501, -380(%rbp)  # imm = 0x740683D
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB38_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB38_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB38_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB38_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB38_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB38_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB38_11
.LBB38_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB38_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB38_10
.LBB38_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB38_10:                              # %cond.end
.LBB38_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB38_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB38_14
.LBB38_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB38_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB38_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB38_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB38_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_19 Depth 2
                                        #       Child Loop BB38_21 Depth 3
                                        #         Child Loop BB38_25 Depth 4
                                        #       Child Loop BB38_31 Depth 3
                                        #         Child Loop BB38_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	$0, -28(%rbp)
.LBB38_19:                              # %for.cond56
                                        #   Parent Loop BB38_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_21 Depth 3
                                        #         Child Loop BB38_25 Depth 4
                                        #       Child Loop BB38_31 Depth 3
                                        #         Child Loop BB38_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	$0, -12(%rbp)
.LBB38_21:                              # %for.cond60
                                        #   Parent Loop BB38_17 Depth=1
                                        #     Parent Loop BB38_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB38_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_23:                              # %land.end64
                                        #   in Loop: Header=BB38_21 Depth=3
	testb	$1, %al
	jne	.LBB38_24
	jmp	.LBB38_30
.LBB38_24:                              # %for.body66
                                        #   in Loop: Header=BB38_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB38_25:                              # %for.cond68
                                        #   Parent Loop BB38_17 Depth=1
                                        #     Parent Loop BB38_19 Depth=2
                                        #       Parent Loop BB38_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB38_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB38_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB38_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end
                                        #   in Loop: Header=BB38_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB38_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_21
.LBB38_30:                              # %for.end141
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	$0, -16(%rbp)
.LBB38_31:                              # %for.cond142
                                        #   Parent Loop BB38_17 Depth=1
                                        #     Parent Loop BB38_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB38_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_33:                              # %land.end148
                                        #   in Loop: Header=BB38_31 Depth=3
	testb	$1, %al
	jne	.LBB38_34
	jmp	.LBB38_40
.LBB38_34:                              # %for.body150
                                        #   in Loop: Header=BB38_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB38_35:                              # %for.cond152
                                        #   Parent Loop BB38_17 Depth=1
                                        #     Parent Loop BB38_19 Depth=2
                                        #       Parent Loop BB38_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB38_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB38_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_35
.LBB38_38:                              # %for.end189
                                        #   in Loop: Header=BB38_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB38_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_31
.LBB38_40:                              # %for.end230
                                        #   in Loop: Header=BB38_19 Depth=2
	jmp	.LBB38_41
.LBB38_41:                              # %for.inc231
                                        #   in Loop: Header=BB38_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_19
.LBB38_42:                              # %for.end233
                                        #   in Loop: Header=BB38_17 Depth=1
	jmp	.LBB38_43
.LBB38_43:                              # %for.inc234
                                        #   in Loop: Header=BB38_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_17
.LBB38_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB38_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB38_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB38_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB38_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB38_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB38_50
.LBB38_49:                              # %if.else
                                        #   in Loop: Header=BB38_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB38_50:                              # %if.end349
                                        #   in Loop: Header=BB38_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB38_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB38_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB38_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB38_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB38_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB38_54:                              # %if.end359
                                        #   in Loop: Header=BB38_46 Depth=1
	jmp	.LBB38_55
.LBB38_55:                              # %if.end360
                                        #   in Loop: Header=BB38_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB38_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB38_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	$1, %eax
	jmp	.LBB38_59
.LBB38_58:                              # %cond.false370
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	-132(%rbp), %eax
.LBB38_59:                              # %cond.end371
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB38_60:                              # %if.end384
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB38_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB38_46
.LBB38_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB38_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB38_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB38_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB38_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB38_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB38_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB38_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB38_68
.LBB38_67:                              # %if.else447
                                        #   in Loop: Header=BB38_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB38_68:                              # %if.end461
                                        #   in Loop: Header=BB38_63 Depth=1
	jmp	.LBB38_73
.LBB38_69:                              # %if.else462
                                        #   in Loop: Header=BB38_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB38_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB38_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB38_72
.LBB38_71:                              # %if.else479
                                        #   in Loop: Header=BB38_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB38_72:                              # %if.end493
                                        #   in Loop: Header=BB38_63 Depth=1
	jmp	.LBB38_73
.LBB38_73:                              # %if.end494
                                        #   in Loop: Header=BB38_63 Depth=1
	jmp	.LBB38_74
.LBB38_74:                              # %for.inc495
                                        #   in Loop: Header=BB38_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_63
.LBB38_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB38_213
.LBB38_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB38_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB38_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	$0, -16(%rbp)
.LBB38_80:                              # %for.cond523
                                        #   Parent Loop BB38_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB38_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB38_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_80
.LBB38_83:                              # %for.end541
                                        #   in Loop: Header=BB38_78 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc542
                                        #   in Loop: Header=BB38_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_78
.LBB38_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB38_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB38_86 Depth=1
	movl	$0, -12(%rbp)
.LBB38_88:                              # %for.cond605
                                        #   Parent Loop BB38_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB38_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB38_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_88
.LBB38_91:                              # %for.end634
                                        #   in Loop: Header=BB38_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB38_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_86
.LBB38_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB38_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB38_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB38_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB38_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB38_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB38_98
.LBB38_97:                              # %if.else700
                                        #   in Loop: Header=BB38_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB38_98:                              # %if.end723
                                        #   in Loop: Header=BB38_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB38_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB38_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	$1, %eax
	jmp	.LBB38_102
.LBB38_101:                             # %cond.false735
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	-132(%rbp), %eax
.LBB38_102:                             # %cond.end736
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB38_103:                             # %if.end748
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB38_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB38_94
.LBB38_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB38_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_108 Depth 2
                                        #     Child Loop BB38_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB38_106 Depth=1
	movl	$0, -12(%rbp)
.LBB38_108:                             # %for.cond823
                                        #   Parent Loop BB38_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB38_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB38_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_108
.LBB38_111:                             # %for.end835
                                        #   in Loop: Header=BB38_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_112:                             # %for.cond852
                                        #   Parent Loop BB38_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB38_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB38_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB38_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB38_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB38_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB38_117
.LBB38_116:                             # %if.else915
                                        #   in Loop: Header=BB38_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB38_117:                             # %if.end968
                                        #   in Loop: Header=BB38_112 Depth=2
	jmp	.LBB38_122
.LBB38_118:                             # %if.else969
                                        #   in Loop: Header=BB38_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB38_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB38_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB38_121
.LBB38_120:                             # %if.else1019
                                        #   in Loop: Header=BB38_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB38_121:                             # %if.end1066
                                        #   in Loop: Header=BB38_112 Depth=2
	jmp	.LBB38_122
.LBB38_122:                             # %if.end1067
                                        #   in Loop: Header=BB38_112 Depth=2
	jmp	.LBB38_123
.LBB38_123:                             # %for.inc1068
                                        #   in Loop: Header=BB38_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_112
.LBB38_124:                             # %for.end1070
                                        #   in Loop: Header=BB38_106 Depth=1
	jmp	.LBB38_125
.LBB38_125:                             # %for.inc1071
                                        #   in Loop: Header=BB38_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_106
.LBB38_126:                             # %for.end1073
	jmp	.LBB38_212
.LBB38_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB38_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB38_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB38_129 Depth=1
	movl	$0, -16(%rbp)
.LBB38_131:                             # %for.cond1083
                                        #   Parent Loop BB38_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB38_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB38_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_131
.LBB38_134:                             # %for.end1101
                                        #   in Loop: Header=BB38_129 Depth=1
	jmp	.LBB38_135
.LBB38_135:                             # %for.inc1102
                                        #   in Loop: Header=BB38_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_129
.LBB38_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB38_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB38_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_139:                             # %land.end1111
                                        #   in Loop: Header=BB38_137 Depth=1
	testb	$1, %al
	jne	.LBB38_140
	jmp	.LBB38_146
.LBB38_140:                             # %for.body1113
                                        #   in Loop: Header=BB38_137 Depth=1
	movl	$0, -16(%rbp)
.LBB38_141:                             # %for.cond1114
                                        #   Parent Loop BB38_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB38_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB38_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_141
.LBB38_144:                             # %for.end1143
                                        #   in Loop: Header=BB38_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB38_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_137
.LBB38_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB38_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB38_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_149:                             # %land.end1177
                                        #   in Loop: Header=BB38_147 Depth=1
	testb	$1, %al
	jne	.LBB38_150
	jmp	.LBB38_156
.LBB38_150:                             # %for.body1179
                                        #   in Loop: Header=BB38_147 Depth=1
	movl	$0, -12(%rbp)
.LBB38_151:                             # %for.cond1180
                                        #   Parent Loop BB38_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB38_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB38_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_151
.LBB38_154:                             # %for.end1209
                                        #   in Loop: Header=BB38_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB38_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_147
.LBB38_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB38_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB38_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB38_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB38_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB38_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB38_164
.LBB38_160:                             # %if.else1261
                                        #   in Loop: Header=BB38_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB38_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB38_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB38_163
.LBB38_162:                             # %if.else1287
                                        #   in Loop: Header=BB38_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB38_163:                             # %if.end1310
                                        #   in Loop: Header=BB38_157 Depth=1
	jmp	.LBB38_164
.LBB38_164:                             # %if.end1311
                                        #   in Loop: Header=BB38_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB38_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB38_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	$1, %eax
	jmp	.LBB38_168
.LBB38_167:                             # %cond.false1322
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	-132(%rbp), %eax
.LBB38_168:                             # %cond.end1323
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB38_169:                             # %if.end1335
                                        #   in Loop: Header=BB38_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB38_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB38_171:                             # %if.end1347
                                        #   in Loop: Header=BB38_157 Depth=1
	jmp	.LBB38_172
.LBB38_172:                             # %for.inc1348
                                        #   in Loop: Header=BB38_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB38_157
.LBB38_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB38_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_178 Depth 2
                                        #     Child Loop BB38_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB38_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB38_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_176:                             # %land.end1359
                                        #   in Loop: Header=BB38_174 Depth=1
	testb	$1, %al
	jne	.LBB38_177
	jmp	.LBB38_187
.LBB38_177:                             # %for.body1361
                                        #   in Loop: Header=BB38_174 Depth=1
	movl	$0, -16(%rbp)
.LBB38_178:                             # %for.cond1362
                                        #   Parent Loop BB38_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB38_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB38_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB38_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_178
.LBB38_181:                             # %for.end1374
                                        #   in Loop: Header=BB38_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB38_182:                             # %for.cond1391
                                        #   Parent Loop BB38_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB38_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB38_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB38_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_182
.LBB38_185:                             # %for.end1416
                                        #   in Loop: Header=BB38_174 Depth=1
	jmp	.LBB38_186
.LBB38_186:                             # %for.inc1417
                                        #   in Loop: Header=BB38_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_174
.LBB38_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB38_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_192 Depth 2
                                        #     Child Loop BB38_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB38_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_190:                             # %land.end1426
                                        #   in Loop: Header=BB38_188 Depth=1
	testb	$1, %al
	jne	.LBB38_191
	jmp	.LBB38_210
.LBB38_191:                             # %for.body1428
                                        #   in Loop: Header=BB38_188 Depth=1
	movl	$0, -12(%rbp)
.LBB38_192:                             # %for.cond1429
                                        #   Parent Loop BB38_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB38_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB38_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB38_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_192
.LBB38_195:                             # %for.end1441
                                        #   in Loop: Header=BB38_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_196:                             # %for.cond1458
                                        #   Parent Loop BB38_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB38_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB38_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB38_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB38_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB38_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB38_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB38_201
.LBB38_200:                             # %if.else1521
                                        #   in Loop: Header=BB38_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB38_201:                             # %if.end1574
                                        #   in Loop: Header=BB38_196 Depth=2
	jmp	.LBB38_206
.LBB38_202:                             # %if.else1575
                                        #   in Loop: Header=BB38_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB38_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB38_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB38_205
.LBB38_204:                             # %if.else1625
                                        #   in Loop: Header=BB38_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB38_205:                             # %if.end1672
                                        #   in Loop: Header=BB38_196 Depth=2
	jmp	.LBB38_206
.LBB38_206:                             # %if.end1673
                                        #   in Loop: Header=BB38_196 Depth=2
	jmp	.LBB38_207
.LBB38_207:                             # %for.inc1674
                                        #   in Loop: Header=BB38_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_196
.LBB38_208:                             # %for.end1676
                                        #   in Loop: Header=BB38_188 Depth=1
	jmp	.LBB38_209
.LBB38_209:                             # %for.inc1677
                                        #   in Loop: Header=BB38_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_188
.LBB38_210:                             # %for.end1679
	jmp	.LBB38_211
.LBB38_211:                             # %if.end1680
	jmp	.LBB38_212
.LBB38_212:                             # %if.end1681
	jmp	.LBB38_213
.LBB38_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB38_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_216 Depth 2
                                        #       Child Loop BB38_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB38_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB38_214 Depth=1
	movl	$0, -112(%rbp)
.LBB38_216:                             # %for.cond1689
                                        #   Parent Loop BB38_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB38_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB38_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB38_218:                             # %for.cond1722
                                        #   Parent Loop BB38_214 Depth=1
                                        #     Parent Loop BB38_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB38_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB38_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_223
.LBB38_222:                             # %if.then1731
                                        #   in Loop: Header=BB38_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_224
.LBB38_223:                             # %if.else1740
                                        #   in Loop: Header=BB38_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB38_224:                             # %if.end1749
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB38_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB38_230
.LBB38_226:                             # %if.else1761
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB38_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB38_229
.LBB38_228:                             # %if.else1792
                                        #   in Loop: Header=BB38_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB38_229:                             # %if.end1820
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_230
.LBB38_230:                             # %if.end1821
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB38_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB38_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB38_234
.LBB38_233:                             # %if.then1839
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB38_235
.LBB38_234:                             # %if.else1841
                                        #   in Loop: Header=BB38_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB38_235:                             # %if.end1848
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB38_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB38_247
.LBB38_237:                             # %if.else1872
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB38_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB38_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB38_241
.LBB38_240:                             # %if.else1893
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB38_241:                             # %if.end1908
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_246
.LBB38_242:                             # %if.else1909
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB38_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB38_245
.LBB38_244:                             # %if.else1924
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB38_245:                             # %if.end1936
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_246
.LBB38_246:                             # %if.end1937
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_247
.LBB38_247:                             # %if.end1938
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_248
.LBB38_248:                             # %if.end1939
                                        #   in Loop: Header=BB38_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB38_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_250:                             # %if.end1949
                                        #   in Loop: Header=BB38_218 Depth=3
	jmp	.LBB38_251
.LBB38_251:                             # %for.inc1950
                                        #   in Loop: Header=BB38_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB38_218
.LBB38_252:                             # %for.end1952
                                        #   in Loop: Header=BB38_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB38_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB38_216
.LBB38_254:                             # %for.end1957
                                        #   in Loop: Header=BB38_214 Depth=1
	jmp	.LBB38_255
.LBB38_255:                             # %for.inc1958
                                        #   in Loop: Header=BB38_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB38_214
.LBB38_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB38_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB38_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -116(%rbp)
.LBB38_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_261 Depth 2
                                        #       Child Loop BB38_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB38_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB38_259 Depth=1
	movl	$0, -112(%rbp)
.LBB38_261:                             # %for.cond1972
                                        #   Parent Loop BB38_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB38_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB38_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB38_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB38_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB38_264:                             # %if.end2016
                                        #   in Loop: Header=BB38_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB38_265:                             # %for.cond2018
                                        #   Parent Loop BB38_259 Depth=1
                                        #     Parent Loop BB38_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB38_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB38_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB38_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB38_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB38_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_270
.LBB38_269:                             # %if.then2030
                                        #   in Loop: Header=BB38_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_271
.LBB38_270:                             # %if.else2039
                                        #   in Loop: Header=BB38_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB38_271:                             # %if.end2048
                                        #   in Loop: Header=BB38_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB38_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB38_265
.LBB38_273:                             # %for.end2060
                                        #   in Loop: Header=BB38_261 Depth=2
	jmp	.LBB38_274
.LBB38_274:                             # %for.inc2061
                                        #   in Loop: Header=BB38_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB38_261
.LBB38_275:                             # %for.end2063
                                        #   in Loop: Header=BB38_259 Depth=1
	jmp	.LBB38_276
.LBB38_276:                             # %for.inc2064
                                        #   in Loop: Header=BB38_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB38_259
.LBB38_277:                             # %for.end2066
	jmp	.LBB38_278
.LBB38_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB38_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB38_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB38_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_285 Depth 2
                                        #       Child Loop BB38_287 Depth 3
                                        #         Child Loop BB38_289 Depth 4
                                        #         Child Loop BB38_293 Depth 4
                                        #       Child Loop BB38_299 Depth 3
                                        #         Child Loop BB38_303 Depth 4
                                        #         Child Loop BB38_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB38_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB38_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_283:                             # %land.end2079
                                        #   in Loop: Header=BB38_281 Depth=1
	testb	$1, %al
	jne	.LBB38_284
	jmp	.LBB38_340
.LBB38_284:                             # %for.body2081
                                        #   in Loop: Header=BB38_281 Depth=1
	movl	$0, -28(%rbp)
.LBB38_285:                             # %for.cond2082
                                        #   Parent Loop BB38_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_287 Depth 3
                                        #         Child Loop BB38_289 Depth 4
                                        #         Child Loop BB38_293 Depth 4
                                        #       Child Loop BB38_299 Depth 3
                                        #         Child Loop BB38_303 Depth 4
                                        #         Child Loop BB38_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB38_285 Depth=2
	movl	$0, -12(%rbp)
.LBB38_287:                             # %for.cond2087
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_289 Depth 4
                                        #         Child Loop BB38_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB38_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB38_287 Depth=3
	movl	$0, -16(%rbp)
.LBB38_289:                             # %for.cond2091
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        #       Parent Loop BB38_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB38_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB38_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB38_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_289
.LBB38_292:                             # %for.end2106
                                        #   in Loop: Header=BB38_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB38_293:                             # %for.cond2125
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        #       Parent Loop BB38_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB38_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB38_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB38_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_293
.LBB38_296:                             # %for.end2156
                                        #   in Loop: Header=BB38_287 Depth=3
	jmp	.LBB38_297
.LBB38_297:                             # %for.inc2157
                                        #   in Loop: Header=BB38_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_287
.LBB38_298:                             # %for.end2159
                                        #   in Loop: Header=BB38_285 Depth=2
	movl	$0, -16(%rbp)
.LBB38_299:                             # %for.cond2160
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_303 Depth 4
                                        #         Child Loop BB38_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB38_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB38_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB38_301:                             # %land.end2166
                                        #   in Loop: Header=BB38_299 Depth=3
	testb	$1, %al
	jne	.LBB38_302
	jmp	.LBB38_336
.LBB38_302:                             # %for.body2168
                                        #   in Loop: Header=BB38_299 Depth=3
	movl	$0, -12(%rbp)
.LBB38_303:                             # %for.cond2169
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        #       Parent Loop BB38_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB38_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB38_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB38_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_303
.LBB38_306:                             # %for.end2184
                                        #   in Loop: Header=BB38_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB38_307:                             # %for.cond2203
                                        #   Parent Loop BB38_281 Depth=1
                                        #     Parent Loop BB38_285 Depth=2
                                        #       Parent Loop BB38_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB38_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB38_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB38_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB38_312
.LBB38_311:                             # %cond.false2231
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB38_312:                             # %cond.end2250
                                        #   in Loop: Header=BB38_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB38_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB38_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB38_318
.LBB38_314:                             # %cond.false2257
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB38_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB38_317
.LBB38_316:                             # %cond.false2279
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB38_317:                             # %cond.end2298
                                        #   in Loop: Header=BB38_307 Depth=4
.LBB38_318:                             # %cond.end2300
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB38_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB38_321
.LBB38_320:                             # %cond.false2333
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB38_321:                             # %cond.end2352
                                        #   in Loop: Header=BB38_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB38_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB38_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB38_327
.LBB38_323:                             # %cond.false2359
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB38_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB38_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB38_326
.LBB38_325:                             # %cond.false2381
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB38_326:                             # %cond.end2400
                                        #   in Loop: Header=BB38_307 Depth=4
.LBB38_327:                             # %cond.end2402
                                        #   in Loop: Header=BB38_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB38_332
.LBB38_328:                             # %if.else2412
                                        #   in Loop: Header=BB38_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB38_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB38_331
.LBB38_330:                             # %if.else2439
                                        #   in Loop: Header=BB38_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_331:                             # %if.end2468
                                        #   in Loop: Header=BB38_307 Depth=4
	jmp	.LBB38_332
.LBB38_332:                             # %if.end2469
                                        #   in Loop: Header=BB38_307 Depth=4
	jmp	.LBB38_333
.LBB38_333:                             # %for.inc2470
                                        #   in Loop: Header=BB38_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_307
.LBB38_334:                             # %for.end2472
                                        #   in Loop: Header=BB38_299 Depth=3
	jmp	.LBB38_335
.LBB38_335:                             # %for.inc2473
                                        #   in Loop: Header=BB38_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_299
.LBB38_336:                             # %for.end2475
                                        #   in Loop: Header=BB38_285 Depth=2
	jmp	.LBB38_337
.LBB38_337:                             # %for.inc2476
                                        #   in Loop: Header=BB38_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_285
.LBB38_338:                             # %for.end2478
                                        #   in Loop: Header=BB38_281 Depth=1
	jmp	.LBB38_339
.LBB38_339:                             # %for.inc2479
                                        #   in Loop: Header=BB38_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_281
.LBB38_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB38_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB38_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB38_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB38_342 Depth=1
	movl	$0, -16(%rbp)
.LBB38_344:                             # %for.cond2490
                                        #   Parent Loop BB38_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB38_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB38_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB38_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB38_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB38_348
.LBB38_347:                             # %if.else2518
                                        #   in Loop: Header=BB38_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB38_348:                             # %if.end2536
                                        #   in Loop: Header=BB38_344 Depth=2
	jmp	.LBB38_349
.LBB38_349:                             # %for.inc2537
                                        #   in Loop: Header=BB38_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_344
.LBB38_350:                             # %for.end2539
                                        #   in Loop: Header=BB38_342 Depth=1
	jmp	.LBB38_351
.LBB38_351:                             # %for.inc2540
                                        #   in Loop: Header=BB38_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_342
.LBB38_352:                             # %for.end2542
	jmp	.LBB38_353
.LBB38_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$121661501, -380(%rbp)  # imm = 0x740683D
	jne	.LBB38_355
.LBB38_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_354
.Lfunc_end38:
	.size	dct_chroma.29, .Lfunc_end38-dct_chroma.29
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.30           # -- Begin function dct_chroma.30
	.p2align	4, 0x90
	.type	dct_chroma.30,@function
dct_chroma.30:                          # @dct_chroma.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$1410171061, -380(%rbp) # imm = 0x540D80B5
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB39_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB39_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB39_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -196(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB39_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB39_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB39_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB39_11
.LBB39_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB39_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB39_10
.LBB39_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB39_10:                              # %cond.end
.LBB39_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB39_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB39_14
.LBB39_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB39_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB39_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB39_16:                              # %if.end
	movl	$0, -24(%rbp)
.LBB39_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_19 Depth 2
                                        #       Child Loop BB39_21 Depth 3
                                        #         Child Loop BB39_25 Depth 4
                                        #       Child Loop BB39_31 Depth 3
                                        #         Child Loop BB39_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	$0, -28(%rbp)
.LBB39_19:                              # %for.cond56
                                        #   Parent Loop BB39_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_21 Depth 3
                                        #         Child Loop BB39_25 Depth 4
                                        #       Child Loop BB39_31 Depth 3
                                        #         Child Loop BB39_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	$0, -12(%rbp)
.LBB39_21:                              # %for.cond60
                                        #   Parent Loop BB39_17 Depth=1
                                        #     Parent Loop BB39_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB39_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_23:                              # %land.end64
                                        #   in Loop: Header=BB39_21 Depth=3
	testb	$1, %al
	jne	.LBB39_24
	jmp	.LBB39_30
.LBB39_24:                              # %for.body66
                                        #   in Loop: Header=BB39_21 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB39_25:                              # %for.cond68
                                        #   Parent Loop BB39_17 Depth=1
                                        #     Parent Loop BB39_19 Depth=2
                                        #       Parent Loop BB39_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB39_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB39_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB39_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_25
.LBB39_28:                              # %for.end
                                        #   in Loop: Header=BB39_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-28(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB39_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_21
.LBB39_30:                              # %for.end141
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	$0, -16(%rbp)
.LBB39_31:                              # %for.cond142
                                        #   Parent Loop BB39_17 Depth=1
                                        #     Parent Loop BB39_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB39_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_33:                              # %land.end148
                                        #   in Loop: Header=BB39_31 Depth=3
	testb	$1, %al
	jne	.LBB39_34
	jmp	.LBB39_40
.LBB39_34:                              # %for.body150
                                        #   in Loop: Header=BB39_31 Depth=3
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB39_35:                              # %for.cond152
                                        #   Parent Loop BB39_17 Depth=1
                                        #     Parent Loop BB39_19 Depth=2
                                        #       Parent Loop BB39_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB39_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB39_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB39_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_35
.LBB39_38:                              # %for.end189
                                        #   in Loop: Header=BB39_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB39_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_31
.LBB39_40:                              # %for.end230
                                        #   in Loop: Header=BB39_19 Depth=2
	jmp	.LBB39_41
.LBB39_41:                              # %for.inc231
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_19
.LBB39_42:                              # %for.end233
                                        #   in Loop: Header=BB39_17 Depth=1
	jmp	.LBB39_43
.LBB39_43:                              # %for.inc234
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_17
.LBB39_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB39_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB39_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB39_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB39_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB39_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB39_50
.LBB39_49:                              # %if.else
                                        #   in Loop: Header=BB39_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB39_50:                              # %if.end349
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB39_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB39_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB39_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB39_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB39_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB39_54:                              # %if.end359
                                        #   in Loop: Header=BB39_46 Depth=1
	jmp	.LBB39_55
.LBB39_55:                              # %if.end360
                                        #   in Loop: Header=BB39_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB39_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB39_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	$1, %eax
	jmp	.LBB39_59
.LBB39_58:                              # %cond.false370
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-132(%rbp), %eax
.LBB39_59:                              # %cond.end371
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB39_60:                              # %if.end384
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB39_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_46
.LBB39_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB39_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB39_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB39_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB39_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB39_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB39_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB39_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB39_68
.LBB39_67:                              # %if.else447
                                        #   in Loop: Header=BB39_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB39_68:                              # %if.end461
                                        #   in Loop: Header=BB39_63 Depth=1
	jmp	.LBB39_73
.LBB39_69:                              # %if.else462
                                        #   in Loop: Header=BB39_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB39_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB39_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB39_72
.LBB39_71:                              # %if.else479
                                        #   in Loop: Header=BB39_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB39_72:                              # %if.end493
                                        #   in Loop: Header=BB39_63 Depth=1
	jmp	.LBB39_73
.LBB39_73:                              # %if.end494
                                        #   in Loop: Header=BB39_63 Depth=1
	jmp	.LBB39_74
.LBB39_74:                              # %for.inc495
                                        #   in Loop: Header=BB39_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_63
.LBB39_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB39_213
.LBB39_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB39_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB39_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB39_78 Depth=1
	movl	$0, -16(%rbp)
.LBB39_80:                              # %for.cond523
                                        #   Parent Loop BB39_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB39_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB39_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_80
.LBB39_83:                              # %for.end541
                                        #   in Loop: Header=BB39_78 Depth=1
	jmp	.LBB39_84
.LBB39_84:                              # %for.inc542
                                        #   in Loop: Header=BB39_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_78
.LBB39_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB39_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB39_86 Depth=1
	movl	$0, -12(%rbp)
.LBB39_88:                              # %for.cond605
                                        #   Parent Loop BB39_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB39_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB39_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_88
.LBB39_91:                              # %for.end634
                                        #   in Loop: Header=BB39_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB39_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_86
.LBB39_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB39_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB39_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB39_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB39_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB39_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB39_98
.LBB39_97:                              # %if.else700
                                        #   in Loop: Header=BB39_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB39_98:                              # %if.end723
                                        #   in Loop: Header=BB39_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB39_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB39_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	$1, %eax
	jmp	.LBB39_102
.LBB39_101:                             # %cond.false735
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	-132(%rbp), %eax
.LBB39_102:                             # %cond.end736
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB39_103:                             # %if.end748
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB39_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_94
.LBB39_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB39_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_108 Depth 2
                                        #     Child Loop BB39_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB39_106 Depth=1
	movl	$0, -12(%rbp)
.LBB39_108:                             # %for.cond823
                                        #   Parent Loop BB39_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB39_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB39_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_108
.LBB39_111:                             # %for.end835
                                        #   in Loop: Header=BB39_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_112:                             # %for.cond852
                                        #   Parent Loop BB39_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB39_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB39_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB39_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB39_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB39_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB39_117
.LBB39_116:                             # %if.else915
                                        #   in Loop: Header=BB39_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB39_117:                             # %if.end968
                                        #   in Loop: Header=BB39_112 Depth=2
	jmp	.LBB39_122
.LBB39_118:                             # %if.else969
                                        #   in Loop: Header=BB39_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB39_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB39_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB39_121
.LBB39_120:                             # %if.else1019
                                        #   in Loop: Header=BB39_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB39_121:                             # %if.end1066
                                        #   in Loop: Header=BB39_112 Depth=2
	jmp	.LBB39_122
.LBB39_122:                             # %if.end1067
                                        #   in Loop: Header=BB39_112 Depth=2
	jmp	.LBB39_123
.LBB39_123:                             # %for.inc1068
                                        #   in Loop: Header=BB39_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_112
.LBB39_124:                             # %for.end1070
                                        #   in Loop: Header=BB39_106 Depth=1
	jmp	.LBB39_125
.LBB39_125:                             # %for.inc1071
                                        #   in Loop: Header=BB39_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_106
.LBB39_126:                             # %for.end1073
	jmp	.LBB39_212
.LBB39_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB39_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB39_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB39_129 Depth=1
	movl	$0, -16(%rbp)
.LBB39_131:                             # %for.cond1083
                                        #   Parent Loop BB39_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB39_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB39_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_131
.LBB39_134:                             # %for.end1101
                                        #   in Loop: Header=BB39_129 Depth=1
	jmp	.LBB39_135
.LBB39_135:                             # %for.inc1102
                                        #   in Loop: Header=BB39_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_129
.LBB39_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB39_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB39_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_139:                             # %land.end1111
                                        #   in Loop: Header=BB39_137 Depth=1
	testb	$1, %al
	jne	.LBB39_140
	jmp	.LBB39_146
.LBB39_140:                             # %for.body1113
                                        #   in Loop: Header=BB39_137 Depth=1
	movl	$0, -16(%rbp)
.LBB39_141:                             # %for.cond1114
                                        #   Parent Loop BB39_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB39_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB39_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_141
.LBB39_144:                             # %for.end1143
                                        #   in Loop: Header=BB39_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB39_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_137
.LBB39_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB39_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB39_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_149:                             # %land.end1177
                                        #   in Loop: Header=BB39_147 Depth=1
	testb	$1, %al
	jne	.LBB39_150
	jmp	.LBB39_156
.LBB39_150:                             # %for.body1179
                                        #   in Loop: Header=BB39_147 Depth=1
	movl	$0, -12(%rbp)
.LBB39_151:                             # %for.cond1180
                                        #   Parent Loop BB39_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB39_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB39_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_151
.LBB39_154:                             # %for.end1209
                                        #   in Loop: Header=BB39_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB39_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_147
.LBB39_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -36(%rbp)
.LBB39_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB39_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB39_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB39_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB39_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB39_164
.LBB39_160:                             # %if.else1261
                                        #   in Loop: Header=BB39_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB39_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB39_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB39_163
.LBB39_162:                             # %if.else1287
                                        #   in Loop: Header=BB39_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB39_163:                             # %if.end1310
                                        #   in Loop: Header=BB39_157 Depth=1
	jmp	.LBB39_164
.LBB39_164:                             # %if.end1311
                                        #   in Loop: Header=BB39_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB39_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB39_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	$1, %eax
	jmp	.LBB39_168
.LBB39_167:                             # %cond.false1322
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-132(%rbp), %eax
.LBB39_168:                             # %cond.end1323
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
.LBB39_169:                             # %if.end1335
                                        #   in Loop: Header=BB39_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB39_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB39_171:                             # %if.end1347
                                        #   in Loop: Header=BB39_157 Depth=1
	jmp	.LBB39_172
.LBB39_172:                             # %for.inc1348
                                        #   in Loop: Header=BB39_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_157
.LBB39_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB39_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_178 Depth 2
                                        #     Child Loop BB39_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB39_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB39_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_176:                             # %land.end1359
                                        #   in Loop: Header=BB39_174 Depth=1
	testb	$1, %al
	jne	.LBB39_177
	jmp	.LBB39_187
.LBB39_177:                             # %for.body1361
                                        #   in Loop: Header=BB39_174 Depth=1
	movl	$0, -16(%rbp)
.LBB39_178:                             # %for.cond1362
                                        #   Parent Loop BB39_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB39_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB39_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB39_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_178
.LBB39_181:                             # %for.end1374
                                        #   in Loop: Header=BB39_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_182:                             # %for.cond1391
                                        #   Parent Loop BB39_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB39_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB39_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB39_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_182
.LBB39_185:                             # %for.end1416
                                        #   in Loop: Header=BB39_174 Depth=1
	jmp	.LBB39_186
.LBB39_186:                             # %for.inc1417
                                        #   in Loop: Header=BB39_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_174
.LBB39_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB39_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_192 Depth 2
                                        #     Child Loop BB39_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB39_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_190:                             # %land.end1426
                                        #   in Loop: Header=BB39_188 Depth=1
	testb	$1, %al
	jne	.LBB39_191
	jmp	.LBB39_210
.LBB39_191:                             # %for.body1428
                                        #   in Loop: Header=BB39_188 Depth=1
	movl	$0, -12(%rbp)
.LBB39_192:                             # %for.cond1429
                                        #   Parent Loop BB39_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB39_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB39_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB39_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_192
.LBB39_195:                             # %for.end1441
                                        #   in Loop: Header=BB39_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_196:                             # %for.cond1458
                                        #   Parent Loop BB39_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB39_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB39_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB39_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB39_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB39_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB39_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB39_201
.LBB39_200:                             # %if.else1521
                                        #   in Loop: Header=BB39_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB39_201:                             # %if.end1574
                                        #   in Loop: Header=BB39_196 Depth=2
	jmp	.LBB39_206
.LBB39_202:                             # %if.else1575
                                        #   in Loop: Header=BB39_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB39_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB39_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB39_205
.LBB39_204:                             # %if.else1625
                                        #   in Loop: Header=BB39_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB39_205:                             # %if.end1672
                                        #   in Loop: Header=BB39_196 Depth=2
	jmp	.LBB39_206
.LBB39_206:                             # %if.end1673
                                        #   in Loop: Header=BB39_196 Depth=2
	jmp	.LBB39_207
.LBB39_207:                             # %for.inc1674
                                        #   in Loop: Header=BB39_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_196
.LBB39_208:                             # %for.end1676
                                        #   in Loop: Header=BB39_188 Depth=1
	jmp	.LBB39_209
.LBB39_209:                             # %for.inc1677
                                        #   in Loop: Header=BB39_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_188
.LBB39_210:                             # %for.end1679
	jmp	.LBB39_211
.LBB39_211:                             # %if.end1680
	jmp	.LBB39_212
.LBB39_212:                             # %if.end1681
	jmp	.LBB39_213
.LBB39_213:                             # %if.end1682
	movl	$0, -200(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB39_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_216 Depth 2
                                        #       Child Loop BB39_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB39_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB39_214 Depth=1
	movl	$0, -112(%rbp)
.LBB39_216:                             # %for.cond1689
                                        #   Parent Loop BB39_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB39_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB39_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -68(%rbp)
	movl	$1, -36(%rbp)
.LBB39_218:                             # %for.cond1722
                                        #   Parent Loop BB39_214 Depth=1
                                        #     Parent Loop BB39_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB39_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_223
.LBB39_222:                             # %if.then1731
                                        #   in Loop: Header=BB39_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_224
.LBB39_223:                             # %if.else1740
                                        #   in Loop: Header=BB39_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_224:                             # %if.end1749
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB39_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB39_230
.LBB39_226:                             # %if.else1761
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB39_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB39_229
.LBB39_228:                             # %if.else1792
                                        #   in Loop: Header=BB39_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB39_229:                             # %if.end1820
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_230
.LBB39_230:                             # %if.end1821
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB39_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-196(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB39_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB39_234
.LBB39_233:                             # %if.then1839
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-200(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -200(%rbp)
	jmp	.LBB39_235
.LBB39_234:                             # %if.else1841
                                        #   in Loop: Header=BB39_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-200(%rbp), %eax
	movl	%eax, -200(%rbp)
.LBB39_235:                             # %if.end1848
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB39_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB39_247
.LBB39_237:                             # %if.else1872
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB39_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB39_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB39_241
.LBB39_240:                             # %if.else1893
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB39_241:                             # %if.end1908
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_246
.LBB39_242:                             # %if.else1909
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB39_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB39_245
.LBB39_244:                             # %if.else1924
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB39_245:                             # %if.end1936
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_246
.LBB39_246:                             # %if.end1937
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_247
.LBB39_247:                             # %if.end1938
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_248
.LBB39_248:                             # %if.end1939
                                        #   in Loop: Header=BB39_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB39_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB39_250:                             # %if.end1949
                                        #   in Loop: Header=BB39_218 Depth=3
	jmp	.LBB39_251
.LBB39_251:                             # %for.inc1950
                                        #   in Loop: Header=BB39_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_218
.LBB39_252:                             # %for.end1952
                                        #   in Loop: Header=BB39_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB39_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB39_216
.LBB39_254:                             # %for.end1957
                                        #   in Loop: Header=BB39_214 Depth=1
	jmp	.LBB39_255
.LBB39_255:                             # %for.inc1958
                                        #   in Loop: Header=BB39_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB39_214
.LBB39_256:                             # %for.end1960
	cmpl	$4, -200(%rbp)
	jge	.LBB39_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB39_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB39_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_261 Depth 2
                                        #       Child Loop BB39_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB39_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB39_259 Depth=1
	movl	$0, -112(%rbp)
.LBB39_261:                             # %for.cond1972
                                        #   Parent Loop BB39_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB39_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB39_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-196(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB39_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB39_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB39_264:                             # %if.end2016
                                        #   in Loop: Header=BB39_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB39_265:                             # %for.cond2018
                                        #   Parent Loop BB39_259 Depth=1
                                        #     Parent Loop BB39_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB39_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB39_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB39_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB39_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB39_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_270
.LBB39_269:                             # %if.then2030
                                        #   in Loop: Header=BB39_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_271
.LBB39_270:                             # %if.else2039
                                        #   in Loop: Header=BB39_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB39_271:                             # %if.end2048
                                        #   in Loop: Header=BB39_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB39_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB39_265
.LBB39_273:                             # %for.end2060
                                        #   in Loop: Header=BB39_261 Depth=2
	jmp	.LBB39_274
.LBB39_274:                             # %for.inc2061
                                        #   in Loop: Header=BB39_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB39_261
.LBB39_275:                             # %for.end2063
                                        #   in Loop: Header=BB39_259 Depth=1
	jmp	.LBB39_276
.LBB39_276:                             # %for.inc2064
                                        #   in Loop: Header=BB39_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB39_259
.LBB39_277:                             # %for.end2066
	jmp	.LBB39_278
.LBB39_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB39_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB39_280:                             # %if.end2071
	movl	$0, -24(%rbp)
.LBB39_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_285 Depth 2
                                        #       Child Loop BB39_287 Depth 3
                                        #         Child Loop BB39_289 Depth 4
                                        #         Child Loop BB39_293 Depth 4
                                        #       Child Loop BB39_299 Depth 3
                                        #         Child Loop BB39_303 Depth 4
                                        #         Child Loop BB39_307 Depth 4
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB39_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB39_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_283:                             # %land.end2079
                                        #   in Loop: Header=BB39_281 Depth=1
	testb	$1, %al
	jne	.LBB39_284
	jmp	.LBB39_340
.LBB39_284:                             # %for.body2081
                                        #   in Loop: Header=BB39_281 Depth=1
	movl	$0, -28(%rbp)
.LBB39_285:                             # %for.cond2082
                                        #   Parent Loop BB39_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_287 Depth 3
                                        #         Child Loop BB39_289 Depth 4
                                        #         Child Loop BB39_293 Depth 4
                                        #       Child Loop BB39_299 Depth 3
                                        #         Child Loop BB39_303 Depth 4
                                        #         Child Loop BB39_307 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB39_285 Depth=2
	movl	$0, -12(%rbp)
.LBB39_287:                             # %for.cond2087
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_289 Depth 4
                                        #         Child Loop BB39_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB39_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB39_287 Depth=3
	movl	$0, -16(%rbp)
.LBB39_289:                             # %for.cond2091
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        #       Parent Loop BB39_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB39_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB39_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB39_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_289
.LBB39_292:                             # %for.end2106
                                        #   in Loop: Header=BB39_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB39_293:                             # %for.cond2125
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        #       Parent Loop BB39_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB39_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB39_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB39_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_293
.LBB39_296:                             # %for.end2156
                                        #   in Loop: Header=BB39_287 Depth=3
	jmp	.LBB39_297
.LBB39_297:                             # %for.inc2157
                                        #   in Loop: Header=BB39_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_287
.LBB39_298:                             # %for.end2159
                                        #   in Loop: Header=BB39_285 Depth=2
	movl	$0, -16(%rbp)
.LBB39_299:                             # %for.cond2160
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_303 Depth 4
                                        #         Child Loop BB39_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB39_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB39_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB39_301:                             # %land.end2166
                                        #   in Loop: Header=BB39_299 Depth=3
	testb	$1, %al
	jne	.LBB39_302
	jmp	.LBB39_336
.LBB39_302:                             # %for.body2168
                                        #   in Loop: Header=BB39_299 Depth=3
	movl	$0, -12(%rbp)
.LBB39_303:                             # %for.cond2169
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        #       Parent Loop BB39_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB39_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB39_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB39_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_303
.LBB39_306:                             # %for.end2184
                                        #   in Loop: Header=BB39_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB39_307:                             # %for.cond2203
                                        #   Parent Loop BB39_281 Depth=1
                                        #     Parent Loop BB39_285 Depth=2
                                        #       Parent Loop BB39_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB39_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB39_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB39_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB39_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB39_312
.LBB39_311:                             # %cond.false2231
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB39_312:                             # %cond.end2250
                                        #   in Loop: Header=BB39_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB39_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB39_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB39_318
.LBB39_314:                             # %cond.false2257
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB39_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB39_317
.LBB39_316:                             # %cond.false2279
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB39_317:                             # %cond.end2298
                                        #   in Loop: Header=BB39_307 Depth=4
.LBB39_318:                             # %cond.end2300
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-72(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-28(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-24(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB39_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB39_321
.LBB39_320:                             # %cond.false2333
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB39_321:                             # %cond.end2352
                                        #   in Loop: Header=BB39_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB39_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB39_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB39_327
.LBB39_323:                             # %cond.false2359
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-72(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-28(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB39_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB39_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB39_326
.LBB39_325:                             # %cond.false2381
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB39_326:                             # %cond.end2400
                                        #   in Loop: Header=BB39_307 Depth=4
.LBB39_327:                             # %cond.end2402
                                        #   in Loop: Header=BB39_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB39_332
.LBB39_328:                             # %if.else2412
                                        #   in Loop: Header=BB39_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB39_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB39_331
.LBB39_330:                             # %if.else2439
                                        #   in Loop: Header=BB39_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB39_331:                             # %if.end2468
                                        #   in Loop: Header=BB39_307 Depth=4
	jmp	.LBB39_332
.LBB39_332:                             # %if.end2469
                                        #   in Loop: Header=BB39_307 Depth=4
	jmp	.LBB39_333
.LBB39_333:                             # %for.inc2470
                                        #   in Loop: Header=BB39_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_307
.LBB39_334:                             # %for.end2472
                                        #   in Loop: Header=BB39_299 Depth=3
	jmp	.LBB39_335
.LBB39_335:                             # %for.inc2473
                                        #   in Loop: Header=BB39_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_299
.LBB39_336:                             # %for.end2475
                                        #   in Loop: Header=BB39_285 Depth=2
	jmp	.LBB39_337
.LBB39_337:                             # %for.inc2476
                                        #   in Loop: Header=BB39_285 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB39_285
.LBB39_338:                             # %for.end2478
                                        #   in Loop: Header=BB39_281 Depth=1
	jmp	.LBB39_339
.LBB39_339:                             # %for.inc2479
                                        #   in Loop: Header=BB39_281 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_281
.LBB39_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB39_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB39_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB39_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB39_342 Depth=1
	movl	$0, -16(%rbp)
.LBB39_344:                             # %for.cond2490
                                        #   Parent Loop BB39_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB39_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB39_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB39_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB39_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB39_348
.LBB39_347:                             # %if.else2518
                                        #   in Loop: Header=BB39_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB39_348:                             # %if.end2536
                                        #   in Loop: Header=BB39_344 Depth=2
	jmp	.LBB39_349
.LBB39_349:                             # %for.inc2537
                                        #   in Loop: Header=BB39_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_344
.LBB39_350:                             # %for.end2539
                                        #   in Loop: Header=BB39_342 Depth=1
	jmp	.LBB39_351
.LBB39_351:                             # %for.inc2540
                                        #   in Loop: Header=BB39_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_342
.LBB39_352:                             # %for.end2542
	jmp	.LBB39_353
.LBB39_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$1410171061, -380(%rbp) # imm = 0x540D80B5
	jne	.LBB39_355
.LBB39_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_354
.Lfunc_end39:
	.size	dct_chroma.30, .Lfunc_end39-dct_chroma.30
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.31 # -- Begin function intrapred_luma_16x16.31
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.31,@function
intrapred_luma_16x16.31:                # @intrapred_luma_16x16.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$467583590, -92(%rbp)   # imm = 0x1BDEC266
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB40_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_1
.LBB40_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB40_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB40_20
.LBB40_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB40_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_9
.LBB40_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB40_9
.LBB40_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB40_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB40_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB40_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB40_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB40_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_14
.LBB40_13:                              # %cond.false23
                                        #   in Loop: Header=BB40_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB40_14
.LBB40_14:                              # %cond.end24
                                        #   in Loop: Header=BB40_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB40_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_10
.LBB40_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB40_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB40_19
.LBB40_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB40_19
.LBB40_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB40_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB40_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB40_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB40_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB40_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB40_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB40_24:                              # %if.end51
                                        #   in Loop: Header=BB40_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB40_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB40_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB40_26:                              # %if.end68
                                        #   in Loop: Header=BB40_21 Depth=1
	jmp	.LBB40_27
.LBB40_27:                              # %for.inc69
                                        #   in Loop: Header=BB40_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_21
.LBB40_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB40_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB40_31
# %bb.30:                               # %if.then74
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB40_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB40_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB40_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB40_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB40_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB40_37
# %bb.36:                               # %if.then88
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB40_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB40_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB40_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB40_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB40_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB40_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB40_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB40_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB40_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB40_44:                              # %if.end114
                                        #   in Loop: Header=BB40_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB40_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB40_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB40_46:                              # %if.end133
                                        #   in Loop: Header=BB40_41 Depth=1
	jmp	.LBB40_47
.LBB40_47:                              # %for.inc134
                                        #   in Loop: Header=BB40_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_41
.LBB40_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB40_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB40_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB40_49 Depth=1
	movl	$0, -4(%rbp)
.LBB40_51:                              # %for.cond141
                                        #   Parent Loop BB40_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB40_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB40_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB40_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_51
.LBB40_54:                              # %for.end173
                                        #   in Loop: Header=BB40_49 Depth=1
	jmp	.LBB40_55
.LBB40_55:                              # %for.inc174
                                        #   in Loop: Header=BB40_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_49
.LBB40_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB40_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB40_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB40_60
.LBB40_59:                              # %if.then181
	jmp	.LBB40_85
.LBB40_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB40_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB40_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB40_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB40_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_65
.LBB40_64:                              # %if.else210
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB40_65:                              # %if.end232
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB40_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_61
.LBB40_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB40_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB40_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB40_68 Depth=1
	movl	$0, -4(%rbp)
.LBB40_70:                              # %for.cond293
                                        #   Parent Loop BB40_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB40_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB40_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB40_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_74
.LBB40_73:                              # %cond.false309
                                        #   in Loop: Header=BB40_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_74:                              # %cond.end318
                                        #   in Loop: Header=BB40_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB40_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB40_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB40_80
.LBB40_76:                              # %cond.false323
                                        #   in Loop: Header=BB40_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB40_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB40_79
.LBB40_78:                              # %cond.false337
                                        #   in Loop: Header=BB40_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB40_79:                              # %cond.end346
                                        #   in Loop: Header=BB40_70 Depth=2
.LBB40_80:                              # %cond.end348
                                        #   in Loop: Header=BB40_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB40_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_70
.LBB40_82:                              # %for.end359
                                        #   in Loop: Header=BB40_68 Depth=1
	jmp	.LBB40_83
.LBB40_83:                              # %for.inc360
                                        #   in Loop: Header=BB40_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_68
.LBB40_84:                              # %for.end362.loopexit
	jmp	.LBB40_85
.LBB40_85:                              # %for.end362
	cmpl	$467583590, -92(%rbp)   # imm = 0x1BDEC266
	jne	.LBB40_87
.LBB40_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_86
.Lfunc_end40:
	.size	intrapred_luma_16x16.31, .Lfunc_end40-intrapred_luma_16x16.31
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.32             # -- Begin function dct_luma.32
	.p2align	4, 0x90
	.type	dct_luma.32,@function
dct_luma.32:                            # @dct_luma.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$34904005, -148(%rbp)   # imm = 0x21497C5
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -132(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-132(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB41_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB41_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -12(%rbp)
.LBB41_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB41_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_5:                               # %land.end32
                                        #   in Loop: Header=BB41_3 Depth=1
	testb	$1, %al
	jne	.LBB41_6
	jmp	.LBB41_12
.LBB41_6:                               # %for.body
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	$0, -16(%rbp)
.LBB41_7:                               # %for.cond34
                                        #   Parent Loop BB41_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB41_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB41_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_7
.LBB41_10:                              # %for.end
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB41_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_3
.LBB41_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB41_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB41_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_15:                              # %land.end101
                                        #   in Loop: Header=BB41_13 Depth=1
	testb	$1, %al
	jne	.LBB41_16
	jmp	.LBB41_22
.LBB41_16:                              # %for.body103
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	$0, -12(%rbp)
.LBB41_17:                              # %for.cond104
                                        #   Parent Loop BB41_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB41_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB41_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_17
.LBB41_20:                              # %for.end136
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB41_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_13
.LBB41_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB41_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB41_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB41_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_28
.LBB41_27:                              # %if.then
                                        #   in Loop: Header=BB41_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_29
.LBB41_28:                              # %if.else
                                        #   in Loop: Header=BB41_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB41_29:                              # %if.end
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB41_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB41_35
.LBB41_31:                              # %if.else199
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_34
.LBB41_33:                              # %if.else223
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB41_34:                              # %if.end245
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_35
.LBB41_35:                              # %if.end246
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB41_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB41_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB41_39
.LBB41_38:                              # %if.then254
                                        #   in Loop: Header=BB41_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB41_40
.LBB41_39:                              # %if.else256
                                        #   in Loop: Header=BB41_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB41_40:                              # %if.end263
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB41_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_52
.LBB41_42:                              # %if.else283
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB41_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_46
.LBB41_45:                              # %if.else301
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB41_46:                              # %if.end314
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_51
.LBB41_47:                              # %if.else315
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB41_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB41_50
.LBB41_49:                              # %if.else328
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB41_50:                              # %if.end338
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_51
.LBB41_51:                              # %if.end339
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_52
.LBB41_52:                              # %if.end340
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_53
.LBB41_53:                              # %if.end341
                                        #   in Loop: Header=BB41_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB41_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_55:                              # %if.end349
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_56
.LBB41_56:                              # %for.inc350
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB41_23
.LBB41_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB41_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_62 Depth 2
                                        #     Child Loop BB41_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB41_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB41_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_60:                              # %land.end361
                                        #   in Loop: Header=BB41_58 Depth=1
	testb	$1, %al
	jne	.LBB41_61
	jmp	.LBB41_71
.LBB41_61:                              # %for.body363
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	$0, -16(%rbp)
.LBB41_62:                              # %for.cond364
                                        #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB41_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB41_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_62
.LBB41_65:                              # %for.end377
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB41_66:                              # %for.cond396
                                        #   Parent Loop BB41_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB41_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB41_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_66
.LBB41_69:                              # %for.end423
                                        #   in Loop: Header=BB41_58 Depth=1
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc424
                                        #   in Loop: Header=BB41_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_58
.LBB41_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB41_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_76 Depth 2
                                        #     Child Loop BB41_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB41_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB41_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB41_74:                              # %land.end433
                                        #   in Loop: Header=BB41_72 Depth=1
	testb	$1, %al
	jne	.LBB41_75
	jmp	.LBB41_109
.LBB41_75:                              # %for.body435
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	$0, -12(%rbp)
.LBB41_76:                              # %for.cond436
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB41_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB41_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_76
.LBB41_79:                              # %for.end449
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB41_80:                              # %for.cond468
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB41_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB41_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_85
.LBB41_84:                              # %cond.false
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_85:                              # %cond.end
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB41_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB41_91
.LBB41_87:                              # %cond.false518
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_90
.LBB41_89:                              # %cond.false540
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_90:                              # %cond.end559
                                        #   in Loop: Header=BB41_80 Depth=2
.LBB41_91:                              # %cond.end561
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB41_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_94
.LBB41_93:                              # %cond.false592
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB41_94:                              # %cond.end611
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB41_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB41_100
.LBB41_96:                              # %cond.false618
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB41_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB41_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_99
.LBB41_98:                              # %cond.false640
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB41_99:                              # %cond.end659
                                        #   in Loop: Header=BB41_80 Depth=2
.LBB41_100:                             # %cond.end661
                                        #   in Loop: Header=BB41_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_105
.LBB41_101:                             # %if.else669
                                        #   in Loop: Header=BB41_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB41_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB41_104
.LBB41_103:                             # %if.else692
                                        #   in Loop: Header=BB41_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_104:                             # %if.end717
                                        #   in Loop: Header=BB41_80 Depth=2
	jmp	.LBB41_105
.LBB41_105:                             # %if.end718
                                        #   in Loop: Header=BB41_80 Depth=2
	jmp	.LBB41_106
.LBB41_106:                             # %for.inc719
                                        #   in Loop: Header=BB41_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_80
.LBB41_107:                             # %for.end721
                                        #   in Loop: Header=BB41_72 Depth=1
	jmp	.LBB41_108
.LBB41_108:                             # %for.inc722
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_72
.LBB41_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB41_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB41_111 Depth=1
	movl	$0, -16(%rbp)
.LBB41_113:                             # %for.cond732
                                        #   Parent Loop BB41_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB41_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB41_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB41_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB41_117
.LBB41_116:                             # %if.else761
                                        #   in Loop: Header=BB41_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB41_117:                             # %if.end779
                                        #   in Loop: Header=BB41_113 Depth=2
	jmp	.LBB41_118
.LBB41_118:                             # %for.inc780
                                        #   in Loop: Header=BB41_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_113
.LBB41_119:                             # %for.end782
                                        #   in Loop: Header=BB41_111 Depth=1
	jmp	.LBB41_120
.LBB41_120:                             # %for.inc783
                                        #   in Loop: Header=BB41_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_111
.LBB41_121:                             # %for.end785
	jmp	.LBB41_122
.LBB41_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$34904005, -148(%rbp)   # imm = 0x21497C5
	jne	.LBB41_124
.LBB41_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_123
.Lfunc_end41:
	.size	dct_luma.32, .Lfunc_end41-dct_luma.32
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.33           # -- Begin function dct_chroma.33
	.p2align	4, 0x90
	.type	dct_chroma.33,@function
dct_chroma.33:                          # @dct_chroma.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$490303099, -380(%rbp)  # imm = 0x1D396E7B
	movl	%edi, -20(%rbp)
	movl	%esi, -132(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB42_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB42_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB42_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -136(%rbp)
	movl	$0, -208(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB42_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB42_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB42_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB42_11
.LBB42_7:                               # %cond.false
	cmpl	$51, -128(%rbp)
	jle	.LBB42_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB42_10
.LBB42_9:                               # %cond.false25
	movl	-128(%rbp), %eax
.LBB42_10:                              # %cond.end
.LBB42_11:                              # %cond.end26
	movl	%eax, -128(%rbp)
	cmpl	$0, -128(%rbp)
	jge	.LBB42_13
# %bb.12:                               # %cond.true29
	movl	-128(%rbp), %eax
	jmp	.LBB42_14
.LBB42_13:                              # %cond.false30
	movl	-128(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB42_14:                              # %cond.end34
	movl	%eax, -128(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB42_16
# %bb.15:                               # %if.then
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-128(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -136(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
.LBB42_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB42_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_19 Depth 2
                                        #       Child Loop BB42_21 Depth 3
                                        #         Child Loop BB42_25 Depth 4
                                        #       Child Loop BB42_31 Depth 3
                                        #         Child Loop BB42_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB42_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	$0, -24(%rbp)
.LBB42_19:                              # %for.cond56
                                        #   Parent Loop BB42_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_21 Depth 3
                                        #         Child Loop BB42_25 Depth 4
                                        #       Child Loop BB42_31 Depth 3
                                        #         Child Loop BB42_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB42_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	$0, -12(%rbp)
.LBB42_21:                              # %for.cond60
                                        #   Parent Loop BB42_17 Depth=1
                                        #     Parent Loop BB42_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB42_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB42_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_23:                              # %land.end64
                                        #   in Loop: Header=BB42_21 Depth=3
	testb	$1, %al
	jne	.LBB42_24
	jmp	.LBB42_30
.LBB42_24:                              # %for.body66
                                        #   in Loop: Header=BB42_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB42_25:                              # %for.cond68
                                        #   Parent Loop BB42_17 Depth=1
                                        #     Parent Loop BB42_19 Depth=2
                                        #       Parent Loop BB42_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB42_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB42_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB42_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_25
.LBB42_28:                              # %for.end
                                        #   in Loop: Header=BB42_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB42_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_21
.LBB42_30:                              # %for.end141
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	$0, -16(%rbp)
.LBB42_31:                              # %for.cond142
                                        #   Parent Loop BB42_17 Depth=1
                                        #     Parent Loop BB42_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB42_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB42_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_33:                              # %land.end148
                                        #   in Loop: Header=BB42_31 Depth=3
	testb	$1, %al
	jne	.LBB42_34
	jmp	.LBB42_40
.LBB42_34:                              # %for.body150
                                        #   in Loop: Header=BB42_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB42_35:                              # %for.cond152
                                        #   Parent Loop BB42_17 Depth=1
                                        #     Parent Loop BB42_19 Depth=2
                                        #       Parent Loop BB42_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB42_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB42_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB42_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_35
.LBB42_38:                              # %for.end189
                                        #   in Loop: Header=BB42_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB42_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_31
.LBB42_40:                              # %for.end230
                                        #   in Loop: Header=BB42_19 Depth=2
	jmp	.LBB42_41
.LBB42_41:                              # %for.inc231
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_19
.LBB42_42:                              # %for.end233
                                        #   in Loop: Header=BB42_17 Depth=1
	jmp	.LBB42_43
.LBB42_43:                              # %for.inc234
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB42_17
.LBB42_44:                              # %for.end236
	cmpl	$1, -140(%rbp)
	jne	.LBB42_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB42_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB42_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB42_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB42_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB42_50
.LBB42_49:                              # %if.else
                                        #   in Loop: Header=BB42_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB42_50:                              # %if.end349
                                        #   in Loop: Header=BB42_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB42_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB42_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB42_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB42_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB42_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB42_54:                              # %if.end359
                                        #   in Loop: Header=BB42_46 Depth=1
	jmp	.LBB42_55
.LBB42_55:                              # %if.end360
                                        #   in Loop: Header=BB42_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB42_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB42_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	$1, %eax
	jmp	.LBB42_59
.LBB42_58:                              # %cond.false370
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	-132(%rbp), %eax
.LBB42_59:                              # %cond.end371
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -144(%rbp)
.LBB42_60:                              # %if.end384
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	-144(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB42_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_46
.LBB42_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB42_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB42_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB42_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB42_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB42_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB42_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB42_68
.LBB42_67:                              # %if.else447
                                        #   in Loop: Header=BB42_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB42_68:                              # %if.end461
                                        #   in Loop: Header=BB42_63 Depth=1
	jmp	.LBB42_73
.LBB42_69:                              # %if.else462
                                        #   in Loop: Header=BB42_63 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB42_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB42_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB42_72
.LBB42_71:                              # %if.else479
                                        #   in Loop: Header=BB42_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB42_72:                              # %if.end493
                                        #   in Loop: Header=BB42_63 Depth=1
	jmp	.LBB42_73
.LBB42_73:                              # %if.end494
                                        #   in Loop: Header=BB42_63 Depth=1
	jmp	.LBB42_74
.LBB42_74:                              # %for.inc495
                                        #   in Loop: Header=BB42_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_63
.LBB42_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB42_213
.LBB42_76:                              # %if.else514
	cmpl	$2, -140(%rbp)
	jne	.LBB42_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB42_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB42_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB42_78 Depth=1
	movl	$0, -16(%rbp)
.LBB42_80:                              # %for.cond523
                                        #   Parent Loop BB42_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB42_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB42_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB42_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_80
.LBB42_83:                              # %for.end541
                                        #   in Loop: Header=BB42_78 Depth=1
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc542
                                        #   in Loop: Header=BB42_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_78
.LBB42_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB42_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	$0, -12(%rbp)
.LBB42_88:                              # %for.cond605
                                        #   Parent Loop BB42_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB42_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB42_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_88
.LBB42_91:                              # %for.end634
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB42_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_86
.LBB42_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB42_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB42_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB42_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -124(%rbp)
	jne	.LBB42_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB42_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB42_98
.LBB42_97:                              # %if.else700
                                        #   in Loop: Header=BB42_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB42_98:                              # %if.end723
                                        #   in Loop: Header=BB42_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB42_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB42_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	$1, %eax
	jmp	.LBB42_102
.LBB42_101:                             # %cond.false735
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	-132(%rbp), %eax
.LBB42_102:                             # %cond.end736
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB42_103:                             # %if.end748
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB42_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_94
.LBB42_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB42_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_108 Depth 2
                                        #     Child Loop BB42_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB42_106 Depth=1
	movl	$0, -12(%rbp)
.LBB42_108:                             # %for.cond823
                                        #   Parent Loop BB42_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB42_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB42_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_108
.LBB42_111:                             # %for.end835
                                        #   in Loop: Header=BB42_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB42_112:                             # %for.cond852
                                        #   Parent Loop BB42_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB42_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB42_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB42_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB42_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB42_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB42_117
.LBB42_116:                             # %if.else915
                                        #   in Loop: Header=BB42_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-136(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB42_117:                             # %if.end968
                                        #   in Loop: Header=BB42_112 Depth=2
	jmp	.LBB42_122
.LBB42_118:                             # %if.else969
                                        #   in Loop: Header=BB42_112 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB42_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB42_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB42_121
.LBB42_120:                             # %if.else1019
                                        #   in Loop: Header=BB42_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB42_121:                             # %if.end1066
                                        #   in Loop: Header=BB42_112 Depth=2
	jmp	.LBB42_122
.LBB42_122:                             # %if.end1067
                                        #   in Loop: Header=BB42_112 Depth=2
	jmp	.LBB42_123
.LBB42_123:                             # %for.inc1068
                                        #   in Loop: Header=BB42_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_112
.LBB42_124:                             # %for.end1070
                                        #   in Loop: Header=BB42_106 Depth=1
	jmp	.LBB42_125
.LBB42_125:                             # %for.inc1071
                                        #   in Loop: Header=BB42_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_106
.LBB42_126:                             # %for.end1073
	jmp	.LBB42_212
.LBB42_127:                             # %if.else1074
	cmpl	$3, -140(%rbp)
	jne	.LBB42_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB42_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB42_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB42_129 Depth=1
	movl	$0, -16(%rbp)
.LBB42_131:                             # %for.cond1083
                                        #   Parent Loop BB42_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB42_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB42_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB42_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_131
.LBB42_134:                             # %for.end1101
                                        #   in Loop: Header=BB42_129 Depth=1
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc1102
                                        #   in Loop: Header=BB42_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_129
.LBB42_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB42_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB42_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB42_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_139:                             # %land.end1111
                                        #   in Loop: Header=BB42_137 Depth=1
	testb	$1, %al
	jne	.LBB42_140
	jmp	.LBB42_146
.LBB42_140:                             # %for.body1113
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	$0, -16(%rbp)
.LBB42_141:                             # %for.cond1114
                                        #   Parent Loop BB42_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB42_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB42_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_141
.LBB42_144:                             # %for.end1143
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_137
.LBB42_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB42_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB42_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB42_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_149:                             # %land.end1177
                                        #   in Loop: Header=BB42_147 Depth=1
	testb	$1, %al
	jne	.LBB42_150
	jmp	.LBB42_156
.LBB42_150:                             # %for.body1179
                                        #   in Loop: Header=BB42_147 Depth=1
	movl	$0, -12(%rbp)
.LBB42_151:                             # %for.cond1180
                                        #   Parent Loop BB42_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB42_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB42_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_151
.LBB42_154:                             # %for.end1209
                                        #   in Loop: Header=BB42_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB42_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_147
.LBB42_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB42_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB42_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB42_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB42_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB42_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB42_164
.LBB42_160:                             # %if.else1261
                                        #   in Loop: Header=BB42_157 Depth=1
	cmpl	$1, -124(%rbp)
	jne	.LBB42_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB42_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB42_163
.LBB42_162:                             # %if.else1287
                                        #   in Loop: Header=BB42_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB42_163:                             # %if.end1310
                                        #   in Loop: Header=BB42_157 Depth=1
	jmp	.LBB42_164
.LBB42_164:                             # %if.end1311
                                        #   in Loop: Header=BB42_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB42_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-132(%rbp), %eax
	jle	.LBB42_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	$1, %eax
	jmp	.LBB42_168
.LBB42_167:                             # %cond.false1322
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	-132(%rbp), %eax
.LBB42_168:                             # %cond.end1323
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	%eax, -132(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB42_169:                             # %if.end1335
                                        #   in Loop: Header=BB42_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB42_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB42_171:                             # %if.end1347
                                        #   in Loop: Header=BB42_157 Depth=1
	jmp	.LBB42_172
.LBB42_172:                             # %for.inc1348
                                        #   in Loop: Header=BB42_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_157
.LBB42_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB42_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_178 Depth 2
                                        #     Child Loop BB42_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB42_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB42_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_176:                             # %land.end1359
                                        #   in Loop: Header=BB42_174 Depth=1
	testb	$1, %al
	jne	.LBB42_177
	jmp	.LBB42_187
.LBB42_177:                             # %for.body1361
                                        #   in Loop: Header=BB42_174 Depth=1
	movl	$0, -16(%rbp)
.LBB42_178:                             # %for.cond1362
                                        #   Parent Loop BB42_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB42_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB42_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB42_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_178
.LBB42_181:                             # %for.end1374
                                        #   in Loop: Header=BB42_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB42_182:                             # %for.cond1391
                                        #   Parent Loop BB42_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB42_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB42_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB42_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_182
.LBB42_185:                             # %for.end1416
                                        #   in Loop: Header=BB42_174 Depth=1
	jmp	.LBB42_186
.LBB42_186:                             # %for.inc1417
                                        #   in Loop: Header=BB42_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_174
.LBB42_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB42_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_192 Depth 2
                                        #     Child Loop BB42_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB42_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB42_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_190:                             # %land.end1426
                                        #   in Loop: Header=BB42_188 Depth=1
	testb	$1, %al
	jne	.LBB42_191
	jmp	.LBB42_210
.LBB42_191:                             # %for.body1428
                                        #   in Loop: Header=BB42_188 Depth=1
	movl	$0, -12(%rbp)
.LBB42_192:                             # %for.cond1429
                                        #   Parent Loop BB42_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB42_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB42_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB42_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_192
.LBB42_195:                             # %for.end1441
                                        #   in Loop: Header=BB42_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB42_196:                             # %for.cond1458
                                        #   Parent Loop BB42_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB42_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB42_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB42_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB42_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB42_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB42_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB42_201
.LBB42_200:                             # %if.else1521
                                        #   in Loop: Header=BB42_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB42_201:                             # %if.end1574
                                        #   in Loop: Header=BB42_196 Depth=2
	jmp	.LBB42_206
.LBB42_202:                             # %if.else1575
                                        #   in Loop: Header=BB42_196 Depth=2
	cmpl	$1, -124(%rbp)
	jne	.LBB42_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB42_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB42_205
.LBB42_204:                             # %if.else1625
                                        #   in Loop: Header=BB42_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB42_205:                             # %if.end1672
                                        #   in Loop: Header=BB42_196 Depth=2
	jmp	.LBB42_206
.LBB42_206:                             # %if.end1673
                                        #   in Loop: Header=BB42_196 Depth=2
	jmp	.LBB42_207
.LBB42_207:                             # %for.inc1674
                                        #   in Loop: Header=BB42_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_196
.LBB42_208:                             # %for.end1676
                                        #   in Loop: Header=BB42_188 Depth=1
	jmp	.LBB42_209
.LBB42_209:                             # %for.inc1677
                                        #   in Loop: Header=BB42_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_188
.LBB42_210:                             # %for.end1679
	jmp	.LBB42_211
.LBB42_211:                             # %if.end1680
	jmp	.LBB42_212
.LBB42_212:                             # %if.end1681
	jmp	.LBB42_213
.LBB42_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB42_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_216 Depth 2
                                        #       Child Loop BB42_218 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB42_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB42_214 Depth=1
	movl	$0, -112(%rbp)
.LBB42_216:                             # %for.cond1689
                                        #   Parent Loop BB42_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_218 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB42_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB42_216 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB42_218:                             # %for.cond1722
                                        #   Parent Loop BB42_214 Depth=1
                                        #     Parent Loop BB42_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB42_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB42_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_223
.LBB42_222:                             # %if.then1731
                                        #   in Loop: Header=BB42_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_224
.LBB42_223:                             # %if.else1740
                                        #   in Loop: Header=BB42_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB42_224:                             # %if.end1749
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -144(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB42_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB42_230
.LBB42_226:                             # %if.else1761
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB42_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB42_229
.LBB42_228:                             # %if.else1792
                                        #   in Loop: Header=BB42_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB42_229:                             # %if.end1820
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_230
.LBB42_230:                             # %if.end1821
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB42_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-116(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB42_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB42_234
.LBB42_233:                             # %if.then1839
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB42_235
.LBB42_234:                             # %if.else1841
                                        #   in Loop: Header=BB42_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB42_235:                             # %if.end1848
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	$2, -212(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB42_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB42_247
.LBB42_237:                             # %if.else1872
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB42_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB42_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB42_241
.LBB42_240:                             # %if.else1893
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB42_241:                             # %if.end1908
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_246
.LBB42_242:                             # %if.else1909
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB42_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
	jmp	.LBB42_245
.LBB42_244:                             # %if.else1924
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -144(%rbp)
.LBB42_245:                             # %if.end1936
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_246
.LBB42_246:                             # %if.end1937
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_247
.LBB42_247:                             # %if.end1938
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_248
.LBB42_248:                             # %if.end1939
                                        #   in Loop: Header=BB42_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB42_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-144(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB42_250:                             # %if.end1949
                                        #   in Loop: Header=BB42_218 Depth=3
	jmp	.LBB42_251
.LBB42_251:                             # %for.inc1950
                                        #   in Loop: Header=BB42_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_218
.LBB42_252:                             # %for.end1952
                                        #   in Loop: Header=BB42_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB42_216 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB42_216
.LBB42_254:                             # %for.end1957
                                        #   in Loop: Header=BB42_214 Depth=1
	jmp	.LBB42_255
.LBB42_255:                             # %for.inc1958
                                        #   in Loop: Header=BB42_214 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB42_214
.LBB42_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB42_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB42_278
# %bb.258:                              # %if.then1965
	movl	$0, -212(%rbp)
	movl	$0, -116(%rbp)
.LBB42_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_261 Depth 2
                                        #       Child Loop BB42_265 Depth 3
	movl	-116(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB42_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB42_259 Depth=1
	movl	$0, -112(%rbp)
.LBB42_261:                             # %for.cond1972
                                        #   Parent Loop BB42_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_265 Depth 3
	cmpl	$4, -112(%rbp)
	jge	.LBB42_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB42_261 Depth=2
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-140(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB42_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB42_261 Depth=2
	movslq	-140(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-140(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB42_264:                             # %if.end2016
                                        #   in Loop: Header=BB42_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB42_265:                             # %for.cond2018
                                        #   Parent Loop BB42_259 Depth=1
                                        #     Parent Loop BB42_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB42_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB42_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB42_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB42_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB42_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_270
.LBB42_269:                             # %if.then2030
                                        #   in Loop: Header=BB42_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_271
.LBB42_270:                             # %if.else2039
                                        #   in Loop: Header=BB42_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB42_271:                             # %if.end2048
                                        #   in Loop: Header=BB42_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB42_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_265
.LBB42_273:                             # %for.end2060
                                        #   in Loop: Header=BB42_261 Depth=2
	jmp	.LBB42_274
.LBB42_274:                             # %for.inc2061
                                        #   in Loop: Header=BB42_261 Depth=2
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB42_261
.LBB42_275:                             # %for.end2063
                                        #   in Loop: Header=BB42_259 Depth=1
	jmp	.LBB42_276
.LBB42_276:                             # %for.inc2064
                                        #   in Loop: Header=BB42_259 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB42_259
.LBB42_277:                             # %for.end2066
	jmp	.LBB42_278
.LBB42_278:                             # %if.end2067
	cmpl	$2, -212(%rbp)
	jne	.LBB42_280
# %bb.279:                              # %if.then2070
	movl	$2, -132(%rbp)
.LBB42_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB42_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_285 Depth 2
                                        #       Child Loop BB42_287 Depth 3
                                        #         Child Loop BB42_289 Depth 4
                                        #         Child Loop BB42_293 Depth 4
                                        #       Child Loop BB42_299 Depth 3
                                        #         Child Loop BB42_303 Depth 4
                                        #         Child Loop BB42_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB42_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB42_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_283:                             # %land.end2079
                                        #   in Loop: Header=BB42_281 Depth=1
	testb	$1, %al
	jne	.LBB42_284
	jmp	.LBB42_340
.LBB42_284:                             # %for.body2081
                                        #   in Loop: Header=BB42_281 Depth=1
	movl	$0, -24(%rbp)
.LBB42_285:                             # %for.cond2082
                                        #   Parent Loop BB42_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_287 Depth 3
                                        #         Child Loop BB42_289 Depth 4
                                        #         Child Loop BB42_293 Depth 4
                                        #       Child Loop BB42_299 Depth 3
                                        #         Child Loop BB42_303 Depth 4
                                        #         Child Loop BB42_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB42_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB42_285 Depth=2
	movl	$0, -12(%rbp)
.LBB42_287:                             # %for.cond2087
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_289 Depth 4
                                        #         Child Loop BB42_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB42_287 Depth=3
	movl	$0, -16(%rbp)
.LBB42_289:                             # %for.cond2091
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        #       Parent Loop BB42_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB42_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB42_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_289
.LBB42_292:                             # %for.end2106
                                        #   in Loop: Header=BB42_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB42_293:                             # %for.cond2125
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        #       Parent Loop BB42_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB42_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB42_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB42_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_293
.LBB42_296:                             # %for.end2156
                                        #   in Loop: Header=BB42_287 Depth=3
	jmp	.LBB42_297
.LBB42_297:                             # %for.inc2157
                                        #   in Loop: Header=BB42_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_287
.LBB42_298:                             # %for.end2159
                                        #   in Loop: Header=BB42_285 Depth=2
	movl	$0, -16(%rbp)
.LBB42_299:                             # %for.cond2160
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_303 Depth 4
                                        #         Child Loop BB42_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB42_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB42_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB42_301:                             # %land.end2166
                                        #   in Loop: Header=BB42_299 Depth=3
	testb	$1, %al
	jne	.LBB42_302
	jmp	.LBB42_336
.LBB42_302:                             # %for.body2168
                                        #   in Loop: Header=BB42_299 Depth=3
	movl	$0, -12(%rbp)
.LBB42_303:                             # %for.cond2169
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        #       Parent Loop BB42_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB42_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB42_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_303
.LBB42_306:                             # %for.end2184
                                        #   in Loop: Header=BB42_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB42_307:                             # %for.cond2203
                                        #   Parent Loop BB42_281 Depth=1
                                        #     Parent Loop BB42_285 Depth=2
                                        #       Parent Loop BB42_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB42_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB42_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB42_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB42_312
.LBB42_311:                             # %cond.false2231
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB42_312:                             # %cond.end2250
                                        #   in Loop: Header=BB42_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB42_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB42_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB42_318
.LBB42_314:                             # %cond.false2257
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB42_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB42_317
.LBB42_316:                             # %cond.false2279
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB42_317:                             # %cond.end2298
                                        #   in Loop: Header=BB42_307 Depth=4
.LBB42_318:                             # %cond.end2300
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB42_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB42_321
.LBB42_320:                             # %cond.false2333
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB42_321:                             # %cond.end2352
                                        #   in Loop: Header=BB42_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB42_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB42_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB42_327
.LBB42_323:                             # %cond.false2359
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB42_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB42_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB42_326
.LBB42_325:                             # %cond.false2381
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB42_326:                             # %cond.end2400
                                        #   in Loop: Header=BB42_307 Depth=4
.LBB42_327:                             # %cond.end2402
                                        #   in Loop: Header=BB42_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB42_332
.LBB42_328:                             # %if.else2412
                                        #   in Loop: Header=BB42_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB42_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB42_331
.LBB42_330:                             # %if.else2439
                                        #   in Loop: Header=BB42_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB42_331:                             # %if.end2468
                                        #   in Loop: Header=BB42_307 Depth=4
	jmp	.LBB42_332
.LBB42_332:                             # %if.end2469
                                        #   in Loop: Header=BB42_307 Depth=4
	jmp	.LBB42_333
.LBB42_333:                             # %for.inc2470
                                        #   in Loop: Header=BB42_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_307
.LBB42_334:                             # %for.end2472
                                        #   in Loop: Header=BB42_299 Depth=3
	jmp	.LBB42_335
.LBB42_335:                             # %for.inc2473
                                        #   in Loop: Header=BB42_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_299
.LBB42_336:                             # %for.end2475
                                        #   in Loop: Header=BB42_285 Depth=2
	jmp	.LBB42_337
.LBB42_337:                             # %for.inc2476
                                        #   in Loop: Header=BB42_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_285
.LBB42_338:                             # %for.end2478
                                        #   in Loop: Header=BB42_281 Depth=1
	jmp	.LBB42_339
.LBB42_339:                             # %for.inc2479
                                        #   in Loop: Header=BB42_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB42_281
.LBB42_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB42_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB42_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB42_342 Depth=1
	movl	$0, -16(%rbp)
.LBB42_344:                             # %for.cond2490
                                        #   Parent Loop BB42_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB42_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB42_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB42_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB42_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_348
.LBB42_347:                             # %if.else2518
                                        #   in Loop: Header=BB42_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB42_348:                             # %if.end2536
                                        #   in Loop: Header=BB42_344 Depth=2
	jmp	.LBB42_349
.LBB42_349:                             # %for.inc2537
                                        #   in Loop: Header=BB42_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_344
.LBB42_350:                             # %for.end2539
                                        #   in Loop: Header=BB42_342 Depth=1
	jmp	.LBB42_351
.LBB42_351:                             # %for.inc2540
                                        #   in Loop: Header=BB42_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_342
.LBB42_352:                             # %for.end2542
	jmp	.LBB42_353
.LBB42_353:                             # %if.end2543
	movl	-132(%rbp), %ebx
	cmpl	$490303099, -380(%rbp)  # imm = 0x1D396E7B
	jne	.LBB42_355
.LBB42_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_354
.Lfunc_end42:
	.size	dct_chroma.33, .Lfunc_end42-dct_chroma.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.34
.LCPI43_0:
	.quad	4616189618054758400     # double 4
.LCPI43_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI43_2:
	.quad	4611686018427387904     # double 2
.LCPI43_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.34
	.p2align	4, 0x90
	.type	dct_chroma_sp.34,@function
dct_chroma_sp.34:                       # @dct_chroma_sp.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI43_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$125267698, -268(%rbp)  # imm = 0x7776EF2
	movl	%edi, -112(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB43_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB43_6
.LBB43_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB43_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB43_5
.LBB43_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB43_5:                               # %cond.end
.LBB43_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB43_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB43_12
.LBB43_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB43_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB43_11
.LBB43_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB43_11:                              # %cond.end41
.LBB43_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB43_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB43_15
.LBB43_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB43_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB43_18
.LBB43_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-124(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB43_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB43_21
.LBB43_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB43_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB43_24
.LBB43_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB43_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -212(%rbp)
	movl	$0, -12(%rbp)
.LBB43_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB43_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	$0, -16(%rbp)
.LBB43_27:                              # %for.cond97
                                        #   Parent Loop BB43_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB43_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB43_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB43_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_27
.LBB43_30:                              # %for.end
                                        #   in Loop: Header=BB43_25 Depth=1
	jmp	.LBB43_31
.LBB43_31:                              # %for.inc121
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_25
.LBB43_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB43_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_35 Depth 2
                                        #       Child Loop BB43_37 Depth 3
                                        #         Child Loop BB43_39 Depth 4
                                        #       Child Loop BB43_45 Depth 3
                                        #         Child Loop BB43_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB43_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB43_33 Depth=1
	movl	$0, -20(%rbp)
.LBB43_35:                              # %for.cond128
                                        #   Parent Loop BB43_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_37 Depth 3
                                        #         Child Loop BB43_39 Depth 4
                                        #       Child Loop BB43_45 Depth 3
                                        #         Child Loop BB43_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB43_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB43_35 Depth=2
	movl	$0, -12(%rbp)
.LBB43_37:                              # %for.cond132
                                        #   Parent Loop BB43_33 Depth=1
                                        #     Parent Loop BB43_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB43_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB43_39:                              # %for.cond137
                                        #   Parent Loop BB43_33 Depth=1
                                        #     Parent Loop BB43_35 Depth=2
                                        #       Parent Loop BB43_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB43_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB43_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-48(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB43_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_39
.LBB43_42:                              # %for.end174
                                        #   in Loop: Header=BB43_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB43_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_37
.LBB43_44:                              # %for.end214
                                        #   in Loop: Header=BB43_35 Depth=2
	movl	$0, -16(%rbp)
.LBB43_45:                              # %for.cond215
                                        #   Parent Loop BB43_33 Depth=1
                                        #     Parent Loop BB43_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB43_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB43_47:                              # %for.cond220
                                        #   Parent Loop BB43_33 Depth=1
                                        #     Parent Loop BB43_35 Depth=2
                                        #       Parent Loop BB43_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB43_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB43_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_47
.LBB43_50:                              # %for.end257
                                        #   in Loop: Header=BB43_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB43_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_45
.LBB43_52:                              # %for.end298
                                        #   in Loop: Header=BB43_35 Depth=2
	jmp	.LBB43_53
.LBB43_53:                              # %for.inc299
                                        #   in Loop: Header=BB43_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_35
.LBB43_54:                              # %for.end301
                                        #   in Loop: Header=BB43_33 Depth=1
	jmp	.LBB43_55
.LBB43_55:                              # %for.inc302
                                        #   in Loop: Header=BB43_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_33
.LBB43_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB43_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_59 Depth 2
                                        #       Child Loop BB43_61 Depth 3
                                        #         Child Loop BB43_63 Depth 4
                                        #       Child Loop BB43_69 Depth 3
                                        #         Child Loop BB43_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB43_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	$0, -20(%rbp)
.LBB43_59:                              # %for.cond309
                                        #   Parent Loop BB43_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_61 Depth 3
                                        #         Child Loop BB43_63 Depth 4
                                        #       Child Loop BB43_69 Depth 3
                                        #         Child Loop BB43_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB43_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB43_59 Depth=2
	movl	$0, -12(%rbp)
.LBB43_61:                              # %for.cond313
                                        #   Parent Loop BB43_57 Depth=1
                                        #     Parent Loop BB43_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -16(%rbp)
.LBB43_63:                              # %for.cond318
                                        #   Parent Loop BB43_57 Depth=1
                                        #     Parent Loop BB43_59 Depth=2
                                        #       Parent Loop BB43_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB43_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB43_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB43_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_63
.LBB43_66:                              # %for.end351
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-48(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_61
.LBB43_68:                              # %for.end387
                                        #   in Loop: Header=BB43_59 Depth=2
	movl	$0, -16(%rbp)
.LBB43_69:                              # %for.cond388
                                        #   Parent Loop BB43_57 Depth=1
                                        #     Parent Loop BB43_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB43_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB43_71:                              # %for.cond393
                                        #   Parent Loop BB43_57 Depth=1
                                        #     Parent Loop BB43_59 Depth=2
                                        #       Parent Loop BB43_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB43_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB43_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_71
.LBB43_74:                              # %for.end426
                                        #   in Loop: Header=BB43_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB43_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_69
.LBB43_76:                              # %for.end463
                                        #   in Loop: Header=BB43_59 Depth=2
	jmp	.LBB43_77
.LBB43_77:                              # %for.inc464
                                        #   in Loop: Header=BB43_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_59
.LBB43_78:                              # %for.end466
                                        #   in Loop: Header=BB43_57 Depth=1
	jmp	.LBB43_79
.LBB43_79:                              # %for.inc467
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_57
.LBB43_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB43_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB43_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB43_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB43_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB43_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB43_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB43_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB43_90
	jp	.LBB43_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB43_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB43_89
.LBB43_88:                              # %cond.false691
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-44(%rbp), %eax
.LBB43_89:                              # %cond.end692
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB43_94
.LBB43_90:                              # %if.else
                                        #   in Loop: Header=BB43_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_93
.LBB43_92:                              # %if.else697
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB43_93:                              # %if.end
                                        #   in Loop: Header=BB43_81 Depth=1
	jmp	.LBB43_94
.LBB43_94:                              # %if.end698
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB43_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB43_97
.LBB43_96:                              # %cond.false702
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-104(%rbp), %eax
.LBB43_97:                              # %cond.end703
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB43_108
.LBB43_98:                              # %if.else705
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB43_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB43_107
.LBB43_100:                             # %if.else709
                                        #   in Loop: Header=BB43_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB43_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB43_103
.LBB43_102:                             # %cond.false713
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-44(%rbp), %eax
.LBB43_103:                             # %cond.end714
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB43_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB43_106
.LBB43_105:                             # %cond.false719
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-104(%rbp), %eax
.LBB43_106:                             # %cond.end720
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB43_107:                             # %if.end722
                                        #   in Loop: Header=BB43_81 Depth=1
	jmp	.LBB43_108
.LBB43_108:                             # %if.end723
                                        #   in Loop: Header=BB43_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB43_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB43_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB43_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB43_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB43_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB43_112:                             # %if.end734
                                        #   in Loop: Header=BB43_81 Depth=1
	jmp	.LBB43_113
.LBB43_113:                             # %if.end735
                                        #   in Loop: Header=BB43_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB43_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB43_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	$1, %eax
	jmp	.LBB43_117
.LBB43_116:                             # %cond.false745
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-208(%rbp), %eax
.LBB43_117:                             # %cond.end746
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB43_118:                             # %if.end763
                                        #   in Loop: Header=BB43_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB43_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_81
.LBB43_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB43_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_123 Depth 2
                                        #       Child Loop BB43_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB43_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB43_121 Depth=1
	movl	$0, -20(%rbp)
.LBB43_123:                             # %for.cond839
                                        #   Parent Loop BB43_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB43_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB43_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB43_125:                             # %for.cond860
                                        #   Parent Loop BB43_121 Depth=1
                                        #     Parent Loop BB43_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB43_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB43_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB43_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB43_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB43_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB43_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB43_130
.LBB43_129:                             # %if.then867
                                        #   in Loop: Header=BB43_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_131
.LBB43_130:                             # %if.else876
                                        #   in Loop: Header=BB43_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB43_131:                             # %if.end885
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB43_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB43_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB43_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB43_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB43_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB43_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB43_139
	jp	.LBB43_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB43_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB43_138
.LBB43_137:                             # %cond.false1047
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-44(%rbp), %eax
.LBB43_138:                             # %cond.end1048
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB43_143
.LBB43_139:                             # %if.else1050
                                        #   in Loop: Header=BB43_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB43_142
.LBB43_141:                             # %if.else1054
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB43_142:                             # %if.end1055
                                        #   in Loop: Header=BB43_125 Depth=3
	jmp	.LBB43_143
.LBB43_143:                             # %if.end1056
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB43_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB43_146
.LBB43_145:                             # %cond.false1060
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-104(%rbp), %eax
.LBB43_146:                             # %cond.end1061
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB43_157
.LBB43_147:                             # %if.else1063
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB43_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB43_156
.LBB43_149:                             # %if.else1067
                                        #   in Loop: Header=BB43_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB43_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB43_152
.LBB43_151:                             # %cond.false1071
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-44(%rbp), %eax
.LBB43_152:                             # %cond.end1072
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB43_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB43_155
.LBB43_154:                             # %cond.false1077
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-104(%rbp), %eax
.LBB43_155:                             # %cond.end1078
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB43_156:                             # %if.end1080
                                        #   in Loop: Header=BB43_125 Depth=3
	jmp	.LBB43_157
.LBB43_157:                             # %if.end1081
                                        #   in Loop: Header=BB43_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB43_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB43_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB43_161
.LBB43_160:                             # %if.else1099
                                        #   in Loop: Header=BB43_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB43_161:                             # %if.end1106
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB43_162:                             # %if.end1128
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB43_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_125
.LBB43_164:                             # %for.end1164
                                        #   in Loop: Header=BB43_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB43_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_123
.LBB43_166:                             # %for.end1169
                                        #   in Loop: Header=BB43_121 Depth=1
	jmp	.LBB43_167
.LBB43_167:                             # %for.inc1170
                                        #   in Loop: Header=BB43_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_121
.LBB43_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB43_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB43_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB43_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_173 Depth 2
                                        #       Child Loop BB43_175 Depth 3
                                        #         Child Loop BB43_177 Depth 4
                                        #         Child Loop BB43_181 Depth 4
                                        #       Child Loop BB43_187 Depth 3
                                        #         Child Loop BB43_189 Depth 4
                                        #         Child Loop BB43_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB43_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB43_171 Depth=1
	movl	$0, -20(%rbp)
.LBB43_173:                             # %for.cond1181
                                        #   Parent Loop BB43_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_175 Depth 3
                                        #         Child Loop BB43_177 Depth 4
                                        #         Child Loop BB43_181 Depth 4
                                        #       Child Loop BB43_187 Depth 3
                                        #         Child Loop BB43_189 Depth 4
                                        #         Child Loop BB43_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB43_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB43_173 Depth=2
	movl	$0, -12(%rbp)
.LBB43_175:                             # %for.cond1185
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_177 Depth 4
                                        #         Child Loop BB43_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB43_175 Depth=3
	movl	$0, -16(%rbp)
.LBB43_177:                             # %for.cond1189
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        #       Parent Loop BB43_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB43_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB43_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_177
.LBB43_180:                             # %for.end1204
                                        #   in Loop: Header=BB43_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB43_181:                             # %for.cond1223
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        #       Parent Loop BB43_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB43_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB43_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB43_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_181
.LBB43_184:                             # %for.end1254
                                        #   in Loop: Header=BB43_175 Depth=3
	jmp	.LBB43_185
.LBB43_185:                             # %for.inc1255
                                        #   in Loop: Header=BB43_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_175
.LBB43_186:                             # %for.end1257
                                        #   in Loop: Header=BB43_173 Depth=2
	movl	$0, -16(%rbp)
.LBB43_187:                             # %for.cond1258
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_189 Depth 4
                                        #         Child Loop BB43_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB43_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB43_187 Depth=3
	movl	$0, -12(%rbp)
.LBB43_189:                             # %for.cond1262
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        #       Parent Loop BB43_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB43_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB43_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB43_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_189
.LBB43_192:                             # %for.end1277
                                        #   in Loop: Header=BB43_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB43_193:                             # %for.cond1296
                                        #   Parent Loop BB43_171 Depth=1
                                        #     Parent Loop BB43_173 Depth=2
                                        #       Parent Loop BB43_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB43_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB43_197
.LBB43_196:                             # %cond.false1311
                                        #   in Loop: Header=BB43_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB43_197:                             # %cond.end1319
                                        #   in Loop: Header=BB43_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB43_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB43_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB43_203
.LBB43_199:                             # %cond.false1325
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB43_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB43_202
.LBB43_201:                             # %cond.false1336
                                        #   in Loop: Header=BB43_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB43_202:                             # %cond.end1344
                                        #   in Loop: Header=BB43_193 Depth=4
.LBB43_203:                             # %cond.end1346
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-56(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB43_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB43_206
.LBB43_205:                             # %cond.false1366
                                        #   in Loop: Header=BB43_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB43_206:                             # %cond.end1374
                                        #   in Loop: Header=BB43_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB43_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB43_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB43_212
.LBB43_208:                             # %cond.false1380
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB43_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB43_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB43_211
.LBB43_210:                             # %cond.false1391
                                        #   in Loop: Header=BB43_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB43_211:                             # %cond.end1399
                                        #   in Loop: Header=BB43_193 Depth=4
.LBB43_212:                             # %cond.end1401
                                        #   in Loop: Header=BB43_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-56(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB43_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_193
.LBB43_214:                             # %for.end1412
                                        #   in Loop: Header=BB43_187 Depth=3
	jmp	.LBB43_215
.LBB43_215:                             # %for.inc1413
                                        #   in Loop: Header=BB43_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_187
.LBB43_216:                             # %for.end1415
                                        #   in Loop: Header=BB43_173 Depth=2
	jmp	.LBB43_217
.LBB43_217:                             # %for.inc1416
                                        #   in Loop: Header=BB43_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_173
.LBB43_218:                             # %for.end1418
                                        #   in Loop: Header=BB43_171 Depth=1
	jmp	.LBB43_219
.LBB43_219:                             # %for.inc1419
                                        #   in Loop: Header=BB43_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_171
.LBB43_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB43_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB43_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB43_221 Depth=1
	movl	$0, -16(%rbp)
.LBB43_223:                             # %for.cond1426
                                        #   Parent Loop BB43_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB43_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB43_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB43_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_223
.LBB43_226:                             # %for.end1446
                                        #   in Loop: Header=BB43_221 Depth=1
	jmp	.LBB43_227
.LBB43_227:                             # %for.inc1447
                                        #   in Loop: Header=BB43_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_221
.LBB43_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$125267698, -268(%rbp)  # imm = 0x7776EF2
	jne	.LBB43_230
.LBB43_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_229
.Lfunc_end43:
	.size	dct_chroma_sp.34, .Lfunc_end43-dct_chroma_sp.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.35
.LCPI44_0:
	.quad	4616189618054758400     # double 4
.LCPI44_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI44_2:
	.quad	4611686018427387904     # double 2
.LCPI44_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.35
	.p2align	4, 0x90
	.type	dct_luma_sp.35,@function
dct_luma_sp.35:                         # @dct_luma_sp.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI44_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1237623526, -216(%rbp) # imm = 0x49C4A2E6
	movl	%edi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -240(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -200(%rbp)
	movl	-192(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-188(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-200(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-180(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI44_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -232(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -116(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -108(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -184(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -136(%rbp)
	movl	-184(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -208(%rbp)
	movl	$0, -12(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -16(%rbp)
.LBB44_3:                               # %for.cond38
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_3
.LBB44_6:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_7
.LBB44_7:                               # %for.inc66
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_1
.LBB44_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB44_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	$0, -16(%rbp)
.LBB44_11:                              # %for.cond73
                                        #   Parent Loop BB44_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB44_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB44_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB44_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_11
.LBB44_14:                              # %for.end106
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB44_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_9
.LBB44_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB44_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	$0, -12(%rbp)
.LBB44_19:                              # %for.cond144
                                        #   Parent Loop BB44_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB44_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_19
.LBB44_22:                              # %for.end177
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_17
.LBB44_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB44_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	$0, -16(%rbp)
.LBB44_27:                              # %for.cond215
                                        #   Parent Loop BB44_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB44_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB44_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB44_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end244
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_25
.LBB44_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB44_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	$0, -12(%rbp)
.LBB44_35:                              # %for.cond278
                                        #   Parent Loop BB44_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB44_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB44_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_35
.LBB44_38:                              # %for.end307
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB44_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_33
.LBB44_40:                              # %for.end336
	movl	$0, -204(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -68(%rbp)
.LBB44_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB44_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB44_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB44_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB44_46
.LBB44_45:                              # %if.then
                                        #   in Loop: Header=BB44_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_47
.LBB44_46:                              # %if.else
                                        #   in Loop: Header=BB44_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB44_47:                              # %if.end
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB44_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB44_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB44_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-124(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-232(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB44_55
	jp	.LBB44_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB44_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB44_54
.LBB44_53:                              # %cond.false
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-56(%rbp), %eax
.LBB44_54:                              # %cond.end
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB44_59
.LBB44_55:                              # %if.else500
                                        #   in Loop: Header=BB44_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB44_58
.LBB44_57:                              # %if.else504
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB44_58:                              # %if.end505
                                        #   in Loop: Header=BB44_41 Depth=1
	jmp	.LBB44_59
.LBB44_59:                              # %if.end506
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB44_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB44_62
.LBB44_61:                              # %cond.false510
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-124(%rbp), %eax
.LBB44_62:                              # %cond.end511
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	%eax, -140(%rbp)
	jmp	.LBB44_73
.LBB44_63:                              # %if.else513
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB44_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB44_72
.LBB44_65:                              # %if.else517
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB44_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB44_68
.LBB44_67:                              # %cond.false521
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-56(%rbp), %eax
.LBB44_68:                              # %cond.end522
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB44_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-100(%rbp), %eax
	jmp	.LBB44_71
.LBB44_70:                              # %cond.false527
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-124(%rbp), %eax
.LBB44_71:                              # %cond.end528
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	%eax, -140(%rbp)
.LBB44_72:                              # %if.end530
                                        #   in Loop: Header=BB44_41 Depth=1
	jmp	.LBB44_73
.LBB44_73:                              # %if.end531
                                        #   in Loop: Header=BB44_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB44_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	$1, -204(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB44_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB44_41 Depth=1
	movq	-240(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB44_77
.LBB44_76:                              # %if.else539
                                        #   in Loop: Header=BB44_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-240(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB44_77:                              # %if.end546
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB44_78:                              # %if.end568
                                        #   in Loop: Header=BB44_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-136(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-184(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB44_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB44_41
.LBB44_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB44_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_83 Depth 2
                                        #     Child Loop BB44_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	$0, -16(%rbp)
.LBB44_83:                              # %for.cond607
                                        #   Parent Loop BB44_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB44_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB44_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_83
.LBB44_86:                              # %for.end620
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB44_87:                              # %for.cond639
                                        #   Parent Loop BB44_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB44_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB44_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB44_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_87
.LBB44_90:                              # %for.end666
                                        #   in Loop: Header=BB44_81 Depth=1
	jmp	.LBB44_91
.LBB44_91:                              # %for.inc667
                                        #   in Loop: Header=BB44_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_81
.LBB44_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB44_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_95 Depth 2
                                        #     Child Loop BB44_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB44_93 Depth=1
	movl	$0, -12(%rbp)
.LBB44_95:                              # %for.cond674
                                        #   Parent Loop BB44_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB44_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB44_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_95
.LBB44_98:                              # %for.end687
                                        #   in Loop: Header=BB44_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB44_99:                              # %for.cond706
                                        #   Parent Loop BB44_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB44_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_103
.LBB44_102:                             # %cond.false721
                                        #   in Loop: Header=BB44_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_103:                             # %cond.end729
                                        #   in Loop: Header=BB44_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB44_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_109
.LBB44_105:                             # %cond.false735
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_108
.LBB44_107:                             # %cond.false746
                                        #   in Loop: Header=BB44_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_108:                             # %cond.end754
                                        #   in Loop: Header=BB44_99 Depth=2
.LBB44_109:                             # %cond.end756
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB44_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB44_112
.LBB44_111:                             # %cond.false774
                                        #   in Loop: Header=BB44_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB44_112:                             # %cond.end782
                                        #   in Loop: Header=BB44_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB44_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB44_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_118
.LBB44_114:                             # %cond.false788
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB44_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB44_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_117
.LBB44_116:                             # %cond.false799
                                        #   in Loop: Header=BB44_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_117:                             # %cond.end807
                                        #   in Loop: Header=BB44_99 Depth=2
.LBB44_118:                             # %cond.end809
                                        #   in Loop: Header=BB44_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB44_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_99
.LBB44_120:                             # %for.end818
                                        #   in Loop: Header=BB44_93 Depth=1
	jmp	.LBB44_121
.LBB44_121:                             # %for.inc819
                                        #   in Loop: Header=BB44_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_93
.LBB44_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB44_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB44_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB44_123 Depth=1
	movl	$0, -16(%rbp)
.LBB44_125:                             # %for.cond826
                                        #   Parent Loop BB44_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB44_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB44_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_125
.LBB44_128:                             # %for.end846
                                        #   in Loop: Header=BB44_123 Depth=1
	jmp	.LBB44_129
.LBB44_129:                             # %for.inc847
                                        #   in Loop: Header=BB44_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_123
.LBB44_130:                             # %for.end849
	movl	-204(%rbp), %ebx
	cmpl	$1237623526, -216(%rbp) # imm = 0x49C4A2E6
	jne	.LBB44_132
.LBB44_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_131
.Lfunc_end44:
	.size	dct_luma_sp.35, .Lfunc_end44-dct_luma_sp.35
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.36       # -- Begin function intrapred_luma.36
	.p2align	4, 0x90
	.type	intrapred_luma.36,@function
intrapred_luma.36:                      # @intrapred_luma.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1315979831, -172(%rbp) # imm = 0x4E704237
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_1
.LBB45_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	addl	$4, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-88(%rbp), %esi
	subl	$1, %esi
	movl	-84(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB45_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -88(%rbp)
	je	.LBB45_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -88(%rbp)
	jne	.LBB45_10
.LBB45_7:                               # %land.rhs10
	cmpl	$4, -84(%rbp)
	movb	$1, %al
	je	.LBB45_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -84(%rbp)
	sete	%al
.LBB45_9:                               # %lor.end
.LBB45_10:                              # %land.end
	xorb	$-1, %al
.LBB45_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB45_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB45_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB45_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB45_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB45_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_17
.LBB45_16:                              # %cond.false
                                        #   in Loop: Header=BB45_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB45_17
.LBB45_17:                              # %cond.end
                                        #   in Loop: Header=BB45_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB45_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_13
.LBB45_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB45_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_22
.LBB45_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB45_22
.LBB45_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB45_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_25
.LBB45_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB45_25
.LBB45_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB45_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB45_28
.LBB45_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB45_28
.LBB45_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB45_30
.LBB45_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB45_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-224(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB45_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB45_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB45_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB45_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB45_36
.LBB45_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB45_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB45_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_39
.LBB45_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB45_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB45_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_42
.LBB45_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB45_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB45_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB45_45
.LBB45_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB45_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB45_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB45_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB45_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB45_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_46
.LBB45_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB45_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB45_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_61
.LBB45_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB45_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB45_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_60
.LBB45_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB45_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB45_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB45_59
.LBB45_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB45_59:                              # %if.end284
	jmp	.LBB45_60
.LBB45_60:                              # %if.end285
	jmp	.LBB45_61
.LBB45_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB45_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB45_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB45_62 Depth=1
	movl	$0, -4(%rbp)
.LBB45_64:                              # %for.cond291
                                        #   Parent Loop BB45_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB45_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB45_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_64
.LBB45_67:                              # %for.end304
                                        #   in Loop: Header=BB45_62 Depth=1
	jmp	.LBB45_68
.LBB45_68:                              # %for.inc305
                                        #   in Loop: Header=BB45_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB45_62
.LBB45_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB45_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB45_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB45_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_70
.LBB45_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB45_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB45_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB45_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB45_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB45_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB45_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB45_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB45_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB45_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB45_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB45_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB45_85:                              # %if.end1174
	cmpl	$1315979831, -172(%rbp) # imm = 0x4E704237
	jne	.LBB45_87
.LBB45_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_86
.Lfunc_end45:
	.size	intrapred_luma.36, .Lfunc_end45-intrapred_luma.36
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.37             # -- Begin function dct_luma.37
	.p2align	4, 0x90
	.type	dct_luma.37,@function
dct_luma.37:                            # @dct_luma.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1630054795, -148(%rbp) # imm = 0x6128A98B
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB46_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB46_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB46_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB46_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB46_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_5:                               # %land.end32
                                        #   in Loop: Header=BB46_3 Depth=1
	testb	$1, %al
	jne	.LBB46_6
	jmp	.LBB46_12
.LBB46_6:                               # %for.body
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	$0, -16(%rbp)
.LBB46_7:                               # %for.cond34
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB46_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_7
.LBB46_10:                              # %for.end
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_3
.LBB46_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB46_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB46_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB46_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_15:                              # %land.end101
                                        #   in Loop: Header=BB46_13 Depth=1
	testb	$1, %al
	jne	.LBB46_16
	jmp	.LBB46_22
.LBB46_16:                              # %for.body103
                                        #   in Loop: Header=BB46_13 Depth=1
	movl	$0, -12(%rbp)
.LBB46_17:                              # %for.cond104
                                        #   Parent Loop BB46_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB46_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB46_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB46_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_17
.LBB46_20:                              # %for.end136
                                        #   in Loop: Header=BB46_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB46_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_13
.LBB46_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -88(%rbp)
.LBB46_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB46_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB46_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_28
.LBB46_27:                              # %if.then
                                        #   in Loop: Header=BB46_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_29
.LBB46_28:                              # %if.else
                                        #   in Loop: Header=BB46_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB46_29:                              # %if.end
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB46_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB46_35
.LBB46_31:                              # %if.else199
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB46_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_34
.LBB46_33:                              # %if.else223
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB46_34:                              # %if.end245
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_35
.LBB46_35:                              # %if.end246
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB46_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB46_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB46_39
.LBB46_38:                              # %if.then254
                                        #   in Loop: Header=BB46_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB46_40
.LBB46_39:                              # %if.else256
                                        #   in Loop: Header=BB46_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB46_40:                              # %if.end263
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB46_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB46_52
.LBB46_42:                              # %if.else283
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB46_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB46_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB46_46
.LBB46_45:                              # %if.else301
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB46_46:                              # %if.end314
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_51
.LBB46_47:                              # %if.else315
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB46_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB46_50
.LBB46_49:                              # %if.else328
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB46_50:                              # %if.end338
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_51
.LBB46_51:                              # %if.end339
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_52
.LBB46_52:                              # %if.end340
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_53
.LBB46_53:                              # %if.end341
                                        #   in Loop: Header=BB46_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB46_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_55:                              # %if.end349
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_56
.LBB46_56:                              # %for.inc350
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB46_23
.LBB46_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB46_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_62 Depth 2
                                        #     Child Loop BB46_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB46_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB46_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_60:                              # %land.end361
                                        #   in Loop: Header=BB46_58 Depth=1
	testb	$1, %al
	jne	.LBB46_61
	jmp	.LBB46_71
.LBB46_61:                              # %for.body363
                                        #   in Loop: Header=BB46_58 Depth=1
	movl	$0, -16(%rbp)
.LBB46_62:                              # %for.cond364
                                        #   Parent Loop BB46_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB46_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB46_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_62
.LBB46_65:                              # %for.end377
                                        #   in Loop: Header=BB46_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB46_66:                              # %for.cond396
                                        #   Parent Loop BB46_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB46_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB46_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB46_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_66
.LBB46_69:                              # %for.end423
                                        #   in Loop: Header=BB46_58 Depth=1
	jmp	.LBB46_70
.LBB46_70:                              # %for.inc424
                                        #   in Loop: Header=BB46_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_58
.LBB46_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB46_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_76 Depth 2
                                        #     Child Loop BB46_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB46_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB46_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB46_74:                              # %land.end433
                                        #   in Loop: Header=BB46_72 Depth=1
	testb	$1, %al
	jne	.LBB46_75
	jmp	.LBB46_109
.LBB46_75:                              # %for.body435
                                        #   in Loop: Header=BB46_72 Depth=1
	movl	$0, -12(%rbp)
.LBB46_76:                              # %for.cond436
                                        #   Parent Loop BB46_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB46_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB46_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_76
.LBB46_79:                              # %for.end449
                                        #   in Loop: Header=BB46_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB46_80:                              # %for.cond468
                                        #   Parent Loop BB46_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB46_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB46_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB46_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB46_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB46_85
.LBB46_84:                              # %cond.false
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB46_85:                              # %cond.end
                                        #   in Loop: Header=BB46_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB46_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB46_91
.LBB46_87:                              # %cond.false518
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB46_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_90
.LBB46_89:                              # %cond.false540
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB46_90:                              # %cond.end559
                                        #   in Loop: Header=BB46_80 Depth=2
.LBB46_91:                              # %cond.end561
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB46_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB46_94
.LBB46_93:                              # %cond.false592
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB46_94:                              # %cond.end611
                                        #   in Loop: Header=BB46_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB46_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB46_100
.LBB46_96:                              # %cond.false618
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB46_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB46_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB46_99
.LBB46_98:                              # %cond.false640
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB46_99:                              # %cond.end659
                                        #   in Loop: Header=BB46_80 Depth=2
.LBB46_100:                             # %cond.end661
                                        #   in Loop: Header=BB46_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB46_105
.LBB46_101:                             # %if.else669
                                        #   in Loop: Header=BB46_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB46_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB46_104
.LBB46_103:                             # %if.else692
                                        #   in Loop: Header=BB46_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_104:                             # %if.end717
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_105
.LBB46_105:                             # %if.end718
                                        #   in Loop: Header=BB46_80 Depth=2
	jmp	.LBB46_106
.LBB46_106:                             # %for.inc719
                                        #   in Loop: Header=BB46_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_80
.LBB46_107:                             # %for.end721
                                        #   in Loop: Header=BB46_72 Depth=1
	jmp	.LBB46_108
.LBB46_108:                             # %for.inc722
                                        #   in Loop: Header=BB46_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_72
.LBB46_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB46_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB46_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB46_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB46_111 Depth=1
	movl	$0, -16(%rbp)
.LBB46_113:                             # %for.cond732
                                        #   Parent Loop BB46_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB46_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB46_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB46_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB46_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB46_117
.LBB46_116:                             # %if.else761
                                        #   in Loop: Header=BB46_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB46_117:                             # %if.end779
                                        #   in Loop: Header=BB46_113 Depth=2
	jmp	.LBB46_118
.LBB46_118:                             # %for.inc780
                                        #   in Loop: Header=BB46_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_113
.LBB46_119:                             # %for.end782
                                        #   in Loop: Header=BB46_111 Depth=1
	jmp	.LBB46_120
.LBB46_120:                             # %for.inc783
                                        #   in Loop: Header=BB46_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_111
.LBB46_121:                             # %for.end785
	jmp	.LBB46_122
.LBB46_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$1630054795, -148(%rbp) # imm = 0x6128A98B
	jne	.LBB46_124
.LBB46_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_123
.Lfunc_end46:
	.size	dct_luma.37, .Lfunc_end46-dct_luma.37
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.38        # -- Begin function dct_chroma_DC.38
	.p2align	4, 0x90
	.type	dct_chroma_DC.38,@function
dct_chroma_DC.38:                       # @dct_chroma_DC.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1065155783, -44(%rbp)  # imm = 0x3F7CFCC7
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB47_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB47_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB47_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$1, %eax
	jmp	.LBB47_6
.LBB47_5:                               # %cond.false
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-24(%rbp), %eax
.LBB47_6:                               # %cond.end
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -20(%rbp)
.LBB47_7:                               # %if.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_1
.LBB47_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$1065155783, -44(%rbp)  # imm = 0x3F7CFCC7
	jne	.LBB47_11
.LBB47_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_10
.Lfunc_end47:
	.size	dct_chroma_DC.38, .Lfunc_end47-dct_chroma_DC.38
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.39         # -- Begin function copyblock_sp.39
	.p2align	4, 0x90
	.type	copyblock_sp.39,@function
copyblock_sp.39:                        # @copyblock_sp.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$622807286, -88(%rbp)   # imm = 0x251F48F6
	movl	%edi, -84(%rbp)
	movl	%esi, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -72(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -8(%rbp)
.LBB48_3:                               # %for.cond4
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB48_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_3
.LBB48_6:                               # %for.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_7
.LBB48_7:                               # %for.inc17
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_1
.LBB48_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB48_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB48_9 Depth=1
	movl	$0, -8(%rbp)
.LBB48_11:                              # %for.cond24
                                        #   Parent Loop BB48_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB48_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB48_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_11
.LBB48_14:                              # %for.end53
                                        #   in Loop: Header=BB48_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB48_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_9
.LBB48_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB48_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	$0, -4(%rbp)
.LBB48_19:                              # %for.cond86
                                        #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB48_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_19
.LBB48_22:                              # %for.end115
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_17
.LBB48_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB48_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	$0, -8(%rbp)
.LBB48_27:                              # %for.cond149
                                        #   Parent Loop BB48_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-76(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-72(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_27
.LBB48_30:                              # %for.end184
                                        #   in Loop: Header=BB48_25 Depth=1
	jmp	.LBB48_31
.LBB48_31:                              # %for.inc185
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_25
.LBB48_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB48_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_35 Depth 2
                                        #     Child Loop BB48_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	$0, -8(%rbp)
.LBB48_35:                              # %for.cond192
                                        #   Parent Loop BB48_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB48_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB48_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_35
.LBB48_38:                              # %for.end205
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB48_39:                              # %for.cond224
                                        #   Parent Loop BB48_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB48_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB48_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB48_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_39
.LBB48_42:                              # %for.end251
                                        #   in Loop: Header=BB48_33 Depth=1
	jmp	.LBB48_43
.LBB48_43:                              # %for.inc252
                                        #   in Loop: Header=BB48_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_33
.LBB48_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB48_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_47 Depth 2
                                        #     Child Loop BB48_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	$0, -4(%rbp)
.LBB48_47:                              # %for.cond259
                                        #   Parent Loop BB48_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB48_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB48_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_47
.LBB48_50:                              # %for.end272
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB48_51:                              # %for.cond291
                                        #   Parent Loop BB48_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB48_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB48_55
.LBB48_54:                              # %cond.false
                                        #   in Loop: Header=BB48_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_55:                              # %cond.end
                                        #   in Loop: Header=BB48_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB48_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB48_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_61
.LBB48_57:                              # %cond.false316
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_60
.LBB48_59:                              # %cond.false327
                                        #   in Loop: Header=BB48_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_60:                              # %cond.end335
                                        #   in Loop: Header=BB48_51 Depth=2
.LBB48_61:                              # %cond.end337
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB48_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB48_64
.LBB48_63:                              # %cond.false355
                                        #   in Loop: Header=BB48_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB48_64:                              # %cond.end363
                                        #   in Loop: Header=BB48_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB48_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB48_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_70
.LBB48_66:                              # %cond.false369
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB48_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB48_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_69
.LBB48_68:                              # %cond.false380
                                        #   in Loop: Header=BB48_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB48_69:                              # %cond.end388
                                        #   in Loop: Header=BB48_51 Depth=2
.LBB48_70:                              # %cond.end390
                                        #   in Loop: Header=BB48_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB48_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_51
.LBB48_72:                              # %for.end399
                                        #   in Loop: Header=BB48_45 Depth=1
	jmp	.LBB48_73
.LBB48_73:                              # %for.inc400
                                        #   in Loop: Header=BB48_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_45
.LBB48_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB48_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB48_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB48_75 Depth=1
	movl	$0, -8(%rbp)
.LBB48_77:                              # %for.cond407
                                        #   Parent Loop BB48_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB48_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-80(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB48_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_77
.LBB48_80:                              # %for.end427
                                        #   in Loop: Header=BB48_75 Depth=1
	jmp	.LBB48_81
.LBB48_81:                              # %for.inc428
                                        #   in Loop: Header=BB48_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_75
.LBB48_82:                              # %for.end430
	cmpl	$622807286, -88(%rbp)   # imm = 0x251F48F6
	jne	.LBB48_84
.LBB48_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_83
.Lfunc_end48:
	.size	copyblock_sp.39, .Lfunc_end48-copyblock_sp.39
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.40        # -- Begin function dct_chroma4x4.40
	.p2align	4, 0x90
	.type	dct_chroma4x4.40,@function
dct_chroma4x4.40:                       # @dct_chroma4x4.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$37420258, -148(%rbp)   # imm = 0x23AFCE2
	movl	%edi, -28(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB49_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB49_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB49_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB49_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB49_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -84(%rbp)
	jge	.LBB49_7
# %bb.6:                                # %cond.true
	movl	-84(%rbp), %eax
	jmp	.LBB49_8
.LBB49_7:                               # %cond.false
	movl	-84(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB49_8:                               # %cond.end
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB49_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB49_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB49_10 Depth=1
	movl	$0, -16(%rbp)
.LBB49_12:                              # %for.cond31
                                        #   Parent Loop BB49_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB49_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB49_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_12
.LBB49_15:                              # %for.end
                                        #   in Loop: Header=BB49_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB49_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_10
.LBB49_17:                              # %for.end92
	jmp	.LBB49_18
.LBB49_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB49_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB49_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	$0, -12(%rbp)
.LBB49_22:                              # %for.cond99
                                        #   Parent Loop BB49_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB49_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB49_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_22
.LBB49_25:                              # %for.end132
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_20
.LBB49_27:                              # %for.end165
	jmp	.LBB49_28
.LBB49_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB49_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB49_34
.LBB49_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB49_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_33
.LBB49_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB49_33:                              # %if.end213
	jmp	.LBB49_34
.LBB49_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-88(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB49_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB49_46
.LBB49_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB49_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB49_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB49_40
.LBB49_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB49_40:                              # %if.end290
	jmp	.LBB49_45
.LBB49_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB49_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB49_44
.LBB49_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB49_44:                              # %if.end328
	jmp	.LBB49_45
.LBB49_45:                              # %if.end329
	jmp	.LBB49_46
.LBB49_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB49_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB49_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB49_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB49_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB49_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB49_54
.LBB49_50:                              # %if.else352
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB49_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB49_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_53
.LBB49_52:                              # %if.else381
                                        #   in Loop: Header=BB49_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB49_53:                              # %if.end407
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_54
.LBB49_54:                              # %if.end408
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB49_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB49_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB49_58
.LBB49_57:                              # %if.then415
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	$1, -132(%rbp)
.LBB49_58:                              # %if.end416
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB49_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB49_70
.LBB49_60:                              # %if.else436
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB49_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB49_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB49_64
.LBB49_63:                              # %if.else457
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB49_64:                              # %if.end472
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_69
.LBB49_65:                              # %if.else473
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB49_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB49_68
.LBB49_67:                              # %if.else488
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB49_68:                              # %if.end500
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_69
.LBB49_69:                              # %if.end501
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_70
.LBB49_70:                              # %if.end502
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_71
.LBB49_71:                              # %if.end503
                                        #   in Loop: Header=BB49_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB49_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB49_73:                              # %if.end511
                                        #   in Loop: Header=BB49_47 Depth=1
	jmp	.LBB49_74
.LBB49_74:                              # %for.inc512
                                        #   in Loop: Header=BB49_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB49_47
.LBB49_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB49_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB49_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_79 Depth 2
                                        #     Child Loop BB49_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB49_77 Depth=1
	movl	$0, -16(%rbp)
.LBB49_79:                              # %for.cond523
                                        #   Parent Loop BB49_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB49_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB49_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_79
.LBB49_82:                              # %for.end536
                                        #   in Loop: Header=BB49_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB49_83:                              # %for.cond555
                                        #   Parent Loop BB49_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB49_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB49_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB49_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_83
.LBB49_86:                              # %for.end582
                                        #   in Loop: Header=BB49_77 Depth=1
	jmp	.LBB49_87
.LBB49_87:                              # %for.inc583
                                        #   in Loop: Header=BB49_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_77
.LBB49_88:                              # %for.end585
	jmp	.LBB49_89
.LBB49_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB49_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB49_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_93 Depth 2
                                        #     Child Loop BB49_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB49_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB49_91 Depth=1
	movl	$0, -12(%rbp)
.LBB49_93:                              # %for.cond593
                                        #   Parent Loop BB49_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB49_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB49_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB49_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_93
.LBB49_96:                              # %for.end606
                                        #   in Loop: Header=BB49_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB49_97:                              # %for.cond625
                                        #   Parent Loop BB49_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB49_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB49_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB49_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_97
.LBB49_100:                             # %for.end656
                                        #   in Loop: Header=BB49_91 Depth=1
	jmp	.LBB49_101
.LBB49_101:                             # %for.inc657
                                        #   in Loop: Header=BB49_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_91
.LBB49_102:                             # %for.end659
	jmp	.LBB49_103
.LBB49_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$37420258, -148(%rbp)   # imm = 0x23AFCE2
	jne	.LBB49_105
.LBB49_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_104
.Lfunc_end49:
	.size	dct_chroma4x4.40, .Lfunc_end49-dct_chroma4x4.40
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.41        # -- Begin function dct_chroma_DC.41
	.p2align	4, 0x90
	.type	dct_chroma_DC.41,@function
dct_chroma_DC.41:                       # @dct_chroma_DC.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$569693596, -44(%rbp)   # imm = 0x21F4D59C
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB50_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB50_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$1, %eax
	cmpl	-28(%rbp), %eax
	jle	.LBB50_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$1, %eax
	jmp	.LBB50_6
.LBB50_5:                               # %cond.false
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-28(%rbp), %eax
.LBB50_6:                               # %cond.end
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-20(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -20(%rbp)
.LBB50_7:                               # %if.end
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_1
.LBB50_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-28(%rbp), %ebx
	cmpl	$569693596, -44(%rbp)   # imm = 0x21F4D59C
	jne	.LBB50_11
.LBB50_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_10
.Lfunc_end50:
	.size	dct_chroma_DC.41, .Lfunc_end50-dct_chroma_DC.41
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.42             # -- Begin function dct_luma.42
	.p2align	4, 0x90
	.type	dct_luma.42,@function
dct_luma.42:                            # @dct_luma.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1403256359, -148(%rbp) # imm = 0x53A3FE27
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -124(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-124(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB51_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB51_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -12(%rbp)
.LBB51_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB51_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB51_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB51_5:                               # %land.end32
                                        #   in Loop: Header=BB51_3 Depth=1
	testb	$1, %al
	jne	.LBB51_6
	jmp	.LBB51_12
.LBB51_6:                               # %for.body
                                        #   in Loop: Header=BB51_3 Depth=1
	movl	$0, -16(%rbp)
.LBB51_7:                               # %for.cond34
                                        #   Parent Loop BB51_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB51_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB51_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB51_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_7
.LBB51_10:                              # %for.end
                                        #   in Loop: Header=BB51_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB51_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_3
.LBB51_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB51_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB51_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB51_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB51_15:                              # %land.end101
                                        #   in Loop: Header=BB51_13 Depth=1
	testb	$1, %al
	jne	.LBB51_16
	jmp	.LBB51_22
.LBB51_16:                              # %for.body103
                                        #   in Loop: Header=BB51_13 Depth=1
	movl	$0, -12(%rbp)
.LBB51_17:                              # %for.cond104
                                        #   Parent Loop BB51_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB51_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB51_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB51_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_17
.LBB51_20:                              # %for.end136
                                        #   in Loop: Header=BB51_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB51_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_13
.LBB51_22:                              # %for.end169
	movl	$0, -120(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB51_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB51_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB51_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_28
.LBB51_27:                              # %if.then
                                        #   in Loop: Header=BB51_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_29
.LBB51_28:                              # %if.else
                                        #   in Loop: Header=BB51_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB51_29:                              # %if.end
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB51_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB51_35
.LBB51_31:                              # %if.else199
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB51_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_34
.LBB51_33:                              # %if.else223
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-128(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB51_34:                              # %if.end245
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_35
.LBB51_35:                              # %if.end246
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB51_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	$1, -120(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB51_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB51_39
.LBB51_38:                              # %if.then254
                                        #   in Loop: Header=BB51_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB51_40
.LBB51_39:                              # %if.else256
                                        #   in Loop: Header=BB51_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB51_40:                              # %if.end263
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB51_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB51_52
.LBB51_42:                              # %if.else283
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB51_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB51_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB51_46
.LBB51_45:                              # %if.else301
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB51_46:                              # %if.end314
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_51
.LBB51_47:                              # %if.else315
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB51_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB51_50
.LBB51_49:                              # %if.else328
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB51_50:                              # %if.end338
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_51
.LBB51_51:                              # %if.end339
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_52
.LBB51_52:                              # %if.end340
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_53
.LBB51_53:                              # %if.end341
                                        #   in Loop: Header=BB51_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB51_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB51_55:                              # %if.end349
                                        #   in Loop: Header=BB51_23 Depth=1
	jmp	.LBB51_56
.LBB51_56:                              # %for.inc350
                                        #   in Loop: Header=BB51_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB51_23
.LBB51_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB51_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_62 Depth 2
                                        #     Child Loop BB51_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB51_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB51_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB51_60:                              # %land.end361
                                        #   in Loop: Header=BB51_58 Depth=1
	testb	$1, %al
	jne	.LBB51_61
	jmp	.LBB51_71
.LBB51_61:                              # %for.body363
                                        #   in Loop: Header=BB51_58 Depth=1
	movl	$0, -16(%rbp)
.LBB51_62:                              # %for.cond364
                                        #   Parent Loop BB51_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB51_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB51_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB51_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_62
.LBB51_65:                              # %for.end377
                                        #   in Loop: Header=BB51_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB51_66:                              # %for.cond396
                                        #   Parent Loop BB51_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB51_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB51_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB51_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_66
.LBB51_69:                              # %for.end423
                                        #   in Loop: Header=BB51_58 Depth=1
	jmp	.LBB51_70
.LBB51_70:                              # %for.inc424
                                        #   in Loop: Header=BB51_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_58
.LBB51_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB51_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_76 Depth 2
                                        #     Child Loop BB51_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB51_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB51_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB51_74:                              # %land.end433
                                        #   in Loop: Header=BB51_72 Depth=1
	testb	$1, %al
	jne	.LBB51_75
	jmp	.LBB51_109
.LBB51_75:                              # %for.body435
                                        #   in Loop: Header=BB51_72 Depth=1
	movl	$0, -12(%rbp)
.LBB51_76:                              # %for.cond436
                                        #   Parent Loop BB51_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB51_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB51_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB51_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_76
.LBB51_79:                              # %for.end449
                                        #   in Loop: Header=BB51_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB51_80:                              # %for.cond468
                                        #   Parent Loop BB51_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB51_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB51_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB51_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB51_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB51_85
.LBB51_84:                              # %cond.false
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB51_85:                              # %cond.end
                                        #   in Loop: Header=BB51_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB51_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB51_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB51_91
.LBB51_87:                              # %cond.false518
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB51_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_90
.LBB51_89:                              # %cond.false540
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB51_90:                              # %cond.end559
                                        #   in Loop: Header=BB51_80 Depth=2
.LBB51_91:                              # %cond.end561
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB51_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB51_94
.LBB51_93:                              # %cond.false592
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB51_94:                              # %cond.end611
                                        #   in Loop: Header=BB51_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB51_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB51_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB51_100
.LBB51_96:                              # %cond.false618
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB51_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB51_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_99
.LBB51_98:                              # %cond.false640
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB51_99:                              # %cond.end659
                                        #   in Loop: Header=BB51_80 Depth=2
.LBB51_100:                             # %cond.end661
                                        #   in Loop: Header=BB51_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB51_105
.LBB51_101:                             # %if.else669
                                        #   in Loop: Header=BB51_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB51_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB51_104
.LBB51_103:                             # %if.else692
                                        #   in Loop: Header=BB51_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB51_104:                             # %if.end717
                                        #   in Loop: Header=BB51_80 Depth=2
	jmp	.LBB51_105
.LBB51_105:                             # %if.end718
                                        #   in Loop: Header=BB51_80 Depth=2
	jmp	.LBB51_106
.LBB51_106:                             # %for.inc719
                                        #   in Loop: Header=BB51_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_80
.LBB51_107:                             # %for.end721
                                        #   in Loop: Header=BB51_72 Depth=1
	jmp	.LBB51_108
.LBB51_108:                             # %for.inc722
                                        #   in Loop: Header=BB51_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_72
.LBB51_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB51_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB51_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB51_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB51_111 Depth=1
	movl	$0, -16(%rbp)
.LBB51_113:                             # %for.cond732
                                        #   Parent Loop BB51_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB51_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB51_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB51_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB51_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB51_117
.LBB51_116:                             # %if.else761
                                        #   in Loop: Header=BB51_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB51_117:                             # %if.end779
                                        #   in Loop: Header=BB51_113 Depth=2
	jmp	.LBB51_118
.LBB51_118:                             # %for.inc780
                                        #   in Loop: Header=BB51_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_113
.LBB51_119:                             # %for.end782
                                        #   in Loop: Header=BB51_111 Depth=1
	jmp	.LBB51_120
.LBB51_120:                             # %for.inc783
                                        #   in Loop: Header=BB51_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_111
.LBB51_121:                             # %for.end785
	jmp	.LBB51_122
.LBB51_122:                             # %if.end786
	movl	-120(%rbp), %ebx
	cmpl	$1403256359, -148(%rbp) # imm = 0x53A3FE27
	jne	.LBB51_124
.LBB51_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_123
.Lfunc_end51:
	.size	dct_luma.42, .Lfunc_end51-dct_luma.42
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma.43           # -- Begin function dct_chroma.43
	.p2align	4, 0x90
	.type	dct_chroma.43,@function
dct_chroma.43:                          # @dct_chroma.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$424, %rsp              # imm = 0x1A8
	.cfi_offset %rbx, -24
	movl	$2066583035, -380(%rbp) # imm = 0x7B2D8DFB
	movl	%edi, -20(%rbp)
	movl	%esi, -136(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -376(%rbp)
	movq	-192(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB52_3
# %bb.1:                                # %lor.lhs.false
	movq	-192(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB52_3
# %bb.2:                                # %lor.rhs
	movq	-192(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB52_3:                               # %lor.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -128(%rbp)
	movl	-20(%rbp), %esi
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	imull	%eax, %esi
	movl	%esi, -200(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern, %rax
	movq	%rax, -432(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+8, %rax
	movq	%rax, -424(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+16, %rax
	movq	%rax, -416(%rbp)
	movq	.L__const.dct_chroma.cbpblk_pattern+24, %rax
	movq	%rax, -408(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -132(%rbp)
	movl	$0, -212(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	cmpl	$0, %eax
	jne	.LBB52_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%cl
.LBB52_5:                               # %land.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	-192(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	movslq	-20(%rbp), %rsi
	addl	72716(%rdx,%rsi,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %ecx
	movq	img, %rdx
	subl	72672(%rdx), %eax
	cmpl	%eax, %ecx
	jge	.LBB52_7
# %bb.6:                                # %cond.true
	xorl	%eax, %eax
	movq	img, %rcx
	subl	72672(%rcx), %eax
	jmp	.LBB52_11
.LBB52_7:                               # %cond.false
	cmpl	$51, -124(%rbp)
	jle	.LBB52_9
# %bb.8:                                # %cond.true24
	movl	$51, %eax
	jmp	.LBB52_10
.LBB52_9:                               # %cond.false25
	movl	-124(%rbp), %eax
.LBB52_10:                              # %cond.end
.LBB52_11:                              # %cond.end26
	movl	%eax, -124(%rbp)
	cmpl	$0, -124(%rbp)
	jge	.LBB52_13
# %bb.12:                               # %cond.true29
	movl	-124(%rbp), %eax
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false30
	movl	-124(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB52_14:                              # %cond.end34
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	-124(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -76(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$2, 72700(%rax)
	jne	.LBB52_16
# %bb.15:                               # %if.then
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -104(%rbp)
	movl	-124(%rbp), %eax
	addl	$3, %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -132(%rbp)
	movl	-104(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -212(%rbp)
.LBB52_16:                              # %if.end
	movl	$0, -28(%rbp)
.LBB52_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_19 Depth 2
                                        #       Child Loop BB52_21 Depth 3
                                        #         Child Loop BB52_25 Depth 4
                                        #       Child Loop BB52_31 Depth 3
                                        #         Child Loop BB52_35 Depth 4
	movl	-28(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB52_44
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	$0, -24(%rbp)
.LBB52_19:                              # %for.cond56
                                        #   Parent Loop BB52_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_21 Depth 3
                                        #         Child Loop BB52_25 Depth 4
                                        #       Child Loop BB52_31 Depth 3
                                        #         Child Loop BB52_35 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_42
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$0, -12(%rbp)
.LBB52_21:                              # %for.cond60
                                        #   Parent Loop BB52_17 Depth=1
                                        #     Parent Loop BB52_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_25 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB52_23
# %bb.22:                               # %land.rhs63
                                        #   in Loop: Header=BB52_21 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_23:                              # %land.end64
                                        #   in Loop: Header=BB52_21 Depth=3
	testb	$1, %al
	jne	.LBB52_24
	jmp	.LBB52_30
.LBB52_24:                              # %for.body66
                                        #   in Loop: Header=BB52_21 Depth=3
	movl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	$0, -16(%rbp)
.LBB52_25:                              # %for.cond68
                                        #   Parent Loop BB52_17 Depth=1
                                        #     Parent Loop BB52_19 Depth=2
                                        #       Parent Loop BB52_21 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB52_28
# %bb.26:                               # %for.body71
                                        #   in Loop: Header=BB52_25 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-148(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB52_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_25
.LBB52_28:                              # %for.end
                                        #   in Loop: Header=BB52_21 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-148(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc139
                                        #   in Loop: Header=BB52_21 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_21
.LBB52_30:                              # %for.end141
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$0, -16(%rbp)
.LBB52_31:                              # %for.cond142
                                        #   Parent Loop BB52_17 Depth=1
                                        #     Parent Loop BB52_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_35 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB52_33
# %bb.32:                               # %land.rhs145
                                        #   in Loop: Header=BB52_31 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_33:                              # %land.end148
                                        #   in Loop: Header=BB52_31 Depth=3
	testb	$1, %al
	jne	.LBB52_34
	jmp	.LBB52_40
.LBB52_34:                              # %for.body150
                                        #   in Loop: Header=BB52_31 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB52_35:                              # %for.cond152
                                        #   Parent Loop BB52_17 Depth=1
                                        #     Parent Loop BB52_19 Depth=2
                                        #       Parent Loop BB52_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_38
# %bb.36:                               # %for.body155
                                        #   in Loop: Header=BB52_35 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.37:                               # %for.inc187
                                        #   in Loop: Header=BB52_35 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_35
.LBB52_38:                              # %for.end189
                                        #   in Loop: Header=BB52_31 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-32(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc228
                                        #   in Loop: Header=BB52_31 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_31
.LBB52_40:                              # %for.end230
                                        #   in Loop: Header=BB52_19 Depth=2
	jmp	.LBB52_41
.LBB52_41:                              # %for.inc231
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_19
.LBB52_42:                              # %for.end233
                                        #   in Loop: Header=BB52_17 Depth=1
	jmp	.LBB52_43
.LBB52_43:                              # %for.inc234
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_17
.LBB52_44:                              # %for.end236
	cmpl	$1, -144(%rbp)
	jne	.LBB52_76
# %bb.45:                               # %if.then239
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB52_46:                              # %for.cond304
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB52_62
# %bb.47:                               # %for.body307
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB52_49
# %bb.48:                               # %if.then311
                                        #   in Loop: Header=BB52_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_50
.LBB52_49:                              # %if.else
                                        #   in Loop: Header=BB52_46 Depth=1
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB52_50:                              # %if.end349
                                        #   in Loop: Header=BB52_46 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB52_55
# %bb.51:                               # %land.lhs.true
                                        #   in Loop: Header=BB52_46 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB52_55
# %bb.52:                               # %if.then355
                                        #   in Loop: Header=BB52_46 Depth=1
	cmpl	$2063, -44(%rbp)        # imm = 0x80F
	jle	.LBB52_54
# %bb.53:                               # %if.then358
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	$2063, -44(%rbp)        # imm = 0x80F
.LBB52_54:                              # %if.end359
                                        #   in Loop: Header=BB52_46 Depth=1
	jmp	.LBB52_55
.LBB52_55:                              # %if.end360
                                        #   in Loop: Header=BB52_46 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_60
# %bb.56:                               # %if.then363
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB52_58
# %bb.57:                               # %cond.true369
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	$1, %eax
	jmp	.LBB52_59
.LBB52_58:                              # %cond.false370
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-136(%rbp), %eax
.LBB52_59:                              # %cond.end371
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movslq	-36(%rbp), %rax
	movl	-176(%rbp,%rax,4), %esi
	callq	sign
	movl	%eax, -140(%rbp)
.LBB52_60:                              # %if.end384
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-140(%rbp), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.61:                               # %for.inc387
                                        #   in Loop: Header=BB52_46 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_46
.LBB52_62:                              # %for.end389
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB52_63:                              # %for.cond424
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_75
# %bb.64:                               # %for.body427
                                        #   in Loop: Header=BB52_63 Depth=1
	cmpl	$5, -40(%rbp)
	jge	.LBB52_69
# %bb.65:                               # %if.then430
                                        #   in Loop: Header=BB52_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB52_67
# %bb.66:                               # %if.then433
                                        #   in Loop: Header=BB52_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB52_68
.LBB52_67:                              # %if.else447
                                        #   in Loop: Header=BB52_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	$5, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB52_68:                              # %if.end461
                                        #   in Loop: Header=BB52_63 Depth=1
	jmp	.LBB52_73
.LBB52_69:                              # %if.else462
                                        #   in Loop: Header=BB52_63 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB52_71
# %bb.70:                               # %if.then465
                                        #   in Loop: Header=BB52_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	jmp	.LBB52_72
.LBB52_71:                              # %if.else479
                                        #   in Loop: Header=BB52_63 Depth=1
	movslq	-16(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-40(%rbp), %ecx
	subl	$5, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
.LBB52_72:                              # %if.end493
                                        #   in Loop: Header=BB52_63 Depth=1
	jmp	.LBB52_73
.LBB52_73:                              # %if.end494
                                        #   in Loop: Header=BB52_63 Depth=1
	jmp	.LBB52_74
.LBB52_74:                              # %for.inc495
                                        #   in Loop: Header=BB52_63 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_63
.LBB52_75:                              # %for.end497
	movl	-176(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	movl	-172(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13368(%rcx)
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13128(%rcx)
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	jmp	.LBB52_213
.LBB52_76:                              # %if.else514
	cmpl	$2, -144(%rbp)
	jne	.LBB52_127
# %bb.77:                               # %if.then517
	movl	$0, -12(%rbp)
.LBB52_78:                              # %for.cond518
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB52_85
# %bb.79:                               # %for.body522
                                        #   in Loop: Header=BB52_78 Depth=1
	movl	$0, -16(%rbp)
.LBB52_80:                              # %for.cond523
                                        #   Parent Loop BB52_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_83
# %bb.81:                               # %for.body527
                                        #   in Loop: Header=BB52_80 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.82:                               # %for.inc539
                                        #   in Loop: Header=BB52_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_80
.LBB52_83:                              # %for.end541
                                        #   in Loop: Header=BB52_78 Depth=1
	jmp	.LBB52_84
.LBB52_84:                              # %for.inc542
                                        #   in Loop: Header=BB52_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_78
.LBB52_85:                              # %for.end544
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB52_86:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_88 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_93
# %bb.87:                               # %for.body604
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$0, -12(%rbp)
.LBB52_88:                              # %for.cond605
                                        #   Parent Loop BB52_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB52_91
# %bb.89:                               # %for.body608
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.90:                               # %for.inc632
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_88
.LBB52_91:                              # %for.end634
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 8(%rsi)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	%eax, 12(%rdx)
# %bb.92:                               # %for.inc659
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_86
.LBB52_93:                              # %for.end661
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB52_94:                              # %for.cond662
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -36(%rbp)
	jge	.LBB52_105
# %bb.95:                               # %for.body665
                                        #   in Loop: Header=BB52_94 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SCAN_YUV422+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$1, -128(%rbp)
	jne	.LBB52_97
# %bb.96:                               # %if.then677
                                        #   in Loop: Header=BB52_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_98
.LBB52_97:                              # %if.else700
                                        #   in Loop: Header=BB52_94 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-104(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-212(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB52_98:                              # %if.end723
                                        #   in Loop: Header=BB52_94 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_103
# %bb.99:                               # %if.then726
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	-20(%rbp), %ecx
	shll	$3, %ecx
                                        # kill: def $cl killed $ecx
	movl	$16711680, %eax         # imm = 0xFF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB52_101
# %bb.100:                              # %cond.true734
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	$1, %eax
	jmp	.LBB52_102
.LBB52_101:                             # %cond.false735
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	-136(%rbp), %eax
.LBB52_102:                             # %cond.end736
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB52_103:                             # %if.end748
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-368(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.104:                              # %for.inc758
                                        #   in Loop: Header=BB52_94 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_94
.LBB52_105:                             # %for.end760
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-368(%rbp), %eax
	addl	-352(%rbp), %eax
	movl	%eax, -304(%rbp)
	movl	-364(%rbp), %eax
	addl	-348(%rbp), %eax
	movl	%eax, -300(%rbp)
	movl	-360(%rbp), %eax
	addl	-344(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-356(%rbp), %eax
	addl	-340(%rbp), %eax
	movl	%eax, -292(%rbp)
	movl	-368(%rbp), %eax
	subl	-352(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	-364(%rbp), %eax
	subl	-348(%rbp), %eax
	movl	%eax, -284(%rbp)
	movl	-360(%rbp), %eax
	subl	-344(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	-356(%rbp), %eax
	subl	-340(%rbp), %eax
	movl	%eax, -276(%rbp)
	movl	$0, -16(%rbp)
.LBB52_106:                             # %for.cond819
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_108 Depth 2
                                        #     Child Loop BB52_112 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_126
# %bb.107:                              # %for.body822
                                        #   in Loop: Header=BB52_106 Depth=1
	movl	$0, -12(%rbp)
.LBB52_108:                             # %for.cond823
                                        #   Parent Loop BB52_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_111
# %bb.109:                              # %for.body826
                                        #   in Loop: Header=BB52_108 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.110:                              # %for.inc833
                                        #   in Loop: Header=BB52_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_108
.LBB52_111:                             # %for.end835
                                        #   in Loop: Header=BB52_106 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB52_112:                             # %for.cond852
                                        #   Parent Loop BB52_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB52_124
# %bb.113:                              # %for.body855
                                        #   in Loop: Header=BB52_112 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -104(%rbp)
	jge	.LBB52_118
# %bb.114:                              # %if.then859
                                        #   in Loop: Header=BB52_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB52_116
# %bb.115:                              # %if.then862
                                        #   in Loop: Header=BB52_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB52_117
.LBB52_116:                             # %if.else915
                                        #   in Loop: Header=BB52_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-132(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-104(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-104(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB52_117:                             # %if.end968
                                        #   in Loop: Header=BB52_112 Depth=2
	jmp	.LBB52_122
.LBB52_118:                             # %if.else969
                                        #   in Loop: Header=BB52_112 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB52_120
# %bb.119:                              # %if.then972
                                        #   in Loop: Header=BB52_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB52_121
.LBB52_120:                             # %if.else1019
                                        #   in Loop: Header=BB52_112 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-132(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-104(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB52_121:                             # %if.end1066
                                        #   in Loop: Header=BB52_112 Depth=2
	jmp	.LBB52_122
.LBB52_122:                             # %if.end1067
                                        #   in Loop: Header=BB52_112 Depth=2
	jmp	.LBB52_123
.LBB52_123:                             # %for.inc1068
                                        #   in Loop: Header=BB52_112 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_112
.LBB52_124:                             # %for.end1070
                                        #   in Loop: Header=BB52_106 Depth=1
	jmp	.LBB52_125
.LBB52_125:                             # %for.inc1071
                                        #   in Loop: Header=BB52_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_106
.LBB52_126:                             # %for.end1073
	jmp	.LBB52_212
.LBB52_127:                             # %if.else1074
	cmpl	$3, -144(%rbp)
	jne	.LBB52_211
# %bb.128:                              # %if.then1077
	movl	$0, -12(%rbp)
.LBB52_129:                             # %for.cond1078
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_131 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB52_136
# %bb.130:                              # %for.body1082
                                        #   in Loop: Header=BB52_129 Depth=1
	movl	$0, -16(%rbp)
.LBB52_131:                             # %for.cond1083
                                        #   Parent Loop BB52_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_134
# %bb.132:                              # %for.body1087
                                        #   in Loop: Header=BB52_131 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.133:                              # %for.inc1099
                                        #   in Loop: Header=BB52_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_131
.LBB52_134:                             # %for.end1101
                                        #   in Loop: Header=BB52_129 Depth=1
	jmp	.LBB52_135
.LBB52_135:                             # %for.inc1102
                                        #   in Loop: Header=BB52_129 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_129
.LBB52_136:                             # %for.end1104
	movl	$0, -12(%rbp)
.LBB52_137:                             # %for.cond1105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_141 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB52_139
# %bb.138:                              # %land.rhs1108
                                        #   in Loop: Header=BB52_137 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_139:                             # %land.end1111
                                        #   in Loop: Header=BB52_137 Depth=1
	testb	$1, %al
	jne	.LBB52_140
	jmp	.LBB52_146
.LBB52_140:                             # %for.body1113
                                        #   in Loop: Header=BB52_137 Depth=1
	movl	$0, -16(%rbp)
.LBB52_141:                             # %for.cond1114
                                        #   Parent Loop BB52_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_144
# %bb.142:                              # %for.body1117
                                        #   in Loop: Header=BB52_141 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-120(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.143:                              # %for.inc1141
                                        #   in Loop: Header=BB52_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_141
.LBB52_144:                             # %for.end1143
                                        #   in Loop: Header=BB52_137 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	addl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -256(%rbp,%rcx,4)
# %bb.145:                              # %for.inc1168
                                        #   in Loop: Header=BB52_137 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_137
.LBB52_146:                             # %for.end1170
	movl	$0, -16(%rbp)
.LBB52_147:                             # %for.cond1171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_151 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB52_149
# %bb.148:                              # %land.rhs1174
                                        #   in Loop: Header=BB52_147 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_149:                             # %land.end1177
                                        #   in Loop: Header=BB52_147 Depth=1
	testb	$1, %al
	jne	.LBB52_150
	jmp	.LBB52_156
.LBB52_150:                             # %for.body1179
                                        #   in Loop: Header=BB52_147 Depth=1
	movl	$0, -12(%rbp)
.LBB52_151:                             # %for.cond1180
                                        #   Parent Loop BB52_147 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB52_154
# %bb.152:                              # %for.body1183
                                        #   in Loop: Header=BB52_151 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-32(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -64(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-32(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.153:                              # %for.inc1207
                                        #   in Loop: Header=BB52_151 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_151
.LBB52_154:                             # %for.end1209
                                        #   in Loop: Header=BB52_147 Depth=1
	movl	-64(%rbp), %ecx
	addl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-64(%rbp), %ecx
	subl	-60(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-52(%rbp), %ecx
	addl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	subl	-56(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.155:                              # %for.inc1238
                                        #   in Loop: Header=BB52_147 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_147
.LBB52_156:                             # %for.end1240
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -36(%rbp)
.LBB52_157:                             # %for.cond1241
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -36(%rbp)
	jge	.LBB52_173
# %bb.158:                              # %for.body1244
                                        #   in Loop: Header=BB52_157 Depth=1
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB52_160
# %bb.159:                              # %if.then1255
                                        #   in Loop: Header=BB52_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB52_164
.LBB52_160:                             # %if.else1261
                                        #   in Loop: Header=BB52_157 Depth=1
	cmpl	$1, -128(%rbp)
	jne	.LBB52_162
# %bb.161:                              # %if.then1264
                                        #   in Loop: Header=BB52_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_163
.LBB52_162:                             # %if.else1287
                                        #   in Loop: Header=BB52_157 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-180(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB52_163:                             # %if.end1310
                                        #   in Loop: Header=BB52_157 Depth=1
	jmp	.LBB52_164
.LBB52_164:                             # %if.end1311
                                        #   in Loop: Header=BB52_157 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB52_169
# %bb.165:                              # %if.then1314
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$4294901760, %eax       # imm = 0xFFFF0000
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-136(%rbp), %eax
	jle	.LBB52_167
# %bb.166:                              # %cond.true1321
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	$1, %eax
	jmp	.LBB52_168
.LBB52_167:                             # %cond.false1322
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	-136(%rbp), %eax
.LBB52_168:                             # %cond.end1323
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	%eax, -136(%rbp)
	movl	$1, -204(%rbp)
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-376(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
.LBB52_169:                             # %if.end1335
                                        #   in Loop: Header=BB52_157 Depth=1
	cmpl	$0, -108(%rbp)
	jne	.LBB52_171
# %bb.170:                              # %if.then1337
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	-44(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB52_171:                             # %if.end1347
                                        #   in Loop: Header=BB52_157 Depth=1
	jmp	.LBB52_172
.LBB52_172:                             # %for.inc1348
                                        #   in Loop: Header=BB52_157 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_157
.LBB52_173:                             # %for.end1350
	movq	-224(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB52_174:                             # %for.cond1353
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_178 Depth 2
                                        #     Child Loop BB52_182 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB52_176
# %bb.175:                              # %land.rhs1356
                                        #   in Loop: Header=BB52_174 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_176:                             # %land.end1359
                                        #   in Loop: Header=BB52_174 Depth=1
	testb	$1, %al
	jne	.LBB52_177
	jmp	.LBB52_187
.LBB52_177:                             # %for.body1361
                                        #   in Loop: Header=BB52_174 Depth=1
	movl	$0, -16(%rbp)
.LBB52_178:                             # %for.cond1362
                                        #   Parent Loop BB52_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_181
# %bb.179:                              # %for.body1365
                                        #   in Loop: Header=BB52_178 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.180:                              # %for.inc1372
                                        #   in Loop: Header=BB52_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_178
.LBB52_181:                             # %for.end1374
                                        #   in Loop: Header=BB52_174 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB52_182:                             # %for.cond1391
                                        #   Parent Loop BB52_174 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB52_185
# %bb.183:                              # %for.body1394
                                        #   in Loop: Header=BB52_182 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-120(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.184:                              # %for.inc1414
                                        #   in Loop: Header=BB52_182 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_182
.LBB52_185:                             # %for.end1416
                                        #   in Loop: Header=BB52_174 Depth=1
	jmp	.LBB52_186
.LBB52_186:                             # %for.inc1417
                                        #   in Loop: Header=BB52_174 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_174
.LBB52_187:                             # %for.end1419
	movl	$0, -16(%rbp)
.LBB52_188:                             # %for.cond1420
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_192 Depth 2
                                        #     Child Loop BB52_196 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB52_190
# %bb.189:                              # %land.rhs1423
                                        #   in Loop: Header=BB52_188 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_190:                             # %land.end1426
                                        #   in Loop: Header=BB52_188 Depth=1
	testb	$1, %al
	jne	.LBB52_191
	jmp	.LBB52_210
.LBB52_191:                             # %for.body1428
                                        #   in Loop: Header=BB52_188 Depth=1
	movl	$0, -12(%rbp)
.LBB52_192:                             # %for.cond1429
                                        #   Parent Loop BB52_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB52_195
# %bb.193:                              # %for.body1432
                                        #   in Loop: Header=BB52_192 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.194:                              # %for.inc1439
                                        #   in Loop: Header=BB52_192 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_192
.LBB52_195:                             # %for.end1441
                                        #   in Loop: Header=BB52_188 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB52_196:                             # %for.cond1458
                                        #   Parent Loop BB52_188 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB52_208
# %bb.197:                              # %for.body1461
                                        #   in Loop: Header=BB52_196 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	cmpl	$4, -40(%rbp)
	jge	.LBB52_202
# %bb.198:                              # %if.then1465
                                        #   in Loop: Header=BB52_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB52_200
# %bb.199:                              # %if.then1468
                                        #   in Loop: Header=BB52_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
	jmp	.LBB52_201
.LBB52_200:                             # %if.else1521
                                        #   in Loop: Header=BB52_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ebx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ebx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rsi
	movq	%rsi, %rcx
	addq	%rax, %rcx
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %ebx
	movl	$3, %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r8d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %ebx
	movl	$4, %edx
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movl	-12(%rbp), %edi
	shll	$2, %edi
	movslq	%edi, %rdi
	movl	%ebx, (%rcx,%rdi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ebx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %ebx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %ebx
	subl	-40(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r8d
	addl	%r8d, %ebx
	subl	-40(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	addl	$2, %ebx
	sarl	$2, %ebx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%ebx, (%rax,%rcx,4)
.LBB52_201:                             # %if.end1574
                                        #   in Loop: Header=BB52_196 Depth=2
	jmp	.LBB52_206
.LBB52_202:                             # %if.else1575
                                        #   in Loop: Header=BB52_196 Depth=2
	cmpl	$1, -128(%rbp)
	jne	.LBB52_204
# %bb.203:                              # %if.then1578
                                        #   in Loop: Header=BB52_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB52_205
.LBB52_204:                             # %if.else1625
                                        #   in Loop: Header=BB52_196 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %edx
	movslq	-32(%rbp), %rax
	addl	-96(%rbp,%rax,4), %edx
	movslq	-20(%rbp), %rax
	imulq	$384, %rax, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rax
	movq	%rax, %rsi
	addq	%rcx, %rsi
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	shll	$2, %esi
	movslq	%esi, %rsi
	movl	%edx, (%rcx,%rsi,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-32(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	addq	%rcx, %rax
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	imull	(%rax), %edx
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	addl	$2, %edx
	sarl	$2, %edx
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB52_205:                             # %if.end1672
                                        #   in Loop: Header=BB52_196 Depth=2
	jmp	.LBB52_206
.LBB52_206:                             # %if.end1673
                                        #   in Loop: Header=BB52_196 Depth=2
	jmp	.LBB52_207
.LBB52_207:                             # %for.inc1674
                                        #   in Loop: Header=BB52_196 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_196
.LBB52_208:                             # %for.end1676
                                        #   in Loop: Header=BB52_188 Depth=1
	jmp	.LBB52_209
.LBB52_209:                             # %for.inc1677
                                        #   in Loop: Header=BB52_188 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_188
.LBB52_210:                             # %for.end1679
	jmp	.LBB52_211
.LBB52_211:                             # %if.end1680
	jmp	.LBB52_212
.LBB52_212:                             # %if.end1681
	jmp	.LBB52_213
.LBB52_213:                             # %if.end1682
	movl	$0, -196(%rbp)
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB52_214:                             # %for.cond1683
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_216 Depth 2
                                        #       Child Loop BB52_218 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_256
# %bb.215:                              # %for.body1688
                                        #   in Loop: Header=BB52_214 Depth=1
	movl	$0, -116(%rbp)
.LBB52_216:                             # %for.cond1689
                                        #   Parent Loop BB52_214 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_218 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB52_254
# %bb.217:                              # %for.body1692
                                        #   in Loop: Header=BB52_216 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -72(%rbp)
	movl	$1, -36(%rbp)
.LBB52_218:                             # %for.cond1722
                                        #   Parent Loop BB52_214 Depth=1
                                        #     Parent Loop BB52_216 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB52_252
# %bb.219:                              # %for.body1725
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB52_222
# %bb.220:                              # %lor.lhs.false1727
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_223
# %bb.221:                              # %land.lhs.true1729
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_223
.LBB52_222:                             # %if.then1731
                                        #   in Loop: Header=BB52_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_224
.LBB52_223:                             # %if.else1740
                                        #   in Loop: Header=BB52_218 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB52_224:                             # %if.end1749
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -140(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB52_226
# %bb.225:                              # %if.then1752
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -44(%rbp)
	jmp	.LBB52_230
.LBB52_226:                             # %if.else1761
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB52_228
# %bb.227:                              # %if.then1764
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_229
.LBB52_228:                             # %if.else1792
                                        #   in Loop: Header=BB52_218 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-180(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
.LBB52_229:                             # %if.end1820
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_230
.LBB52_230:                             # %if.end1821
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB52_248
# %bb.231:                              # %if.then1824
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-112(%rbp), %eax
	addl	-200(%rbp), %eax
	cltq
	shlq	$2, %rax
	movabsq	$cbp_blk_chroma, %rcx
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $rcx
	movl	$1, %eax
	shlq	%cl, %rax
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -44(%rbp)
	jg	.LBB52_233
# %bb.232:                              # %lor.lhs.false1837
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB52_234
.LBB52_233:                             # %if.then1839
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-196(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -196(%rbp)
	jmp	.LBB52_235
.LBB52_234:                             # %if.else1841
                                        #   in Loop: Header=BB52_218 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -196(%rbp)
.LBB52_235:                             # %if.end1848
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	$2, -208(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-232(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-392(%rbp), %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	$-1, -100(%rbp)
	movl	-44(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -44(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB52_237
# %bb.236:                              # %if.then1871
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB52_247
.LBB52_237:                             # %if.else1872
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$4, -40(%rbp)
	jge	.LBB52_242
# %bb.238:                              # %if.then1875
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB52_240
# %bb.239:                              # %if.then1878
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB52_241
.LBB52_240:                             # %if.else1893
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB52_241:                             # %if.end1908
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_246
.LBB52_242:                             # %if.else1909
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB52_244
# %bb.243:                              # %if.then1912
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
	jmp	.LBB52_245
.LBB52_244:                             # %if.else1924
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-44(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-76(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -140(%rbp)
.LBB52_245:                             # %if.end1936
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_246
.LBB52_246:                             # %if.end1937
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_247
.LBB52_247:                             # %if.end1938
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_248
.LBB52_248:                             # %if.end1939
                                        #   in Loop: Header=BB52_218 Depth=3
	cmpl	$0, -108(%rbp)
	jne	.LBB52_250
# %bb.249:                              # %if.then1941
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-140(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB52_250:                             # %if.end1949
                                        #   in Loop: Header=BB52_218 Depth=3
	jmp	.LBB52_251
.LBB52_251:                             # %for.inc1950
                                        #   in Loop: Header=BB52_218 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_218
.LBB52_252:                             # %for.end1952
                                        #   in Loop: Header=BB52_216 Depth=2
	movq	-232(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.253:                              # %for.inc1955
                                        #   in Loop: Header=BB52_216 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB52_216
.LBB52_254:                             # %for.end1957
                                        #   in Loop: Header=BB52_214 Depth=1
	jmp	.LBB52_255
.LBB52_255:                             # %for.inc1958
                                        #   in Loop: Header=BB52_214 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB52_214
.LBB52_256:                             # %for.end1960
	cmpl	$4, -196(%rbp)
	jge	.LBB52_278
# %bb.257:                              # %land.lhs.true1963
	cmpl	$0, -108(%rbp)
	jne	.LBB52_278
# %bb.258:                              # %if.then1965
	movl	$0, -208(%rbp)
	movl	$0, -112(%rbp)
.LBB52_259:                             # %for.cond1966
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_261 Depth 2
                                        #       Child Loop BB52_265 Depth 3
	movl	-112(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_277
# %bb.260:                              # %for.body1971
                                        #   in Loop: Header=BB52_259 Depth=1
	movl	$0, -116(%rbp)
.LBB52_261:                             # %for.cond1972
                                        #   Parent Loop BB52_259 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_265 Depth 3
	cmpl	$4, -116(%rbp)
	jge	.LBB52_275
# %bb.262:                              # %for.body1975
                                        #   in Loop: Header=BB52_261 Depth=2
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$hor_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -24(%rbp)
	movslq	-144(%rbp), %rax
	shlq	$4, %rax
	movabsq	$ver_offset, %rcx
	addq	%rax, %rcx
	movslq	-112(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-116(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -232(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	addl	-200(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -392(%rbp)
	cmpl	$0, -204(%rbp)
	jne	.LBB52_264
# %bb.263:                              # %if.then2008
                                        #   in Loop: Header=BB52_261 Depth=2
	movslq	-144(%rbp), %rax
	movq	-432(%rbp,%rax,8), %rax
	movl	-20(%rbp), %edx
	movl	-144(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $rcx
	shlq	%cl, %rax
	xorq	$-1, %rax
	movq	-192(%rbp), %rcx
	andq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
.LBB52_264:                             # %if.end2016
                                        #   in Loop: Header=BB52_261 Depth=2
	movq	-232(%rbp), %rax
	movl	$0, (%rax)
	movl	$1, -36(%rbp)
.LBB52_265:                             # %for.cond2018
                                        #   Parent Loop BB52_259 Depth=1
                                        #     Parent Loop BB52_261 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -36(%rbp)
	jge	.LBB52_273
# %bb.266:                              # %for.body2021
                                        #   in Loop: Header=BB52_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB52_269
# %bb.267:                              # %lor.lhs.false2024
                                        #   in Loop: Header=BB52_265 Depth=3
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_270
# %bb.268:                              # %land.lhs.true2027
                                        #   in Loop: Header=BB52_265 Depth=3
	movq	-192(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_270
.LBB52_269:                             # %if.then2030
                                        #   in Loop: Header=BB52_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_271
.LBB52_270:                             # %if.else2039
                                        #   in Loop: Header=BB52_265 Depth=3
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-36(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB52_271:                             # %if.end2048
                                        #   in Loop: Header=BB52_265 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	$0, (%rax,%rcx,4)
	movq	-232(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.272:                              # %for.inc2058
                                        #   in Loop: Header=BB52_265 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB52_265
.LBB52_273:                             # %for.end2060
                                        #   in Loop: Header=BB52_261 Depth=2
	jmp	.LBB52_274
.LBB52_274:                             # %for.inc2061
                                        #   in Loop: Header=BB52_261 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB52_261
.LBB52_275:                             # %for.end2063
                                        #   in Loop: Header=BB52_259 Depth=1
	jmp	.LBB52_276
.LBB52_276:                             # %for.inc2064
                                        #   in Loop: Header=BB52_259 Depth=1
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB52_259
.LBB52_277:                             # %for.end2066
	jmp	.LBB52_278
.LBB52_278:                             # %if.end2067
	cmpl	$2, -208(%rbp)
	jne	.LBB52_280
# %bb.279:                              # %if.then2070
	movl	$2, -136(%rbp)
.LBB52_280:                             # %if.end2071
	movl	$0, -28(%rbp)
.LBB52_281:                             # %for.cond2072
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_285 Depth 2
                                        #       Child Loop BB52_287 Depth 3
                                        #         Child Loop BB52_289 Depth 4
                                        #         Child Loop BB52_293 Depth 4
                                        #       Child Loop BB52_299 Depth 3
                                        #         Child Loop BB52_303 Depth 4
                                        #         Child Loop BB52_307 Depth 4
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	cmpl	72712(%rdx), %ecx
	jge	.LBB52_283
# %bb.282:                              # %land.rhs2076
                                        #   in Loop: Header=BB52_281 Depth=1
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_283:                             # %land.end2079
                                        #   in Loop: Header=BB52_281 Depth=1
	testb	$1, %al
	jne	.LBB52_284
	jmp	.LBB52_340
.LBB52_284:                             # %for.body2081
                                        #   in Loop: Header=BB52_281 Depth=1
	movl	$0, -24(%rbp)
.LBB52_285:                             # %for.cond2082
                                        #   Parent Loop BB52_281 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_287 Depth 3
                                        #         Child Loop BB52_289 Depth 4
                                        #         Child Loop BB52_293 Depth 4
                                        #       Child Loop BB52_299 Depth 3
                                        #         Child Loop BB52_303 Depth 4
                                        #         Child Loop BB52_307 Depth 4
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_338
# %bb.286:                              # %for.body2086
                                        #   in Loop: Header=BB52_285 Depth=2
	movl	$0, -12(%rbp)
.LBB52_287:                             # %for.cond2087
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_289 Depth 4
                                        #         Child Loop BB52_293 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_298
# %bb.288:                              # %for.body2090
                                        #   in Loop: Header=BB52_287 Depth=3
	movl	$0, -16(%rbp)
.LBB52_289:                             # %for.cond2091
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        #       Parent Loop BB52_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB52_292
# %bb.290:                              # %for.body2094
                                        #   in Loop: Header=BB52_289 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.291:                              # %for.inc2104
                                        #   in Loop: Header=BB52_289 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_289
.LBB52_292:                             # %for.end2106
                                        #   in Loop: Header=BB52_287 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB52_293:                             # %for.cond2125
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        #       Parent Loop BB52_287 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB52_296
# %bb.294:                              # %for.body2128
                                        #   in Loop: Header=BB52_293 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -120(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-120(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-120(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.295:                              # %for.inc2154
                                        #   in Loop: Header=BB52_293 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_293
.LBB52_296:                             # %for.end2156
                                        #   in Loop: Header=BB52_287 Depth=3
	jmp	.LBB52_297
.LBB52_297:                             # %for.inc2157
                                        #   in Loop: Header=BB52_287 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_287
.LBB52_298:                             # %for.end2159
                                        #   in Loop: Header=BB52_285 Depth=2
	movl	$0, -16(%rbp)
.LBB52_299:                             # %for.cond2160
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_303 Depth 4
                                        #         Child Loop BB52_307 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB52_301
# %bb.300:                              # %land.rhs2163
                                        #   in Loop: Header=BB52_299 Depth=3
	cmpl	$0, -108(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_301:                             # %land.end2166
                                        #   in Loop: Header=BB52_299 Depth=3
	testb	$1, %al
	jne	.LBB52_302
	jmp	.LBB52_336
.LBB52_302:                             # %for.body2168
                                        #   in Loop: Header=BB52_299 Depth=3
	movl	$0, -12(%rbp)
.LBB52_303:                             # %for.cond2169
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        #       Parent Loop BB52_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB52_306
# %bb.304:                              # %for.body2172
                                        #   in Loop: Header=BB52_303 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.305:                              # %for.inc2182
                                        #   in Loop: Header=BB52_303 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_303
.LBB52_306:                             # %for.end2184
                                        #   in Loop: Header=BB52_299 Depth=3
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB52_307:                             # %for.cond2203
                                        #   Parent Loop BB52_281 Depth=1
                                        #     Parent Loop BB52_285 Depth=2
                                        #       Parent Loop BB52_299 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB52_334
# %bb.308:                              # %for.body2206
                                        #   in Loop: Header=BB52_307 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_328
# %bb.309:                              # %if.then2209
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB52_311
# %bb.310:                              # %cond.true2230
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB52_312
.LBB52_311:                             # %cond.false2231
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB52_312:                             # %cond.end2250
                                        #   in Loop: Header=BB52_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB52_314
# %bb.313:                              # %cond.true2254
                                        #   in Loop: Header=BB52_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB52_318
.LBB52_314:                             # %cond.false2257
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB52_316
# %bb.315:                              # %cond.true2278
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB52_317
.LBB52_316:                             # %cond.false2279
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB52_317:                             # %cond.end2298
                                        #   in Loop: Header=BB52_307 Depth=4
.LBB52_318:                             # %cond.end2300
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72688(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-68(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-24(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-28(%rbp), %edi
	addl	-68(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB52_320
# %bb.319:                              # %cond.true2332
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB52_321
.LBB52_320:                             # %cond.false2333
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB52_321:                             # %cond.end2352
                                        #   in Loop: Header=BB52_307 Depth=4
	cmpq	%rcx, %rax
	jge	.LBB52_323
# %bb.322:                              # %cond.true2356
                                        #   in Loop: Header=BB52_307 Depth=4
	movq	img, %rax
	movslq	72688(%rax), %rax
	jmp	.LBB52_327
.LBB52_323:                             # %cond.false2359
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-68(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-28(%rbp), %esi
	addl	-68(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB52_325
# %bb.324:                              # %cond.true2380
                                        #   in Loop: Header=BB52_307 Depth=4
	xorl	%eax, %eax
	jmp	.LBB52_326
.LBB52_325:                             # %cond.false2381
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB52_326:                             # %cond.end2400
                                        #   in Loop: Header=BB52_307 Depth=4
.LBB52_327:                             # %cond.end2402
                                        #   in Loop: Header=BB52_307 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB52_332
.LBB52_328:                             # %if.else2412
                                        #   in Loop: Header=BB52_307 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB52_330
# %bb.329:                              # %if.then2414
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB52_331
.LBB52_330:                             # %if.else2439
                                        #   in Loop: Header=BB52_307 Depth=4
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB52_331:                             # %if.end2468
                                        #   in Loop: Header=BB52_307 Depth=4
	jmp	.LBB52_332
.LBB52_332:                             # %if.end2469
                                        #   in Loop: Header=BB52_307 Depth=4
	jmp	.LBB52_333
.LBB52_333:                             # %for.inc2470
                                        #   in Loop: Header=BB52_307 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_307
.LBB52_334:                             # %for.end2472
                                        #   in Loop: Header=BB52_299 Depth=3
	jmp	.LBB52_335
.LBB52_335:                             # %for.inc2473
                                        #   in Loop: Header=BB52_299 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_299
.LBB52_336:                             # %for.end2475
                                        #   in Loop: Header=BB52_285 Depth=2
	jmp	.LBB52_337
.LBB52_337:                             # %for.inc2476
                                        #   in Loop: Header=BB52_285 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_285
.LBB52_338:                             # %for.end2478
                                        #   in Loop: Header=BB52_281 Depth=1
	jmp	.LBB52_339
.LBB52_339:                             # %for.inc2479
                                        #   in Loop: Header=BB52_281 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_281
.LBB52_340:                             # %for.end2481
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB52_353
# %bb.341:                              # %if.then2484
	movl	$0, -12(%rbp)
.LBB52_342:                             # %for.cond2485
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_344 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB52_352
# %bb.343:                              # %for.body2489
                                        #   in Loop: Header=BB52_342 Depth=1
	movl	$0, -16(%rbp)
.LBB52_344:                             # %for.cond2490
                                        #   Parent Loop BB52_342 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB52_350
# %bb.345:                              # %for.body2494
                                        #   in Loop: Header=BB52_344 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB52_347
# %bb.346:                              # %if.then2496
                                        #   in Loop: Header=BB52_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB52_348
.LBB52_347:                             # %if.else2518
                                        #   in Loop: Header=BB52_344 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB52_348:                             # %if.end2536
                                        #   in Loop: Header=BB52_344 Depth=2
	jmp	.LBB52_349
.LBB52_349:                             # %for.inc2537
                                        #   in Loop: Header=BB52_344 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_344
.LBB52_350:                             # %for.end2539
                                        #   in Loop: Header=BB52_342 Depth=1
	jmp	.LBB52_351
.LBB52_351:                             # %for.inc2540
                                        #   in Loop: Header=BB52_342 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_342
.LBB52_352:                             # %for.end2542
	jmp	.LBB52_353
.LBB52_353:                             # %if.end2543
	movl	-136(%rbp), %ebx
	cmpl	$2066583035, -380(%rbp) # imm = 0x7B2D8DFB
	jne	.LBB52_355
.LBB52_354:
	movl	%ebx, %eax
	addq	$424, %rsp              # imm = 0x1A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_355:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_354
.Lfunc_end52:
	.size	dct_chroma.43, .Lfunc_end52-dct_chroma.43
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.44        # -- Begin function dct_chroma4x4.44
	.p2align	4, 0x90
	.type	dct_chroma4x4.44,@function
dct_chroma4x4.44:                       # @dct_chroma4x4.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1878444402, -148(%rbp) # imm = 0x6FF6C972
	movl	%edi, -28(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB53_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB53_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB53_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB53_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB53_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-28(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB53_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB53_8
.LBB53_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB53_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB53_18
# %bb.9:                                # %if.then
	movl	$0, -12(%rbp)
.LBB53_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_12 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB53_10 Depth=1
	movl	$0, -16(%rbp)
.LBB53_12:                              # %for.cond31
                                        #   Parent Loop BB53_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB53_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB53_12 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB53_12 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_12
.LBB53_15:                              # %for.end
                                        #   in Loop: Header=BB53_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB53_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_10
.LBB53_17:                              # %for.end92
	jmp	.LBB53_18
.LBB53_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB53_28
# %bb.19:                               # %if.then94
	movl	$0, -16(%rbp)
.LBB53_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_22 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	$0, -12(%rbp)
.LBB53_22:                              # %for.cond99
                                        #   Parent Loop BB53_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB53_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_22
.LBB53_25:                              # %for.end132
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_20
.LBB53_27:                              # %for.end165
	jmp	.LBB53_28
.LBB53_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB53_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB53_34
.LBB53_30:                              # %if.else
	cmpl	$1, -76(%rbp)
	jne	.LBB53_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_33
.LBB53_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB53_33:                              # %if.end213
	jmp	.LBB53_34
.LBB53_34:                              # %if.end214
	movl	-28(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-80(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB53_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB53_46
.LBB53_36:                              # %if.else245
	cmpl	$4, -24(%rbp)
	jge	.LBB53_41
# %bb.37:                               # %if.then248
	cmpl	$1, -76(%rbp)
	jne	.LBB53_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB53_40
.LBB53_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB53_40:                              # %if.end290
	jmp	.LBB53_45
.LBB53_41:                              # %if.else291
	cmpl	$1, -76(%rbp)
	jne	.LBB53_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB53_44
.LBB53_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-28(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB53_44:                              # %if.end328
	jmp	.LBB53_45
.LBB53_45:                              # %if.end329
	jmp	.LBB53_46
.LBB53_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB53_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB53_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB53_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -84(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB53_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB53_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB53_54
.LBB53_50:                              # %if.else352
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB53_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB53_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_53
.LBB53_52:                              # %if.else381
                                        #   in Loop: Header=BB53_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-108(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB53_53:                              # %if.end407
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_54
.LBB53_54:                              # %if.end408
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB53_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$0, -16(%rbp)
	jne	.LBB53_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB53_58
.LBB53_57:                              # %if.then415
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	$1, -132(%rbp)
.LBB53_58:                              # %if.end416
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB53_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB53_70
.LBB53_60:                              # %if.else436
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB53_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB53_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB53_64
.LBB53_63:                              # %if.else457
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-24(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB53_64:                              # %if.end472
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_69
.LBB53_65:                              # %if.else473
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$1, -76(%rbp)
	jne	.LBB53_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB53_68
.LBB53_67:                              # %if.else488
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-28(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
.LBB53_68:                              # %if.end500
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_69
.LBB53_69:                              # %if.end501
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_70
.LBB53_70:                              # %if.end502
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_71
.LBB53_71:                              # %if.end503
                                        #   in Loop: Header=BB53_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB53_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-84(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB53_73:                              # %if.end511
                                        #   in Loop: Header=BB53_47 Depth=1
	jmp	.LBB53_74
.LBB53_74:                              # %for.inc512
                                        #   in Loop: Header=BB53_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB53_47
.LBB53_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB53_89
# %bb.76:                               # %if.then518
	movl	$0, -12(%rbp)
.LBB53_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_79 Depth 2
                                        #     Child Loop BB53_83 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB53_77 Depth=1
	movl	$0, -16(%rbp)
.LBB53_79:                              # %for.cond523
                                        #   Parent Loop BB53_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB53_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB53_79 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_79
.LBB53_82:                              # %for.end536
                                        #   in Loop: Header=BB53_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB53_83:                              # %for.cond555
                                        #   Parent Loop BB53_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB53_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB53_83 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-72(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB53_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_83
.LBB53_86:                              # %for.end582
                                        #   in Loop: Header=BB53_77 Depth=1
	jmp	.LBB53_87
.LBB53_87:                              # %for.inc583
                                        #   in Loop: Header=BB53_77 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_77
.LBB53_88:                              # %for.end585
	jmp	.LBB53_89
.LBB53_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB53_103
# %bb.90:                               # %if.then588
	movl	$0, -16(%rbp)
.LBB53_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_93 Depth 2
                                        #     Child Loop BB53_97 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB53_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	$0, -12(%rbp)
.LBB53_93:                              # %for.cond593
                                        #   Parent Loop BB53_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB53_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB53_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB53_93 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_93
.LBB53_96:                              # %for.end606
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB53_97:                              # %for.cond625
                                        #   Parent Loop BB53_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB53_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB53_97 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-68(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB53_97 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_97
.LBB53_100:                             # %for.end656
                                        #   in Loop: Header=BB53_91 Depth=1
	jmp	.LBB53_101
.LBB53_101:                             # %for.inc657
                                        #   in Loop: Header=BB53_91 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_91
.LBB53_102:                             # %for.end659
	jmp	.LBB53_103
.LBB53_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$1878444402, -148(%rbp) # imm = 0x6FF6C972
	jne	.LBB53_105
.LBB53_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_104
.Lfunc_end53:
	.size	dct_chroma4x4.44, .Lfunc_end53-dct_chroma4x4.44
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.45        # -- Begin function dct_chroma4x4.45
	.p2align	4, 0x90
	.type	dct_chroma4x4.45,@function
dct_chroma4x4.45:                       # @dct_chroma4x4.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$966390278, -148(%rbp)  # imm = 0x3999F206
	movl	%edi, -24(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB54_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB54_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB54_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -80(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB54_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB54_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jge	.LBB54_7
# %bb.6:                                # %cond.true
	movl	-88(%rbp), %eax
	jmp	.LBB54_8
.LBB54_7:                               # %cond.false
	movl	-88(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB54_8:                               # %cond.end
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-88(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB54_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB54_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB54_10 Depth=1
	movl	$0, -12(%rbp)
.LBB54_12:                              # %for.cond31
                                        #   Parent Loop BB54_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB54_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB54_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_12
.LBB54_15:                              # %for.end
                                        #   in Loop: Header=BB54_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB54_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_10
.LBB54_17:                              # %for.end92
	jmp	.LBB54_18
.LBB54_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB54_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB54_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB54_20 Depth=1
	movl	$0, -16(%rbp)
.LBB54_22:                              # %for.cond99
                                        #   Parent Loop BB54_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB54_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB54_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_22
.LBB54_25:                              # %for.end132
                                        #   in Loop: Header=BB54_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB54_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_20
.LBB54_27:                              # %for.end165
	jmp	.LBB54_28
.LBB54_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB54_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB54_34
.LBB54_30:                              # %if.else
	cmpl	$1, -80(%rbp)
	jne	.LBB54_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_33
.LBB54_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB54_33:                              # %if.end213
	jmp	.LBB54_34
.LBB54_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB54_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB54_46
.LBB54_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB54_41
# %bb.37:                               # %if.then248
	cmpl	$1, -80(%rbp)
	jne	.LBB54_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB54_40
.LBB54_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB54_40:                              # %if.end290
	jmp	.LBB54_45
.LBB54_41:                              # %if.else291
	cmpl	$1, -80(%rbp)
	jne	.LBB54_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB54_44
.LBB54_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB54_44:                              # %if.end328
	jmp	.LBB54_45
.LBB54_45:                              # %if.end329
	jmp	.LBB54_46
.LBB54_46:                              # %if.end330
	movl	$1, -96(%rbp)
.LBB54_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -96(%rbp)
	jge	.LBB54_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB54_47 Depth=1
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-96(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB54_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB54_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB54_54
.LBB54_50:                              # %if.else352
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB54_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB54_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_53
.LBB54_52:                              # %if.else381
                                        #   in Loop: Header=BB54_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-100(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB54_53:                              # %if.end407
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_54
.LBB54_54:                              # %if.end408
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB54_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB54_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB54_58
.LBB54_57:                              # %if.then415
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	$1, -132(%rbp)
.LBB54_58:                              # %if.end416
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -104(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB54_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB54_70
.LBB54_60:                              # %if.else436
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB54_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB54_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB54_64
.LBB54_63:                              # %if.else457
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB54_64:                              # %if.end472
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_69
.LBB54_65:                              # %if.else473
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$1, -80(%rbp)
	jne	.LBB54_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB54_68
.LBB54_67:                              # %if.else488
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB54_68:                              # %if.end500
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_69
.LBB54_69:                              # %if.end501
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_70
.LBB54_70:                              # %if.end502
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_71
.LBB54_71:                              # %if.end503
                                        #   in Loop: Header=BB54_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB54_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB54_73:                              # %if.end511
                                        #   in Loop: Header=BB54_47 Depth=1
	jmp	.LBB54_74
.LBB54_74:                              # %for.inc512
                                        #   in Loop: Header=BB54_47 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB54_47
.LBB54_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB54_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB54_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_79 Depth 2
                                        #     Child Loop BB54_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB54_77 Depth=1
	movl	$0, -12(%rbp)
.LBB54_79:                              # %for.cond523
                                        #   Parent Loop BB54_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB54_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB54_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_79
.LBB54_82:                              # %for.end536
                                        #   in Loop: Header=BB54_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB54_83:                              # %for.cond555
                                        #   Parent Loop BB54_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB54_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB54_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB54_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_83
.LBB54_86:                              # %for.end582
                                        #   in Loop: Header=BB54_77 Depth=1
	jmp	.LBB54_87
.LBB54_87:                              # %for.inc583
                                        #   in Loop: Header=BB54_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_77
.LBB54_88:                              # %for.end585
	jmp	.LBB54_89
.LBB54_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB54_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB54_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_93 Depth 2
                                        #     Child Loop BB54_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB54_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	$0, -16(%rbp)
.LBB54_93:                              # %for.cond593
                                        #   Parent Loop BB54_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB54_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB54_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB54_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_93
.LBB54_96:                              # %for.end606
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB54_97:                              # %for.cond625
                                        #   Parent Loop BB54_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB54_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB54_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB54_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_97
.LBB54_100:                             # %for.end656
                                        #   in Loop: Header=BB54_91 Depth=1
	jmp	.LBB54_101
.LBB54_101:                             # %for.inc657
                                        #   in Loop: Header=BB54_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_91
.LBB54_102:                             # %for.end659
	jmp	.LBB54_103
.LBB54_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$966390278, -148(%rbp)  # imm = 0x3999F206
	jne	.LBB54_105
.LBB54_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_104
.Lfunc_end54:
	.size	dct_chroma4x4.45, .Lfunc_end54-dct_chroma4x4.45
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.46        # -- Begin function dct_chroma_DC.46
	.p2align	4, 0x90
	.type	dct_chroma_DC.46,@function
dct_chroma_DC.46:                       # @dct_chroma_DC.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$644572380, -44(%rbp)   # imm = 0x266B64DC
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB55_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB55_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB55_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$1, %eax
	jmp	.LBB55_6
.LBB55_5:                               # %cond.false
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-20(%rbp), %eax
.LBB55_6:                               # %cond.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %edi
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB55_7:                               # %if.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_1
.LBB55_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$644572380, -44(%rbp)   # imm = 0x266B64DC
	jne	.LBB55_11
.LBB55_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_10
.Lfunc_end55:
	.size	dct_chroma_DC.46, .Lfunc_end55-dct_chroma_DC.46
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.47 # -- Begin function intrapred_luma_16x16.47
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.47,@function
intrapred_luma_16x16.47:                # @intrapred_luma_16x16.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$208043467, -92(%rbp)   # imm = 0xC667DCB
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB56_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB56_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB56_20
.LBB56_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB56_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB56_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB56_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB56_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB56_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB56_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false23
                                        #   in Loop: Header=BB56_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_14
.LBB56_14:                              # %cond.end24
                                        #   in Loop: Header=BB56_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB56_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_10
.LBB56_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB56_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB56_19
.LBB56_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB56_20:                              # %if.end
	movl	$0, -52(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB56_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB56_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB56_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB56_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB56_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB56_24:                              # %if.end51
                                        #   in Loop: Header=BB56_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB56_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB56_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB56_26:                              # %if.end68
                                        #   in Loop: Header=BB56_21 Depth=1
	jmp	.LBB56_27
.LBB56_27:                              # %for.inc69
                                        #   in Loop: Header=BB56_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_21
.LBB56_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB56_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB56_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB56_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB56_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB56_34
# %bb.33:                               # %if.then81
	movl	-52(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB56_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB56_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB56_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB56_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB56_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB56_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB56_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB56_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB56_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB56_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB56_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB56_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB56_44:                              # %if.end114
                                        #   in Loop: Header=BB56_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB56_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB56_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB56_46:                              # %if.end133
                                        #   in Loop: Header=BB56_41 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc134
                                        #   in Loop: Header=BB56_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_41
.LBB56_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB56_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	$0, -4(%rbp)
.LBB56_51:                              # %for.cond141
                                        #   Parent Loop BB56_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB56_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_51
.LBB56_54:                              # %for.end173
                                        #   in Loop: Header=BB56_49 Depth=1
	jmp	.LBB56_55
.LBB56_55:                              # %for.inc174
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_49
.LBB56_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB56_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB56_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB56_60
.LBB56_59:                              # %if.then181
	jmp	.LBB56_85
.LBB56_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB56_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB56_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB56_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB56_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_65
.LBB56_64:                              # %if.else210
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB56_65:                              # %if.end232
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB56_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB56_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB56_68 Depth=1
	movl	$0, -4(%rbp)
.LBB56_70:                              # %for.cond293
                                        #   Parent Loop BB56_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_74
.LBB56_73:                              # %cond.false309
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_74:                              # %cond.end318
                                        #   in Loop: Header=BB56_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB56_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_80
.LBB56_76:                              # %cond.false323
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-48(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_79
.LBB56_78:                              # %cond.false337
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-48(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_79:                              # %cond.end346
                                        #   in Loop: Header=BB56_70 Depth=2
.LBB56_80:                              # %cond.end348
                                        #   in Loop: Header=BB56_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB56_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_70
.LBB56_82:                              # %for.end359
                                        #   in Loop: Header=BB56_68 Depth=1
	jmp	.LBB56_83
.LBB56_83:                              # %for.inc360
                                        #   in Loop: Header=BB56_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_68
.LBB56_84:                              # %for.end362.loopexit
	jmp	.LBB56_85
.LBB56_85:                              # %for.end362
	cmpl	$208043467, -92(%rbp)   # imm = 0xC667DCB
	jne	.LBB56_87
.LBB56_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_86
.Lfunc_end56:
	.size	intrapred_luma_16x16.47, .Lfunc_end56-intrapred_luma_16x16.47
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.48 # -- Begin function intrapred_luma_16x16.48
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.48,@function
intrapred_luma_16x16.48:                # @intrapred_luma_16x16.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$1276581865, -92(%rbp)  # imm = 0x4C1717E9
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB57_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_1
.LBB57_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB57_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB57_20
.LBB57_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB57_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB57_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB57_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB57_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB57_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB57_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_14
.LBB57_13:                              # %cond.false23
                                        #   in Loop: Header=BB57_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB57_14
.LBB57_14:                              # %cond.end24
                                        #   in Loop: Header=BB57_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB57_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_10
.LBB57_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB57_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB57_19
.LBB57_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB57_19
.LBB57_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB57_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB57_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB57_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB57_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB57_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB57_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB57_24:                              # %if.end51
                                        #   in Loop: Header=BB57_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB57_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB57_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB57_26:                              # %if.end68
                                        #   in Loop: Header=BB57_21 Depth=1
	jmp	.LBB57_27
.LBB57_27:                              # %for.inc69
                                        #   in Loop: Header=BB57_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_21
.LBB57_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB57_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB57_31
# %bb.30:                               # %if.then74
	movl	-36(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB57_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB57_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB57_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB57_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB57_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB57_37
# %bb.36:                               # %if.then88
	movl	-36(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB57_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB57_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB57_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB57_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB57_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB57_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB57_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB57_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB57_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB57_44:                              # %if.end114
                                        #   in Loop: Header=BB57_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB57_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB57_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB57_46:                              # %if.end133
                                        #   in Loop: Header=BB57_41 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc134
                                        #   in Loop: Header=BB57_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_41
.LBB57_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB57_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	$0, -4(%rbp)
.LBB57_51:                              # %for.cond141
                                        #   Parent Loop BB57_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB57_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB57_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_51
.LBB57_54:                              # %for.end173
                                        #   in Loop: Header=BB57_49 Depth=1
	jmp	.LBB57_55
.LBB57_55:                              # %for.inc174
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_49
.LBB57_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB57_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB57_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB57_60
.LBB57_59:                              # %if.then181
	jmp	.LBB57_85
.LBB57_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB57_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB57_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB57_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB57_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_65
.LBB57_64:                              # %if.else210
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB57_65:                              # %if.end232
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB57_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_61
.LBB57_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -8(%rbp)
.LBB57_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	$0, -4(%rbp)
.LBB57_70:                              # %for.cond293
                                        #   Parent Loop BB57_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB57_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_74
.LBB57_73:                              # %cond.false309
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB57_74:                              # %cond.end318
                                        #   in Loop: Header=BB57_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB57_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB57_80
.LBB57_76:                              # %cond.false323
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-40(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB57_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB57_79
.LBB57_78:                              # %cond.false337
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-48(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-40(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB57_79:                              # %cond.end346
                                        #   in Loop: Header=BB57_70 Depth=2
.LBB57_80:                              # %cond.end348
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_70
.LBB57_82:                              # %for.end359
                                        #   in Loop: Header=BB57_68 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc360
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_68
.LBB57_84:                              # %for.end362.loopexit
	jmp	.LBB57_85
.LBB57_85:                              # %for.end362
	cmpl	$1276581865, -92(%rbp)  # imm = 0x4C1717E9
	jne	.LBB57_87
.LBB57_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_86
.Lfunc_end57:
	.size	intrapred_luma_16x16.48, .Lfunc_end57-intrapred_luma_16x16.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.49
.LCPI58_0:
	.quad	4616189618054758400     # double 4
.LCPI58_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI58_2:
	.quad	4611686018427387904     # double 2
.LCPI58_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.49
	.p2align	4, 0x90
	.type	dct_luma_sp.49,@function
dct_luma_sp.49:                         # @dct_luma_sp.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI58_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI58_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1337248661, -212(%rbp) # imm = 0x4FB4CB95
	movl	%edi, -128(%rbp)
	movl	%esi, -132(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-128(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -200(%rbp)
	movl	-132(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -192(%rbp)
	movl	-204(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-200(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -188(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI58_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI58_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -140(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -144(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -124(%rbp)
	movl	-196(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	$0, -12(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -16(%rbp)
.LBB58_3:                               # %for.cond38
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-128(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-132(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_3
.LBB58_6:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_7
.LBB58_7:                               # %for.inc66
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_1
.LBB58_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB58_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	$0, -16(%rbp)
.LBB58_11:                              # %for.cond73
                                        #   Parent Loop BB58_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB58_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB58_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB58_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_11
.LBB58_14:                              # %for.end106
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB58_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_9
.LBB58_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB58_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	$0, -12(%rbp)
.LBB58_19:                              # %for.cond144
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB58_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_19
.LBB58_22:                              # %for.end177
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_17
.LBB58_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB58_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	$0, -16(%rbp)
.LBB58_27:                              # %for.cond215
                                        #   Parent Loop BB58_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB58_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_27
.LBB58_30:                              # %for.end244
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_25
.LBB58_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB58_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	$0, -12(%rbp)
.LBB58_35:                              # %for.cond278
                                        #   Parent Loop BB58_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB58_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB58_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_35
.LBB58_38:                              # %for.end307
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB58_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_33
.LBB58_40:                              # %for.end336
	movl	$0, -184(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -68(%rbp)
.LBB58_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB58_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB58_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB58_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB58_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB58_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB58_46
.LBB58_45:                              # %if.then
                                        #   in Loop: Header=BB58_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_47
.LBB58_46:                              # %if.else
                                        #   in Loop: Header=BB58_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB58_47:                              # %if.end
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -136(%rbp)
	movl	-136(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-208(%rbp), %eax
	movl	-144(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB58_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB58_41 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB58_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB58_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB58_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB58_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-20(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-20(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-136(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-148(%rbp), %rdx
	leaq	-216(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-148(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB58_55
	jp	.LBB58_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB58_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB58_54
.LBB58_53:                              # %cond.false
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-56(%rbp), %eax
.LBB58_54:                              # %cond.end
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB58_59
.LBB58_55:                              # %if.else500
                                        #   in Loop: Header=BB58_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB58_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB58_58
.LBB58_57:                              # %if.else504
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB58_58:                              # %if.end505
                                        #   in Loop: Header=BB58_41 Depth=1
	jmp	.LBB58_59
.LBB58_59:                              # %if.end506
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.LBB58_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false510
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-136(%rbp), %eax
.LBB58_62:                              # %cond.end511
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	%eax, -116(%rbp)
	jmp	.LBB58_73
.LBB58_63:                              # %if.else513
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB58_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB58_72
.LBB58_65:                              # %if.else517
                                        #   in Loop: Header=BB58_41 Depth=1
	cmpl	$0, -20(%rbp)
	jne	.LBB58_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-20(%rbp), %eax
	jmp	.LBB58_68
.LBB58_67:                              # %cond.false521
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-56(%rbp), %eax
.LBB58_68:                              # %cond.end522
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB58_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB58_71
.LBB58_70:                              # %cond.false527
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-136(%rbp), %eax
.LBB58_71:                              # %cond.end528
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	%eax, -116(%rbp)
.LBB58_72:                              # %if.end530
                                        #   in Loop: Header=BB58_41 Depth=1
	jmp	.LBB58_73
.LBB58_73:                              # %if.end531
                                        #   in Loop: Header=BB58_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB58_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	$1, -184(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB58_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB58_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB58_77
.LBB58_76:                              # %if.else539
                                        #   in Loop: Header=BB58_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB58_77:                              # %if.end546
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-116(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-140(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB58_78:                              # %if.end568
                                        #   in Loop: Header=BB58_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-180(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-124(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-196(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB58_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB58_41
.LBB58_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB58_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_83 Depth 2
                                        #     Child Loop BB58_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	$0, -16(%rbp)
.LBB58_83:                              # %for.cond607
                                        #   Parent Loop BB58_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB58_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB58_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_83
.LBB58_86:                              # %for.end620
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB58_87:                              # %for.cond639
                                        #   Parent Loop BB58_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB58_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB58_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB58_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_87
.LBB58_90:                              # %for.end666
                                        #   in Loop: Header=BB58_81 Depth=1
	jmp	.LBB58_91
.LBB58_91:                              # %for.inc667
                                        #   in Loop: Header=BB58_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_81
.LBB58_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB58_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_95 Depth 2
                                        #     Child Loop BB58_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	$0, -12(%rbp)
.LBB58_95:                              # %for.cond674
                                        #   Parent Loop BB58_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB58_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB58_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_95
.LBB58_98:                              # %for.end687
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB58_99:                              # %for.cond706
                                        #   Parent Loop BB58_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB58_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB58_103
.LBB58_102:                             # %cond.false721
                                        #   in Loop: Header=BB58_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_103:                             # %cond.end729
                                        #   in Loop: Header=BB58_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB58_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB58_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_109
.LBB58_105:                             # %cond.false735
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_108
.LBB58_107:                             # %cond.false746
                                        #   in Loop: Header=BB58_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_108:                             # %cond.end754
                                        #   in Loop: Header=BB58_99 Depth=2
.LBB58_109:                             # %cond.end756
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-24(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB58_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB58_112
.LBB58_111:                             # %cond.false774
                                        #   in Loop: Header=BB58_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB58_112:                             # %cond.end782
                                        #   in Loop: Header=BB58_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB58_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB58_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_118
.LBB58_114:                             # %cond.false788
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-24(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB58_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB58_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_117
.LBB58_116:                             # %cond.false799
                                        #   in Loop: Header=BB58_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB58_117:                             # %cond.end807
                                        #   in Loop: Header=BB58_99 Depth=2
.LBB58_118:                             # %cond.end809
                                        #   in Loop: Header=BB58_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB58_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_99
.LBB58_120:                             # %for.end818
                                        #   in Loop: Header=BB58_93 Depth=1
	jmp	.LBB58_121
.LBB58_121:                             # %for.inc819
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_93
.LBB58_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB58_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB58_123 Depth=1
	movl	$0, -16(%rbp)
.LBB58_125:                             # %for.cond826
                                        #   Parent Loop BB58_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB58_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-132(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-128(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB58_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_125
.LBB58_128:                             # %for.end846
                                        #   in Loop: Header=BB58_123 Depth=1
	jmp	.LBB58_129
.LBB58_129:                             # %for.inc847
                                        #   in Loop: Header=BB58_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_123
.LBB58_130:                             # %for.end849
	movl	-184(%rbp), %ebx
	cmpl	$1337248661, -212(%rbp) # imm = 0x4FB4CB95
	jne	.LBB58_132
.LBB58_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_131
.Lfunc_end58:
	.size	dct_luma_sp.49, .Lfunc_end58-dct_luma_sp.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.50
.LCPI59_0:
	.quad	4616189618054758400     # double 4
.LCPI59_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI59_2:
	.quad	4611686018427387904     # double 2
.LCPI59_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.50
	.p2align	4, 0x90
	.type	dct_chroma_sp.50,@function
dct_chroma_sp.50:                       # @dct_chroma_sp.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI59_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI59_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$276591160, -268(%rbp)  # imm = 0x107C7238
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI59_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB59_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB59_6
.LBB59_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB59_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB59_5
.LBB59_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB59_5:                               # %cond.end
.LBB59_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB59_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB59_12
.LBB59_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB59_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB59_11
.LBB59_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB59_11:                              # %cond.end41
.LBB59_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB59_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB59_15
.LBB59_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB59_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB59_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB59_18
.LBB59_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB59_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB59_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB59_21
.LBB59_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB59_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB59_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB59_24
.LBB59_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB59_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -216(%rbp)
	movl	$0, -12(%rbp)
.LBB59_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB59_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB59_25 Depth=1
	movl	$0, -16(%rbp)
.LBB59_27:                              # %for.cond97
                                        #   Parent Loop BB59_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB59_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB59_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB59_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_27
.LBB59_30:                              # %for.end
                                        #   in Loop: Header=BB59_25 Depth=1
	jmp	.LBB59_31
.LBB59_31:                              # %for.inc121
                                        #   in Loop: Header=BB59_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_25
.LBB59_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB59_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_35 Depth 2
                                        #       Child Loop BB59_37 Depth 3
                                        #         Child Loop BB59_39 Depth 4
                                        #       Child Loop BB59_45 Depth 3
                                        #         Child Loop BB59_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB59_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB59_33 Depth=1
	movl	$0, -20(%rbp)
.LBB59_35:                              # %for.cond128
                                        #   Parent Loop BB59_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_37 Depth 3
                                        #         Child Loop BB59_39 Depth 4
                                        #       Child Loop BB59_45 Depth 3
                                        #         Child Loop BB59_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB59_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB59_35 Depth=2
	movl	$0, -12(%rbp)
.LBB59_37:                              # %for.cond132
                                        #   Parent Loop BB59_33 Depth=1
                                        #     Parent Loop BB59_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB59_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB59_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB59_39:                              # %for.cond137
                                        #   Parent Loop BB59_33 Depth=1
                                        #     Parent Loop BB59_35 Depth=2
                                        #       Parent Loop BB59_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB59_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB59_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB59_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_39
.LBB59_42:                              # %for.end174
                                        #   in Loop: Header=BB59_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB59_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_37
.LBB59_44:                              # %for.end214
                                        #   in Loop: Header=BB59_35 Depth=2
	movl	$0, -16(%rbp)
.LBB59_45:                              # %for.cond215
                                        #   Parent Loop BB59_33 Depth=1
                                        #     Parent Loop BB59_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB59_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB59_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB59_47:                              # %for.cond220
                                        #   Parent Loop BB59_33 Depth=1
                                        #     Parent Loop BB59_35 Depth=2
                                        #       Parent Loop BB59_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB59_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB59_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB59_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_47
.LBB59_50:                              # %for.end257
                                        #   in Loop: Header=BB59_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB59_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_45
.LBB59_52:                              # %for.end298
                                        #   in Loop: Header=BB59_35 Depth=2
	jmp	.LBB59_53
.LBB59_53:                              # %for.inc299
                                        #   in Loop: Header=BB59_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_35
.LBB59_54:                              # %for.end301
                                        #   in Loop: Header=BB59_33 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc302
                                        #   in Loop: Header=BB59_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_33
.LBB59_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB59_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_59 Depth 2
                                        #       Child Loop BB59_61 Depth 3
                                        #         Child Loop BB59_63 Depth 4
                                        #       Child Loop BB59_69 Depth 3
                                        #         Child Loop BB59_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB59_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB59_57 Depth=1
	movl	$0, -20(%rbp)
.LBB59_59:                              # %for.cond309
                                        #   Parent Loop BB59_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_61 Depth 3
                                        #         Child Loop BB59_63 Depth 4
                                        #       Child Loop BB59_69 Depth 3
                                        #         Child Loop BB59_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB59_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB59_59 Depth=2
	movl	$0, -12(%rbp)
.LBB59_61:                              # %for.cond313
                                        #   Parent Loop BB59_57 Depth=1
                                        #     Parent Loop BB59_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB59_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB59_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB59_63:                              # %for.cond318
                                        #   Parent Loop BB59_57 Depth=1
                                        #     Parent Loop BB59_59 Depth=2
                                        #       Parent Loop BB59_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB59_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB59_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB59_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_63
.LBB59_66:                              # %for.end351
                                        #   in Loop: Header=BB59_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB59_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_61
.LBB59_68:                              # %for.end387
                                        #   in Loop: Header=BB59_59 Depth=2
	movl	$0, -16(%rbp)
.LBB59_69:                              # %for.cond388
                                        #   Parent Loop BB59_57 Depth=1
                                        #     Parent Loop BB59_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB59_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB59_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB59_71:                              # %for.cond393
                                        #   Parent Loop BB59_57 Depth=1
                                        #     Parent Loop BB59_59 Depth=2
                                        #       Parent Loop BB59_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB59_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB59_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB59_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_71
.LBB59_74:                              # %for.end426
                                        #   in Loop: Header=BB59_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB59_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_76:                              # %for.end463
                                        #   in Loop: Header=BB59_59 Depth=2
	jmp	.LBB59_77
.LBB59_77:                              # %for.inc464
                                        #   in Loop: Header=BB59_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_59
.LBB59_78:                              # %for.end466
                                        #   in Loop: Header=BB59_57 Depth=1
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc467
                                        #   in Loop: Header=BB59_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_57
.LBB59_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB59_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB59_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB59_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB59_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB59_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB59_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB59_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB59_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB59_90
	jp	.LBB59_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB59_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB59_89
.LBB59_88:                              # %cond.false691
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-44(%rbp), %eax
.LBB59_89:                              # %cond.end692
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB59_94
.LBB59_90:                              # %if.else
                                        #   in Loop: Header=BB59_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB59_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB59_93
.LBB59_92:                              # %if.else697
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB59_93:                              # %if.end
                                        #   in Loop: Header=BB59_81 Depth=1
	jmp	.LBB59_94
.LBB59_94:                              # %if.end698
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB59_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB59_97
.LBB59_96:                              # %cond.false702
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-100(%rbp), %eax
.LBB59_97:                              # %cond.end703
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB59_108
.LBB59_98:                              # %if.else705
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB59_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB59_107
.LBB59_100:                             # %if.else709
                                        #   in Loop: Header=BB59_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB59_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB59_103
.LBB59_102:                             # %cond.false713
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-44(%rbp), %eax
.LBB59_103:                             # %cond.end714
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB59_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB59_106
.LBB59_105:                             # %cond.false719
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-100(%rbp), %eax
.LBB59_106:                             # %cond.end720
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB59_107:                             # %if.end722
                                        #   in Loop: Header=BB59_81 Depth=1
	jmp	.LBB59_108
.LBB59_108:                             # %if.end723
                                        #   in Loop: Header=BB59_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB59_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB59_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB59_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB59_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB59_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB59_112:                             # %if.end734
                                        #   in Loop: Header=BB59_81 Depth=1
	jmp	.LBB59_113
.LBB59_113:                             # %if.end735
                                        #   in Loop: Header=BB59_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB59_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB59_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	$1, %eax
	jmp	.LBB59_117
.LBB59_116:                             # %cond.false745
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-208(%rbp), %eax
.LBB59_117:                             # %cond.end746
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB59_118:                             # %if.end763
                                        #   in Loop: Header=BB59_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB59_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_81
.LBB59_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -224(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB59_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_123 Depth 2
                                        #       Child Loop BB59_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB59_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB59_121 Depth=1
	movl	$0, -20(%rbp)
.LBB59_123:                             # %for.cond839
                                        #   Parent Loop BB59_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB59_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB59_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB59_125:                             # %for.cond860
                                        #   Parent Loop BB59_121 Depth=1
                                        #     Parent Loop BB59_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB59_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB59_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB59_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB59_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB59_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB59_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB59_130
.LBB59_129:                             # %if.then867
                                        #   in Loop: Header=BB59_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_131
.LBB59_130:                             # %if.else876
                                        #   in Loop: Header=BB59_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB59_131:                             # %if.end885
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB59_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB59_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB59_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB59_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB59_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB59_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-112(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB59_139
	jp	.LBB59_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB59_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB59_138
.LBB59_137:                             # %cond.false1047
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-44(%rbp), %eax
.LBB59_138:                             # %cond.end1048
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB59_143
.LBB59_139:                             # %if.else1050
                                        #   in Loop: Header=BB59_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB59_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB59_142
.LBB59_141:                             # %if.else1054
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB59_142:                             # %if.end1055
                                        #   in Loop: Header=BB59_125 Depth=3
	jmp	.LBB59_143
.LBB59_143:                             # %if.end1056
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB59_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB59_146
.LBB59_145:                             # %cond.false1060
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-100(%rbp), %eax
.LBB59_146:                             # %cond.end1061
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB59_157
.LBB59_147:                             # %if.else1063
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB59_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB59_156
.LBB59_149:                             # %if.else1067
                                        #   in Loop: Header=BB59_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB59_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB59_152
.LBB59_151:                             # %cond.false1071
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-44(%rbp), %eax
.LBB59_152:                             # %cond.end1072
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB59_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB59_155
.LBB59_154:                             # %cond.false1077
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-100(%rbp), %eax
.LBB59_155:                             # %cond.end1078
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB59_156:                             # %if.end1080
                                        #   in Loop: Header=BB59_125 Depth=3
	jmp	.LBB59_157
.LBB59_157:                             # %if.end1081
                                        #   in Loop: Header=BB59_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB59_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB59_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-224(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -224(%rbp)
	jmp	.LBB59_161
.LBB59_160:                             # %if.else1099
                                        #   in Loop: Header=BB59_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-224(%rbp), %eax
	movl	%eax, -224(%rbp)
.LBB59_161:                             # %if.end1106
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB59_162:                             # %if.end1128
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB59_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_125
.LBB59_164:                             # %for.end1164
                                        #   in Loop: Header=BB59_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB59_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_123
.LBB59_166:                             # %for.end1169
                                        #   in Loop: Header=BB59_121 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc1170
                                        #   in Loop: Header=BB59_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_121
.LBB59_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB59_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB59_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB59_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
                                        #       Child Loop BB59_175 Depth 3
                                        #         Child Loop BB59_177 Depth 4
                                        #         Child Loop BB59_181 Depth 4
                                        #       Child Loop BB59_187 Depth 3
                                        #         Child Loop BB59_189 Depth 4
                                        #         Child Loop BB59_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB59_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -20(%rbp)
.LBB59_173:                             # %for.cond1181
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_175 Depth 3
                                        #         Child Loop BB59_177 Depth 4
                                        #         Child Loop BB59_181 Depth 4
                                        #       Child Loop BB59_187 Depth 3
                                        #         Child Loop BB59_189 Depth 4
                                        #         Child Loop BB59_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB59_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	$0, -12(%rbp)
.LBB59_175:                             # %for.cond1185
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_177 Depth 4
                                        #         Child Loop BB59_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB59_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB59_175 Depth=3
	movl	$0, -16(%rbp)
.LBB59_177:                             # %for.cond1189
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        #       Parent Loop BB59_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB59_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB59_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB59_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_177
.LBB59_180:                             # %for.end1204
                                        #   in Loop: Header=BB59_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB59_181:                             # %for.cond1223
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        #       Parent Loop BB59_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB59_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB59_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB59_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_181
.LBB59_184:                             # %for.end1254
                                        #   in Loop: Header=BB59_175 Depth=3
	jmp	.LBB59_185
.LBB59_185:                             # %for.inc1255
                                        #   in Loop: Header=BB59_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_175
.LBB59_186:                             # %for.end1257
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	$0, -16(%rbp)
.LBB59_187:                             # %for.cond1258
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_189 Depth 4
                                        #         Child Loop BB59_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB59_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB59_187 Depth=3
	movl	$0, -12(%rbp)
.LBB59_189:                             # %for.cond1262
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        #       Parent Loop BB59_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB59_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB59_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB59_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_189
.LBB59_192:                             # %for.end1277
                                        #   in Loop: Header=BB59_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB59_193:                             # %for.cond1296
                                        #   Parent Loop BB59_171 Depth=1
                                        #     Parent Loop BB59_173 Depth=2
                                        #       Parent Loop BB59_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB59_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB59_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB59_197
.LBB59_196:                             # %cond.false1311
                                        #   in Loop: Header=BB59_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB59_197:                             # %cond.end1319
                                        #   in Loop: Header=BB59_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB59_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB59_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_203
.LBB59_199:                             # %cond.false1325
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB59_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB59_202
.LBB59_201:                             # %cond.false1336
                                        #   in Loop: Header=BB59_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB59_202:                             # %cond.end1344
                                        #   in Loop: Header=BB59_193 Depth=4
.LBB59_203:                             # %cond.end1346
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB59_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB59_206
.LBB59_205:                             # %cond.false1366
                                        #   in Loop: Header=BB59_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB59_206:                             # %cond.end1374
                                        #   in Loop: Header=BB59_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB59_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB59_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB59_212
.LBB59_208:                             # %cond.false1380
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB59_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB59_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB59_211
.LBB59_210:                             # %cond.false1391
                                        #   in Loop: Header=BB59_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB59_211:                             # %cond.end1399
                                        #   in Loop: Header=BB59_193 Depth=4
.LBB59_212:                             # %cond.end1401
                                        #   in Loop: Header=BB59_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB59_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_193
.LBB59_214:                             # %for.end1412
                                        #   in Loop: Header=BB59_187 Depth=3
	jmp	.LBB59_215
.LBB59_215:                             # %for.inc1413
                                        #   in Loop: Header=BB59_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_187
.LBB59_216:                             # %for.end1415
                                        #   in Loop: Header=BB59_173 Depth=2
	jmp	.LBB59_217
.LBB59_217:                             # %for.inc1416
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_173
.LBB59_218:                             # %for.end1418
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_219
.LBB59_219:                             # %for.inc1419
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_171
.LBB59_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB59_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB59_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB59_221 Depth=1
	movl	$0, -16(%rbp)
.LBB59_223:                             # %for.cond1426
                                        #   Parent Loop BB59_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB59_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB59_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB59_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_223
.LBB59_226:                             # %for.end1446
                                        #   in Loop: Header=BB59_221 Depth=1
	jmp	.LBB59_227
.LBB59_227:                             # %for.inc1447
                                        #   in Loop: Header=BB59_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_221
.LBB59_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$276591160, -268(%rbp)  # imm = 0x107C7238
	jne	.LBB59_230
.LBB59_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_229
.Lfunc_end59:
	.size	dct_chroma_sp.50, .Lfunc_end59-dct_chroma_sp.50
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.51             # -- Begin function dct_luma.51
	.p2align	4, 0x90
	.type	dct_luma.51,@function
dct_luma.51:                            # @dct_luma.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$339671280, -148(%rbp)  # imm = 0x143EF8F0
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB60_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB60_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB60_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB60_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_5:                               # %land.end32
                                        #   in Loop: Header=BB60_3 Depth=1
	testb	$1, %al
	jne	.LBB60_6
	jmp	.LBB60_12
.LBB60_6:                               # %for.body
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	$0, -16(%rbp)
.LBB60_7:                               # %for.cond34
                                        #   Parent Loop BB60_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_7
.LBB60_10:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB60_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_3
.LBB60_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB60_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB60_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB60_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_15:                              # %land.end101
                                        #   in Loop: Header=BB60_13 Depth=1
	testb	$1, %al
	jne	.LBB60_16
	jmp	.LBB60_22
.LBB60_16:                              # %for.body103
                                        #   in Loop: Header=BB60_13 Depth=1
	movl	$0, -12(%rbp)
.LBB60_17:                              # %for.cond104
                                        #   Parent Loop BB60_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB60_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB60_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_17
.LBB60_20:                              # %for.end136
                                        #   in Loop: Header=BB60_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB60_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_13
.LBB60_22:                              # %for.end169
	movl	$0, -124(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -88(%rbp)
.LBB60_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB60_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB60_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB60_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB60_28
.LBB60_27:                              # %if.then
                                        #   in Loop: Header=BB60_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_29
.LBB60_28:                              # %if.else
                                        #   in Loop: Header=BB60_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB60_29:                              # %if.end
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB60_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB60_35
.LBB60_31:                              # %if.else199
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB60_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_34
.LBB60_33:                              # %if.else223
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB60_34:                              # %if.end245
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_35
.LBB60_35:                              # %if.end246
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB60_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	$1, -124(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB60_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB60_39
.LBB60_38:                              # %if.then254
                                        #   in Loop: Header=BB60_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB60_40
.LBB60_39:                              # %if.else256
                                        #   in Loop: Header=BB60_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_40:                              # %if.end263
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB60_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB60_52
.LBB60_42:                              # %if.else283
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB60_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB60_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB60_46
.LBB60_45:                              # %if.else301
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB60_46:                              # %if.end314
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_51
.LBB60_47:                              # %if.else315
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB60_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB60_50
.LBB60_49:                              # %if.else328
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB60_50:                              # %if.end338
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_51
.LBB60_51:                              # %if.end339
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_52
.LBB60_52:                              # %if.end340
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_53
.LBB60_53:                              # %if.end341
                                        #   in Loop: Header=BB60_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB60_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB60_55:                              # %if.end349
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_56
.LBB60_56:                              # %for.inc350
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB60_23
.LBB60_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB60_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_62 Depth 2
                                        #     Child Loop BB60_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB60_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB60_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_60:                              # %land.end361
                                        #   in Loop: Header=BB60_58 Depth=1
	testb	$1, %al
	jne	.LBB60_61
	jmp	.LBB60_71
.LBB60_61:                              # %for.body363
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	$0, -16(%rbp)
.LBB60_62:                              # %for.cond364
                                        #   Parent Loop BB60_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB60_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB60_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_62
.LBB60_65:                              # %for.end377
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB60_66:                              # %for.cond396
                                        #   Parent Loop BB60_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB60_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB60_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB60_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_66
.LBB60_69:                              # %for.end423
                                        #   in Loop: Header=BB60_58 Depth=1
	jmp	.LBB60_70
.LBB60_70:                              # %for.inc424
                                        #   in Loop: Header=BB60_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_58
.LBB60_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB60_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_76 Depth 2
                                        #     Child Loop BB60_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB60_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB60_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB60_74:                              # %land.end433
                                        #   in Loop: Header=BB60_72 Depth=1
	testb	$1, %al
	jne	.LBB60_75
	jmp	.LBB60_109
.LBB60_75:                              # %for.body435
                                        #   in Loop: Header=BB60_72 Depth=1
	movl	$0, -12(%rbp)
.LBB60_76:                              # %for.cond436
                                        #   Parent Loop BB60_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB60_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB60_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_76
.LBB60_79:                              # %for.end449
                                        #   in Loop: Header=BB60_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB60_80:                              # %for.cond468
                                        #   Parent Loop BB60_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB60_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB60_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB60_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_85
.LBB60_84:                              # %cond.false
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB60_85:                              # %cond.end
                                        #   in Loop: Header=BB60_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB60_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB60_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB60_91
.LBB60_87:                              # %cond.false518
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB60_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_90
.LBB60_89:                              # %cond.false540
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB60_90:                              # %cond.end559
                                        #   in Loop: Header=BB60_80 Depth=2
.LBB60_91:                              # %cond.end561
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB60_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_94
.LBB60_93:                              # %cond.false592
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB60_94:                              # %cond.end611
                                        #   in Loop: Header=BB60_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB60_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB60_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB60_100
.LBB60_96:                              # %cond.false618
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB60_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB60_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_99
.LBB60_98:                              # %cond.false640
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB60_99:                              # %cond.end659
                                        #   in Loop: Header=BB60_80 Depth=2
.LBB60_100:                             # %cond.end661
                                        #   in Loop: Header=BB60_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB60_105
.LBB60_101:                             # %if.else669
                                        #   in Loop: Header=BB60_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB60_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB60_104
.LBB60_103:                             # %if.else692
                                        #   in Loop: Header=BB60_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB60_104:                             # %if.end717
                                        #   in Loop: Header=BB60_80 Depth=2
	jmp	.LBB60_105
.LBB60_105:                             # %if.end718
                                        #   in Loop: Header=BB60_80 Depth=2
	jmp	.LBB60_106
.LBB60_106:                             # %for.inc719
                                        #   in Loop: Header=BB60_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_80
.LBB60_107:                             # %for.end721
                                        #   in Loop: Header=BB60_72 Depth=1
	jmp	.LBB60_108
.LBB60_108:                             # %for.inc722
                                        #   in Loop: Header=BB60_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_72
.LBB60_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB60_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB60_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB60_111 Depth=1
	movl	$0, -16(%rbp)
.LBB60_113:                             # %for.cond732
                                        #   Parent Loop BB60_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB60_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB60_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB60_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB60_117
.LBB60_116:                             # %if.else761
                                        #   in Loop: Header=BB60_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB60_117:                             # %if.end779
                                        #   in Loop: Header=BB60_113 Depth=2
	jmp	.LBB60_118
.LBB60_118:                             # %for.inc780
                                        #   in Loop: Header=BB60_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_113
.LBB60_119:                             # %for.end782
                                        #   in Loop: Header=BB60_111 Depth=1
	jmp	.LBB60_120
.LBB60_120:                             # %for.inc783
                                        #   in Loop: Header=BB60_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_111
.LBB60_121:                             # %for.end785
	jmp	.LBB60_122
.LBB60_122:                             # %if.end786
	movl	-124(%rbp), %ebx
	cmpl	$339671280, -148(%rbp)  # imm = 0x143EF8F0
	jne	.LBB60_124
.LBB60_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_123
.Lfunc_end60:
	.size	dct_luma.51, .Lfunc_end60-dct_luma.51
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.52             # -- Begin function dct_luma.52
	.p2align	4, 0x90
	.type	dct_luma.52,@function
dct_luma.52:                            # @dct_luma.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$838837587, -148(%rbp)  # imm = 0x31FFA553
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -132(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-132(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB61_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -12(%rbp)
.LBB61_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB61_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB61_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB61_5:                               # %land.end32
                                        #   in Loop: Header=BB61_3 Depth=1
	testb	$1, %al
	jne	.LBB61_6
	jmp	.LBB61_12
.LBB61_6:                               # %for.body
                                        #   in Loop: Header=BB61_3 Depth=1
	movl	$0, -16(%rbp)
.LBB61_7:                               # %for.cond34
                                        #   Parent Loop BB61_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB61_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_7
.LBB61_10:                              # %for.end
                                        #   in Loop: Header=BB61_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB61_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_3
.LBB61_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB61_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB61_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB61_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB61_15:                              # %land.end101
                                        #   in Loop: Header=BB61_13 Depth=1
	testb	$1, %al
	jne	.LBB61_16
	jmp	.LBB61_22
.LBB61_16:                              # %for.body103
                                        #   in Loop: Header=BB61_13 Depth=1
	movl	$0, -12(%rbp)
.LBB61_17:                              # %for.cond104
                                        #   Parent Loop BB61_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB61_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB61_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB61_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_17
.LBB61_20:                              # %for.end136
                                        #   in Loop: Header=BB61_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB61_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_13
.LBB61_22:                              # %for.end169
	movl	$0, -112(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -88(%rbp)
.LBB61_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -88(%rbp)
	jge	.LBB61_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB61_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_28
.LBB61_27:                              # %if.then
                                        #   in Loop: Header=BB61_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_29
.LBB61_28:                              # %if.else
                                        #   in Loop: Header=BB61_23 Depth=1
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-88(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB61_29:                              # %if.end
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -24(%rbp)
	jmp	.LBB61_35
.LBB61_31:                              # %if.else199
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB61_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_34
.LBB61_33:                              # %if.else223
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
.LBB61_34:                              # %if.end245
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_35
.LBB61_35:                              # %if.end246
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB61_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	$1, -112(%rbp)
	cmpl	$1, -24(%rbp)
	jg	.LBB61_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB61_39
.LBB61_38:                              # %if.then254
                                        #   in Loop: Header=BB61_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB61_40
.LBB61_39:                              # %if.else256
                                        #   in Loop: Header=BB61_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB61_40:                              # %if.end263
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-24(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -24(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB61_52
.LBB61_42:                              # %if.else283
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB61_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB61_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB61_46
.LBB61_45:                              # %if.else301
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB61_46:                              # %if.end314
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_51
.LBB61_47:                              # %if.else315
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB61_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB61_50
.LBB61_49:                              # %if.else328
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-24(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB61_50:                              # %if.end338
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_51
.LBB61_51:                              # %if.end339
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_52
.LBB61_52:                              # %if.end340
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_53
.LBB61_53:                              # %if.end341
                                        #   in Loop: Header=BB61_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB61_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB61_55:                              # %if.end349
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_56
.LBB61_56:                              # %for.inc350
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB61_23
.LBB61_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB61_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_62 Depth 2
                                        #     Child Loop BB61_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB61_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB61_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB61_60:                              # %land.end361
                                        #   in Loop: Header=BB61_58 Depth=1
	testb	$1, %al
	jne	.LBB61_61
	jmp	.LBB61_71
.LBB61_61:                              # %for.body363
                                        #   in Loop: Header=BB61_58 Depth=1
	movl	$0, -16(%rbp)
.LBB61_62:                              # %for.cond364
                                        #   Parent Loop BB61_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB61_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB61_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_62
.LBB61_65:                              # %for.end377
                                        #   in Loop: Header=BB61_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB61_66:                              # %for.cond396
                                        #   Parent Loop BB61_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB61_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB61_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-84(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB61_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_66
.LBB61_69:                              # %for.end423
                                        #   in Loop: Header=BB61_58 Depth=1
	jmp	.LBB61_70
.LBB61_70:                              # %for.inc424
                                        #   in Loop: Header=BB61_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_58
.LBB61_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB61_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_76 Depth 2
                                        #     Child Loop BB61_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB61_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB61_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB61_74:                              # %land.end433
                                        #   in Loop: Header=BB61_72 Depth=1
	testb	$1, %al
	jne	.LBB61_75
	jmp	.LBB61_109
.LBB61_75:                              # %for.body435
                                        #   in Loop: Header=BB61_72 Depth=1
	movl	$0, -12(%rbp)
.LBB61_76:                              # %for.cond436
                                        #   Parent Loop BB61_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB61_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB61_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB61_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_76
.LBB61_79:                              # %for.end449
                                        #   in Loop: Header=BB61_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB61_80:                              # %for.cond468
                                        #   Parent Loop BB61_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB61_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB61_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB61_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB61_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB61_85
.LBB61_84:                              # %cond.false
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB61_85:                              # %cond.end
                                        #   in Loop: Header=BB61_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB61_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB61_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB61_91
.LBB61_87:                              # %cond.false518
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB61_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_90
.LBB61_89:                              # %cond.false540
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB61_90:                              # %cond.end559
                                        #   in Loop: Header=BB61_80 Depth=2
.LBB61_91:                              # %cond.end561
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB61_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB61_94
.LBB61_93:                              # %cond.false592
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB61_94:                              # %cond.end611
                                        #   in Loop: Header=BB61_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB61_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB61_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB61_100
.LBB61_96:                              # %cond.false618
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB61_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB61_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB61_99
.LBB61_98:                              # %cond.false640
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB61_99:                              # %cond.end659
                                        #   in Loop: Header=BB61_80 Depth=2
.LBB61_100:                             # %cond.end661
                                        #   in Loop: Header=BB61_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB61_105
.LBB61_101:                             # %if.else669
                                        #   in Loop: Header=BB61_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB61_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB61_104
.LBB61_103:                             # %if.else692
                                        #   in Loop: Header=BB61_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB61_104:                             # %if.end717
                                        #   in Loop: Header=BB61_80 Depth=2
	jmp	.LBB61_105
.LBB61_105:                             # %if.end718
                                        #   in Loop: Header=BB61_80 Depth=2
	jmp	.LBB61_106
.LBB61_106:                             # %for.inc719
                                        #   in Loop: Header=BB61_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_80
.LBB61_107:                             # %for.end721
                                        #   in Loop: Header=BB61_72 Depth=1
	jmp	.LBB61_108
.LBB61_108:                             # %for.inc722
                                        #   in Loop: Header=BB61_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_72
.LBB61_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB61_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB61_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB61_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB61_111 Depth=1
	movl	$0, -16(%rbp)
.LBB61_113:                             # %for.cond732
                                        #   Parent Loop BB61_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB61_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB61_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB61_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB61_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB61_117
.LBB61_116:                             # %if.else761
                                        #   in Loop: Header=BB61_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB61_117:                             # %if.end779
                                        #   in Loop: Header=BB61_113 Depth=2
	jmp	.LBB61_118
.LBB61_118:                             # %for.inc780
                                        #   in Loop: Header=BB61_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_113
.LBB61_119:                             # %for.end782
                                        #   in Loop: Header=BB61_111 Depth=1
	jmp	.LBB61_120
.LBB61_120:                             # %for.inc783
                                        #   in Loop: Header=BB61_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_111
.LBB61_121:                             # %for.end785
	jmp	.LBB61_122
.LBB61_122:                             # %if.end786
	movl	-112(%rbp), %ebx
	cmpl	$838837587, -148(%rbp)  # imm = 0x31FFA553
	jne	.LBB61_124
.LBB61_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_123
.Lfunc_end61:
	.size	dct_luma.52, .Lfunc_end61-dct_luma.52
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.53        # -- Begin function dct_chroma_DC.53
	.p2align	4, 0x90
	.type	dct_chroma_DC.53,@function
dct_chroma_DC.53:                       # @dct_chroma_DC.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2098138708, -44(%rbp)  # imm = 0x7D0F0E54
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB62_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB62_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$1, %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB62_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$1, %eax
	jmp	.LBB62_6
.LBB62_5:                               # %cond.false
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-24(%rbp), %eax
.LBB62_6:                               # %cond.end
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %edi
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-28(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -28(%rbp)
.LBB62_7:                               # %if.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_1
.LBB62_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-24(%rbp), %ebx
	cmpl	$2098138708, -44(%rbp)  # imm = 0x7D0F0E54
	jne	.LBB62_11
.LBB62_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_10
.Lfunc_end62:
	.size	dct_chroma_DC.53, .Lfunc_end62-dct_chroma_DC.53
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.54       # -- Begin function dct_luma_16x16.54
	.p2align	4, 0x90
	.type	dct_luma_16x16.54,@function
dct_luma_16x16.54:                      # @dct_luma_16x16.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1217780223, -132(%rbp) # imm = 0x4895D9FF
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB63_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB63_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB63_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB63_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB63_3 Depth=1
	movl	$0, -16(%rbp)
.LBB63_5:                               # %for.cond16
                                        #   Parent Loop BB63_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB63_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB63_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB63_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB63_9
.LBB63_8:                               # %if.else
                                        #   in Loop: Header=BB63_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB63_9:                               # %if.end
                                        #   in Loop: Header=BB63_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB63_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_5
.LBB63_11:                              # %for.end
                                        #   in Loop: Header=BB63_3 Depth=1
	jmp	.LBB63_12
.LBB63_12:                              # %for.inc61
                                        #   in Loop: Header=BB63_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_3
.LBB63_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB63_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_18 Depth 2
                                        #       Child Loop BB63_20 Depth 3
                                        #         Child Loop BB63_22 Depth 4
                                        #       Child Loop BB63_28 Depth 3
                                        #         Child Loop BB63_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB63_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB63_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_16:                              # %land.end69
                                        #   in Loop: Header=BB63_14 Depth=1
	testb	$1, %al
	jne	.LBB63_17
	jmp	.LBB63_39
.LBB63_17:                              # %for.body71
                                        #   in Loop: Header=BB63_14 Depth=1
	movl	$0, -20(%rbp)
.LBB63_18:                              # %for.cond72
                                        #   Parent Loop BB63_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_20 Depth 3
                                        #         Child Loop BB63_22 Depth 4
                                        #       Child Loop BB63_28 Depth 3
                                        #         Child Loop BB63_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB63_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB63_18 Depth=2
	movl	$0, -12(%rbp)
.LBB63_20:                              # %for.cond76
                                        #   Parent Loop BB63_14 Depth=1
                                        #     Parent Loop BB63_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB63_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB63_20 Depth=3
	movl	$0, -16(%rbp)
.LBB63_22:                              # %for.cond80
                                        #   Parent Loop BB63_14 Depth=1
                                        #     Parent Loop BB63_18 Depth=2
                                        #       Parent Loop BB63_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB63_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB63_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB63_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_22
.LBB63_25:                              # %for.end125
                                        #   in Loop: Header=BB63_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB63_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_20
.LBB63_27:                              # %for.end169
                                        #   in Loop: Header=BB63_18 Depth=2
	movl	$0, -16(%rbp)
.LBB63_28:                              # %for.cond170
                                        #   Parent Loop BB63_14 Depth=1
                                        #     Parent Loop BB63_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB63_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB63_28 Depth=3
	movl	$0, -12(%rbp)
.LBB63_30:                              # %for.cond174
                                        #   Parent Loop BB63_14 Depth=1
                                        #     Parent Loop BB63_18 Depth=2
                                        #       Parent Loop BB63_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB63_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB63_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB63_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_30
.LBB63_33:                              # %for.end219
                                        #   in Loop: Header=BB63_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB63_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_28
.LBB63_35:                              # %for.end264
                                        #   in Loop: Header=BB63_18 Depth=2
	jmp	.LBB63_36
.LBB63_36:                              # %for.inc265
                                        #   in Loop: Header=BB63_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_18
.LBB63_37:                              # %for.end267
                                        #   in Loop: Header=BB63_14 Depth=1
	jmp	.LBB63_38
.LBB63_38:                              # %for.inc268
                                        #   in Loop: Header=BB63_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_14
.LBB63_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB63_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	$0, -16(%rbp)
.LBB63_42:                              # %for.cond275
                                        #   Parent Loop BB63_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB63_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB63_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_42
.LBB63_45:                              # %for.end291
                                        #   in Loop: Header=BB63_40 Depth=1
	jmp	.LBB63_46
.LBB63_46:                              # %for.inc292
                                        #   in Loop: Header=BB63_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_40
.LBB63_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB63_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB63_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB63_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_50:                              # %land.end301
                                        #   in Loop: Header=BB63_48 Depth=1
	testb	$1, %al
	jne	.LBB63_51
	jmp	.LBB63_57
.LBB63_51:                              # %for.body303
                                        #   in Loop: Header=BB63_48 Depth=1
	movl	$0, -16(%rbp)
.LBB63_52:                              # %for.cond304
                                        #   Parent Loop BB63_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB63_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB63_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB63_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_52
.LBB63_55:                              # %for.end333
                                        #   in Loop: Header=BB63_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB63_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_48
.LBB63_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB63_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB63_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB63_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_60:                              # %land.end367
                                        #   in Loop: Header=BB63_58 Depth=1
	testb	$1, %al
	jne	.LBB63_61
	jmp	.LBB63_67
.LBB63_61:                              # %for.body369
                                        #   in Loop: Header=BB63_58 Depth=1
	movl	$0, -12(%rbp)
.LBB63_62:                              # %for.cond370
                                        #   Parent Loop BB63_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB63_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB63_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB63_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_62
.LBB63_65:                              # %for.end399
                                        #   in Loop: Header=BB63_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB63_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_58
.LBB63_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB63_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB63_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB63_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB63_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB63_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB63_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB63_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB63_73
.LBB63_72:                              # %if.then437
                                        #   in Loop: Header=BB63_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_74
.LBB63_73:                              # %if.else446
                                        #   in Loop: Header=BB63_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB63_74:                              # %if.end455
                                        #   in Loop: Header=BB63_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB63_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB63_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB63_77
.LBB63_76:                              # %if.else463
                                        #   in Loop: Header=BB63_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB63_77:                              # %if.end481
                                        #   in Loop: Header=BB63_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB63_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB63_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB63_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB63_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB63_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB63_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB63_81:                              # %if.end492
                                        #   in Loop: Header=BB63_68 Depth=1
	jmp	.LBB63_82
.LBB63_82:                              # %if.end493
                                        #   in Loop: Header=BB63_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB63_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB63_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB63_84:                              # %if.end507
                                        #   in Loop: Header=BB63_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB63_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB63_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB63_86:                              # %if.end519
                                        #   in Loop: Header=BB63_68 Depth=1
	jmp	.LBB63_87
.LBB63_87:                              # %for.inc520
                                        #   in Loop: Header=BB63_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB63_68
.LBB63_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB63_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_93 Depth 2
                                        #     Child Loop BB63_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB63_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB63_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_91:                              # %land.end531
                                        #   in Loop: Header=BB63_89 Depth=1
	testb	$1, %al
	jne	.LBB63_92
	jmp	.LBB63_102
.LBB63_92:                              # %for.body533
                                        #   in Loop: Header=BB63_89 Depth=1
	movl	$0, -16(%rbp)
.LBB63_93:                              # %for.cond534
                                        #   Parent Loop BB63_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB63_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_93
.LBB63_96:                              # %for.end546
                                        #   in Loop: Header=BB63_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB63_97:                              # %for.cond563
                                        #   Parent Loop BB63_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB63_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB63_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB63_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_97
.LBB63_100:                             # %for.end588
                                        #   in Loop: Header=BB63_89 Depth=1
	jmp	.LBB63_101
.LBB63_101:                             # %for.inc589
                                        #   in Loop: Header=BB63_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_89
.LBB63_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB63_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_107 Depth 2
                                        #     Child Loop BB63_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB63_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB63_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_105:                             # %land.end598
                                        #   in Loop: Header=BB63_103 Depth=1
	testb	$1, %al
	jne	.LBB63_106
	jmp	.LBB63_119
.LBB63_106:                             # %for.body600
                                        #   in Loop: Header=BB63_103 Depth=1
	movl	$0, -12(%rbp)
.LBB63_107:                             # %for.cond601
                                        #   Parent Loop BB63_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB63_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB63_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_107
.LBB63_110:                             # %for.end613
                                        #   in Loop: Header=BB63_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB63_111:                             # %for.cond630
                                        #   Parent Loop BB63_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB63_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB63_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB63_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB63_115
.LBB63_114:                             # %if.else680
                                        #   in Loop: Header=BB63_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB63_115:                             # %if.end717
                                        #   in Loop: Header=BB63_111 Depth=2
	jmp	.LBB63_116
.LBB63_116:                             # %for.inc718
                                        #   in Loop: Header=BB63_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_111
.LBB63_117:                             # %for.end720
                                        #   in Loop: Header=BB63_103 Depth=1
	jmp	.LBB63_118
.LBB63_118:                             # %for.inc721
                                        #   in Loop: Header=BB63_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_103
.LBB63_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB63_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_122 Depth 2
                                        #       Child Loop BB63_124 Depth 3
                                        #       Child Loop BB63_143 Depth 3
                                        #         Child Loop BB63_147 Depth 4
                                        #         Child Loop BB63_151 Depth 4
                                        #       Child Loop BB63_157 Depth 3
                                        #         Child Loop BB63_161 Depth 4
                                        #         Child Loop BB63_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB63_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB63_120 Depth=1
	movl	$0, -20(%rbp)
.LBB63_122:                             # %for.cond728
                                        #   Parent Loop BB63_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_124 Depth 3
                                        #       Child Loop BB63_143 Depth 3
                                        #         Child Loop BB63_147 Depth 4
                                        #         Child Loop BB63_151 Depth 4
                                        #       Child Loop BB63_157 Depth 3
                                        #         Child Loop BB63_161 Depth 4
                                        #         Child Loop BB63_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB63_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB63_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB63_124:                             # %for.cond751
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB63_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB63_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB63_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB63_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB63_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB63_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB63_129
.LBB63_128:                             # %if.then762
                                        #   in Loop: Header=BB63_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_130
.LBB63_129:                             # %if.else771
                                        #   in Loop: Header=BB63_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB63_130:                             # %if.end780
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB63_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB63_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB63_133
.LBB63_132:                             # %if.else793
                                        #   in Loop: Header=BB63_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB63_133:                             # %if.end818
                                        #   in Loop: Header=BB63_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB63_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB63_135:                             # %if.end836
                                        #   in Loop: Header=BB63_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB63_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB63_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB63_139
.LBB63_138:                             # %if.else871
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB63_139:                             # %if.end889
                                        #   in Loop: Header=BB63_124 Depth=3
	jmp	.LBB63_140
.LBB63_140:                             # %if.end890
                                        #   in Loop: Header=BB63_124 Depth=3
	jmp	.LBB63_141
.LBB63_141:                             # %for.inc891
                                        #   in Loop: Header=BB63_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB63_124
.LBB63_142:                             # %for.end893
                                        #   in Loop: Header=BB63_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB63_143:                             # %for.cond896
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_147 Depth 4
                                        #         Child Loop BB63_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB63_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB63_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_145:                             # %land.end902
                                        #   in Loop: Header=BB63_143 Depth=3
	testb	$1, %al
	jne	.LBB63_146
	jmp	.LBB63_156
.LBB63_146:                             # %for.body904
                                        #   in Loop: Header=BB63_143 Depth=3
	movl	$0, -16(%rbp)
.LBB63_147:                             # %for.cond905
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        #       Parent Loop BB63_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB63_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB63_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB63_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_147
.LBB63_150:                             # %for.end921
                                        #   in Loop: Header=BB63_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB63_151:                             # %for.cond940
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        #       Parent Loop BB63_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB63_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB63_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB63_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_151
.LBB63_154:                             # %for.end973
                                        #   in Loop: Header=BB63_143 Depth=3
	jmp	.LBB63_155
.LBB63_155:                             # %for.inc974
                                        #   in Loop: Header=BB63_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_143
.LBB63_156:                             # %for.end976
                                        #   in Loop: Header=BB63_122 Depth=2
	movl	$0, -16(%rbp)
.LBB63_157:                             # %for.cond977
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_161 Depth 4
                                        #         Child Loop BB63_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB63_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB63_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB63_159:                             # %land.end983
                                        #   in Loop: Header=BB63_157 Depth=3
	testb	$1, %al
	jne	.LBB63_160
	jmp	.LBB63_170
.LBB63_160:                             # %for.body985
                                        #   in Loop: Header=BB63_157 Depth=3
	movl	$0, -12(%rbp)
.LBB63_161:                             # %for.cond986
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        #       Parent Loop BB63_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB63_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB63_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB63_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_161
.LBB63_164:                             # %for.end1002
                                        #   in Loop: Header=BB63_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB63_165:                             # %for.cond1021
                                        #   Parent Loop BB63_120 Depth=1
                                        #     Parent Loop BB63_122 Depth=2
                                        #       Parent Loop BB63_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB63_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB63_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB63_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_165
.LBB63_168:                             # %for.end1054
                                        #   in Loop: Header=BB63_157 Depth=3
	jmp	.LBB63_169
.LBB63_169:                             # %for.inc1055
                                        #   in Loop: Header=BB63_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_157
.LBB63_170:                             # %for.end1057
                                        #   in Loop: Header=BB63_122 Depth=2
	jmp	.LBB63_171
.LBB63_171:                             # %for.inc1058
                                        #   in Loop: Header=BB63_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_122
.LBB63_172:                             # %for.end1060
                                        #   in Loop: Header=BB63_120 Depth=1
	jmp	.LBB63_173
.LBB63_173:                             # %for.inc1061
                                        #   in Loop: Header=BB63_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_120
.LBB63_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB63_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB63_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB63_176 Depth=1
	movl	$0, -16(%rbp)
.LBB63_178:                             # %for.cond1071
                                        #   Parent Loop BB63_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB63_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB63_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB63_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_178
.LBB63_181:                             # %for.end1093
                                        #   in Loop: Header=BB63_176 Depth=1
	jmp	.LBB63_182
.LBB63_182:                             # %for.inc1094
                                        #   in Loop: Header=BB63_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_176
.LBB63_183:                             # %for.end1096
	jmp	.LBB63_196
.LBB63_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB63_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB63_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB63_185 Depth=1
	movl	$0, -16(%rbp)
.LBB63_187:                             # %for.cond1102
                                        #   Parent Loop BB63_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB63_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB63_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB63_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB63_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB63_191
.LBB63_190:                             # %if.else1125
                                        #   in Loop: Header=BB63_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB63_191:                             # %if.end1145
                                        #   in Loop: Header=BB63_187 Depth=2
	jmp	.LBB63_192
.LBB63_192:                             # %for.inc1146
                                        #   in Loop: Header=BB63_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_187
.LBB63_193:                             # %for.end1148
                                        #   in Loop: Header=BB63_185 Depth=1
	jmp	.LBB63_194
.LBB63_194:                             # %for.inc1149
                                        #   in Loop: Header=BB63_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_185
.LBB63_195:                             # %for.end1151
	jmp	.LBB63_196
.LBB63_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB63_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB63_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB63_198 Depth=1
	movl	$0, -16(%rbp)
.LBB63_200:                             # %for.cond1160
                                        #   Parent Loop BB63_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB63_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB63_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB63_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB63_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB63_213
.LBB63_203:                             # %if.else1186
                                        #   in Loop: Header=BB63_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB63_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB63_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_206
.LBB63_205:                             # %cond.false
                                        #   in Loop: Header=BB63_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB63_206:                             # %cond.end
                                        #   in Loop: Header=BB63_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB63_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB63_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB63_212
.LBB63_208:                             # %cond.false1229
                                        #   in Loop: Header=BB63_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB63_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB63_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_211
.LBB63_210:                             # %cond.false1250
                                        #   in Loop: Header=BB63_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB63_211:                             # %cond.end1268
                                        #   in Loop: Header=BB63_200 Depth=2
.LBB63_212:                             # %cond.end1270
                                        #   in Loop: Header=BB63_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB63_213:                             # %if.end1282
                                        #   in Loop: Header=BB63_200 Depth=2
	jmp	.LBB63_214
.LBB63_214:                             # %for.inc1283
                                        #   in Loop: Header=BB63_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_200
.LBB63_215:                             # %for.end1285
                                        #   in Loop: Header=BB63_198 Depth=1
	jmp	.LBB63_216
.LBB63_216:                             # %for.inc1286
                                        #   in Loop: Header=BB63_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_198
.LBB63_217:                             # %for.end1288
	jmp	.LBB63_218
.LBB63_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$1217780223, -132(%rbp) # imm = 0x4895D9FF
	jne	.LBB63_220
.LBB63_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_219
.Lfunc_end63:
	.size	dct_luma_16x16.54, .Lfunc_end63-dct_luma_16x16.54
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.55         # -- Begin function copyblock_sp.55
	.p2align	4, 0x90
	.type	copyblock_sp.55,@function
copyblock_sp.55:                        # @copyblock_sp.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$1816266689, -92(%rbp)  # imm = 0x6C4207C1
	movl	%edi, -76(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -84(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-84(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	$0, -8(%rbp)
.LBB64_3:                               # %for.cond4
                                        #   Parent Loop BB64_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB64_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB64_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_3
.LBB64_6:                               # %for.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_7
.LBB64_7:                               # %for.inc17
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB64_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB64_9 Depth=1
	movl	$0, -8(%rbp)
.LBB64_11:                              # %for.cond24
                                        #   Parent Loop BB64_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB64_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB64_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB64_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_11
.LBB64_14:                              # %for.end53
                                        #   in Loop: Header=BB64_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB64_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_9
.LBB64_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB64_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	$0, -4(%rbp)
.LBB64_19:                              # %for.cond86
                                        #   Parent Loop BB64_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB64_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB64_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB64_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_19
.LBB64_22:                              # %for.end115
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_17
.LBB64_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB64_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB64_25 Depth=1
	movl	$0, -8(%rbp)
.LBB64_27:                              # %for.cond149
                                        #   Parent Loop BB64_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB64_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-88(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-84(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB64_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_27
.LBB64_30:                              # %for.end184
                                        #   in Loop: Header=BB64_25 Depth=1
	jmp	.LBB64_31
.LBB64_31:                              # %for.inc185
                                        #   in Loop: Header=BB64_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_25
.LBB64_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB64_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_35 Depth 2
                                        #     Child Loop BB64_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	$0, -8(%rbp)
.LBB64_35:                              # %for.cond192
                                        #   Parent Loop BB64_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB64_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB64_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_35
.LBB64_38:                              # %for.end205
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB64_39:                              # %for.cond224
                                        #   Parent Loop BB64_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB64_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB64_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB64_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_39
.LBB64_42:                              # %for.end251
                                        #   in Loop: Header=BB64_33 Depth=1
	jmp	.LBB64_43
.LBB64_43:                              # %for.inc252
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_33
.LBB64_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB64_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_47 Depth 2
                                        #     Child Loop BB64_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB64_45 Depth=1
	movl	$0, -4(%rbp)
.LBB64_47:                              # %for.cond259
                                        #   Parent Loop BB64_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB64_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB64_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_47
.LBB64_50:                              # %for.end272
                                        #   in Loop: Header=BB64_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB64_51:                              # %for.cond291
                                        #   Parent Loop BB64_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB64_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB64_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_55
.LBB64_54:                              # %cond.false
                                        #   in Loop: Header=BB64_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB64_55:                              # %cond.end
                                        #   in Loop: Header=BB64_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB64_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB64_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_61
.LBB64_57:                              # %cond.false316
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB64_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_60
.LBB64_59:                              # %cond.false327
                                        #   in Loop: Header=BB64_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB64_60:                              # %cond.end335
                                        #   in Loop: Header=BB64_51 Depth=2
.LBB64_61:                              # %cond.end337
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB64_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_64
.LBB64_63:                              # %cond.false355
                                        #   in Loop: Header=BB64_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB64_64:                              # %cond.end363
                                        #   in Loop: Header=BB64_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB64_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB64_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_70
.LBB64_66:                              # %cond.false369
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB64_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB64_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_69
.LBB64_68:                              # %cond.false380
                                        #   in Loop: Header=BB64_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB64_69:                              # %cond.end388
                                        #   in Loop: Header=BB64_51 Depth=2
.LBB64_70:                              # %cond.end390
                                        #   in Loop: Header=BB64_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB64_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_51
.LBB64_72:                              # %for.end399
                                        #   in Loop: Header=BB64_45 Depth=1
	jmp	.LBB64_73
.LBB64_73:                              # %for.inc400
                                        #   in Loop: Header=BB64_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_45
.LBB64_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB64_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB64_75 Depth=1
	movl	$0, -8(%rbp)
.LBB64_77:                              # %for.cond407
                                        #   Parent Loop BB64_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB64_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-72(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB64_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_77
.LBB64_80:                              # %for.end427
                                        #   in Loop: Header=BB64_75 Depth=1
	jmp	.LBB64_81
.LBB64_81:                              # %for.inc428
                                        #   in Loop: Header=BB64_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_75
.LBB64_82:                              # %for.end430
	cmpl	$1816266689, -92(%rbp)  # imm = 0x6C4207C1
	jne	.LBB64_84
.LBB64_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_83
.Lfunc_end64:
	.size	copyblock_sp.55, .Lfunc_end64-copyblock_sp.55
	.cfi_endproc
                                        # -- End function
	.globl	copyblock_sp.56         # -- Begin function copyblock_sp.56
	.p2align	4, 0x90
	.type	copyblock_sp.56,@function
copyblock_sp.56:                        # @copyblock_sp.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movl	$694465441, -88(%rbp)   # imm = 0x2964B3A1
	movl	%edi, -84(%rbp)
	movl	%esi, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movl	$0, -4(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond4
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_6
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-8(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-4(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_6:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_7
.LBB65_7:                               # %for.inc17
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_1
.LBB65_8:                               # %for.end19
	movl	$0, -4(%rbp)
.LBB65_9:                               # %for.cond20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_11 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_16
# %bb.10:                               # %for.body23
                                        #   in Loop: Header=BB65_9 Depth=1
	movl	$0, -8(%rbp)
.LBB65_11:                              # %for.cond24
                                        #   Parent Loop BB65_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_14
# %bb.12:                               # %for.body27
                                        #   in Loop: Header=BB65_11 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-8(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-36(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-36(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.13:                               # %for.inc51
                                        #   in Loop: Header=BB65_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_11
.LBB65_14:                              # %for.end53
                                        #   in Loop: Header=BB65_9 Depth=1
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-24(%rbp), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.15:                               # %for.inc79
                                        #   in Loop: Header=BB65_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_9
.LBB65_16:                              # %for.end81
	movl	$0, -8(%rbp)
.LBB65_17:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_19 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_24
# %bb.18:                               # %for.body85
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	$0, -4(%rbp)
.LBB65_19:                              # %for.cond86
                                        #   Parent Loop BB65_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_22
# %bb.20:                               # %for.body89
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-4(%rbp), %rdx
	movl	%eax, -32(%rbp,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.21:                               # %for.inc113
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_19
.LBB65_22:                              # %for.end115
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-176(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-32(%rbp), %ecx
	subl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-20(%rbp), %ecx
	movl	-24(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.23:                               # %for.inc142
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_17
.LBB65_24:                              # %for.end144
	movl	$0, -4(%rbp)
.LBB65_25:                              # %for.cond145
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_27 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_32
# %bb.26:                               # %for.body148
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	$0, -8(%rbp)
.LBB65_27:                              # %for.cond149
                                        #   Parent Loop BB65_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_30
# %bb.28:                               # %for.body152
                                        #   in Loop: Header=BB65_27 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	leaq	-176(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-92(%rbp), %eax
	movl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-176(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-80(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-72(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.29:                               # %for.inc182
                                        #   in Loop: Header=BB65_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_27
.LBB65_30:                              # %for.end184
                                        #   in Loop: Header=BB65_25 Depth=1
	jmp	.LBB65_31
.LBB65_31:                              # %for.inc185
                                        #   in Loop: Header=BB65_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_25
.LBB65_32:                              # %for.end187
	movl	$0, -4(%rbp)
.LBB65_33:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_35 Depth 2
                                        #     Child Loop BB65_39 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_44
# %bb.34:                               # %for.body191
                                        #   in Loop: Header=BB65_33 Depth=1
	movl	$0, -8(%rbp)
.LBB65_35:                              # %for.cond192
                                        #   Parent Loop BB65_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_38
# %bb.36:                               # %for.body195
                                        #   in Loop: Header=BB65_35 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.37:                               # %for.inc203
                                        #   in Loop: Header=BB65_35 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_35
.LBB65_38:                              # %for.end205
                                        #   in Loop: Header=BB65_33 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB65_39:                              # %for.cond224
                                        #   Parent Loop BB65_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -8(%rbp)
	jge	.LBB65_42
# %bb.40:                               # %for.body227
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	$3, %eax
	subl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-36(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-36(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.41:                               # %for.inc249
                                        #   in Loop: Header=BB65_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_39
.LBB65_42:                              # %for.end251
                                        #   in Loop: Header=BB65_33 Depth=1
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc252
                                        #   in Loop: Header=BB65_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_33
.LBB65_44:                              # %for.end254
	movl	$0, -8(%rbp)
.LBB65_45:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_47 Depth 2
                                        #     Child Loop BB65_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_74
# %bb.46:                               # %for.body258
                                        #   in Loop: Header=BB65_45 Depth=1
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond259
                                        #   Parent Loop BB65_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_50
# %bb.48:                               # %for.body262
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -32(%rbp,%rcx,4)
# %bb.49:                               # %for.inc270
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_50:                              # %for.end272
                                        #   in Loop: Header=BB65_45 Depth=1
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-32(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	sarl	$1, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB65_51:                              # %for.cond291
                                        #   Parent Loop BB65_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_72
# %bb.52:                               # %for.body294
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	addl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_54
# %bb.53:                               # %cond.true
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_55
.LBB65_54:                              # %cond.false
                                        #   in Loop: Header=BB65_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB65_55:                              # %cond.end
                                        #   in Loop: Header=BB65_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_57
# %bb.56:                               # %cond.true314
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_61
.LBB65_57:                              # %cond.false316
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	addl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_59
# %bb.58:                               # %cond.true326
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_60
.LBB65_59:                              # %cond.false327
                                        #   in Loop: Header=BB65_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB65_60:                              # %cond.end335
                                        #   in Loop: Header=BB65_51 Depth=2
.LBB65_61:                              # %cond.end337
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-4(%rbp), %rdx
	movl	-64(%rbp,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	subl	-64(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB65_63
# %bb.62:                               # %cond.true354
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_64
.LBB65_63:                              # %cond.false355
                                        #   in Loop: Header=BB65_51 Depth=2
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB65_64:                              # %cond.end363
                                        #   in Loop: Header=BB65_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB65_66
# %bb.65:                               # %cond.true367
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_70
.LBB65_66:                              # %cond.false369
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	movl	-64(%rbp,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	subl	-64(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB65_68
# %bb.67:                               # %cond.true379
                                        #   in Loop: Header=BB65_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_69
.LBB65_68:                              # %cond.false380
                                        #   in Loop: Header=BB65_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-64(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-64(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB65_69:                              # %cond.end388
                                        #   in Loop: Header=BB65_51 Depth=2
.LBB65_70:                              # %cond.end390
                                        #   in Loop: Header=BB65_51 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc397
                                        #   in Loop: Header=BB65_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_51
.LBB65_72:                              # %for.end399
                                        #   in Loop: Header=BB65_45 Depth=1
	jmp	.LBB65_73
.LBB65_73:                              # %for.inc400
                                        #   in Loop: Header=BB65_45 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_45
.LBB65_74:                              # %for.end402
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond403
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_77 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_82
# %bb.76:                               # %for.body406
                                        #   in Loop: Header=BB65_75 Depth=1
	movl	$0, -8(%rbp)
.LBB65_77:                              # %for.cond407
                                        #   Parent Loop BB65_75 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB65_80
# %bb.78:                               # %for.body410
                                        #   in Loop: Header=BB65_77 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-76(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-84(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.79:                               # %for.inc425
                                        #   in Loop: Header=BB65_77 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_77
.LBB65_80:                              # %for.end427
                                        #   in Loop: Header=BB65_75 Depth=1
	jmp	.LBB65_81
.LBB65_81:                              # %for.inc428
                                        #   in Loop: Header=BB65_75 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_82:                              # %for.end430
	cmpl	$694465441, -88(%rbp)   # imm = 0x2964B3A1
	jne	.LBB65_84
.LBB65_83:
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_83
.Lfunc_end65:
	.size	copyblock_sp.56, .Lfunc_end65-copyblock_sp.56
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.57 # -- Begin function intrapred_luma_16x16.57
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.57,@function
intrapred_luma_16x16.57:                # @intrapred_luma_16x16.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$608619371, -92(%rbp)   # imm = 0x2446CB6B
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB66_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_1
.LBB66_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB66_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB66_20
.LBB66_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB66_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB66_9
.LBB66_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB66_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB66_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB66_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB66_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB66_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false23
                                        #   in Loop: Header=BB66_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_14
.LBB66_14:                              # %cond.end24
                                        #   in Loop: Header=BB66_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_10
.LBB66_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB66_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_19
.LBB66_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB66_19
.LBB66_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB66_20:                              # %if.end
	movl	$0, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB66_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB66_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB66_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB66_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB66_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB66_24:                              # %if.end51
                                        #   in Loop: Header=BB66_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB66_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB66_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB66_26:                              # %if.end68
                                        #   in Loop: Header=BB66_21 Depth=1
	jmp	.LBB66_27
.LBB66_27:                              # %for.inc69
                                        #   in Loop: Header=BB66_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_21
.LBB66_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB66_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB66_31
# %bb.30:                               # %if.then74
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB66_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB66_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB66_34
# %bb.33:                               # %if.then81
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB66_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB66_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB66_37
# %bb.36:                               # %if.then88
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB66_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB66_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB66_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB66_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB66_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB66_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB66_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB66_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB66_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB66_44:                              # %if.end114
                                        #   in Loop: Header=BB66_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB66_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB66_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB66_46:                              # %if.end133
                                        #   in Loop: Header=BB66_41 Depth=1
	jmp	.LBB66_47
.LBB66_47:                              # %for.inc134
                                        #   in Loop: Header=BB66_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_41
.LBB66_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB66_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	$0, -4(%rbp)
.LBB66_51:                              # %for.cond141
                                        #   Parent Loop BB66_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB66_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB66_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_51
.LBB66_54:                              # %for.end173
                                        #   in Loop: Header=BB66_49 Depth=1
	jmp	.LBB66_55
.LBB66_55:                              # %for.inc174
                                        #   in Loop: Header=BB66_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_49
.LBB66_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB66_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB66_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB66_60
.LBB66_59:                              # %if.then181
	jmp	.LBB66_85
.LBB66_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB66_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB66_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB66_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB66_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_65
.LBB66_64:                              # %if.else210
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB66_65:                              # %if.end232
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB66_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_61
.LBB66_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB66_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB66_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB66_68 Depth=1
	movl	$0, -4(%rbp)
.LBB66_70:                              # %for.cond293
                                        #   Parent Loop BB66_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB66_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB66_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB66_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_74
.LBB66_73:                              # %cond.false309
                                        #   in Loop: Header=BB66_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_74:                              # %cond.end318
                                        #   in Loop: Header=BB66_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB66_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_80
.LBB66_76:                              # %cond.false323
                                        #   in Loop: Header=BB66_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-44(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB66_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_79
.LBB66_78:                              # %cond.false337
                                        #   in Loop: Header=BB66_70 Depth=2
	movl	-36(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-44(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_79:                              # %cond.end346
                                        #   in Loop: Header=BB66_70 Depth=2
.LBB66_80:                              # %cond.end348
                                        #   in Loop: Header=BB66_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB66_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_70
.LBB66_82:                              # %for.end359
                                        #   in Loop: Header=BB66_68 Depth=1
	jmp	.LBB66_83
.LBB66_83:                              # %for.inc360
                                        #   in Loop: Header=BB66_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_68
.LBB66_84:                              # %for.end362.loopexit
	jmp	.LBB66_85
.LBB66_85:                              # %for.end362
	cmpl	$608619371, -92(%rbp)   # imm = 0x2446CB6B
	jne	.LBB66_87
.LBB66_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_86
.Lfunc_end66:
	.size	intrapred_luma_16x16.57, .Lfunc_end66-intrapred_luma_16x16.57
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.58 # -- Begin function intrapred_luma_16x16.58
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.58,@function
intrapred_luma_16x16.58:                # @intrapred_luma_16x16.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$672275048, -92(%rbp)   # imm = 0x28121A68
	movl	$0, -32(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -60(%rbp)
	movl	$0, -4(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB67_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-60(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_1
.LBB67_4:                               # %for.end
	movl	-60(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB67_20
.LBB67_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB67_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_9
.LBB67_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB67_9
.LBB67_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB67_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB67_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB67_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB67_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB67_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_14
.LBB67_13:                              # %cond.false23
                                        #   in Loop: Header=BB67_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB67_14
.LBB67_14:                              # %cond.end24
                                        #   in Loop: Header=BB67_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB67_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_10
.LBB67_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB67_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB67_19
.LBB67_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB67_19
.LBB67_19:                              # %cond.end39
	movl	%eax, -64(%rbp)
.LBB67_20:                              # %if.end
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB67_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB67_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB67_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB67_24:                              # %if.end51
                                        #   in Loop: Header=BB67_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB67_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB67_26:                              # %if.end68
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_27
.LBB67_27:                              # %for.inc69
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_21
.LBB67_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB67_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB67_31
# %bb.30:                               # %if.then74
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB67_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB67_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB67_34
# %bb.33:                               # %if.then81
	movl	-44(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB67_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB67_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB67_37
# %bb.36:                               # %if.then88
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
.LBB67_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB67_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB67_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB67_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB67_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB67_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB67_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB67_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB67_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB67_44:                              # %if.end114
                                        #   in Loop: Header=BB67_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB67_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB67_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB67_46:                              # %if.end133
                                        #   in Loop: Header=BB67_41 Depth=1
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc134
                                        #   in Loop: Header=BB67_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_41
.LBB67_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB67_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	$0, -4(%rbp)
.LBB67_51:                              # %for.cond141
                                        #   Parent Loop BB67_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB67_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_51
.LBB67_54:                              # %for.end173
                                        #   in Loop: Header=BB67_49 Depth=1
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc174
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_49
.LBB67_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB67_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB67_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -64(%rbp)
	jne	.LBB67_60
.LBB67_59:                              # %if.then181
	jmp	.LBB67_85
.LBB67_60:                              # %if.end182
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB67_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB67_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB67_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB67_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_65
.LBB67_64:                              # %if.else210
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB67_65:                              # %if.end232
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_67:                              # %for.end264
	imull	$5, -28(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB67_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB67_68 Depth=1
	movl	$0, -4(%rbp)
.LBB67_70:                              # %for.cond293
                                        #   Parent Loop BB67_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB67_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB67_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_74
.LBB67_73:                              # %cond.false309
                                        #   in Loop: Header=BB67_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_74:                              # %cond.end318
                                        #   in Loop: Header=BB67_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB67_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB67_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB67_80
.LBB67_76:                              # %cond.false323
                                        #   in Loop: Header=BB67_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB67_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB67_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB67_79
.LBB67_78:                              # %cond.false337
                                        #   in Loop: Header=BB67_70 Depth=2
	movl	-40(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB67_79:                              # %cond.end346
                                        #   in Loop: Header=BB67_70 Depth=2
.LBB67_80:                              # %cond.end348
                                        #   in Loop: Header=BB67_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB67_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_70
.LBB67_82:                              # %for.end359
                                        #   in Loop: Header=BB67_68 Depth=1
	jmp	.LBB67_83
.LBB67_83:                              # %for.inc360
                                        #   in Loop: Header=BB67_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_68
.LBB67_84:                              # %for.end362.loopexit
	jmp	.LBB67_85
.LBB67_85:                              # %for.end362
	cmpl	$672275048, -92(%rbp)   # imm = 0x28121A68
	jne	.LBB67_87
.LBB67_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_86
.Lfunc_end67:
	.size	intrapred_luma_16x16.58, .Lfunc_end67-intrapred_luma_16x16.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_luma_sp.59
.LCPI68_0:
	.quad	4616189618054758400     # double 4
.LCPI68_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI68_2:
	.quad	4611686018427387904     # double 2
.LCPI68_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_luma_sp.59
	.p2align	4, 0x90
	.type	dct_luma_sp.59,@function
dct_luma_sp.59:                         # @dct_luma_sp.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -24
	vmovsd	.LCPI68_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI68_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1004822150, -216(%rbp) # imm = 0x3BE45E86
	movl	%edi, -116(%rbp)
	movl	%esi, -136(%rbp)
	movq	%rdx, -232(%rbp)
	movl	-116(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -184(%rbp)
	movl	-136(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -192(%rbp)
	movl	-180(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-184(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -204(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI68_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -240(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	movl	$6, %edi
	idivl	%edi
	movl	%eax, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	12(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -100(%rbp)
	movl	-132(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -148(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%eax, -208(%rbp)
	movq	-168(%rbp), %rax
	movl	16(%rax), %eax
	subl	$0, %eax
	cltd
	idivl	%edi
	movl	%edx, -120(%rbp)
	movl	-208(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %esi
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%edi
	movl	%eax, -196(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movl	%esi, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -188(%rbp)
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -16(%rbp)
.LBB68_3:                               # %for.cond38
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_6
# %bb.4:                                # %for.body41
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-116(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-136(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_3
.LBB68_6:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_7
.LBB68_7:                               # %for.inc66
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_8:                               # %for.end68
	movl	$0, -12(%rbp)
.LBB68_9:                               # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_11 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_16
# %bb.10:                               # %for.body72
                                        #   in Loop: Header=BB68_9 Depth=1
	movl	$0, -16(%rbp)
.LBB68_11:                              # %for.cond73
                                        #   Parent Loop BB68_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_14
# %bb.12:                               # %for.body76
                                        #   in Loop: Header=BB68_11 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.13:                               # %for.inc104
                                        #   in Loop: Header=BB68_11 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_11
.LBB68_14:                              # %for.end106
                                        #   in Loop: Header=BB68_9 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.15:                               # %for.inc137
                                        #   in Loop: Header=BB68_9 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_9
.LBB68_16:                              # %for.end139
	movl	$0, -16(%rbp)
.LBB68_17:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_19 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_24
# %bb.18:                               # %for.body143
                                        #   in Loop: Header=BB68_17 Depth=1
	movl	$0, -12(%rbp)
.LBB68_19:                              # %for.cond144
                                        #   Parent Loop BB68_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB68_22
# %bb.20:                               # %for.body147
                                        #   in Loop: Header=BB68_19 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.21:                               # %for.inc175
                                        #   in Loop: Header=BB68_19 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_19
.LBB68_22:                              # %for.end177
                                        #   in Loop: Header=BB68_17 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.23:                               # %for.inc208
                                        #   in Loop: Header=BB68_17 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_17
.LBB68_24:                              # %for.end210
	movl	$0, -12(%rbp)
.LBB68_25:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_27 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_32
# %bb.26:                               # %for.body214
                                        #   in Loop: Header=BB68_25 Depth=1
	movl	$0, -16(%rbp)
.LBB68_27:                              # %for.cond215
                                        #   Parent Loop BB68_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_30
# %bb.28:                               # %for.body218
                                        #   in Loop: Header=BB68_27 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.29:                               # %for.inc242
                                        #   in Loop: Header=BB68_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_27
.LBB68_30:                              # %for.end244
                                        #   in Loop: Header=BB68_25 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -320(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -288(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	movl	-40(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.31:                               # %for.inc271
                                        #   in Loop: Header=BB68_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_25
.LBB68_32:                              # %for.end273
	movl	$0, -16(%rbp)
.LBB68_33:                              # %for.cond274
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_35 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_40
# %bb.34:                               # %for.body277
                                        #   in Loop: Header=BB68_33 Depth=1
	movl	$0, -12(%rbp)
.LBB68_35:                              # %for.cond278
                                        #   Parent Loop BB68_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB68_38
# %bb.36:                               # %for.body281
                                        #   in Loop: Header=BB68_35 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.37:                               # %for.inc305
                                        #   in Loop: Header=BB68_35 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_35
.LBB68_38:                              # %for.end307
                                        #   in Loop: Header=BB68_33 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-320(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.39:                               # %for.inc334
                                        #   in Loop: Header=BB68_33 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_33
.LBB68_40:                              # %for.end336
	movl	$0, -200(%rbp)
	movl	$-1, -64(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -68(%rbp)
.LBB68_41:                              # %for.cond337
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -68(%rbp)
	jge	.LBB68_80
# %bb.42:                               # %for.body340
                                        #   in Loop: Header=BB68_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB68_45
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB68_41 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB68_46
# %bb.44:                               # %land.lhs.true
                                        #   in Loop: Header=BB68_41 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB68_46
.LBB68_45:                              # %if.then
                                        #   in Loop: Header=BB68_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_47
.LBB68_46:                              # %if.else
                                        #   in Loop: Header=BB68_41 Depth=1
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-68(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB68_47:                              # %if.end
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -112(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -108(%rbp)
	movl	-108(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -140(%rbp)
	movl	-140(%rbp), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-196(%rbp), %eax
	movl	-148(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.LBB68_63
# %bb.48:                               # %land.lhs.true424
                                        #   in Loop: Header=BB68_41 Depth=1
	cmpl	$0, -24(%rbp)
	je	.LBB68_63
# %bb.49:                               # %land.lhs.true427
                                        #   in Loop: Header=BB68_41 Depth=1
	cmpl	$0, -56(%rbp)
	je	.LBB68_63
# %bb.50:                               # %if.then430
                                        #   in Loop: Header=BB68_41 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-24(%rbp), %edi
	movl	-108(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movl	-24(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-176(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-56(%rbp), %edi
	movl	-140(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	movl	-56(%rbp), %edi
	movl	-64(%rbp), %esi
	leaq	-144(%rbp), %rdx
	leaq	-212(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-144(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-160(%rbp), %xmm0
	jne	.LBB68_55
	jp	.LBB68_55
# %bb.51:                               # %if.then495
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-56(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB68_53
# %bb.52:                               # %cond.true
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB68_54
.LBB68_53:                              # %cond.false
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-56(%rbp), %eax
.LBB68_54:                              # %cond.end
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	%eax, -60(%rbp)
	jmp	.LBB68_59
.LBB68_55:                              # %if.else500
                                        #   in Loop: Header=BB68_41 Depth=1
	vmovsd	-176(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-160(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_57
# %bb.56:                               # %if.then503
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB68_58
.LBB68_57:                              # %if.else504
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB68_58:                              # %if.end505
                                        #   in Loop: Header=BB68_41 Depth=1
	jmp	.LBB68_59
.LBB68_59:                              # %if.end506
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB68_61
# %bb.60:                               # %cond.true509
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB68_62
.LBB68_61:                              # %cond.false510
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-140(%rbp), %eax
.LBB68_62:                              # %cond.end511
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	%eax, -128(%rbp)
	jmp	.LBB68_73
.LBB68_63:                              # %if.else513
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.LBB68_65
# %bb.64:                               # %if.then516
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB68_72
.LBB68_65:                              # %if.else517
                                        #   in Loop: Header=BB68_41 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB68_67
# %bb.66:                               # %cond.true520
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-24(%rbp), %eax
	jmp	.LBB68_68
.LBB68_67:                              # %cond.false521
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-56(%rbp), %eax
.LBB68_68:                              # %cond.end522
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	%eax, -60(%rbp)
	cmpl	$0, -24(%rbp)
	jne	.LBB68_70
# %bb.69:                               # %cond.true526
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-108(%rbp), %eax
	jmp	.LBB68_71
.LBB68_70:                              # %cond.false527
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-140(%rbp), %eax
.LBB68_71:                              # %cond.end528
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	%eax, -128(%rbp)
.LBB68_72:                              # %if.end530
                                        #   in Loop: Header=BB68_41 Depth=1
	jmp	.LBB68_73
.LBB68_73:                              # %if.end531
                                        #   in Loop: Header=BB68_41 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB68_78
# %bb.74:                               # %if.then534
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	$1, -200(%rbp)
	cmpl	$1, -60(%rbp)
	jle	.LBB68_76
# %bb.75:                               # %if.then537
                                        #   in Loop: Header=BB68_41 Depth=1
	movq	-232(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB68_77
.LBB68_76:                              # %if.else539
                                        #   in Loop: Header=BB68_41 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-232(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB68_77:                              # %if.end546
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movq	-224(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	movq	-248(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -64(%rbp)
	movl	-60(%rbp), %edi
	movl	-128(%rbp), %esi
	callq	sign
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -112(%rbp)
.LBB68_78:                              # %if.end568
                                        #   in Loop: Header=BB68_41 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %edi
	callq	abs
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-188(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-112(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-120(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc598
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB68_41
.LBB68_80:                              # %for.end600
	movq	-224(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB68_81:                              # %for.cond603
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_83 Depth 2
                                        #     Child Loop BB68_87 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_92
# %bb.82:                               # %for.body606
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	$0, -16(%rbp)
.LBB68_83:                              # %for.cond607
                                        #   Parent Loop BB68_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_86
# %bb.84:                               # %for.body610
                                        #   in Loop: Header=BB68_83 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.85:                               # %for.inc618
                                        #   in Loop: Header=BB68_83 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_83
.LBB68_86:                              # %for.end620
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB68_87:                              # %for.cond639
                                        #   Parent Loop BB68_81 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_90
# %bb.88:                               # %for.body642
                                        #   in Loop: Header=BB68_87 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.89:                               # %for.inc664
                                        #   in Loop: Header=BB68_87 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_87
.LBB68_90:                              # %for.end666
                                        #   in Loop: Header=BB68_81 Depth=1
	jmp	.LBB68_91
.LBB68_91:                              # %for.inc667
                                        #   in Loop: Header=BB68_81 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_81
.LBB68_92:                              # %for.end669
	movl	$0, -16(%rbp)
.LBB68_93:                              # %for.cond670
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_95 Depth 2
                                        #     Child Loop BB68_99 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_122
# %bb.94:                               # %for.body673
                                        #   in Loop: Header=BB68_93 Depth=1
	movl	$0, -12(%rbp)
.LBB68_95:                              # %for.cond674
                                        #   Parent Loop BB68_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_98
# %bb.96:                               # %for.body677
                                        #   in Loop: Header=BB68_95 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.97:                               # %for.inc685
                                        #   in Loop: Header=BB68_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_95
.LBB68_98:                              # %for.end687
                                        #   in Loop: Header=BB68_93 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB68_99:                              # %for.cond706
                                        #   Parent Loop BB68_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB68_120
# %bb.100:                              # %for.body709
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_102
# %bb.101:                              # %cond.true720
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_103
.LBB68_102:                             # %cond.false721
                                        #   in Loop: Header=BB68_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB68_103:                             # %cond.end729
                                        #   in Loop: Header=BB68_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_105
# %bb.104:                              # %cond.true733
                                        #   in Loop: Header=BB68_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_109
.LBB68_105:                             # %cond.false735
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_107
# %bb.106:                              # %cond.true745
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_108
.LBB68_107:                             # %cond.false746
                                        #   in Loop: Header=BB68_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB68_108:                             # %cond.end754
                                        #   in Loop: Header=BB68_99 Depth=2
.LBB68_109:                             # %cond.end756
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72684(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-96(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-96(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_111
# %bb.110:                              # %cond.true773
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_112
.LBB68_111:                             # %cond.false774
                                        #   in Loop: Header=BB68_99 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB68_112:                             # %cond.end782
                                        #   in Loop: Header=BB68_99 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_114
# %bb.113:                              # %cond.true786
                                        #   in Loop: Header=BB68_99 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_118
.LBB68_114:                             # %cond.false788
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_116
# %bb.115:                              # %cond.true798
                                        #   in Loop: Header=BB68_99 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_117
.LBB68_116:                             # %cond.false799
                                        #   in Loop: Header=BB68_99 Depth=2
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB68_117:                             # %cond.end807
                                        #   in Loop: Header=BB68_99 Depth=2
.LBB68_118:                             # %cond.end809
                                        #   in Loop: Header=BB68_99 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc816
                                        #   in Loop: Header=BB68_99 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_99
.LBB68_120:                             # %for.end818
                                        #   in Loop: Header=BB68_93 Depth=1
	jmp	.LBB68_121
.LBB68_121:                             # %for.inc819
                                        #   in Loop: Header=BB68_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_93
.LBB68_122:                             # %for.end821
	movl	$0, -12(%rbp)
.LBB68_123:                             # %for.cond822
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_125 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_130
# %bb.124:                              # %for.body825
                                        #   in Loop: Header=BB68_123 Depth=1
	movl	$0, -16(%rbp)
.LBB68_125:                             # %for.cond826
                                        #   Parent Loop BB68_123 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_128
# %bb.126:                              # %for.body829
                                        #   in Loop: Header=BB68_125 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-136(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-116(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.127:                              # %for.inc844
                                        #   in Loop: Header=BB68_125 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_125
.LBB68_128:                             # %for.end846
                                        #   in Loop: Header=BB68_123 Depth=1
	jmp	.LBB68_129
.LBB68_129:                             # %for.inc847
                                        #   in Loop: Header=BB68_123 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_123
.LBB68_130:                             # %for.end849
	movl	-200(%rbp), %ebx
	cmpl	$1004822150, -216(%rbp) # imm = 0x3BE45E86
	jne	.LBB68_132
.LBB68_131:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_132:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_131
.Lfunc_end68:
	.size	dct_luma_sp.59, .Lfunc_end68-dct_luma_sp.59
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.60        # -- Begin function dct_chroma4x4.60
	.p2align	4, 0x90
	.type	dct_chroma4x4.60,@function
dct_chroma4x4.60:                       # @dct_chroma4x4.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$412138982, -148(%rbp)  # imm = 0x1890BDE6
	movl	%edi, -24(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -108(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB69_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB69_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB69_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB69_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB69_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB69_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB69_8
.LBB69_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB69_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB69_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB69_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB69_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB69_10 Depth=1
	movl	$0, -12(%rbp)
.LBB69_12:                              # %for.cond31
                                        #   Parent Loop BB69_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB69_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB69_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB69_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_12
.LBB69_15:                              # %for.end
                                        #   in Loop: Header=BB69_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB69_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_10
.LBB69_17:                              # %for.end92
	jmp	.LBB69_18
.LBB69_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB69_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB69_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB69_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB69_20 Depth=1
	movl	$0, -16(%rbp)
.LBB69_22:                              # %for.cond99
                                        #   Parent Loop BB69_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB69_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB69_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB69_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_22
.LBB69_25:                              # %for.end132
                                        #   in Loop: Header=BB69_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB69_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_20
.LBB69_27:                              # %for.end165
	jmp	.LBB69_28
.LBB69_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB69_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB69_34
.LBB69_30:                              # %if.else
	cmpl	$1, -88(%rbp)
	jne	.LBB69_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_33
.LBB69_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB69_33:                              # %if.end213
	jmp	.LBB69_34
.LBB69_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-84(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-108(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB69_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB69_46
.LBB69_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB69_41
# %bb.37:                               # %if.then248
	cmpl	$1, -88(%rbp)
	jne	.LBB69_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB69_40
.LBB69_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB69_40:                              # %if.end290
	jmp	.LBB69_45
.LBB69_41:                              # %if.else291
	cmpl	$1, -88(%rbp)
	jne	.LBB69_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB69_44
.LBB69_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB69_44:                              # %if.end328
	jmp	.LBB69_45
.LBB69_45:                              # %if.end329
	jmp	.LBB69_46
.LBB69_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB69_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB69_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB69_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -76(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB69_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB69_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB69_54
.LBB69_50:                              # %if.else352
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB69_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB69_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_53
.LBB69_52:                              # %if.else381
                                        #   in Loop: Header=BB69_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB69_53:                              # %if.end407
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_54
.LBB69_54:                              # %if.end408
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB69_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB69_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB69_58
.LBB69_57:                              # %if.then415
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	$1, -132(%rbp)
.LBB69_58:                              # %if.end416
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -100(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB69_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB69_70
.LBB69_60:                              # %if.else436
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB69_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB69_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB69_64
.LBB69_63:                              # %if.else457
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB69_64:                              # %if.end472
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_69
.LBB69_65:                              # %if.else473
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$1, -88(%rbp)
	jne	.LBB69_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB69_68
.LBB69_67:                              # %if.else488
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
.LBB69_68:                              # %if.end500
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_69
.LBB69_69:                              # %if.end501
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_70
.LBB69_70:                              # %if.end502
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_71
.LBB69_71:                              # %if.end503
                                        #   in Loop: Header=BB69_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB69_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB69_73:                              # %if.end511
                                        #   in Loop: Header=BB69_47 Depth=1
	jmp	.LBB69_74
.LBB69_74:                              # %for.inc512
                                        #   in Loop: Header=BB69_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB69_47
.LBB69_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB69_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB69_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_79 Depth 2
                                        #     Child Loop BB69_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB69_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB69_77 Depth=1
	movl	$0, -12(%rbp)
.LBB69_79:                              # %for.cond523
                                        #   Parent Loop BB69_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB69_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB69_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB69_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_79
.LBB69_82:                              # %for.end536
                                        #   in Loop: Header=BB69_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB69_83:                              # %for.cond555
                                        #   Parent Loop BB69_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB69_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB69_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB69_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_83
.LBB69_86:                              # %for.end582
                                        #   in Loop: Header=BB69_77 Depth=1
	jmp	.LBB69_87
.LBB69_87:                              # %for.inc583
                                        #   in Loop: Header=BB69_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_77
.LBB69_88:                              # %for.end585
	jmp	.LBB69_89
.LBB69_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB69_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB69_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_93 Depth 2
                                        #     Child Loop BB69_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB69_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB69_91 Depth=1
	movl	$0, -16(%rbp)
.LBB69_93:                              # %for.cond593
                                        #   Parent Loop BB69_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB69_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB69_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB69_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_93
.LBB69_96:                              # %for.end606
                                        #   in Loop: Header=BB69_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB69_97:                              # %for.cond625
                                        #   Parent Loop BB69_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB69_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB69_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB69_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_97
.LBB69_100:                             # %for.end656
                                        #   in Loop: Header=BB69_91 Depth=1
	jmp	.LBB69_101
.LBB69_101:                             # %for.inc657
                                        #   in Loop: Header=BB69_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_91
.LBB69_102:                             # %for.end659
	jmp	.LBB69_103
.LBB69_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$412138982, -148(%rbp)  # imm = 0x1890BDE6
	jne	.LBB69_105
.LBB69_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_104
.Lfunc_end69:
	.size	dct_chroma4x4.60, .Lfunc_end69-dct_chroma4x4.60
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma_16x16.61 # -- Begin function intrapred_luma_16x16.61
	.p2align	4, 0x90
	.type	intrapred_luma_16x16.61,@function
intrapred_luma_16x16.61:                # @intrapred_luma_16x16.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              # imm = 0x280
	movl	$742273989, -92(%rbp)   # imm = 0x2C3E33C5
	movl	$0, -28(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB70_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB70_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-64(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB70_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_1
.LBB70_4:                               # %for.end
	movl	-64(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-88(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB70_6
# %bb.5:                                # %if.then
	movl	-88(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-488(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-512(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB70_20
.LBB70_6:                               # %if.else
	cmpl	$0, -88(%rbp)
	je	.LBB70_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB70_9
.LBB70_8:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB70_9
.LBB70_9:                               # %cond.end
	movl	%eax, -16(%rbp)
	movl	$1, -4(%rbp)
	movl	$1, -12(%rbp)
.LBB70_10:                              # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -4(%rbp)
	jge	.LBB70_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB70_10 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-512(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB70_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB70_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB70_14
.LBB70_13:                              # %cond.false23
                                        #   in Loop: Header=BB70_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB70_14
.LBB70_14:                              # %cond.end24
                                        #   in Loop: Header=BB70_10 Depth=1
	andl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB70_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_10
.LBB70_16:                              # %for.end28
	cmpl	$0, -512(%rbp)
	je	.LBB70_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-508(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB70_19
.LBB70_18:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB70_19
.LBB70_19:                              # %cond.end39
	movl	%eax, -60(%rbp)
.LBB70_20:                              # %if.end
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB70_21:                              # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB70_28
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB70_21 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB70_24
# %bb.23:                               # %if.then45
                                        #   in Loop: Header=BB70_21 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB70_24:                              # %if.end51
                                        #   in Loop: Header=BB70_21 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB70_26
# %bb.25:                               # %if.then53
                                        #   in Loop: Header=BB70_21 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB70_26:                              # %if.end68
                                        #   in Loop: Header=BB70_21 Depth=1
	jmp	.LBB70_27
.LBB70_27:                              # %for.inc69
                                        #   in Loop: Header=BB70_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_21
.LBB70_28:                              # %for.end71
	cmpl	$0, -16(%rbp)
	je	.LBB70_31
# %bb.29:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	je	.LBB70_31
# %bb.30:                               # %if.then74
	movl	-40(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB70_31:                              # %if.end77
	cmpl	$0, -16(%rbp)
	jne	.LBB70_34
# %bb.32:                               # %land.lhs.true79
	cmpl	$0, -12(%rbp)
	je	.LBB70_34
# %bb.33:                               # %if.then81
	movl	-48(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB70_34:                              # %if.end84
	cmpl	$0, -16(%rbp)
	je	.LBB70_37
# %bb.35:                               # %land.lhs.true86
	cmpl	$0, -12(%rbp)
	jne	.LBB70_37
# %bb.36:                               # %if.then88
	movl	-40(%rbp), %eax
	addl	$8, %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
.LBB70_37:                              # %if.end91
	cmpl	$0, -16(%rbp)
	jne	.LBB70_40
# %bb.38:                               # %land.lhs.true93
	cmpl	$0, -12(%rbp)
	jne	.LBB70_40
# %bb.39:                               # %if.then95
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -28(%rbp)
.LBB70_40:                              # %if.end96
	movl	$0, -4(%rbp)
.LBB70_41:                              # %for.cond97
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -4(%rbp)
	jge	.LBB70_48
# %bb.42:                               # %for.body100
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB70_44
# %bb.43:                               # %if.then102
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,8)
.LBB70_44:                              # %if.end114
                                        #   in Loop: Header=BB70_41 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB70_46
# %bb.45:                               # %if.then116
                                        #   in Loop: Header=BB70_41 Depth=1
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-512(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -636(%rbp,%rcx,8)
.LBB70_46:                              # %if.end133
                                        #   in Loop: Header=BB70_41 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc134
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_41
.LBB70_48:                              # %for.end136
	movl	$0, -8(%rbp)
.LBB70_49:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_51 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_56
# %bb.50:                               # %for.body140
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	$0, -4(%rbp)
.LBB70_51:                              # %for.cond141
                                        #   Parent Loop BB70_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_54
# %bb.52:                               # %for.body144
                                        #   in Loop: Header=BB70_51 Depth=2
	movslq	-4(%rbp), %rax
	movl	-640(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	movl	-636(%rbp,%rax,8), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$512, %rcx              # imm = 0x200
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.53:                               # %for.inc171
                                        #   in Loop: Header=BB70_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_51
.LBB70_54:                              # %for.end173
                                        #   in Loop: Header=BB70_49 Depth=1
	jmp	.LBB70_55
.LBB70_55:                              # %for.inc174
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_49
.LBB70_56:                              # %for.end176
	cmpl	$0, -16(%rbp)
	je	.LBB70_59
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -12(%rbp)
	je	.LBB70_59
# %bb.58:                               # %lor.lhs.false179
	cmpl	$0, -60(%rbp)
	jne	.LBB70_60
.LBB70_59:                              # %if.then181
	jmp	.LBB70_85
.LBB70_60:                              # %if.end182
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
	movl	$1, -4(%rbp)
.LBB70_61:                              # %for.cond183
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB70_67
# %bb.62:                               # %for.body186
                                        #   in Loop: Header=BB70_61 Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB70_64
# %bb.63:                               # %if.then189
                                        #   in Loop: Header=BB70_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-72(%rbp), %esi
	addl	$7, %esi
	subl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB70_65
.LBB70_64:                              # %if.else210
                                        #   in Loop: Header=BB70_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	addl	$7, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-24(%rbp), %rdx
	movslq	-492(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-496(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB70_65:                              # %if.end232
                                        #   in Loop: Header=BB70_61 Depth=1
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	leaq	-512(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	20(%rdi), %rdx
	movq	(%rsi,%rdx,8), %rsi
	movl	-4(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rdi
	addq	%rdx, %rdi
	movslq	16(%rdi), %rdx
	movzwl	(%rsi,%rdx,2), %r9d
	movq	-24(%rbp), %r8
	movl	$8, %edi
	movl	$8, %edx
	subl	-4(%rbp), %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	20(%rsi), %rdx
	movq	(%r8,%rdx,8), %rdx
	subl	-4(%rbp), %edi
	movslq	%edi, %rsi
	imulq	$24, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	16(%rcx), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %r9d
	imull	%r9d, %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.66:                               # %for.inc262
                                        #   in Loop: Header=BB70_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_67:                              # %for.end264
	imull	$5, -32(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -52(%rbp)
	imull	$5, -56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	$15, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-108(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-112(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	shll	$4, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB70_68:                              # %for.cond289
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_70 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_84
# %bb.69:                               # %for.body292
                                        #   in Loop: Header=BB70_68 Depth=1
	movl	$0, -4(%rbp)
.LBB70_70:                              # %for.cond293
                                        #   Parent Loop BB70_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_82
# %bb.71:                               # %for.body296
                                        #   in Loop: Header=BB70_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_73
# %bb.72:                               # %cond.true307
                                        #   in Loop: Header=BB70_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB70_74
.LBB70_73:                              # %cond.false309
                                        #   in Loop: Header=BB70_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB70_74:                              # %cond.end318
                                        #   in Loop: Header=BB70_70 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_76
# %bb.75:                               # %cond.true322
                                        #   in Loop: Header=BB70_70 Depth=2
	xorl	%eax, %eax
	jmp	.LBB70_80
.LBB70_76:                              # %cond.false323
                                        #   in Loop: Header=BB70_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %edx
	subl	$7, %edx
	imull	-52(%rbp), %edx
	addl	%edx, %eax
	movl	-8(%rbp), %edx
	subl	$7, %edx
	imull	-36(%rbp), %edx
	addl	%edx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_78
# %bb.77:                               # %cond.true335
                                        #   in Loop: Header=BB70_70 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB70_79
.LBB70_78:                              # %cond.false337
                                        #   in Loop: Header=BB70_70 Depth=2
	movl	-44(%rbp), %eax
	movl	-4(%rbp), %ecx
	subl	$7, %ecx
	imull	-52(%rbp), %ecx
	addl	%ecx, %eax
	movl	-8(%rbp), %ecx
	subl	$7, %ecx
	imull	-36(%rbp), %ecx
	addl	%ecx, %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB70_79:                              # %cond.end346
                                        #   in Loop: Header=BB70_70 Depth=2
.LBB70_80:                              # %cond.end348
                                        #   in Loop: Header=BB70_70 Depth=2
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	addq	$1536, %rcx             # imm = 0x600
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc357
                                        #   in Loop: Header=BB70_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_70
.LBB70_82:                              # %for.end359
                                        #   in Loop: Header=BB70_68 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc360
                                        #   in Loop: Header=BB70_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_68
.LBB70_84:                              # %for.end362.loopexit
	jmp	.LBB70_85
.LBB70_85:                              # %for.end362
	cmpl	$742273989, -92(%rbp)   # imm = 0x2C3E33C5
	jne	.LBB70_87
.LBB70_86:
	addq	$640, %rsp              # imm = 0x280
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_86
.Lfunc_end70:
	.size	intrapred_luma_16x16.61, .Lfunc_end70-intrapred_luma_16x16.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.62
.LCPI71_0:
	.quad	4616189618054758400     # double 4
.LCPI71_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI71_2:
	.quad	4611686018427387904     # double 2
.LCPI71_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.62
	.p2align	4, 0x90
	.type	dct_chroma_sp.62,@function
dct_chroma_sp.62:                       # @dct_chroma_sp.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI71_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1628911947, -268(%rbp) # imm = 0x6117394B
	movl	%edi, -124(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI71_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB71_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB71_6
.LBB71_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB71_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB71_5
.LBB71_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB71_5:                               # %cond.end
.LBB71_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB71_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB71_12
.LBB71_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB71_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB71_11
.LBB71_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB71_11:                              # %cond.end41
.LBB71_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB71_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB71_15
.LBB71_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB71_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB71_18
.LBB71_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -212(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB71_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB71_21
.LBB71_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB71_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB71_24
.LBB71_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB71_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB71_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB71_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB71_25 Depth=1
	movl	$0, -16(%rbp)
.LBB71_27:                              # %for.cond97
                                        #   Parent Loop BB71_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB71_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB71_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB71_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_27
.LBB71_30:                              # %for.end
                                        #   in Loop: Header=BB71_25 Depth=1
	jmp	.LBB71_31
.LBB71_31:                              # %for.inc121
                                        #   in Loop: Header=BB71_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_25
.LBB71_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB71_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_35 Depth 2
                                        #       Child Loop BB71_37 Depth 3
                                        #         Child Loop BB71_39 Depth 4
                                        #       Child Loop BB71_45 Depth 3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB71_33 Depth=1
	movl	$0, -24(%rbp)
.LBB71_35:                              # %for.cond128
                                        #   Parent Loop BB71_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_37 Depth 3
                                        #         Child Loop BB71_39 Depth 4
                                        #       Child Loop BB71_45 Depth 3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	$0, -12(%rbp)
.LBB71_37:                              # %for.cond132
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB71_39:                              # %for.cond137
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        #       Parent Loop BB71_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB71_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB71_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_39
.LBB71_42:                              # %for.end174
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB71_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_37
.LBB71_44:                              # %for.end214
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	$0, -16(%rbp)
.LBB71_45:                              # %for.cond215
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_47:                              # %for.cond220
                                        #   Parent Loop BB71_33 Depth=1
                                        #     Parent Loop BB71_35 Depth=2
                                        #       Parent Loop BB71_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB71_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-56(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB71_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_47
.LBB71_50:                              # %for.end257
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-56(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB71_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_45
.LBB71_52:                              # %for.end298
                                        #   in Loop: Header=BB71_35 Depth=2
	jmp	.LBB71_53
.LBB71_53:                              # %for.inc299
                                        #   in Loop: Header=BB71_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_35
.LBB71_54:                              # %for.end301
                                        #   in Loop: Header=BB71_33 Depth=1
	jmp	.LBB71_55
.LBB71_55:                              # %for.inc302
                                        #   in Loop: Header=BB71_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_33
.LBB71_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB71_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_59 Depth 2
                                        #       Child Loop BB71_61 Depth 3
                                        #         Child Loop BB71_63 Depth 4
                                        #       Child Loop BB71_69 Depth 3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB71_57 Depth=1
	movl	$0, -24(%rbp)
.LBB71_59:                              # %for.cond309
                                        #   Parent Loop BB71_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_61 Depth 3
                                        #         Child Loop BB71_63 Depth 4
                                        #       Child Loop BB71_69 Depth 3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	$0, -12(%rbp)
.LBB71_61:                              # %for.cond313
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -16(%rbp)
.LBB71_63:                              # %for.cond318
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        #       Parent Loop BB71_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB71_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB71_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_63
.LBB71_66:                              # %for.end351
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB71_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_61
.LBB71_68:                              # %for.end387
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	$0, -16(%rbp)
.LBB71_69:                              # %for.cond388
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_71:                              # %for.cond393
                                        #   Parent Loop BB71_57 Depth=1
                                        #     Parent Loop BB71_59 Depth=2
                                        #       Parent Loop BB71_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB71_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-56(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB71_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_71
.LBB71_74:                              # %for.end426
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-56(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB71_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_69
.LBB71_76:                              # %for.end463
                                        #   in Loop: Header=BB71_59 Depth=2
	jmp	.LBB71_77
.LBB71_77:                              # %for.inc464
                                        #   in Loop: Header=BB71_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_59
.LBB71_78:                              # %for.end466
                                        #   in Loop: Header=BB71_57 Depth=1
	jmp	.LBB71_79
.LBB71_79:                              # %for.inc467
                                        #   in Loop: Header=BB71_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_57
.LBB71_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB71_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB71_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-212(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB71_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB71_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB71_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB71_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB71_90
	jp	.LBB71_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB71_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB71_89
.LBB71_88:                              # %cond.false691
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-40(%rbp), %eax
.LBB71_89:                              # %cond.end692
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB71_94
.LBB71_90:                              # %if.else
                                        #   in Loop: Header=BB71_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_93
.LBB71_92:                              # %if.else697
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_93:                              # %if.end
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_94
.LBB71_94:                              # %if.end698
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB71_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB71_97
.LBB71_96:                              # %cond.false702
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-104(%rbp), %eax
.LBB71_97:                              # %cond.end703
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB71_108
.LBB71_98:                              # %if.else705
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB71_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB71_107
.LBB71_100:                             # %if.else709
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB71_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB71_103
.LBB71_102:                             # %cond.false713
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-40(%rbp), %eax
.LBB71_103:                             # %cond.end714
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB71_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB71_106
.LBB71_105:                             # %cond.false719
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-104(%rbp), %eax
.LBB71_106:                             # %cond.end720
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB71_107:                             # %if.end722
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_108
.LBB71_108:                             # %if.end723
                                        #   in Loop: Header=BB71_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB71_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB71_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB71_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB71_112:                             # %if.end734
                                        #   in Loop: Header=BB71_81 Depth=1
	jmp	.LBB71_113
.LBB71_113:                             # %if.end735
                                        #   in Loop: Header=BB71_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB71_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB71_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	$1, %eax
	jmp	.LBB71_117
.LBB71_116:                             # %cond.false745
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-208(%rbp), %eax
.LBB71_117:                             # %cond.end746
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB71_118:                             # %if.end763
                                        #   in Loop: Header=BB71_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB71_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_81
.LBB71_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB71_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_123 Depth 2
                                        #       Child Loop BB71_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB71_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB71_121 Depth=1
	movl	$0, -24(%rbp)
.LBB71_123:                             # %for.cond839
                                        #   Parent Loop BB71_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB71_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB71_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB71_125:                             # %for.cond860
                                        #   Parent Loop BB71_121 Depth=1
                                        #     Parent Loop BB71_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB71_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB71_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB71_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB71_130
.LBB71_129:                             # %if.then867
                                        #   in Loop: Header=BB71_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_131
.LBB71_130:                             # %if.else876
                                        #   in Loop: Header=BB71_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB71_131:                             # %if.end885
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-212(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB71_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB71_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB71_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB71_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB71_139
	jp	.LBB71_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB71_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB71_138
.LBB71_137:                             # %cond.false1047
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-40(%rbp), %eax
.LBB71_138:                             # %cond.end1048
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB71_143
.LBB71_139:                             # %if.else1050
                                        #   in Loop: Header=BB71_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_142
.LBB71_141:                             # %if.else1054
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_142:                             # %if.end1055
                                        #   in Loop: Header=BB71_125 Depth=3
	jmp	.LBB71_143
.LBB71_143:                             # %if.end1056
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB71_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB71_146
.LBB71_145:                             # %cond.false1060
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-104(%rbp), %eax
.LBB71_146:                             # %cond.end1061
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB71_157
.LBB71_147:                             # %if.else1063
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB71_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB71_156
.LBB71_149:                             # %if.else1067
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB71_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB71_152
.LBB71_151:                             # %cond.false1071
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-40(%rbp), %eax
.LBB71_152:                             # %cond.end1072
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB71_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB71_155
.LBB71_154:                             # %cond.false1077
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-104(%rbp), %eax
.LBB71_155:                             # %cond.end1078
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB71_156:                             # %if.end1080
                                        #   in Loop: Header=BB71_125 Depth=3
	jmp	.LBB71_157
.LBB71_157:                             # %if.end1081
                                        #   in Loop: Header=BB71_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB71_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB71_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB71_161
.LBB71_160:                             # %if.else1099
                                        #   in Loop: Header=BB71_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB71_161:                             # %if.end1106
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB71_162:                             # %if.end1128
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB71_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_125
.LBB71_164:                             # %for.end1164
                                        #   in Loop: Header=BB71_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB71_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_123
.LBB71_166:                             # %for.end1169
                                        #   in Loop: Header=BB71_121 Depth=1
	jmp	.LBB71_167
.LBB71_167:                             # %for.inc1170
                                        #   in Loop: Header=BB71_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_121
.LBB71_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB71_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB71_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB71_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_173 Depth 2
                                        #       Child Loop BB71_175 Depth 3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
                                        #       Child Loop BB71_187 Depth 3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB71_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	$0, -24(%rbp)
.LBB71_173:                             # %for.cond1181
                                        #   Parent Loop BB71_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_175 Depth 3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
                                        #       Child Loop BB71_187 Depth 3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB71_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	$0, -12(%rbp)
.LBB71_175:                             # %for.cond1185
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_177 Depth 4
                                        #         Child Loop BB71_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	$0, -16(%rbp)
.LBB71_177:                             # %for.cond1189
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB71_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB71_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_177
.LBB71_180:                             # %for.end1204
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB71_181:                             # %for.cond1223
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB71_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB71_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB71_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_181
.LBB71_184:                             # %for.end1254
                                        #   in Loop: Header=BB71_175 Depth=3
	jmp	.LBB71_185
.LBB71_185:                             # %for.inc1255
                                        #   in Loop: Header=BB71_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_175
.LBB71_186:                             # %for.end1257
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	$0, -16(%rbp)
.LBB71_187:                             # %for.cond1258
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_189 Depth 4
                                        #         Child Loop BB71_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	$0, -12(%rbp)
.LBB71_189:                             # %for.cond1262
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB71_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB71_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_189
.LBB71_192:                             # %for.end1277
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB71_193:                             # %for.cond1296
                                        #   Parent Loop BB71_171 Depth=1
                                        #     Parent Loop BB71_173 Depth=2
                                        #       Parent Loop BB71_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB71_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB71_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB71_197
.LBB71_196:                             # %cond.false1311
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB71_197:                             # %cond.end1319
                                        #   in Loop: Header=BB71_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB71_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB71_203
.LBB71_199:                             # %cond.false1325
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB71_202
.LBB71_201:                             # %cond.false1336
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB71_202:                             # %cond.end1344
                                        #   in Loop: Header=BB71_193 Depth=4
.LBB71_203:                             # %cond.end1346
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB71_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB71_206
.LBB71_205:                             # %cond.false1366
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB71_206:                             # %cond.end1374
                                        #   in Loop: Header=BB71_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB71_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB71_212
.LBB71_208:                             # %cond.false1380
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB71_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB71_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB71_211
.LBB71_210:                             # %cond.false1391
                                        #   in Loop: Header=BB71_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB71_211:                             # %cond.end1399
                                        #   in Loop: Header=BB71_193 Depth=4
.LBB71_212:                             # %cond.end1401
                                        #   in Loop: Header=BB71_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB71_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_193
.LBB71_214:                             # %for.end1412
                                        #   in Loop: Header=BB71_187 Depth=3
	jmp	.LBB71_215
.LBB71_215:                             # %for.inc1413
                                        #   in Loop: Header=BB71_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_187
.LBB71_216:                             # %for.end1415
                                        #   in Loop: Header=BB71_173 Depth=2
	jmp	.LBB71_217
.LBB71_217:                             # %for.inc1416
                                        #   in Loop: Header=BB71_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_173
.LBB71_218:                             # %for.end1418
                                        #   in Loop: Header=BB71_171 Depth=1
	jmp	.LBB71_219
.LBB71_219:                             # %for.inc1419
                                        #   in Loop: Header=BB71_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_171
.LBB71_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB71_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB71_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	$0, -16(%rbp)
.LBB71_223:                             # %for.cond1426
                                        #   Parent Loop BB71_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB71_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB71_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB71_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_223
.LBB71_226:                             # %for.end1446
                                        #   in Loop: Header=BB71_221 Depth=1
	jmp	.LBB71_227
.LBB71_227:                             # %for.inc1447
                                        #   in Loop: Header=BB71_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_221
.LBB71_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$1628911947, -268(%rbp) # imm = 0x6117394B
	jne	.LBB71_230
.LBB71_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_229
.Lfunc_end71:
	.size	dct_chroma_sp.62, .Lfunc_end71-dct_chroma_sp.62
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.63       # -- Begin function intrapred_luma.63
	.p2align	4, 0x90
	.type	intrapred_luma.63,@function
intrapred_luma.63:                      # @intrapred_luma.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$242177635, -172(%rbp)  # imm = 0xE6F5663
	movl	%edi, -108(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_1
.LBB72_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB72_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB72_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB72_10
.LBB72_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB72_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB72_9:                               # %lor.end
.LBB72_10:                              # %land.end
	xorb	$-1, %al
.LBB72_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB72_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB72_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB72_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB72_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB72_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_17
.LBB72_16:                              # %cond.false
                                        #   in Loop: Header=BB72_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB72_17
.LBB72_17:                              # %cond.end
                                        #   in Loop: Header=BB72_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB72_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_13
.LBB72_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB72_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_22
.LBB72_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB72_22
.LBB72_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB72_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_25
.LBB72_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB72_25
.LBB72_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB72_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB72_28
.LBB72_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB72_28
.LBB72_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB72_30
.LBB72_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB72_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB72_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB72_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB72_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB72_36
.LBB72_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB72_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB72_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB72_39
.LBB72_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB72_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB72_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_42
.LBB72_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB72_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB72_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB72_45
.LBB72_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB72_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB72_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB72_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB72_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB72_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_46
.LBB72_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB72_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB72_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB72_61
.LBB72_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB72_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB72_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB72_60
.LBB72_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB72_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB72_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB72_59
.LBB72_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB72_59:                              # %if.end284
	jmp	.LBB72_60
.LBB72_60:                              # %if.end285
	jmp	.LBB72_61
.LBB72_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB72_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB72_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	$0, -4(%rbp)
.LBB72_64:                              # %for.cond291
                                        #   Parent Loop BB72_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB72_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_64
.LBB72_67:                              # %for.end304
                                        #   in Loop: Header=BB72_62 Depth=1
	jmp	.LBB72_68
.LBB72_68:                              # %for.inc305
                                        #   in Loop: Header=BB72_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB72_62
.LBB72_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB72_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB72_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB72_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB72_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_70
.LBB72_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB72_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB72_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB72_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB72_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB72_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB72_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB72_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB72_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB72_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB72_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB72_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB72_85:                              # %if.end1174
	cmpl	$242177635, -172(%rbp)  # imm = 0xE6F5663
	jne	.LBB72_87
.LBB72_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_86
.Lfunc_end72:
	.size	intrapred_luma.63, .Lfunc_end72-intrapred_luma.63
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma4x4.64        # -- Begin function dct_chroma4x4.64
	.p2align	4, 0x90
	.type	dct_chroma4x4.64,@function
dct_chroma4x4.64:                       # @dct_chroma4x4.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$757095616, -148(%rbp)  # imm = 0x2D205CC0
	movl	%edi, -24(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -100(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %cl
	je	.LBB73_3
# %bb.1:                                # %lor.lhs.false
	movq	-144(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB73_3
# %bb.2:                                # %lor.rhs
	movq	-144(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%cl
.LBB73_3:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -84(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -160(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	img, %rcx
	movl	40(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB73_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB73_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movslq	-24(%rbp), %rdx
	addl	72716(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	jge	.LBB73_7
# %bb.6:                                # %cond.true
	movl	-80(%rbp), %eax
	jmp	.LBB73_8
.LBB73_7:                               # %cond.false
	movl	-80(%rbp), %eax
	subl	$0, %eax
	cltq
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB73_8:                               # %cond.end
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rcx
	addl	72672(%rcx), %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	addl	72672(%rdx), %eax
	cltd
	idivl	%ecx
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.LBB73_18
# %bb.9:                                # %if.then
	movl	$0, -16(%rbp)
.LBB73_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_12 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	$0, -12(%rbp)
.LBB73_12:                              # %for.cond31
                                        #   Parent Loop BB73_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB73_15
# %bb.13:                               # %for.body34
                                        #   in Loop: Header=BB73_12 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-68(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB73_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_12
.LBB73_15:                              # %for.end
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.16:                               # %for.inc90
                                        #   in Loop: Header=BB73_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_10
.LBB73_17:                              # %for.end92
	jmp	.LBB73_18
.LBB73_18:                              # %if.end
	cmpl	$0, -36(%rbp)
	jne	.LBB73_28
# %bb.19:                               # %if.then94
	movl	$0, -12(%rbp)
.LBB73_20:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_22 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_27
# %bb.21:                               # %for.body98
                                        #   in Loop: Header=BB73_20 Depth=1
	movl	$0, -16(%rbp)
.LBB73_22:                              # %for.cond99
                                        #   Parent Loop BB73_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB73_25
# %bb.23:                               # %for.body102
                                        #   in Loop: Header=BB73_22 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-72(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.24:                               # %for.inc130
                                        #   in Loop: Header=BB73_22 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_22
.LBB73_25:                              # %for.end132
                                        #   in Loop: Header=BB73_20 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.26:                               # %for.inc163
                                        #   in Loop: Header=BB73_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_20
.LBB73_27:                              # %for.end165
	jmp	.LBB73_28
.LBB73_28:                              # %if.end166
	movl	$0, -132(%rbp)
	movl	$-1, -108(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB73_30
# %bb.29:                               # %if.then168
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB73_34
.LBB73_30:                              # %if.else
	cmpl	$1, -84(%rbp)
	jne	.LBB73_32
# %bb.31:                               # %if.then174
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_33
.LBB73_32:                              # %if.else193
	movq	img, %rax
	movl	13112(%rax), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB73_33:                              # %if.end213
	jmp	.LBB73_34
.LBB73_34:                              # %if.end214
	movl	-24(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	-76(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movl	%eax, %ecx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-76(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-100(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	cmpl	$0, -36(%rbp)
	je	.LBB73_36
# %bb.35:                               # %if.then237
	movl	-20(%rbp), %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB73_46
.LBB73_36:                              # %if.else245
	cmpl	$4, -28(%rbp)
	jge	.LBB73_41
# %bb.37:                               # %if.then248
	cmpl	$1, -84(%rbp)
	jne	.LBB73_39
# %bb.38:                               # %if.then251
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB73_40
.LBB73_39:                              # %if.else270
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	addl	%eax, %edi
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB73_40:                              # %if.end290
	jmp	.LBB73_45
.LBB73_41:                              # %if.else291
	cmpl	$1, -84(%rbp)
	jne	.LBB73_43
# %bb.42:                               # %if.then294
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
	jmp	.LBB73_44
.LBB73_43:                              # %if.else311
	movl	-20(%rbp), %edi
	movslq	-24(%rbp), %rax
	imulq	$384, %rax, %rax        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	imull	(%rcx), %edi
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movq	img, %rax
	movl	13112(%rax), %esi
	callq	sign
	movq	img, %rcx
	movl	%eax, 13112(%rcx)
.LBB73_44:                              # %if.end328
	jmp	.LBB73_45
.LBB73_45:                              # %if.end329
	jmp	.LBB73_46
.LBB73_46:                              # %if.end330
	movl	$1, -92(%rbp)
.LBB73_47:                              # %for.cond331
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -92(%rbp)
	jge	.LBB73_75
# %bb.48:                               # %for.body334
                                        #   in Loop: Header=BB73_47 Depth=1
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	movslq	-92(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -88(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB73_50
# %bb.49:                               # %if.then345
                                        #   in Loop: Header=BB73_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -20(%rbp)
	jmp	.LBB73_54
.LBB73_50:                              # %if.else352
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB73_52
# %bb.51:                               # %if.then355
                                        #   in Loop: Header=BB73_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_53
.LBB73_52:                              # %if.else381
                                        #   in Loop: Header=BB73_47 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$LevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	imulq	$832, %rcx, %rcx        # imm = 0x340
	movabsq	$LevelOffset4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-104(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -20(%rbp)
.LBB73_53:                              # %if.end407
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_54
.LBB73_54:                              # %if.end408
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB73_71
# %bb.55:                               # %if.then411
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB73_57
# %bb.56:                               # %lor.lhs.false413
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB73_58
.LBB73_57:                              # %if.then415
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	$1, -132(%rbp)
.LBB73_58:                              # %if.end416
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-108(%rbp), %eax
	movq	-168(%rbp), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	$-1, -108(%rbp)
	movl	-20(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -20(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB73_60
# %bb.59:                               # %if.then435
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB73_70
.LBB73_60:                              # %if.else436
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$4, -28(%rbp)
	jge	.LBB73_65
# %bb.61:                               # %if.then439
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB73_63
# %bb.62:                               # %if.then442
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB73_64
.LBB73_63:                              # %if.else457
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB73_64:                              # %if.end472
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_69
.LBB73_65:                              # %if.else473
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$1, -84(%rbp)
	jne	.LBB73_67
# %bb.66:                               # %if.then476
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB73_68
.LBB73_67:                              # %if.else488
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	imulq	$384, %rcx, %rcx        # imm = 0x180
	movabsq	$InvLevelScale4x4Chroma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-28(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -88(%rbp)
.LBB73_68:                              # %if.end500
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_69
.LBB73_69:                              # %if.end501
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_70
.LBB73_70:                              # %if.end502
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_71
.LBB73_71:                              # %if.end503
                                        #   in Loop: Header=BB73_47 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB73_73
# %bb.72:                               # %if.then505
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-88(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB73_73:                              # %if.end511
                                        #   in Loop: Header=BB73_47 Depth=1
	jmp	.LBB73_74
.LBB73_74:                              # %for.inc512
                                        #   in Loop: Header=BB73_47 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB73_47
.LBB73_75:                              # %for.end514
	movq	-160(%rbp), %rax
	movslq	-96(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	cmpl	$0, -36(%rbp)
	jne	.LBB73_89
# %bb.76:                               # %if.then518
	movl	$0, -16(%rbp)
.LBB73_77:                              # %for.cond519
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_79 Depth 2
                                        #     Child Loop BB73_83 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_88
# %bb.78:                               # %for.body522
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	$0, -12(%rbp)
.LBB73_79:                              # %for.cond523
                                        #   Parent Loop BB73_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_82
# %bb.80:                               # %for.body526
                                        #   in Loop: Header=BB73_79 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.81:                               # %for.inc534
                                        #   in Loop: Header=BB73_79 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_79
.LBB73_82:                              # %for.end536
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB73_83:                              # %for.cond555
                                        #   Parent Loop BB73_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB73_86
# %bb.84:                               # %for.body558
                                        #   in Loop: Header=BB73_83 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-68(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-68(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.85:                               # %for.inc580
                                        #   in Loop: Header=BB73_83 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_83
.LBB73_86:                              # %for.end582
                                        #   in Loop: Header=BB73_77 Depth=1
	jmp	.LBB73_87
.LBB73_87:                              # %for.inc583
                                        #   in Loop: Header=BB73_77 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_77
.LBB73_88:                              # %for.end585
	jmp	.LBB73_89
.LBB73_89:                              # %if.end586
	cmpl	$0, -36(%rbp)
	jne	.LBB73_103
# %bb.90:                               # %if.then588
	movl	$0, -12(%rbp)
.LBB73_91:                              # %for.cond589
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_93 Depth 2
                                        #     Child Loop BB73_97 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB73_102
# %bb.92:                               # %for.body592
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	$0, -16(%rbp)
.LBB73_93:                              # %for.cond593
                                        #   Parent Loop BB73_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB73_96
# %bb.94:                               # %for.body596
                                        #   in Loop: Header=BB73_93 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.95:                               # %for.inc604
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_93
.LBB73_96:                              # %for.end606
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -16(%rbp)
.LBB73_97:                              # %for.cond625
                                        #   Parent Loop BB73_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB73_100
# %bb.98:                               # %for.body628
                                        #   in Loop: Header=BB73_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-128(%rbp,%rax,4), %eax
	movslq	-72(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-72(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc654
                                        #   in Loop: Header=BB73_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_97
.LBB73_100:                             # %for.end656
                                        #   in Loop: Header=BB73_91 Depth=1
	jmp	.LBB73_101
.LBB73_101:                             # %for.inc657
                                        #   in Loop: Header=BB73_91 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_91
.LBB73_102:                             # %for.end659
	jmp	.LBB73_103
.LBB73_103:                             # %if.end660
	movl	-132(%rbp), %ebx
	cmpl	$757095616, -148(%rbp)  # imm = 0x2D205CC0
	jne	.LBB73_105
.LBB73_104:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_105:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_104
.Lfunc_end73:
	.size	dct_chroma4x4.64, .Lfunc_end73-dct_chroma4x4.64
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.65       # -- Begin function intrapred_luma.65
	.p2align	4, 0x90
	.type	intrapred_luma.65,@function
intrapred_luma.65:                      # @intrapred_luma.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1150374499, -172(%rbp) # imm = 0x44915263
	movl	%edi, -116(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%r8, -224(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -4(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_1
.LBB74_4:                               # %for.end
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-100(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-208(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB74_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB74_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB74_10
.LBB74_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB74_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB74_9:                               # %lor.end
.LBB74_10:                              # %land.end
	xorb	$-1, %al
.LBB74_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB74_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB74_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB74_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB74_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB74_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_17
.LBB74_16:                              # %cond.false
                                        #   in Loop: Header=BB74_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB74_17
.LBB74_17:                              # %cond.end
                                        #   in Loop: Header=BB74_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB74_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_13
.LBB74_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB74_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_22
.LBB74_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB74_22
.LBB74_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB74_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_25
.LBB74_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB74_25
.LBB74_25:                              # %cond.end49
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB74_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB74_28
.LBB74_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB74_28
.LBB74_28:                              # %cond.end59
	movl	%eax, -104(%rbp)
	jmp	.LBB74_30
.LBB74_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -104(%rbp)
.LBB74_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-216(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB74_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB74_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -104(%rbp)
	setne	%al
.LBB74_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB74_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB74_36
.LBB74_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB74_36:                              # %if.end114
	cmpl	$0, -112(%rbp)
	je	.LBB74_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB74_39
.LBB74_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB74_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB74_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_42
.LBB74_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB74_42:                              # %if.end208
	cmpl	$0, -104(%rbp)
	je	.LBB74_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-192(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB74_45
.LBB74_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB74_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB74_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB74_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB74_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB74_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_46
.LBB74_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB74_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB74_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB74_61
.LBB74_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB74_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB74_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB74_60
.LBB74_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB74_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB74_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB74_59
.LBB74_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB74_59:                              # %if.end284
	jmp	.LBB74_60
.LBB74_60:                              # %if.end285
	jmp	.LBB74_61
.LBB74_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB74_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB74_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB74_62 Depth=1
	movl	$0, -4(%rbp)
.LBB74_64:                              # %for.cond291
                                        #   Parent Loop BB74_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_64
.LBB74_67:                              # %for.end304
                                        #   in Loop: Header=BB74_62 Depth=1
	jmp	.LBB74_68
.LBB74_68:                              # %for.inc305
                                        #   in Loop: Header=BB74_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB74_62
.LBB74_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB74_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB74_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB74_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_70
.LBB74_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB74_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB74_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB74_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB74_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB74_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB74_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB74_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB74_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB74_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB74_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -104(%rbp)
	je	.LBB74_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB74_85:                              # %if.end1174
	cmpl	$1150374499, -172(%rbp) # imm = 0x44915263
	jne	.LBB74_87
.LBB74_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_86
.Lfunc_end74:
	.size	intrapred_luma.65, .Lfunc_end74-intrapred_luma.65
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.66             # -- Begin function dct_luma.66
	.p2align	4, 0x90
	.type	dct_luma.66,@function
dct_luma.66:                            # @dct_luma.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$1350947181, -148(%rbp) # imm = 0x5085D16D
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movq	%rdx, -160(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-112(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB75_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB75_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -96(%rbp)
	movl	-40(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB75_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB75_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB75_3 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB75_5:                               # %land.end32
                                        #   in Loop: Header=BB75_3 Depth=1
	testb	$1, %al
	jne	.LBB75_6
	jmp	.LBB75_12
.LBB75_6:                               # %for.body
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	$0, -16(%rbp)
.LBB75_7:                               # %for.cond34
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB75_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_7
.LBB75_10:                              # %for.end
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_3
.LBB75_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB75_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB75_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB75_13 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB75_15:                              # %land.end101
                                        #   in Loop: Header=BB75_13 Depth=1
	testb	$1, %al
	jne	.LBB75_16
	jmp	.LBB75_22
.LBB75_16:                              # %for.body103
                                        #   in Loop: Header=BB75_13 Depth=1
	movl	$0, -12(%rbp)
.LBB75_17:                              # %for.cond104
                                        #   Parent Loop BB75_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB75_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB75_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB75_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_17
.LBB75_20:                              # %for.end136
                                        #   in Loop: Header=BB75_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB75_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_13
.LBB75_22:                              # %for.end169
	movl	$0, -116(%rbp)
	movl	$-1, -100(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -84(%rbp)
.LBB75_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB75_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB75_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB75_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB75_28
.LBB75_27:                              # %if.then
                                        #   in Loop: Header=BB75_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_29
.LBB75_28:                              # %if.else
                                        #   in Loop: Header=BB75_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB75_29:                              # %if.end
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -92(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB75_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -28(%rbp)
	jmp	.LBB75_35
.LBB75_31:                              # %if.else199
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB75_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB75_34
.LBB75_33:                              # %if.else223
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
.LBB75_34:                              # %if.end245
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_35
.LBB75_35:                              # %if.end246
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB75_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	$1, -116(%rbp)
	cmpl	$1, -28(%rbp)
	jg	.LBB75_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB75_39
.LBB75_38:                              # %if.then254
                                        #   in Loop: Header=BB75_23 Depth=1
	movq	-160(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB75_40
.LBB75_39:                              # %if.else256
                                        #   in Loop: Header=BB75_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-100(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-160(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB75_40:                              # %if.end263
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-168(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-104(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$-1, -100(%rbp)
	movl	-28(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB75_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB75_52
.LBB75_42:                              # %if.else283
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$4, -40(%rbp)
	jge	.LBB75_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB75_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB75_46
.LBB75_45:                              # %if.else301
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-40(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB75_46:                              # %if.end314
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_51
.LBB75_47:                              # %if.else315
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB75_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB75_50
.LBB75_49:                              # %if.else328
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-28(%rbp), %eax
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -92(%rbp)
.LBB75_50:                              # %if.end338
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_51
.LBB75_51:                              # %if.end339
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_52
.LBB75_52:                              # %if.end340
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_53
.LBB75_53:                              # %if.end341
                                        #   in Loop: Header=BB75_23 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB75_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB75_55:                              # %if.end349
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_56
.LBB75_56:                              # %for.inc350
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB75_23
.LBB75_57:                              # %for.end352
	movq	-168(%rbp), %rax
	movslq	-104(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB75_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_62 Depth 2
                                        #     Child Loop BB75_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB75_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB75_58 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB75_60:                              # %land.end361
                                        #   in Loop: Header=BB75_58 Depth=1
	testb	$1, %al
	jne	.LBB75_61
	jmp	.LBB75_71
.LBB75_61:                              # %for.body363
                                        #   in Loop: Header=BB75_58 Depth=1
	movl	$0, -16(%rbp)
.LBB75_62:                              # %for.cond364
                                        #   Parent Loop BB75_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB75_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB75_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_62
.LBB75_65:                              # %for.end377
                                        #   in Loop: Header=BB75_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB75_66:                              # %for.cond396
                                        #   Parent Loop BB75_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB75_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB75_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB75_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_66
.LBB75_69:                              # %for.end423
                                        #   in Loop: Header=BB75_58 Depth=1
	jmp	.LBB75_70
.LBB75_70:                              # %for.inc424
                                        #   in Loop: Header=BB75_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_58
.LBB75_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB75_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_76 Depth 2
                                        #     Child Loop BB75_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB75_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB75_72 Depth=1
	cmpl	$0, -36(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB75_74:                              # %land.end433
                                        #   in Loop: Header=BB75_72 Depth=1
	testb	$1, %al
	jne	.LBB75_75
	jmp	.LBB75_109
.LBB75_75:                              # %for.body435
                                        #   in Loop: Header=BB75_72 Depth=1
	movl	$0, -12(%rbp)
.LBB75_76:                              # %for.cond436
                                        #   Parent Loop BB75_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB75_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB75_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_76
.LBB75_79:                              # %for.end449
                                        #   in Loop: Header=BB75_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB75_80:                              # %for.cond468
                                        #   Parent Loop BB75_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB75_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB75_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB75_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB75_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_85
.LBB75_84:                              # %cond.false
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB75_85:                              # %cond.end
                                        #   in Loop: Header=BB75_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB75_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB75_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB75_91
.LBB75_87:                              # %cond.false518
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB75_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_90
.LBB75_89:                              # %cond.false540
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB75_90:                              # %cond.end559
                                        #   in Loop: Header=BB75_80 Depth=2
.LBB75_91:                              # %cond.end561
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB75_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB75_94
.LBB75_93:                              # %cond.false592
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB75_94:                              # %cond.end611
                                        #   in Loop: Header=BB75_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB75_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB75_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB75_100
.LBB75_96:                              # %cond.false618
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-32(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB75_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB75_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB75_99
.LBB75_98:                              # %cond.false640
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB75_99:                              # %cond.end659
                                        #   in Loop: Header=BB75_80 Depth=2
.LBB75_100:                             # %cond.end661
                                        #   in Loop: Header=BB75_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB75_105
.LBB75_101:                             # %if.else669
                                        #   in Loop: Header=BB75_80 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB75_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB75_104
.LBB75_103:                             # %if.else692
                                        #   in Loop: Header=BB75_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB75_104:                             # %if.end717
                                        #   in Loop: Header=BB75_80 Depth=2
	jmp	.LBB75_105
.LBB75_105:                             # %if.end718
                                        #   in Loop: Header=BB75_80 Depth=2
	jmp	.LBB75_106
.LBB75_106:                             # %for.inc719
                                        #   in Loop: Header=BB75_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_80
.LBB75_107:                             # %for.end721
                                        #   in Loop: Header=BB75_72 Depth=1
	jmp	.LBB75_108
.LBB75_108:                             # %for.inc722
                                        #   in Loop: Header=BB75_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_72
.LBB75_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB75_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB75_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB75_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB75_111 Depth=1
	movl	$0, -16(%rbp)
.LBB75_113:                             # %for.cond732
                                        #   Parent Loop BB75_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB75_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB75_113 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB75_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB75_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB75_117
.LBB75_116:                             # %if.else761
                                        #   in Loop: Header=BB75_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-32(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB75_117:                             # %if.end779
                                        #   in Loop: Header=BB75_113 Depth=2
	jmp	.LBB75_118
.LBB75_118:                             # %for.inc780
                                        #   in Loop: Header=BB75_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_113
.LBB75_119:                             # %for.end782
                                        #   in Loop: Header=BB75_111 Depth=1
	jmp	.LBB75_120
.LBB75_120:                             # %for.inc783
                                        #   in Loop: Header=BB75_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_111
.LBB75_121:                             # %for.end785
	jmp	.LBB75_122
.LBB75_122:                             # %if.end786
	movl	-116(%rbp), %ebx
	cmpl	$1350947181, -148(%rbp) # imm = 0x5085D16D
	jne	.LBB75_124
.LBB75_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_123
.Lfunc_end75:
	.size	dct_luma.66, .Lfunc_end75-dct_luma.66
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma.67             # -- Begin function dct_luma.67
	.p2align	4, 0x90
	.type	dct_luma.67,@function
dct_luma.67:                            # @dct_luma.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	xorl	%ebx, %ebx
	movl	$179097685, -148(%rbp)  # imm = 0xAACD055
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-120(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-116(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-128(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -176(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB76_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%bl
.LBB76_2:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -40(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-144(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -92(%rbp)
	movl	-36(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB76_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_7 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB76_5
# %bb.4:                                # %land.rhs31
                                        #   in Loop: Header=BB76_3 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB76_5:                               # %land.end32
                                        #   in Loop: Header=BB76_3 Depth=1
	testb	$1, %al
	jne	.LBB76_6
	jmp	.LBB76_12
.LBB76_6:                               # %for.body
                                        #   in Loop: Header=BB76_3 Depth=1
	movl	$0, -16(%rbp)
.LBB76_7:                               # %for.cond34
                                        #   Parent Loop BB76_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_10
# %bb.8:                                # %for.body36
                                        #   in Loop: Header=BB76_7 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB76_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_7
.LBB76_10:                              # %for.end
                                        #   in Loop: Header=BB76_3 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13112(%rcx,%rdx,4)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13240(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13176(%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 13304(%rcx,%rdx,4)
# %bb.11:                               # %for.inc93
                                        #   in Loop: Header=BB76_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_3
.LBB76_12:                              # %for.end95
	movl	$0, -16(%rbp)
.LBB76_13:                              # %for.cond96
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_17 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB76_15
# %bb.14:                               # %land.rhs98
                                        #   in Loop: Header=BB76_13 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB76_15:                              # %land.end101
                                        #   in Loop: Header=BB76_13 Depth=1
	testb	$1, %al
	jne	.LBB76_16
	jmp	.LBB76_22
.LBB76_16:                              # %for.body103
                                        #   in Loop: Header=BB76_13 Depth=1
	movl	$0, -12(%rbp)
.LBB76_17:                              # %for.cond104
                                        #   Parent Loop BB76_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_20
# %bb.18:                               # %for.body106
                                        #   in Loop: Header=BB76_17 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.19:                               # %for.inc134
                                        #   in Loop: Header=BB76_17 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_17
.LBB76_20:                              # %for.end136
                                        #   in Loop: Header=BB76_13 Depth=1
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, (%rcx)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 8(%rcx)
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 4(%rcx)
	movl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	%eax, 12(%rcx)
# %bb.21:                               # %for.inc167
                                        #   in Loop: Header=BB76_13 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_13
.LBB76_22:                              # %for.end169
	movl	$0, -112(%rbp)
	movl	$-1, -104(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -84(%rbp)
.LBB76_23:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -84(%rbp)
	jge	.LBB76_57
# %bb.24:                               # %for.body172
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB76_27
# %bb.25:                               # %lor.lhs.false
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB76_28
# %bb.26:                               # %land.lhs.true
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	-144(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB76_28
.LBB76_27:                              # %if.then
                                        #   in Loop: Header=BB76_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_29
.LBB76_28:                              # %if.else
                                        #   in Loop: Header=BB76_23 Depth=1
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-84(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB76_29:                              # %if.end
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-104(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -96(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB76_31
# %bb.30:                               # %if.then193
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	jmp	.LBB76_35
.LBB76_31:                              # %if.else199
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB76_33
# %bb.32:                               # %if.then202
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB76_34
.LBB76_33:                              # %if.else223
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %edi
	callq	abs
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-36(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-132(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -32(%rbp)
.LBB76_34:                              # %if.end245
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_35
.LBB76_35:                              # %if.end246
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB76_53
# %bb.36:                               # %if.then249
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	$1, -112(%rbp)
	cmpl	$1, -32(%rbp)
	jg	.LBB76_38
# %bb.37:                               # %lor.lhs.false252
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB76_39
.LBB76_38:                              # %if.then254
                                        #   in Loop: Header=BB76_23 Depth=1
	movq	-168(%rbp), %rax
	movl	(%rax), %ecx
	addl	$999999, %ecx           # imm = 0xF423F
	movl	%ecx, (%rax)
	jmp	.LBB76_40
.LBB76_39:                              # %if.else256
                                        #   in Loop: Header=BB76_23 Depth=1
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-104(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-168(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB76_40:                              # %if.end263
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movq	-160(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	$-1, -104(%rbp)
	movl	-32(%rbp), %edi
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %esi
	callq	sign
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB76_42
# %bb.41:                               # %if.then282
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB76_52
.LBB76_42:                              # %if.else283
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$4, -36(%rbp)
	jge	.LBB76_47
# %bb.43:                               # %if.then286
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB76_45
# %bb.44:                               # %if.then289
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB76_46
.LBB76_45:                              # %if.else301
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB76_46:                              # %if.end314
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_51
.LBB76_47:                              # %if.else315
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$1, -108(%rbp)
	jne	.LBB76_49
# %bb.48:                               # %if.then318
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB76_50
.LBB76_49:                              # %if.else328
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-32(%rbp), %eax
	movslq	-92(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Inter, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-36(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -96(%rbp)
.LBB76_50:                              # %if.end338
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_51
.LBB76_51:                              # %if.end339
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_52
.LBB76_52:                              # %if.end340
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_53
.LBB76_53:                              # %if.end341
                                        #   in Loop: Header=BB76_23 Depth=1
	cmpl	$0, -40(%rbp)
	jne	.LBB76_55
# %bb.54:                               # %if.then343
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB76_55:                              # %if.end349
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_56
.LBB76_56:                              # %for.inc350
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB76_23
.LBB76_57:                              # %for.end352
	movq	-160(%rbp), %rax
	movslq	-100(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB76_58:                              # %for.cond355
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_62 Depth 2
                                        #     Child Loop BB76_66 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB76_60
# %bb.59:                               # %land.rhs358
                                        #   in Loop: Header=BB76_58 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB76_60:                              # %land.end361
                                        #   in Loop: Header=BB76_58 Depth=1
	testb	$1, %al
	jne	.LBB76_61
	jmp	.LBB76_71
.LBB76_61:                              # %for.body363
                                        #   in Loop: Header=BB76_58 Depth=1
	movl	$0, -16(%rbp)
.LBB76_62:                              # %for.cond364
                                        #   Parent Loop BB76_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_65
# %bb.63:                               # %for.body367
                                        #   in Loop: Header=BB76_62 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.64:                               # %for.inc375
                                        #   in Loop: Header=BB76_62 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_62
.LBB76_65:                              # %for.end377
                                        #   in Loop: Header=BB76_58 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -16(%rbp)
.LBB76_66:                              # %for.cond396
                                        #   Parent Loop BB76_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB76_69
# %bb.67:                               # %for.body399
                                        #   in Loop: Header=BB76_66 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-88(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc421
                                        #   in Loop: Header=BB76_66 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_66
.LBB76_69:                              # %for.end423
                                        #   in Loop: Header=BB76_58 Depth=1
	jmp	.LBB76_70
.LBB76_70:                              # %for.inc424
                                        #   in Loop: Header=BB76_58 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_58
.LBB76_71:                              # %for.end426
	movl	$0, -16(%rbp)
.LBB76_72:                              # %for.cond427
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_76 Depth 2
                                        #     Child Loop BB76_80 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB76_74
# %bb.73:                               # %land.rhs430
                                        #   in Loop: Header=BB76_72 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB76_74:                              # %land.end433
                                        #   in Loop: Header=BB76_72 Depth=1
	testb	$1, %al
	jne	.LBB76_75
	jmp	.LBB76_109
.LBB76_75:                              # %for.body435
                                        #   in Loop: Header=BB76_72 Depth=1
	movl	$0, -12(%rbp)
.LBB76_76:                              # %for.cond436
                                        #   Parent Loop BB76_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_79
# %bb.77:                               # %for.body439
                                        #   in Loop: Header=BB76_76 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -64(%rbp,%rcx,4)
# %bb.78:                               # %for.inc447
                                        #   in Loop: Header=BB76_76 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_76
.LBB76_79:                              # %for.end449
                                        #   in Loop: Header=BB76_72 Depth=1
	movl	-64(%rbp), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-60(%rbp), %eax
	sarl	$1, %eax
	subl	-52(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	-52(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB76_80:                              # %for.cond468
                                        #   Parent Loop BB76_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB76_107
# %bb.81:                               # %for.body471
                                        #   in Loop: Header=BB76_80 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB76_101
# %bb.82:                               # %if.then474
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	addl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-12(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB76_84
# %bb.83:                               # %cond.true
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB76_85
.LBB76_84:                              # %cond.false
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB76_85:                              # %cond.end
                                        #   in Loop: Header=BB76_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB76_87
# %bb.86:                               # %cond.true515
                                        #   in Loop: Header=BB76_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB76_91
.LBB76_87:                              # %cond.false518
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	addl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-12(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB76_89
# %bb.88:                               # %cond.true539
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_90
.LBB76_89:                              # %cond.false540
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB76_90:                              # %cond.end559
                                        #   in Loop: Header=BB76_80 Depth=2
.LBB76_91:                              # %cond.end561
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-12(%rbp), %rdx
	movl	-80(%rbp,%rdx,4), %edx
	movslq	-20(%rbp), %rsi
	subl	-80(%rbp,%rsi,4), %edx
	movslq	%edx, %rdx
	movq	img, %rsi
	addq	$12600, %rsi            # imm = 0x3138
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-20(%rbp), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB76_93
# %bb.92:                               # %cond.true591
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB76_94
.LBB76_93:                              # %cond.false592
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB76_94:                              # %cond.end611
                                        #   in Loop: Header=BB76_80 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB76_96
# %bb.95:                               # %cond.true615
                                        #   in Loop: Header=BB76_80 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB76_100
.LBB76_96:                              # %cond.false618
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-80(%rbp,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	subl	-80(%rbp,%rdx,4), %ecx
	movslq	%ecx, %rcx
	movq	img, %rdx
	addq	$12600, %rdx            # imm = 0x3138
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-28(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB76_98
# %bb.97:                               # %cond.true639
                                        #   in Loop: Header=BB76_80 Depth=2
	xorl	%eax, %eax
	jmp	.LBB76_99
.LBB76_98:                              # %cond.false640
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	cltq
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB76_99:                              # %cond.end659
                                        #   in Loop: Header=BB76_80 Depth=2
.LBB76_100:                             # %cond.end661
                                        #   in Loop: Header=BB76_80 Depth=2
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB76_105
.LBB76_101:                             # %if.else669
                                        #   in Loop: Header=BB76_80 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB76_103
# %bb.102:                              # %if.then671
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB76_104
.LBB76_103:                             # %if.else692
                                        #   in Loop: Header=BB76_80 Depth=2
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	-80(%rbp,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB76_104:                             # %if.end717
                                        #   in Loop: Header=BB76_80 Depth=2
	jmp	.LBB76_105
.LBB76_105:                             # %if.end718
                                        #   in Loop: Header=BB76_80 Depth=2
	jmp	.LBB76_106
.LBB76_106:                             # %for.inc719
                                        #   in Loop: Header=BB76_80 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_80
.LBB76_107:                             # %for.end721
                                        #   in Loop: Header=BB76_72 Depth=1
	jmp	.LBB76_108
.LBB76_108:                             # %for.inc722
                                        #   in Loop: Header=BB76_72 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_72
.LBB76_109:                             # %for.end724
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB76_122
# %bb.110:                              # %if.then727
	movl	$0, -12(%rbp)
.LBB76_111:                             # %for.cond728
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_113 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB76_121
# %bb.112:                              # %for.body731
                                        #   in Loop: Header=BB76_111 Depth=1
	movl	$0, -16(%rbp)
.LBB76_113:                             # %for.cond732
                                        #   Parent Loop BB76_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB76_119
# %bb.114:                              # %for.body735
                                        #   in Loop: Header=BB76_113 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB76_116
# %bb.115:                              # %if.then737
                                        #   in Loop: Header=BB76_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB76_117
.LBB76_116:                             # %if.else761
                                        #   in Loop: Header=BB76_113 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-28(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB76_117:                             # %if.end779
                                        #   in Loop: Header=BB76_113 Depth=2
	jmp	.LBB76_118
.LBB76_118:                             # %for.inc780
                                        #   in Loop: Header=BB76_113 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_113
.LBB76_119:                             # %for.end782
                                        #   in Loop: Header=BB76_111 Depth=1
	jmp	.LBB76_120
.LBB76_120:                             # %for.inc783
                                        #   in Loop: Header=BB76_111 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_111
.LBB76_121:                             # %for.end785
	jmp	.LBB76_122
.LBB76_122:                             # %if.end786
	movl	-112(%rbp), %ebx
	cmpl	$179097685, -148(%rbp)  # imm = 0xAACD055
	jne	.LBB76_124
.LBB76_123:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_123
.Lfunc_end76:
	.size	dct_luma.67, .Lfunc_end76-dct_luma.67
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.68       # -- Begin function dct_luma_16x16.68
	.p2align	4, 0x90
	.type	dct_luma_16x16.68,@function
dct_luma_16x16.68:                      # @dct_luma_16x16.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1484157554, -132(%rbp) # imm = 0x58767272
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB77_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB77_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB77_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB77_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	$0, -16(%rbp)
.LBB77_5:                               # %for.cond16
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB77_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB77_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB77_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else
                                        #   in Loop: Header=BB77_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB77_9:                               # %if.end
                                        #   in Loop: Header=BB77_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_5
.LBB77_11:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=1
	jmp	.LBB77_12
.LBB77_12:                              # %for.inc61
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_3
.LBB77_13:                              # %for.end63
	movl	$0, -20(%rbp)
.LBB77_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_18 Depth 2
                                        #       Child Loop BB77_20 Depth 3
                                        #         Child Loop BB77_22 Depth 4
                                        #       Child Loop BB77_28 Depth 3
                                        #         Child Loop BB77_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -20(%rbp)
	jge	.LBB77_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB77_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_16:                              # %land.end69
                                        #   in Loop: Header=BB77_14 Depth=1
	testb	$1, %al
	jne	.LBB77_17
	jmp	.LBB77_39
.LBB77_17:                              # %for.body71
                                        #   in Loop: Header=BB77_14 Depth=1
	movl	$0, -24(%rbp)
.LBB77_18:                              # %for.cond72
                                        #   Parent Loop BB77_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_20 Depth 3
                                        #         Child Loop BB77_22 Depth 4
                                        #       Child Loop BB77_28 Depth 3
                                        #         Child Loop BB77_30 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB77_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB77_18 Depth=2
	movl	$0, -12(%rbp)
.LBB77_20:                              # %for.cond76
                                        #   Parent Loop BB77_14 Depth=1
                                        #     Parent Loop BB77_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB77_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB77_20 Depth=3
	movl	$0, -16(%rbp)
.LBB77_22:                              # %for.cond80
                                        #   Parent Loop BB77_14 Depth=1
                                        #     Parent Loop BB77_18 Depth=2
                                        #       Parent Loop BB77_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB77_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB77_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB77_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_22
.LBB77_25:                              # %for.end125
                                        #   in Loop: Header=BB77_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB77_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_20
.LBB77_27:                              # %for.end169
                                        #   in Loop: Header=BB77_18 Depth=2
	movl	$0, -16(%rbp)
.LBB77_28:                              # %for.cond170
                                        #   Parent Loop BB77_14 Depth=1
                                        #     Parent Loop BB77_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB77_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	$0, -12(%rbp)
.LBB77_30:                              # %for.cond174
                                        #   Parent Loop BB77_14 Depth=1
                                        #     Parent Loop BB77_18 Depth=2
                                        #       Parent Loop BB77_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB77_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB77_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB77_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_30
.LBB77_33:                              # %for.end219
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB77_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_28
.LBB77_35:                              # %for.end264
                                        #   in Loop: Header=BB77_18 Depth=2
	jmp	.LBB77_36
.LBB77_36:                              # %for.inc265
                                        #   in Loop: Header=BB77_18 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB77_18
.LBB77_37:                              # %for.end267
                                        #   in Loop: Header=BB77_14 Depth=1
	jmp	.LBB77_38
.LBB77_38:                              # %for.inc268
                                        #   in Loop: Header=BB77_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_14
.LBB77_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB77_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	$0, -16(%rbp)
.LBB77_42:                              # %for.cond275
                                        #   Parent Loop BB77_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB77_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB77_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_42
.LBB77_45:                              # %for.end291
                                        #   in Loop: Header=BB77_40 Depth=1
	jmp	.LBB77_46
.LBB77_46:                              # %for.inc292
                                        #   in Loop: Header=BB77_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_40
.LBB77_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB77_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB77_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB77_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_50:                              # %land.end301
                                        #   in Loop: Header=BB77_48 Depth=1
	testb	$1, %al
	jne	.LBB77_51
	jmp	.LBB77_57
.LBB77_51:                              # %for.body303
                                        #   in Loop: Header=BB77_48 Depth=1
	movl	$0, -16(%rbp)
.LBB77_52:                              # %for.cond304
                                        #   Parent Loop BB77_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB77_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB77_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_52
.LBB77_55:                              # %for.end333
                                        #   in Loop: Header=BB77_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB77_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_48
.LBB77_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB77_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB77_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB77_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_60:                              # %land.end367
                                        #   in Loop: Header=BB77_58 Depth=1
	testb	$1, %al
	jne	.LBB77_61
	jmp	.LBB77_67
.LBB77_61:                              # %for.body369
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	$0, -12(%rbp)
.LBB77_62:                              # %for.cond370
                                        #   Parent Loop BB77_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB77_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB77_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_62
.LBB77_65:                              # %for.end399
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB77_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_58
.LBB77_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB77_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB77_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB77_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB77_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB77_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB77_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB77_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB77_73
.LBB77_72:                              # %if.then437
                                        #   in Loop: Header=BB77_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_74
.LBB77_73:                              # %if.else446
                                        #   in Loop: Header=BB77_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB77_74:                              # %if.end455
                                        #   in Loop: Header=BB77_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB77_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB77_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB77_77
.LBB77_76:                              # %if.else463
                                        #   in Loop: Header=BB77_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB77_77:                              # %if.end481
                                        #   in Loop: Header=BB77_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB77_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB77_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB77_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB77_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB77_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB77_81:                              # %if.end492
                                        #   in Loop: Header=BB77_68 Depth=1
	jmp	.LBB77_82
.LBB77_82:                              # %if.end493
                                        #   in Loop: Header=BB77_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB77_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB77_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB77_84:                              # %if.end507
                                        #   in Loop: Header=BB77_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB77_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB77_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB77_86:                              # %if.end519
                                        #   in Loop: Header=BB77_68 Depth=1
	jmp	.LBB77_87
.LBB77_87:                              # %for.inc520
                                        #   in Loop: Header=BB77_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB77_68
.LBB77_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB77_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_93 Depth 2
                                        #     Child Loop BB77_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB77_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB77_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_91:                              # %land.end531
                                        #   in Loop: Header=BB77_89 Depth=1
	testb	$1, %al
	jne	.LBB77_92
	jmp	.LBB77_102
.LBB77_92:                              # %for.body533
                                        #   in Loop: Header=BB77_89 Depth=1
	movl	$0, -16(%rbp)
.LBB77_93:                              # %for.cond534
                                        #   Parent Loop BB77_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB77_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB77_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_93
.LBB77_96:                              # %for.end546
                                        #   in Loop: Header=BB77_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB77_97:                              # %for.cond563
                                        #   Parent Loop BB77_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB77_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB77_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB77_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_97
.LBB77_100:                             # %for.end588
                                        #   in Loop: Header=BB77_89 Depth=1
	jmp	.LBB77_101
.LBB77_101:                             # %for.inc589
                                        #   in Loop: Header=BB77_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_89
.LBB77_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB77_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_107 Depth 2
                                        #     Child Loop BB77_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB77_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB77_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_105:                             # %land.end598
                                        #   in Loop: Header=BB77_103 Depth=1
	testb	$1, %al
	jne	.LBB77_106
	jmp	.LBB77_119
.LBB77_106:                             # %for.body600
                                        #   in Loop: Header=BB77_103 Depth=1
	movl	$0, -12(%rbp)
.LBB77_107:                             # %for.cond601
                                        #   Parent Loop BB77_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB77_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB77_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB77_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_107
.LBB77_110:                             # %for.end613
                                        #   in Loop: Header=BB77_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB77_111:                             # %for.cond630
                                        #   Parent Loop BB77_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB77_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB77_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB77_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB77_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB77_115
.LBB77_114:                             # %if.else680
                                        #   in Loop: Header=BB77_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB77_115:                             # %if.end717
                                        #   in Loop: Header=BB77_111 Depth=2
	jmp	.LBB77_116
.LBB77_116:                             # %for.inc718
                                        #   in Loop: Header=BB77_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_111
.LBB77_117:                             # %for.end720
                                        #   in Loop: Header=BB77_103 Depth=1
	jmp	.LBB77_118
.LBB77_118:                             # %for.inc721
                                        #   in Loop: Header=BB77_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_103
.LBB77_119:                             # %for.end723
	movl	$0, -20(%rbp)
.LBB77_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_122 Depth 2
                                        #       Child Loop BB77_124 Depth 3
                                        #       Child Loop BB77_143 Depth 3
                                        #         Child Loop BB77_147 Depth 4
                                        #         Child Loop BB77_151 Depth 4
                                        #       Child Loop BB77_157 Depth 3
                                        #         Child Loop BB77_161 Depth 4
                                        #         Child Loop BB77_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB77_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB77_120 Depth=1
	movl	$0, -24(%rbp)
.LBB77_122:                             # %for.cond728
                                        #   Parent Loop BB77_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_124 Depth 3
                                        #       Child Loop BB77_143 Depth 3
                                        #         Child Loop BB77_147 Depth 4
                                        #         Child Loop BB77_151 Depth 4
                                        #       Child Loop BB77_157 Depth 3
                                        #         Child Loop BB77_161 Depth 4
                                        #         Child Loop BB77_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB77_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB77_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -120(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB77_124:                             # %for.cond751
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB77_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB77_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB77_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB77_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB77_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB77_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB77_129
.LBB77_128:                             # %if.then762
                                        #   in Loop: Header=BB77_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_130
.LBB77_129:                             # %if.else771
                                        #   in Loop: Header=BB77_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB77_130:                             # %if.end780
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB77_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB77_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB77_133
.LBB77_132:                             # %if.else793
                                        #   in Loop: Header=BB77_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB77_133:                             # %if.end818
                                        #   in Loop: Header=BB77_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB77_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB77_135:                             # %if.end836
                                        #   in Loop: Header=BB77_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB77_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB77_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB77_139
.LBB77_138:                             # %if.else871
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB77_139:                             # %if.end889
                                        #   in Loop: Header=BB77_124 Depth=3
	jmp	.LBB77_140
.LBB77_140:                             # %if.end890
                                        #   in Loop: Header=BB77_124 Depth=3
	jmp	.LBB77_141
.LBB77_141:                             # %for.inc891
                                        #   in Loop: Header=BB77_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB77_124
.LBB77_142:                             # %for.end893
                                        #   in Loop: Header=BB77_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB77_143:                             # %for.cond896
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_147 Depth 4
                                        #         Child Loop BB77_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB77_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB77_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_145:                             # %land.end902
                                        #   in Loop: Header=BB77_143 Depth=3
	testb	$1, %al
	jne	.LBB77_146
	jmp	.LBB77_156
.LBB77_146:                             # %for.body904
                                        #   in Loop: Header=BB77_143 Depth=3
	movl	$0, -16(%rbp)
.LBB77_147:                             # %for.cond905
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        #       Parent Loop BB77_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB77_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB77_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB77_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_147
.LBB77_150:                             # %for.end921
                                        #   in Loop: Header=BB77_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB77_151:                             # %for.cond940
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        #       Parent Loop BB77_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB77_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB77_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB77_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_151
.LBB77_154:                             # %for.end973
                                        #   in Loop: Header=BB77_143 Depth=3
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc974
                                        #   in Loop: Header=BB77_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_143
.LBB77_156:                             # %for.end976
                                        #   in Loop: Header=BB77_122 Depth=2
	movl	$0, -16(%rbp)
.LBB77_157:                             # %for.cond977
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_161 Depth 4
                                        #         Child Loop BB77_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB77_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB77_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB77_159:                             # %land.end983
                                        #   in Loop: Header=BB77_157 Depth=3
	testb	$1, %al
	jne	.LBB77_160
	jmp	.LBB77_170
.LBB77_160:                             # %for.body985
                                        #   in Loop: Header=BB77_157 Depth=3
	movl	$0, -12(%rbp)
.LBB77_161:                             # %for.cond986
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        #       Parent Loop BB77_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB77_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB77_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB77_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_161
.LBB77_164:                             # %for.end1002
                                        #   in Loop: Header=BB77_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB77_165:                             # %for.cond1021
                                        #   Parent Loop BB77_120 Depth=1
                                        #     Parent Loop BB77_122 Depth=2
                                        #       Parent Loop BB77_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB77_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB77_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB77_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_165
.LBB77_168:                             # %for.end1054
                                        #   in Loop: Header=BB77_157 Depth=3
	jmp	.LBB77_169
.LBB77_169:                             # %for.inc1055
                                        #   in Loop: Header=BB77_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_157
.LBB77_170:                             # %for.end1057
                                        #   in Loop: Header=BB77_122 Depth=2
	jmp	.LBB77_171
.LBB77_171:                             # %for.inc1058
                                        #   in Loop: Header=BB77_122 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB77_122
.LBB77_172:                             # %for.end1060
                                        #   in Loop: Header=BB77_120 Depth=1
	jmp	.LBB77_173
.LBB77_173:                             # %for.inc1061
                                        #   in Loop: Header=BB77_120 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_120
.LBB77_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB77_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB77_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB77_176 Depth=1
	movl	$0, -16(%rbp)
.LBB77_178:                             # %for.cond1071
                                        #   Parent Loop BB77_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB77_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB77_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB77_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_178
.LBB77_181:                             # %for.end1093
                                        #   in Loop: Header=BB77_176 Depth=1
	jmp	.LBB77_182
.LBB77_182:                             # %for.inc1094
                                        #   in Loop: Header=BB77_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_176
.LBB77_183:                             # %for.end1096
	jmp	.LBB77_196
.LBB77_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB77_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB77_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB77_185 Depth=1
	movl	$0, -16(%rbp)
.LBB77_187:                             # %for.cond1102
                                        #   Parent Loop BB77_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB77_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB77_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB77_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB77_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB77_191
.LBB77_190:                             # %if.else1125
                                        #   in Loop: Header=BB77_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB77_191:                             # %if.end1145
                                        #   in Loop: Header=BB77_187 Depth=2
	jmp	.LBB77_192
.LBB77_192:                             # %for.inc1146
                                        #   in Loop: Header=BB77_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_187
.LBB77_193:                             # %for.end1148
                                        #   in Loop: Header=BB77_185 Depth=1
	jmp	.LBB77_194
.LBB77_194:                             # %for.inc1149
                                        #   in Loop: Header=BB77_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_185
.LBB77_195:                             # %for.end1151
	jmp	.LBB77_196
.LBB77_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB77_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB77_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB77_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB77_198 Depth=1
	movl	$0, -16(%rbp)
.LBB77_200:                             # %for.cond1160
                                        #   Parent Loop BB77_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB77_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB77_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB77_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB77_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB77_213
.LBB77_203:                             # %if.else1186
                                        #   in Loop: Header=BB77_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB77_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB77_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB77_206
.LBB77_205:                             # %cond.false
                                        #   in Loop: Header=BB77_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB77_206:                             # %cond.end
                                        #   in Loop: Header=BB77_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB77_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB77_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB77_212
.LBB77_208:                             # %cond.false1229
                                        #   in Loop: Header=BB77_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB77_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB77_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB77_211
.LBB77_210:                             # %cond.false1250
                                        #   in Loop: Header=BB77_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB77_211:                             # %cond.end1268
                                        #   in Loop: Header=BB77_200 Depth=2
.LBB77_212:                             # %cond.end1270
                                        #   in Loop: Header=BB77_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB77_213:                             # %if.end1282
                                        #   in Loop: Header=BB77_200 Depth=2
	jmp	.LBB77_214
.LBB77_214:                             # %for.inc1283
                                        #   in Loop: Header=BB77_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_200
.LBB77_215:                             # %for.end1285
                                        #   in Loop: Header=BB77_198 Depth=1
	jmp	.LBB77_216
.LBB77_216:                             # %for.inc1286
                                        #   in Loop: Header=BB77_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_198
.LBB77_217:                             # %for.end1288
	jmp	.LBB77_218
.LBB77_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$1484157554, -132(%rbp) # imm = 0x58767272
	jne	.LBB77_220
.LBB77_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_219
.Lfunc_end77:
	.size	dct_luma_16x16.68, .Lfunc_end77-dct_luma_16x16.68
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.69       # -- Begin function intrapred_luma.69
	.p2align	4, 0x90
	.type	intrapred_luma.69,@function
intrapred_luma.69:                      # @intrapred_luma.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$1041827535, -172(%rbp) # imm = 0x3E1906CF
	movl	%edi, -112(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	%r8, -184(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB78_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB78_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB78_10
.LBB78_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB78_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB78_9:                               # %lor.end
.LBB78_10:                              # %land.end
	xorb	$-1, %al
.LBB78_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB78_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB78_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB78_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB78_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB78_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB78_17
.LBB78_16:                              # %cond.false
                                        #   in Loop: Header=BB78_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB78_17
.LBB78_17:                              # %cond.end
                                        #   in Loop: Header=BB78_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB78_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_13
.LBB78_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB78_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB78_22
.LBB78_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB78_22
.LBB78_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB78_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB78_25
.LBB78_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB78_25
.LBB78_25:                              # %cond.end49
	movl	%eax, -116(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB78_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB78_28
.LBB78_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB78_28
.LBB78_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB78_30
.LBB78_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB78_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-200(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB78_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB78_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB78_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-108(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB78_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB78_36
.LBB78_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB78_36:                              # %if.end114
	cmpl	$0, -116(%rbp)
	je	.LBB78_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB78_39
.LBB78_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB78_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB78_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB78_42
.LBB78_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB78_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB78_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB78_45
.LBB78_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB78_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB78_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB78_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB78_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB78_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_46
.LBB78_49:                              # %for.end233
	movl	$0, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB78_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB78_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB78_61
.LBB78_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB78_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB78_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB78_60
.LBB78_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB78_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB78_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	jmp	.LBB78_59
.LBB78_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -92(%rbp)
.LBB78_59:                              # %if.end284
	jmp	.LBB78_60
.LBB78_60:                              # %if.end285
	jmp	.LBB78_61
.LBB78_61:                              # %if.end286
	movl	$0, -96(%rbp)
.LBB78_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_64 Depth 2
	cmpl	$4, -96(%rbp)
	jge	.LBB78_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB78_62 Depth=1
	movl	$0, -4(%rbp)
.LBB78_64:                              # %for.cond291
                                        #   Parent Loop BB78_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB78_64 Depth=2
	movl	-92(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-96(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB78_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_64
.LBB78_67:                              # %for.end304
                                        #   in Loop: Header=BB78_62 Depth=1
	jmp	.LBB78_68
.LBB78_68:                              # %for.inc305
                                        #   in Loop: Header=BB78_62 Depth=1
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB78_62
.LBB78_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB78_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB78_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB78_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_70
.LBB78_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB78_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB78_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB78_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB78_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB78_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB78_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB78_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB78_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB78_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB78_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB78_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB78_85:                              # %if.end1174
	cmpl	$1041827535, -172(%rbp) # imm = 0x3E1906CF
	jne	.LBB78_87
.LBB78_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_86
.Lfunc_end78:
	.size	intrapred_luma.69, .Lfunc_end78-intrapred_luma.69
	.cfi_endproc
                                        # -- End function
	.globl	intrapred_luma.70       # -- Begin function intrapred_luma.70
	.p2align	4, 0x90
	.type	intrapred_luma.70,@function
intrapred_luma.70:                      # @intrapred_luma.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              # imm = 0x140
	movl	$266398174, -172(%rbp)  # imm = 0xFE0E9DE
	movl	%edi, -112(%rbp)
	movl	%esi, -116(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -200(%rbp)
	movq	%r8, -192(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %r8
	addq	%rax, %r8
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_1
.LBB79_4:                               # %for.end
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-168(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	addl	$4, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-144(%rbp), %r8
	callq	getNeighbour
	movl	-104(%rbp), %edi
	movl	-84(%rbp), %esi
	subl	$1, %esi
	movl	-88(%rbp), %edx
	subl	$1, %edx
	movl	$1, %ecx
	leaq	-224(%rbp), %r8
	callq	getNeighbour
	xorl	%eax, %eax
	cmpl	$0, -144(%rbp)
	je	.LBB79_11
# %bb.5:                                # %land.rhs
	cmpl	$4, -84(%rbp)
	je	.LBB79_7
# %bb.6:                                # %lor.lhs.false
	xorl	%eax, %eax
	cmpl	$12, -84(%rbp)
	jne	.LBB79_10
.LBB79_7:                               # %land.rhs10
	cmpl	$4, -88(%rbp)
	movb	$1, %al
	je	.LBB79_9
# %bb.8:                                # %lor.rhs
	cmpl	$12, -88(%rbp)
	sete	%al
.LBB79_9:                               # %lor.end
.LBB79_10:                              # %land.end
	xorb	$-1, %al
.LBB79_11:                              # %land.end13
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB79_29
# %bb.12:                               # %if.then
	movl	$0, -4(%rbp)
	movl	$1, -68(%rbp)
.LBB79_13:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_19
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB79_13 Depth=1
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-320(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB79_16
# %bb.15:                               # %cond.true
                                        #   in Loop: Header=BB79_13 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-320(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_17
.LBB79_16:                              # %cond.false
                                        #   in Loop: Header=BB79_13 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_17
.LBB79_17:                              # %cond.end
                                        #   in Loop: Header=BB79_13 Depth=1
	andl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.18:                               # %for.inc28
                                        #   in Loop: Header=BB79_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_13
.LBB79_19:                              # %for.end30
	cmpl	$0, -168(%rbp)
	je	.LBB79_21
# %bb.20:                               # %cond.true33
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-164(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_22
.LBB79_21:                              # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB79_22
.LBB79_22:                              # %cond.end39
	movl	%eax, -72(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB79_24
# %bb.23:                               # %cond.true43
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-140(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_25
.LBB79_24:                              # %cond.false48
	xorl	%eax, %eax
	jmp	.LBB79_25
.LBB79_25:                              # %cond.end49
	movl	%eax, -108(%rbp)
	cmpl	$0, -224(%rbp)
	je	.LBB79_27
# %bb.26:                               # %cond.true53
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-220(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB79_28
.LBB79_27:                              # %cond.false58
	xorl	%eax, %eax
	jmp	.LBB79_28
.LBB79_28:                              # %cond.end59
	movl	%eax, -100(%rbp)
	jmp	.LBB79_30
.LBB79_29:                              # %if.else
	movl	-320(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-168(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -108(%rbp)
	movl	-224(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB79_30:                              # %if.end
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	-184(%rbp), %rdx
	movl	%ecx, (%rdx)
	movl	-72(%rbp), %ecx
	movq	-200(%rbp), %rdx
	movl	%ecx, (%rdx)
	cmpl	$0, -72(%rbp)
	je	.LBB79_33
# %bb.31:                               # %land.lhs.true
	xorl	%eax, %eax
	cmpl	$0, -68(%rbp)
	je	.LBB79_33
# %bb.32:                               # %land.rhs68
	cmpl	$0, -100(%rbp)
	setne	%al
.LBB79_33:                              # %land.end70
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB79_35
# %bb.34:                               # %if.then75
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -60(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movslq	-148(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-152(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB79_36
.LBB79_35:                              # %if.else109
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	%eax, -52(%rbp)
	movl	%eax, -56(%rbp)
	movl	%eax, -60(%rbp)
.LBB79_36:                              # %if.end114
	cmpl	$0, -108(%rbp)
	je	.LBB79_38
# %bb.37:                               # %if.then116
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -40(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	-80(%rbp), %rax
	movslq	-124(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-128(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB79_39
.LBB79_38:                              # %if.else153
	movl	-48(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	%eax, -40(%rbp)
	movl	%eax, -44(%rbp)
.LBB79_39:                              # %if.end159
	cmpl	$0, -68(%rbp)
	je	.LBB79_41
# %bb.40:                               # %if.then161
	movq	-80(%rbp), %rax
	movslq	-300(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-304(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
	movq	-80(%rbp), %rax
	movslq	-276(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-280(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-80(%rbp), %rax
	movslq	-252(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-256(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movslq	-228(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-232(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_42
.LBB79_41:                              # %if.else202
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	%eax, -20(%rbp)
	movl	%eax, -24(%rbp)
	movl	%eax, -28(%rbp)
.LBB79_42:                              # %if.end208
	cmpl	$0, -100(%rbp)
	je	.LBB79_44
# %bb.43:                               # %if.then210
	movq	-80(%rbp), %rax
	movslq	-204(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-208(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_45
.LBB79_44:                              # %if.else219
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB79_45:                              # %if.end222
	movl	$0, -4(%rbp)
.LBB79_46:                              # %for.cond223
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$9, -4(%rbp)
	jge	.LBB79_49
# %bb.47:                               # %for.body226
                                        #   in Loop: Header=BB79_46 Depth=1
	movq	img, %rax
	addq	$184, %rax
	movslq	-4(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movw	$-1, (%rax)
# %bb.48:                               # %for.inc231
                                        #   in Loop: Header=BB79_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_46
.LBB79_49:                              # %for.end233
	movl	$0, -96(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB79_52
# %bb.50:                               # %land.lhs.true235
	cmpl	$0, -68(%rbp)
	je	.LBB79_52
# %bb.51:                               # %if.then237
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$4, %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB79_61
.LBB79_52:                              # %if.else254
	cmpl	$0, -72(%rbp)
	jne	.LBB79_55
# %bb.53:                               # %land.lhs.true256
	cmpl	$0, -68(%rbp)
	je	.LBB79_55
# %bb.54:                               # %if.then258
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB79_60
.LBB79_55:                              # %if.else268
	cmpl	$0, -72(%rbp)
	je	.LBB79_58
# %bb.56:                               # %land.lhs.true270
	cmpl	$0, -68(%rbp)
	jne	.LBB79_58
# %bb.57:                               # %if.then272
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -96(%rbp)
	jmp	.LBB79_59
.LBB79_58:                              # %if.else282
	movq	img, %rax
	movl	72680(%rax), %eax
	movl	%eax, -96(%rbp)
.LBB79_59:                              # %if.end284
	jmp	.LBB79_60
.LBB79_60:                              # %if.end285
	jmp	.LBB79_61
.LBB79_61:                              # %if.end286
	movl	$0, -92(%rbp)
.LBB79_62:                              # %for.cond287
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_64 Depth 2
	cmpl	$4, -92(%rbp)
	jge	.LBB79_69
# %bb.63:                               # %for.body290
                                        #   in Loop: Header=BB79_62 Depth=1
	movl	$0, -4(%rbp)
.LBB79_64:                              # %for.cond291
                                        #   Parent Loop BB79_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_67
# %bb.65:                               # %for.body294
                                        #   in Loop: Header=BB79_64 Depth=2
	movl	-96(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-92(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.66:                               # %for.inc302
                                        #   in Loop: Header=BB79_64 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_64
.LBB79_67:                              # %for.end304
                                        #   in Loop: Header=BB79_62 Depth=1
	jmp	.LBB79_68
.LBB79_68:                              # %for.inc305
                                        #   in Loop: Header=BB79_62 Depth=1
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB79_62
.LBB79_69:                              # %for.end307
	movl	$0, -4(%rbp)
.LBB79_70:                              # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_73
# %bb.71:                               # %for.body311
                                        #   in Loop: Header=BB79_70 Depth=1
	movslq	-4(%rbp), %rax
	movl	-60(%rbp,%rax,4), %eax
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 280(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 248(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 216(%rcx,%rdx,2)
	movq	img, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, 184(%rcx,%rdx,2)
	movslq	-4(%rbp), %rax
	movl	-28(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 6(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 4(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rcx
	addq	$184, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movw	%ax, (%rcx)
# %bb.72:                               # %for.inc360
                                        #   in Loop: Header=BB79_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_70
.LBB79_73:                              # %for.end362
	cmpl	$0, -72(%rbp)
	jne	.LBB79_75
# %bb.74:                               # %if.then364
	movq	img, %rax
	movw	$-1, 184(%rax)
.LBB79_75:                              # %if.end369
	cmpl	$0, -68(%rbp)
	jne	.LBB79_77
# %bb.76:                               # %if.then371
	movq	img, %rax
	movw	$-1, 696(%rax)
.LBB79_77:                              # %if.end376
	cmpl	$0, -72(%rbp)
	je	.LBB79_79
# %bb.78:                               # %if.then378
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	-56(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1720(%rdx)
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1752(%rdx)
	movq	img, %rdx
	movw	%ax, 1722(%rdx)
	movl	-52(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1784(%rdx)
	movq	img, %rdx
	movw	%ax, 1754(%rdx)
	movq	img, %rdx
	movw	%ax, 1724(%rdx)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1816(%rdx)
	movq	img, %rdx
	movw	%ax, 1786(%rdx)
	movq	img, %rdx
	movw	%ax, 1756(%rdx)
	movq	img, %rdx
	movw	%ax, 1726(%rdx)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1818(%rdx)
	movq	img, %rdx
	movw	%ax, 1788(%rdx)
	movq	img, %rdx
	movw	%ax, 1758(%rdx)
	movl	-40(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	-36(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1820(%rdx)
	movq	img, %rdx
	movw	%ax, 1790(%rdx)
	movl	-36(%rbp), %eax
	imull	$3, -32(%rbp), %edx
	addl	%edx, %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 1822(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3768(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3832(%rdx)
	movq	img, %rdx
	movw	%ax, 3770(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3834(%rdx)
	movq	img, %rdx
	movw	%ax, 3772(%rdx)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3836(%rdx)
	movq	img, %rdx
	movw	%ax, 3774(%rdx)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3838(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3800(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3864(%rdx)
	movq	img, %rdx
	movw	%ax, 3802(%rdx)
	movl	-52(%rbp), %eax
	movl	-48(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-44(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3866(%rdx)
	movq	img, %rdx
	movw	%ax, 3804(%rdx)
	movl	-48(%rbp), %eax
	movl	-44(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-40(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3868(%rdx)
	movq	img, %rdx
	movw	%ax, 3806(%rdx)
	movl	-44(%rbp), %eax
	movl	-40(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-36(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3870(%rcx)
.LBB79_79:                              # %if.end642
	cmpl	$0, -68(%rbp)
	je	.LBB79_81
# %bb.80:                               # %if.then644
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rcx
	movw	%ax, 4280(%rcx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4282(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4312(%rdx)
	movq	img, %rdx
	movw	%ax, 4284(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 4314(%rdx)
	movq	img, %rdx
	movw	%ax, 4286(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 4344(%rdx)
	movq	img, %rdx
	movw	%ax, 4316(%rdx)
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 4346(%rcx)
	movq	img, %rcx
	movw	%ax, 4318(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movw	%ax, 4382(%rcx)
	movq	img, %rcx
	movw	%ax, 4380(%rcx)
	movq	img, %rcx
	movw	%ax, 4378(%rcx)
	movq	img, %rcx
	movw	%ax, 4350(%rcx)
	movq	img, %rcx
	movw	%ax, 4348(%rcx)
	movq	img, %rcx
	movw	%ax, 4376(%rcx)
.LBB79_81:                              # %if.end756
	cmpl	$0, -72(%rbp)
	je	.LBB79_85
# %bb.82:                               # %land.lhs.true758
	cmpl	$0, -68(%rbp)
	je	.LBB79_85
# %bb.83:                               # %land.lhs.true760
	cmpl	$0, -100(%rbp)
	je	.LBB79_85
# %bb.84:                               # %if.then762
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2328(%rdx)
	movl	-20(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-28(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2330(%rdx)
	movq	img, %rdx
	movw	%ax, 2296(%rdx)
	movl	-24(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-64(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2332(%rdx)
	movq	img, %rdx
	movw	%ax, 2298(%rdx)
	movq	img, %rdx
	movw	%ax, 2264(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2334(%rdx)
	movq	img, %rdx
	movw	%ax, 2300(%rdx)
	movq	img, %rdx
	movw	%ax, 2266(%rdx)
	movq	img, %rdx
	movw	%ax, 2232(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2302(%rdx)
	movq	img, %rdx
	movw	%ax, 2268(%rdx)
	movq	img, %rdx
	movw	%ax, 2234(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2270(%rdx)
	movq	img, %rdx
	movw	%ax, 2236(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2238(%rdx)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2810(%rdx)
	movq	img, %rdx
	movw	%ax, 2744(%rdx)
	movl	-60(%rbp), %eax
	addl	-56(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2812(%rdx)
	movq	img, %rdx
	movw	%ax, 2746(%rdx)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2814(%rdx)
	movq	img, %rdx
	movw	%ax, 2748(%rdx)
	movl	-52(%rbp), %eax
	addl	-48(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 2750(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2842(%rdx)
	movq	img, %rdx
	movw	%ax, 2776(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2844(%rdx)
	movq	img, %rdx
	movw	%ax, 2778(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2846(%rdx)
	movq	img, %rdx
	movw	%ax, 2780(%rdx)
	movl	-56(%rbp), %eax
	movl	-52(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-48(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2782(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2808(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 2840(%rdx)
	movl	-64(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3292(%rdx)
	movq	img, %rdx
	movw	%ax, 3256(%rdx)
	movl	-28(%rbp), %eax
	movl	-64(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-60(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3294(%rdx)
	movq	img, %rdx
	movw	%ax, 3258(%rdx)
	movl	-64(%rbp), %eax
	movl	-60(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-56(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3260(%rdx)
	movl	-60(%rbp), %eax
	movl	-56(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-52(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3262(%rdx)
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3324(%rdx)
	movq	img, %rdx
	movw	%ax, 3288(%rdx)
	movl	-64(%rbp), %eax
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-24(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3326(%rdx)
	movq	img, %rdx
	movw	%ax, 3290(%rdx)
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3356(%rdx)
	movq	img, %rdx
	movw	%ax, 3320(%rdx)
	movl	-28(%rbp), %eax
	movl	-24(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-20(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movw	%ax, 3358(%rdx)
	movq	img, %rdx
	movw	%ax, 3322(%rdx)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	%esi
	movq	img, %rdx
	movw	%ax, 3352(%rdx)
	movl	-24(%rbp), %eax
	movl	-20(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %eax
	addl	-16(%rbp), %eax
	addl	$2, %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movw	%ax, 3354(%rcx)
.LBB79_85:                              # %if.end1174
	cmpl	$266398174, -172(%rbp)  # imm = 0xFE0E9DE
	jne	.LBB79_87
.LBB79_86:
	addq	$320, %rsp              # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_87:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_86
.Lfunc_end79:
	.size	intrapred_luma.70, .Lfunc_end79-intrapred_luma.70
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.71
.LCPI80_0:
	.quad	4616189618054758400     # double 4
.LCPI80_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI80_2:
	.quad	4611686018427387904     # double 2
.LCPI80_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.71
	.p2align	4, 0x90
	.type	dct_chroma_sp.71,@function
dct_chroma_sp.71:                       # @dct_chroma_sp.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI80_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1823713644, -268(%rbp) # imm = 0x6CB3A96C
	movl	%edi, -112(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -200(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI80_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI80_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB80_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB80_6
.LBB80_2:                               # %cond.false
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB80_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB80_5
.LBB80_4:                               # %cond.false19
	movq	-200(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB80_5:                               # %cond.end
.LBB80_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB80_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB80_12
.LBB80_8:                               # %cond.false30
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB80_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB80_11
.LBB80_10:                              # %cond.false37
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB80_11:                              # %cond.end41
.LBB80_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB80_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB80_15
.LBB80_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB80_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB80_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB80_18
.LBB80_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB80_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB80_20
# %bb.19:                               # %cond.true70
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB80_21
.LBB80_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB80_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB80_23
# %bb.22:                               # %cond.true82
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB80_24
.LBB80_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB80_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB80_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB80_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	$0, -16(%rbp)
.LBB80_27:                              # %for.cond97
                                        #   Parent Loop BB80_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB80_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB80_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB80_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_27
.LBB80_30:                              # %for.end
                                        #   in Loop: Header=BB80_25 Depth=1
	jmp	.LBB80_31
.LBB80_31:                              # %for.inc121
                                        #   in Loop: Header=BB80_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_25
.LBB80_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB80_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_35 Depth 2
                                        #       Child Loop BB80_37 Depth 3
                                        #         Child Loop BB80_39 Depth 4
                                        #       Child Loop BB80_45 Depth 3
                                        #         Child Loop BB80_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB80_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB80_33 Depth=1
	movl	$0, -20(%rbp)
.LBB80_35:                              # %for.cond128
                                        #   Parent Loop BB80_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_37 Depth 3
                                        #         Child Loop BB80_39 Depth 4
                                        #       Child Loop BB80_45 Depth 3
                                        #         Child Loop BB80_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB80_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB80_35 Depth=2
	movl	$0, -12(%rbp)
.LBB80_37:                              # %for.cond132
                                        #   Parent Loop BB80_33 Depth=1
                                        #     Parent Loop BB80_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB80_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB80_39:                              # %for.cond137
                                        #   Parent Loop BB80_33 Depth=1
                                        #     Parent Loop BB80_35 Depth=2
                                        #       Parent Loop BB80_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB80_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB80_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-84(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB80_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_39
.LBB80_42:                              # %for.end174
                                        #   in Loop: Header=BB80_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB80_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_37
.LBB80_44:                              # %for.end214
                                        #   in Loop: Header=BB80_35 Depth=2
	movl	$0, -16(%rbp)
.LBB80_45:                              # %for.cond215
                                        #   Parent Loop BB80_33 Depth=1
                                        #     Parent Loop BB80_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB80_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB80_47:                              # %for.cond220
                                        #   Parent Loop BB80_33 Depth=1
                                        #     Parent Loop BB80_35 Depth=2
                                        #       Parent Loop BB80_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB80_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB80_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB80_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_47
.LBB80_50:                              # %for.end257
                                        #   in Loop: Header=BB80_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB80_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_45
.LBB80_52:                              # %for.end298
                                        #   in Loop: Header=BB80_35 Depth=2
	jmp	.LBB80_53
.LBB80_53:                              # %for.inc299
                                        #   in Loop: Header=BB80_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_35
.LBB80_54:                              # %for.end301
                                        #   in Loop: Header=BB80_33 Depth=1
	jmp	.LBB80_55
.LBB80_55:                              # %for.inc302
                                        #   in Loop: Header=BB80_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_33
.LBB80_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB80_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_59 Depth 2
                                        #       Child Loop BB80_61 Depth 3
                                        #         Child Loop BB80_63 Depth 4
                                        #       Child Loop BB80_69 Depth 3
                                        #         Child Loop BB80_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB80_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB80_57 Depth=1
	movl	$0, -20(%rbp)
.LBB80_59:                              # %for.cond309
                                        #   Parent Loop BB80_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_61 Depth 3
                                        #         Child Loop BB80_63 Depth 4
                                        #       Child Loop BB80_69 Depth 3
                                        #         Child Loop BB80_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB80_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB80_59 Depth=2
	movl	$0, -12(%rbp)
.LBB80_61:                              # %for.cond313
                                        #   Parent Loop BB80_57 Depth=1
                                        #     Parent Loop BB80_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB80_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB80_63:                              # %for.cond318
                                        #   Parent Loop BB80_57 Depth=1
                                        #     Parent Loop BB80_59 Depth=2
                                        #       Parent Loop BB80_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB80_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB80_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-84(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-84(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB80_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_63
.LBB80_66:                              # %for.end351
                                        #   in Loop: Header=BB80_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB80_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_61
.LBB80_68:                              # %for.end387
                                        #   in Loop: Header=BB80_59 Depth=2
	movl	$0, -16(%rbp)
.LBB80_69:                              # %for.cond388
                                        #   Parent Loop BB80_57 Depth=1
                                        #     Parent Loop BB80_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB80_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB80_71:                              # %for.cond393
                                        #   Parent Loop BB80_57 Depth=1
                                        #     Parent Loop BB80_59 Depth=2
                                        #       Parent Loop BB80_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB80_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB80_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB80_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_71
.LBB80_74:                              # %for.end426
                                        #   in Loop: Header=BB80_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB80_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_69
.LBB80_76:                              # %for.end463
                                        #   in Loop: Header=BB80_59 Depth=2
	jmp	.LBB80_77
.LBB80_77:                              # %for.inc464
                                        #   in Loop: Header=BB80_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_59
.LBB80_78:                              # %for.end466
                                        #   in Loop: Header=BB80_57 Depth=1
	jmp	.LBB80_79
.LBB80_79:                              # %for.inc467
                                        #   in Loop: Header=BB80_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_57
.LBB80_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$0, -32(%rbp)
.LBB80_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB80_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -44(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB80_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB80_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB80_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB80_81 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB80_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB80_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB80_90
	jp	.LBB80_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB80_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB80_89
.LBB80_88:                              # %cond.false691
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-40(%rbp), %eax
.LBB80_89:                              # %cond.end692
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB80_94
.LBB80_90:                              # %if.else
                                        #   in Loop: Header=BB80_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_93
.LBB80_92:                              # %if.else697
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB80_93:                              # %if.end
                                        #   in Loop: Header=BB80_81 Depth=1
	jmp	.LBB80_94
.LBB80_94:                              # %if.end698
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB80_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB80_97
.LBB80_96:                              # %cond.false702
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-100(%rbp), %eax
.LBB80_97:                              # %cond.end703
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB80_108
.LBB80_98:                              # %if.else705
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB80_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB80_107
.LBB80_100:                             # %if.else709
                                        #   in Loop: Header=BB80_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB80_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB80_103
.LBB80_102:                             # %cond.false713
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-40(%rbp), %eax
.LBB80_103:                             # %cond.end714
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB80_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-44(%rbp), %eax
	jmp	.LBB80_106
.LBB80_105:                             # %cond.false719
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-100(%rbp), %eax
.LBB80_106:                             # %cond.end720
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB80_107:                             # %if.end722
                                        #   in Loop: Header=BB80_81 Depth=1
	jmp	.LBB80_108
.LBB80_108:                             # %if.end723
                                        #   in Loop: Header=BB80_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB80_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB80_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB80_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB80_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB80_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB80_112:                             # %if.end734
                                        #   in Loop: Header=BB80_81 Depth=1
	jmp	.LBB80_113
.LBB80_113:                             # %if.end735
                                        #   in Loop: Header=BB80_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB80_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB80_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	$1, %eax
	jmp	.LBB80_117
.LBB80_116:                             # %cond.false745
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-208(%rbp), %eax
.LBB80_117:                             # %cond.end746
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB80_118:                             # %if.end763
                                        #   in Loop: Header=BB80_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB80_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB80_81
.LBB80_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -220(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB80_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_123 Depth 2
                                        #       Child Loop BB80_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB80_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB80_121 Depth=1
	movl	$0, -20(%rbp)
.LBB80_123:                             # %for.cond839
                                        #   Parent Loop BB80_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB80_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB80_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	$1, -32(%rbp)
.LBB80_125:                             # %for.cond860
                                        #   Parent Loop BB80_121 Depth=1
                                        #     Parent Loop BB80_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB80_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB80_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB80_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB80_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB80_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB80_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB80_130
.LBB80_129:                             # %if.then867
                                        #   in Loop: Header=BB80_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_131
.LBB80_130:                             # %if.else876
                                        #   in Loop: Header=BB80_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB80_131:                             # %if.end885
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -44(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	je	.LBB80_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB80_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB80_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB80_125 Depth=3
	cmpl	$0, -40(%rbp)
	je	.LBB80_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB80_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-44(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-40(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB80_139
	jp	.LBB80_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-40(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB80_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB80_138
.LBB80_137:                             # %cond.false1047
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-40(%rbp), %eax
.LBB80_138:                             # %cond.end1048
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB80_143
.LBB80_139:                             # %if.else1050
                                        #   in Loop: Header=BB80_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB80_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB80_142
.LBB80_141:                             # %if.else1054
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB80_142:                             # %if.end1055
                                        #   in Loop: Header=BB80_125 Depth=3
	jmp	.LBB80_143
.LBB80_143:                             # %if.end1056
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB80_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB80_146
.LBB80_145:                             # %cond.false1060
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-100(%rbp), %eax
.LBB80_146:                             # %cond.end1061
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB80_157
.LBB80_147:                             # %if.else1063
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB80_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB80_156
.LBB80_149:                             # %if.else1067
                                        #   in Loop: Header=BB80_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB80_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB80_152
.LBB80_151:                             # %cond.false1071
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-40(%rbp), %eax
.LBB80_152:                             # %cond.end1072
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB80_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-44(%rbp), %eax
	jmp	.LBB80_155
.LBB80_154:                             # %cond.false1077
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-100(%rbp), %eax
.LBB80_155:                             # %cond.end1078
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB80_156:                             # %if.end1080
                                        #   in Loop: Header=BB80_125 Depth=3
	jmp	.LBB80_157
.LBB80_157:                             # %if.end1081
                                        #   in Loop: Header=BB80_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB80_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-200(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB80_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-220(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -220(%rbp)
	jmp	.LBB80_161
.LBB80_160:                             # %if.else1099
                                        #   in Loop: Header=BB80_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-220(%rbp), %eax
	movl	%eax, -220(%rbp)
.LBB80_161:                             # %if.end1106
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB80_162:                             # %if.end1128
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB80_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB80_125
.LBB80_164:                             # %for.end1164
                                        #   in Loop: Header=BB80_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-92(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB80_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_123
.LBB80_166:                             # %for.end1169
                                        #   in Loop: Header=BB80_121 Depth=1
	jmp	.LBB80_167
.LBB80_167:                             # %for.inc1170
                                        #   in Loop: Header=BB80_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_121
.LBB80_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB80_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB80_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB80_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_173 Depth 2
                                        #       Child Loop BB80_175 Depth 3
                                        #         Child Loop BB80_177 Depth 4
                                        #         Child Loop BB80_181 Depth 4
                                        #       Child Loop BB80_187 Depth 3
                                        #         Child Loop BB80_189 Depth 4
                                        #         Child Loop BB80_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB80_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	$0, -20(%rbp)
.LBB80_173:                             # %for.cond1181
                                        #   Parent Loop BB80_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_175 Depth 3
                                        #         Child Loop BB80_177 Depth 4
                                        #         Child Loop BB80_181 Depth 4
                                        #       Child Loop BB80_187 Depth 3
                                        #         Child Loop BB80_189 Depth 4
                                        #         Child Loop BB80_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB80_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB80_173 Depth=2
	movl	$0, -12(%rbp)
.LBB80_175:                             # %for.cond1185
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_177 Depth 4
                                        #         Child Loop BB80_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB80_175 Depth=3
	movl	$0, -16(%rbp)
.LBB80_177:                             # %for.cond1189
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        #       Parent Loop BB80_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB80_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB80_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_177
.LBB80_180:                             # %for.end1204
                                        #   in Loop: Header=BB80_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB80_181:                             # %for.cond1223
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        #       Parent Loop BB80_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB80_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB80_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-84(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB80_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_181
.LBB80_184:                             # %for.end1254
                                        #   in Loop: Header=BB80_175 Depth=3
	jmp	.LBB80_185
.LBB80_185:                             # %for.inc1255
                                        #   in Loop: Header=BB80_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_175
.LBB80_186:                             # %for.end1257
                                        #   in Loop: Header=BB80_173 Depth=2
	movl	$0, -16(%rbp)
.LBB80_187:                             # %for.cond1258
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_189 Depth 4
                                        #         Child Loop BB80_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB80_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB80_187 Depth=3
	movl	$0, -12(%rbp)
.LBB80_189:                             # %for.cond1262
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        #       Parent Loop BB80_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB80_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB80_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB80_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_189
.LBB80_192:                             # %for.end1277
                                        #   in Loop: Header=BB80_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB80_193:                             # %for.cond1296
                                        #   Parent Loop BB80_171 Depth=1
                                        #     Parent Loop BB80_173 Depth=2
                                        #       Parent Loop BB80_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB80_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB80_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB80_197
.LBB80_196:                             # %cond.false1311
                                        #   in Loop: Header=BB80_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB80_197:                             # %cond.end1319
                                        #   in Loop: Header=BB80_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB80_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB80_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB80_203
.LBB80_199:                             # %cond.false1325
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB80_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB80_202
.LBB80_201:                             # %cond.false1336
                                        #   in Loop: Header=BB80_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB80_202:                             # %cond.end1344
                                        #   in Loop: Header=BB80_193 Depth=4
.LBB80_203:                             # %cond.end1346
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB80_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB80_206
.LBB80_205:                             # %cond.false1366
                                        #   in Loop: Header=BB80_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB80_206:                             # %cond.end1374
                                        #   in Loop: Header=BB80_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB80_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB80_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB80_212
.LBB80_208:                             # %cond.false1380
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB80_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB80_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB80_211
.LBB80_210:                             # %cond.false1391
                                        #   in Loop: Header=BB80_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB80_211:                             # %cond.end1399
                                        #   in Loop: Header=BB80_193 Depth=4
.LBB80_212:                             # %cond.end1401
                                        #   in Loop: Header=BB80_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB80_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_193
.LBB80_214:                             # %for.end1412
                                        #   in Loop: Header=BB80_187 Depth=3
	jmp	.LBB80_215
.LBB80_215:                             # %for.inc1413
                                        #   in Loop: Header=BB80_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_187
.LBB80_216:                             # %for.end1415
                                        #   in Loop: Header=BB80_173 Depth=2
	jmp	.LBB80_217
.LBB80_217:                             # %for.inc1416
                                        #   in Loop: Header=BB80_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_173
.LBB80_218:                             # %for.end1418
                                        #   in Loop: Header=BB80_171 Depth=1
	jmp	.LBB80_219
.LBB80_219:                             # %for.inc1419
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_171
.LBB80_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB80_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB80_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB80_221 Depth=1
	movl	$0, -16(%rbp)
.LBB80_223:                             # %for.cond1426
                                        #   Parent Loop BB80_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB80_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB80_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB80_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_223
.LBB80_226:                             # %for.end1446
                                        #   in Loop: Header=BB80_221 Depth=1
	jmp	.LBB80_227
.LBB80_227:                             # %for.inc1447
                                        #   in Loop: Header=BB80_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_221
.LBB80_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$1823713644, -268(%rbp) # imm = 0x6CB3A96C
	jne	.LBB80_230
.LBB80_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_229
.Lfunc_end80:
	.size	dct_chroma_sp.71, .Lfunc_end80-dct_chroma_sp.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.72
.LCPI81_0:
	.quad	4616189618054758400     # double 4
.LCPI81_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI81_2:
	.quad	4611686018427387904     # double 2
.LCPI81_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.72
	.p2align	4, 0x90
	.type	dct_chroma_sp.72,@function
dct_chroma_sp.72:                       # @dct_chroma_sp.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI81_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI81_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1228292588, -268(%rbp) # imm = 0x493641EC
	movl	%edi, -124(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI81_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI81_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB81_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB81_6
.LBB81_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB81_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB81_5
.LBB81_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB81_5:                               # %cond.end
.LBB81_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB81_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB81_12
.LBB81_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB81_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB81_11
.LBB81_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB81_11:                              # %cond.end41
.LBB81_12:                              # %cond.end43
	movl	%eax, -212(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB81_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB81_15
.LBB81_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB81_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB81_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB81_18
.LBB81_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB81_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB81_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB81_21
.LBB81_20:                              # %cond.false72
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB81_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -228(%rbp)
	cmpl	$0, -212(%rbp)
	jge	.LBB81_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB81_24
.LBB81_23:                              # %cond.false84
	movslq	-212(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB81_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-228(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB81_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB81_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB81_25 Depth=1
	movl	$0, -16(%rbp)
.LBB81_27:                              # %for.cond97
                                        #   Parent Loop BB81_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB81_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB81_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB81_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_27
.LBB81_30:                              # %for.end
                                        #   in Loop: Header=BB81_25 Depth=1
	jmp	.LBB81_31
.LBB81_31:                              # %for.inc121
                                        #   in Loop: Header=BB81_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_25
.LBB81_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB81_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_35 Depth 2
                                        #       Child Loop BB81_37 Depth 3
                                        #         Child Loop BB81_39 Depth 4
                                        #       Child Loop BB81_45 Depth 3
                                        #         Child Loop BB81_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB81_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB81_33 Depth=1
	movl	$0, -20(%rbp)
.LBB81_35:                              # %for.cond128
                                        #   Parent Loop BB81_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_37 Depth 3
                                        #         Child Loop BB81_39 Depth 4
                                        #       Child Loop BB81_45 Depth 3
                                        #         Child Loop BB81_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB81_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB81_35 Depth=2
	movl	$0, -12(%rbp)
.LBB81_37:                              # %for.cond132
                                        #   Parent Loop BB81_33 Depth=1
                                        #     Parent Loop BB81_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB81_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB81_39:                              # %for.cond137
                                        #   Parent Loop BB81_33 Depth=1
                                        #     Parent Loop BB81_35 Depth=2
                                        #       Parent Loop BB81_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB81_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB81_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-88(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB81_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_39
.LBB81_42:                              # %for.end174
                                        #   in Loop: Header=BB81_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB81_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_37
.LBB81_44:                              # %for.end214
                                        #   in Loop: Header=BB81_35 Depth=2
	movl	$0, -16(%rbp)
.LBB81_45:                              # %for.cond215
                                        #   Parent Loop BB81_33 Depth=1
                                        #     Parent Loop BB81_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB81_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB81_47:                              # %for.cond220
                                        #   Parent Loop BB81_33 Depth=1
                                        #     Parent Loop BB81_35 Depth=2
                                        #       Parent Loop BB81_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB81_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB81_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB81_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_47
.LBB81_50:                              # %for.end257
                                        #   in Loop: Header=BB81_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB81_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_45
.LBB81_52:                              # %for.end298
                                        #   in Loop: Header=BB81_35 Depth=2
	jmp	.LBB81_53
.LBB81_53:                              # %for.inc299
                                        #   in Loop: Header=BB81_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_35
.LBB81_54:                              # %for.end301
                                        #   in Loop: Header=BB81_33 Depth=1
	jmp	.LBB81_55
.LBB81_55:                              # %for.inc302
                                        #   in Loop: Header=BB81_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_33
.LBB81_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB81_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_59 Depth 2
                                        #       Child Loop BB81_61 Depth 3
                                        #         Child Loop BB81_63 Depth 4
                                        #       Child Loop BB81_69 Depth 3
                                        #         Child Loop BB81_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB81_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB81_57 Depth=1
	movl	$0, -20(%rbp)
.LBB81_59:                              # %for.cond309
                                        #   Parent Loop BB81_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_61 Depth 3
                                        #         Child Loop BB81_63 Depth 4
                                        #       Child Loop BB81_69 Depth 3
                                        #         Child Loop BB81_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB81_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB81_59 Depth=2
	movl	$0, -12(%rbp)
.LBB81_61:                              # %for.cond313
                                        #   Parent Loop BB81_57 Depth=1
                                        #     Parent Loop BB81_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB81_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB81_63:                              # %for.cond318
                                        #   Parent Loop BB81_57 Depth=1
                                        #     Parent Loop BB81_59 Depth=2
                                        #       Parent Loop BB81_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB81_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB81_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-88(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-88(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB81_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_63
.LBB81_66:                              # %for.end351
                                        #   in Loop: Header=BB81_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB81_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_61
.LBB81_68:                              # %for.end387
                                        #   in Loop: Header=BB81_59 Depth=2
	movl	$0, -16(%rbp)
.LBB81_69:                              # %for.cond388
                                        #   Parent Loop BB81_57 Depth=1
                                        #     Parent Loop BB81_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB81_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB81_71:                              # %for.cond393
                                        #   Parent Loop BB81_57 Depth=1
                                        #     Parent Loop BB81_59 Depth=2
                                        #       Parent Loop BB81_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB81_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB81_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB81_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_71
.LBB81_74:                              # %for.end426
                                        #   in Loop: Header=BB81_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB81_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_69
.LBB81_76:                              # %for.end463
                                        #   in Loop: Header=BB81_59 Depth=2
	jmp	.LBB81_77
.LBB81_77:                              # %for.inc464
                                        #   in Loop: Header=BB81_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_59
.LBB81_78:                              # %for.end466
                                        #   in Loop: Header=BB81_57 Depth=1
	jmp	.LBB81_79
.LBB81_79:                              # %for.inc467
                                        #   in Loop: Header=BB81_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_57
.LBB81_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB81_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB81_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB81_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB81_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB81_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB81_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB81_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB81_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB81_90
	jp	.LBB81_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB81_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB81_89
.LBB81_88:                              # %cond.false691
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-44(%rbp), %eax
.LBB81_89:                              # %cond.end692
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB81_94
.LBB81_90:                              # %if.else
                                        #   in Loop: Header=BB81_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB81_93
.LBB81_92:                              # %if.else697
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB81_93:                              # %if.end
                                        #   in Loop: Header=BB81_81 Depth=1
	jmp	.LBB81_94
.LBB81_94:                              # %if.end698
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB81_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB81_97
.LBB81_96:                              # %cond.false702
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-100(%rbp), %eax
.LBB81_97:                              # %cond.end703
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB81_108
.LBB81_98:                              # %if.else705
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB81_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB81_107
.LBB81_100:                             # %if.else709
                                        #   in Loop: Header=BB81_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB81_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB81_103
.LBB81_102:                             # %cond.false713
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-44(%rbp), %eax
.LBB81_103:                             # %cond.end714
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB81_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB81_106
.LBB81_105:                             # %cond.false719
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-100(%rbp), %eax
.LBB81_106:                             # %cond.end720
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB81_107:                             # %if.end722
                                        #   in Loop: Header=BB81_81 Depth=1
	jmp	.LBB81_108
.LBB81_108:                             # %if.end723
                                        #   in Loop: Header=BB81_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB81_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB81_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB81_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB81_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB81_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB81_112:                             # %if.end734
                                        #   in Loop: Header=BB81_81 Depth=1
	jmp	.LBB81_113
.LBB81_113:                             # %if.end735
                                        #   in Loop: Header=BB81_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB81_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB81_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	$1, %eax
	jmp	.LBB81_117
.LBB81_116:                             # %cond.false745
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-204(%rbp), %eax
.LBB81_117:                             # %cond.end746
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -92(%rbp)
.LBB81_118:                             # %if.end763
                                        #   in Loop: Header=BB81_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB81_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB81_81
.LBB81_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -216(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -24(%rbp)
.LBB81_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_123 Depth 2
                                        #       Child Loop BB81_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB81_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB81_121 Depth=1
	movl	$0, -20(%rbp)
.LBB81_123:                             # %for.cond839
                                        #   Parent Loop BB81_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB81_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB81_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-124(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB81_125:                             # %for.cond860
                                        #   Parent Loop BB81_121 Depth=1
                                        #     Parent Loop BB81_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB81_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB81_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB81_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB81_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB81_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB81_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB81_130
.LBB81_129:                             # %if.then867
                                        #   in Loop: Header=BB81_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_131
.LBB81_130:                             # %if.else876
                                        #   in Loop: Header=BB81_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB81_131:                             # %if.end885
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -92(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB81_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB81_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB81_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB81_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB81_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB81_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-116(%rbp), %rdx
	leaq	-232(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-116(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-184(%rbp), %xmm0
	jne	.LBB81_139
	jp	.LBB81_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB81_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB81_138
.LBB81_137:                             # %cond.false1047
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-44(%rbp), %eax
.LBB81_138:                             # %cond.end1048
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB81_143
.LBB81_139:                             # %if.else1050
                                        #   in Loop: Header=BB81_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-184(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB81_142
.LBB81_141:                             # %if.else1054
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB81_142:                             # %if.end1055
                                        #   in Loop: Header=BB81_125 Depth=3
	jmp	.LBB81_143
.LBB81_143:                             # %if.end1056
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB81_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB81_146
.LBB81_145:                             # %cond.false1060
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-100(%rbp), %eax
.LBB81_146:                             # %cond.end1061
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB81_157
.LBB81_147:                             # %if.else1063
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB81_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB81_156
.LBB81_149:                             # %if.else1067
                                        #   in Loop: Header=BB81_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB81_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB81_152
.LBB81_151:                             # %cond.false1071
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-44(%rbp), %eax
.LBB81_152:                             # %cond.end1072
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB81_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB81_155
.LBB81_154:                             # %cond.false1077
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-100(%rbp), %eax
.LBB81_155:                             # %cond.end1078
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB81_156:                             # %if.end1080
                                        #   in Loop: Header=BB81_125 Depth=3
	jmp	.LBB81_157
.LBB81_157:                             # %if.end1081
                                        #   in Loop: Header=BB81_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB81_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-124(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB81_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-216(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -216(%rbp)
	jmp	.LBB81_161
.LBB81_160:                             # %if.else1099
                                        #   in Loop: Header=BB81_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-216(%rbp), %eax
	movl	%eax, -216(%rbp)
.LBB81_161:                             # %if.end1106
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -92(%rbp)
.LBB81_162:                             # %if.end1128
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-92(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-228(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB81_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB81_125
.LBB81_164:                             # %for.end1164
                                        #   in Loop: Header=BB81_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB81_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_123
.LBB81_166:                             # %for.end1169
                                        #   in Loop: Header=BB81_121 Depth=1
	jmp	.LBB81_167
.LBB81_167:                             # %for.inc1170
                                        #   in Loop: Header=BB81_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_121
.LBB81_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB81_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB81_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB81_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_173 Depth 2
                                        #       Child Loop BB81_175 Depth 3
                                        #         Child Loop BB81_177 Depth 4
                                        #         Child Loop BB81_181 Depth 4
                                        #       Child Loop BB81_187 Depth 3
                                        #         Child Loop BB81_189 Depth 4
                                        #         Child Loop BB81_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB81_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB81_171 Depth=1
	movl	$0, -20(%rbp)
.LBB81_173:                             # %for.cond1181
                                        #   Parent Loop BB81_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_175 Depth 3
                                        #         Child Loop BB81_177 Depth 4
                                        #         Child Loop BB81_181 Depth 4
                                        #       Child Loop BB81_187 Depth 3
                                        #         Child Loop BB81_189 Depth 4
                                        #         Child Loop BB81_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB81_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB81_173 Depth=2
	movl	$0, -12(%rbp)
.LBB81_175:                             # %for.cond1185
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_177 Depth 4
                                        #         Child Loop BB81_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB81_175 Depth=3
	movl	$0, -16(%rbp)
.LBB81_177:                             # %for.cond1189
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        #       Parent Loop BB81_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB81_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB81_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_177
.LBB81_180:                             # %for.end1204
                                        #   in Loop: Header=BB81_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB81_181:                             # %for.cond1223
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        #       Parent Loop BB81_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB81_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB81_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-88(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-88(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB81_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_181
.LBB81_184:                             # %for.end1254
                                        #   in Loop: Header=BB81_175 Depth=3
	jmp	.LBB81_185
.LBB81_185:                             # %for.inc1255
                                        #   in Loop: Header=BB81_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_175
.LBB81_186:                             # %for.end1257
                                        #   in Loop: Header=BB81_173 Depth=2
	movl	$0, -16(%rbp)
.LBB81_187:                             # %for.cond1258
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_189 Depth 4
                                        #         Child Loop BB81_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB81_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB81_187 Depth=3
	movl	$0, -12(%rbp)
.LBB81_189:                             # %for.cond1262
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        #       Parent Loop BB81_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB81_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB81_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB81_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_189
.LBB81_192:                             # %for.end1277
                                        #   in Loop: Header=BB81_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB81_193:                             # %for.cond1296
                                        #   Parent Loop BB81_171 Depth=1
                                        #     Parent Loop BB81_173 Depth=2
                                        #       Parent Loop BB81_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB81_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB81_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB81_197
.LBB81_196:                             # %cond.false1311
                                        #   in Loop: Header=BB81_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB81_197:                             # %cond.end1319
                                        #   in Loop: Header=BB81_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB81_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB81_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB81_203
.LBB81_199:                             # %cond.false1325
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB81_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_202
.LBB81_201:                             # %cond.false1336
                                        #   in Loop: Header=BB81_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB81_202:                             # %cond.end1344
                                        #   in Loop: Header=BB81_193 Depth=4
.LBB81_203:                             # %cond.end1346
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB81_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB81_206
.LBB81_205:                             # %cond.false1366
                                        #   in Loop: Header=BB81_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB81_206:                             # %cond.end1374
                                        #   in Loop: Header=BB81_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB81_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB81_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB81_212
.LBB81_208:                             # %cond.false1380
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB81_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB81_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB81_211
.LBB81_210:                             # %cond.false1391
                                        #   in Loop: Header=BB81_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB81_211:                             # %cond.end1399
                                        #   in Loop: Header=BB81_193 Depth=4
.LBB81_212:                             # %cond.end1401
                                        #   in Loop: Header=BB81_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB81_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_193
.LBB81_214:                             # %for.end1412
                                        #   in Loop: Header=BB81_187 Depth=3
	jmp	.LBB81_215
.LBB81_215:                             # %for.inc1413
                                        #   in Loop: Header=BB81_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_187
.LBB81_216:                             # %for.end1415
                                        #   in Loop: Header=BB81_173 Depth=2
	jmp	.LBB81_217
.LBB81_217:                             # %for.inc1416
                                        #   in Loop: Header=BB81_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_173
.LBB81_218:                             # %for.end1418
                                        #   in Loop: Header=BB81_171 Depth=1
	jmp	.LBB81_219
.LBB81_219:                             # %for.inc1419
                                        #   in Loop: Header=BB81_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB81_171
.LBB81_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB81_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB81_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB81_221 Depth=1
	movl	$0, -16(%rbp)
.LBB81_223:                             # %for.cond1426
                                        #   Parent Loop BB81_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB81_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB81_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-124(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB81_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_223
.LBB81_226:                             # %for.end1446
                                        #   in Loop: Header=BB81_221 Depth=1
	jmp	.LBB81_227
.LBB81_227:                             # %for.inc1447
                                        #   in Loop: Header=BB81_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_221
.LBB81_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$1228292588, -268(%rbp) # imm = 0x493641EC
	jne	.LBB81_230
.LBB81_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_229
.Lfunc_end81:
	.size	dct_chroma_sp.72, .Lfunc_end81-dct_chroma_sp.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.73
.LCPI82_0:
	.quad	4616189618054758400     # double 4
.LCPI82_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI82_2:
	.quad	4611686018427387904     # double 2
.LCPI82_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.73
	.p2align	4, 0x90
	.type	dct_chroma_sp.73,@function
dct_chroma_sp.73:                       # @dct_chroma_sp.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI82_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$267033469, -268(%rbp)  # imm = 0xFEA9B7D
	movl	%edi, -116(%rbp)
	movl	%esi, -208(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -192(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI82_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB82_6
.LBB82_2:                               # %cond.false
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB82_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB82_5
.LBB82_4:                               # %cond.false19
	movq	-192(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB82_5:                               # %cond.end
.LBB82_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB82_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB82_12
.LBB82_8:                               # %cond.false30
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB82_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB82_11
.LBB82_10:                              # %cond.false37
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB82_11:                              # %cond.end41
.LBB82_12:                              # %cond.end43
	movl	%eax, -216(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB82_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB82_15
.LBB82_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -112(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB82_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-112(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -204(%rbp)
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -220(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB82_20
# %bb.19:                               # %cond.true70
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB82_21
.LBB82_20:                              # %cond.false72
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -216(%rbp)
	jge	.LBB82_23
# %bb.22:                               # %cond.true82
	movq	-192(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB82_24
.LBB82_23:                              # %cond.false84
	movslq	-216(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB82_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -124(%rbp)
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -224(%rbp)
	movl	$0, -12(%rbp)
.LBB82_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB82_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB82_25 Depth=1
	movl	$0, -16(%rbp)
.LBB82_27:                              # %for.cond97
                                        #   Parent Loop BB82_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB82_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB82_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB82_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_27
.LBB82_30:                              # %for.end
                                        #   in Loop: Header=BB82_25 Depth=1
	jmp	.LBB82_31
.LBB82_31:                              # %for.inc121
                                        #   in Loop: Header=BB82_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_25
.LBB82_32:                              # %for.end123
	movl	$0, -24(%rbp)
.LBB82_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_35 Depth 2
                                        #       Child Loop BB82_37 Depth 3
                                        #         Child Loop BB82_39 Depth 4
                                        #       Child Loop BB82_45 Depth 3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	$0, -20(%rbp)
.LBB82_35:                              # %for.cond128
                                        #   Parent Loop BB82_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_37 Depth 3
                                        #         Child Loop BB82_39 Depth 4
                                        #       Child Loop BB82_45 Depth 3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	$0, -12(%rbp)
.LBB82_37:                              # %for.cond132
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB82_39:                              # %for.cond137
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        #       Parent Loop BB82_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB82_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB82_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_39
.LBB82_42:                              # %for.end174
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB82_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_37
.LBB82_44:                              # %for.end214
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	$0, -16(%rbp)
.LBB82_45:                              # %for.cond215
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB82_47:                              # %for.cond220
                                        #   Parent Loop BB82_33 Depth=1
                                        #     Parent Loop BB82_35 Depth=2
                                        #       Parent Loop BB82_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB82_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-52(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-48(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB82_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_47
.LBB82_50:                              # %for.end257
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-52(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB82_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_45
.LBB82_52:                              # %for.end298
                                        #   in Loop: Header=BB82_35 Depth=2
	jmp	.LBB82_53
.LBB82_53:                              # %for.inc299
                                        #   in Loop: Header=BB82_35 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_35
.LBB82_54:                              # %for.end301
                                        #   in Loop: Header=BB82_33 Depth=1
	jmp	.LBB82_55
.LBB82_55:                              # %for.inc302
                                        #   in Loop: Header=BB82_33 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_33
.LBB82_56:                              # %for.end304
	movl	$0, -24(%rbp)
.LBB82_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_59 Depth 2
                                        #       Child Loop BB82_61 Depth 3
                                        #         Child Loop BB82_63 Depth 4
                                        #       Child Loop BB82_69 Depth 3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB82_57 Depth=1
	movl	$0, -20(%rbp)
.LBB82_59:                              # %for.cond309
                                        #   Parent Loop BB82_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_61 Depth 3
                                        #         Child Loop BB82_63 Depth 4
                                        #       Child Loop BB82_69 Depth 3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	$0, -12(%rbp)
.LBB82_61:                              # %for.cond313
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB82_63:                              # %for.cond318
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        #       Parent Loop BB82_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB82_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB82_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_63
.LBB82_66:                              # %for.end351
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB82_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_61
.LBB82_68:                              # %for.end387
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	$0, -16(%rbp)
.LBB82_69:                              # %for.cond388
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB82_71:                              # %for.cond393
                                        #   Parent Loop BB82_57 Depth=1
                                        #     Parent Loop BB82_59 Depth=2
                                        #       Parent Loop BB82_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB82_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-52(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-48(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB82_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_71
.LBB82_74:                              # %for.end426
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-52(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB82_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_69
.LBB82_76:                              # %for.end463
                                        #   in Loop: Header=BB82_59 Depth=2
	jmp	.LBB82_77
.LBB82_77:                              # %for.inc464
                                        #   in Loop: Header=BB82_59 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_59
.LBB82_78:                              # %for.end466
                                        #   in Loop: Header=BB82_57 Depth=1
	jmp	.LBB82_79
.LBB82_79:                              # %for.inc467
                                        #   in Loop: Header=BB82_57 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_57
.LBB82_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$0, -32(%rbp)
.LBB82_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB82_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-204(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB82_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB82_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB82_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB82_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB82_90
	jp	.LBB82_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB82_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB82_89
.LBB82_88:                              # %cond.false691
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
.LBB82_89:                              # %cond.end692
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB82_94
.LBB82_90:                              # %if.else
                                        #   in Loop: Header=BB82_81 Depth=1
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_93
.LBB82_92:                              # %if.else697
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB82_93:                              # %if.end
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_94
.LBB82_94:                              # %if.end698
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB82_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB82_97
.LBB82_96:                              # %cond.false702
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-104(%rbp), %eax
.LBB82_97:                              # %cond.end703
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -100(%rbp)
	jmp	.LBB82_108
.LBB82_98:                              # %if.else705
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB82_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB82_107
.LBB82_100:                             # %if.else709
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB82_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB82_103
.LBB82_102:                             # %cond.false713
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-44(%rbp), %eax
.LBB82_103:                             # %cond.end714
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB82_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB82_106
.LBB82_105:                             # %cond.false719
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-104(%rbp), %eax
.LBB82_106:                             # %cond.end720
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -100(%rbp)
.LBB82_107:                             # %if.end722
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_108
.LBB82_108:                             # %if.end723
                                        #   in Loop: Header=BB82_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB82_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB82_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB82_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB82_112:                             # %if.end734
                                        #   in Loop: Header=BB82_81 Depth=1
	jmp	.LBB82_113
.LBB82_113:                             # %if.end735
                                        #   in Loop: Header=BB82_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB82_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-208(%rbp), %eax
	jle	.LBB82_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	$1, %eax
	jmp	.LBB82_117
.LBB82_116:                             # %cond.false745
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-208(%rbp), %eax
.LBB82_117:                             # %cond.end746
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	%eax, -208(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -84(%rbp)
.LBB82_118:                             # %if.end763
                                        #   in Loop: Header=BB82_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-224(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-124(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB82_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_81
.LBB82_120:                             # %for.end788
	movq	-280(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -236(%rbp)
	movl	$0, -24(%rbp)
.LBB82_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_123 Depth 2
                                        #       Child Loop BB82_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB82_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB82_121 Depth=1
	movl	$0, -20(%rbp)
.LBB82_123:                             # %for.cond839
                                        #   Parent Loop BB82_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB82_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB82_123 Depth=2
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -240(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-240(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	$1, -32(%rbp)
.LBB82_125:                             # %for.cond860
                                        #   Parent Loop BB82_121 Depth=1
                                        #     Parent Loop BB82_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB82_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB82_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB82_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB82_130
.LBB82_129:                             # %if.then867
                                        #   in Loop: Header=BB82_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_131
.LBB82_130:                             # %if.else876
                                        #   in Loop: Header=BB82_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB82_131:                             # %if.end885
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-204(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB82_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB82_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB82_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB82_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-184(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-120(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-120(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-200(%rbp), %xmm0
	jne	.LBB82_139
	jp	.LBB82_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB82_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB82_138
.LBB82_137:                             # %cond.false1047
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
.LBB82_138:                             # %cond.end1048
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB82_143
.LBB82_139:                             # %if.else1050
                                        #   in Loop: Header=BB82_125 Depth=3
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-200(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB82_142
.LBB82_141:                             # %if.else1054
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB82_142:                             # %if.end1055
                                        #   in Loop: Header=BB82_125 Depth=3
	jmp	.LBB82_143
.LBB82_143:                             # %if.end1056
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB82_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB82_146
.LBB82_145:                             # %cond.false1060
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-104(%rbp), %eax
.LBB82_146:                             # %cond.end1061
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -100(%rbp)
	jmp	.LBB82_157
.LBB82_147:                             # %if.else1063
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB82_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB82_156
.LBB82_149:                             # %if.else1067
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB82_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB82_152
.LBB82_151:                             # %cond.false1071
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-44(%rbp), %eax
.LBB82_152:                             # %cond.end1072
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB82_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB82_155
.LBB82_154:                             # %cond.false1077
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-104(%rbp), %eax
.LBB82_155:                             # %cond.end1078
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	%eax, -100(%rbp)
.LBB82_156:                             # %if.end1080
                                        #   in Loop: Header=BB82_125 Depth=3
	jmp	.LBB82_157
.LBB82_157:                             # %if.end1081
                                        #   in Loop: Header=BB82_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB82_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-116(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	-20(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-192(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB82_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB82_161
.LBB82_160:                             # %if.else1099
                                        #   in Loop: Header=BB82_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB82_161:                             # %if.end1106
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	$2, -236(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -84(%rbp)
.LBB82_162:                             # %if.end1128
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-224(%rbp), %eax
	movl	-124(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-84(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB82_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB82_125
.LBB82_164:                             # %for.end1164
                                        #   in Loop: Header=BB82_123 Depth=2
	movq	-288(%rbp), %rax
	movslq	-88(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB82_123 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_123
.LBB82_166:                             # %for.end1169
                                        #   in Loop: Header=BB82_121 Depth=1
	jmp	.LBB82_167
.LBB82_167:                             # %for.inc1170
                                        #   in Loop: Header=BB82_121 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_121
.LBB82_168:                             # %for.end1172
	cmpl	$2, -236(%rbp)
	jne	.LBB82_170
# %bb.169:                              # %if.then1175
	movl	$2, -208(%rbp)
.LBB82_170:                             # %if.end1176
	movl	$0, -24(%rbp)
.LBB82_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_173 Depth 2
                                        #       Child Loop BB82_175 Depth 3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
                                        #       Child Loop BB82_187 Depth 3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB82_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	$0, -20(%rbp)
.LBB82_173:                             # %for.cond1181
                                        #   Parent Loop BB82_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_175 Depth 3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
                                        #       Child Loop BB82_187 Depth 3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB82_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	$0, -12(%rbp)
.LBB82_175:                             # %for.cond1185
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_177 Depth 4
                                        #         Child Loop BB82_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	$0, -16(%rbp)
.LBB82_177:                             # %for.cond1189
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB82_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB82_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_177
.LBB82_180:                             # %for.end1204
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB82_181:                             # %for.cond1223
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB82_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB82_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB82_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_181
.LBB82_184:                             # %for.end1254
                                        #   in Loop: Header=BB82_175 Depth=3
	jmp	.LBB82_185
.LBB82_185:                             # %for.inc1255
                                        #   in Loop: Header=BB82_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_175
.LBB82_186:                             # %for.end1257
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	$0, -16(%rbp)
.LBB82_187:                             # %for.cond1258
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_189 Depth 4
                                        #         Child Loop BB82_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB82_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	$0, -12(%rbp)
.LBB82_189:                             # %for.cond1262
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB82_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB82_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB82_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_189
.LBB82_192:                             # %for.end1277
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB82_193:                             # %for.cond1296
                                        #   Parent Loop BB82_171 Depth=1
                                        #     Parent Loop BB82_173 Depth=2
                                        #       Parent Loop BB82_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB82_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_197
.LBB82_196:                             # %cond.false1311
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB82_197:                             # %cond.end1319
                                        #   in Loop: Header=BB82_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB82_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_203
.LBB82_199:                             # %cond.false1325
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB82_202
.LBB82_201:                             # %cond.false1336
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB82_202:                             # %cond.end1344
                                        #   in Loop: Header=BB82_193 Depth=4
.LBB82_203:                             # %cond.end1346
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-20(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-24(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-48(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB82_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB82_206
.LBB82_205:                             # %cond.false1366
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB82_206:                             # %cond.end1374
                                        #   in Loop: Header=BB82_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB82_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB82_212
.LBB82_208:                             # %cond.false1380
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB82_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB82_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB82_211
.LBB82_210:                             # %cond.false1391
                                        #   in Loop: Header=BB82_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-48(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB82_211:                             # %cond.end1399
                                        #   in Loop: Header=BB82_193 Depth=4
.LBB82_212:                             # %cond.end1401
                                        #   in Loop: Header=BB82_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB82_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_193
.LBB82_214:                             # %for.end1412
                                        #   in Loop: Header=BB82_187 Depth=3
	jmp	.LBB82_215
.LBB82_215:                             # %for.inc1413
                                        #   in Loop: Header=BB82_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_187
.LBB82_216:                             # %for.end1415
                                        #   in Loop: Header=BB82_173 Depth=2
	jmp	.LBB82_217
.LBB82_217:                             # %for.inc1416
                                        #   in Loop: Header=BB82_173 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB82_173
.LBB82_218:                             # %for.end1418
                                        #   in Loop: Header=BB82_171 Depth=1
	jmp	.LBB82_219
.LBB82_219:                             # %for.inc1419
                                        #   in Loop: Header=BB82_171 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB82_171
.LBB82_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB82_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB82_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB82_221 Depth=1
	movl	$0, -16(%rbp)
.LBB82_223:                             # %for.cond1426
                                        #   Parent Loop BB82_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB82_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB82_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-116(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB82_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_223
.LBB82_226:                             # %for.end1446
                                        #   in Loop: Header=BB82_221 Depth=1
	jmp	.LBB82_227
.LBB82_227:                             # %for.inc1447
                                        #   in Loop: Header=BB82_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_221
.LBB82_228:                             # %for.end1449
	movl	-208(%rbp), %ebx
	cmpl	$267033469, -268(%rbp)  # imm = 0xFEA9B7D
	jne	.LBB82_230
.LBB82_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_229
.Lfunc_end82:
	.size	dct_chroma_sp.73, .Lfunc_end82-dct_chroma_sp.73
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.74        # -- Begin function dct_chroma_DC.74
	.p2align	4, 0x90
	.type	dct_chroma_DC.74,@function
dct_chroma_DC.74:                       # @dct_chroma_DC.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1799654948, -44(%rbp)  # imm = 0x6B448E24
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB83_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -36(%rbp)
	movslq	-12(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB83_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB83_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$1, %eax
	jmp	.LBB83_6
.LBB83_5:                               # %cond.false
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-20(%rbp), %eax
.LBB83_6:                               # %cond.end
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	$-1, -24(%rbp)
.LBB83_7:                               # %if.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_8
.LBB83_8:                               # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$1799654948, -44(%rbp)  # imm = 0x6B448E24
	jne	.LBB83_11
.LBB83_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_10
.Lfunc_end83:
	.size	dct_chroma_DC.74, .Lfunc_end83-dct_chroma_DC.74
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.75       # -- Begin function dct_luma_16x16.75
	.p2align	4, 0x90
	.type	dct_luma_16x16.75,@function
dct_luma_16x16.75:                      # @dct_luma_16x16.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$229446329, -132(%rbp)  # imm = 0xDAD12B9
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB84_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB84_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB84_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB84_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	$0, -16(%rbp)
.LBB84_5:                               # %for.cond16
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB84_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB84_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB84_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB84_9
.LBB84_8:                               # %if.else
                                        #   in Loop: Header=BB84_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_9:                               # %if.end
                                        #   in Loop: Header=BB84_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB84_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_5
.LBB84_11:                              # %for.end
                                        #   in Loop: Header=BB84_3 Depth=1
	jmp	.LBB84_12
.LBB84_12:                              # %for.inc61
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_3
.LBB84_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB84_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_18 Depth 2
                                        #       Child Loop BB84_20 Depth 3
                                        #         Child Loop BB84_22 Depth 4
                                        #       Child Loop BB84_28 Depth 3
                                        #         Child Loop BB84_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB84_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB84_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_16:                              # %land.end69
                                        #   in Loop: Header=BB84_14 Depth=1
	testb	$1, %al
	jne	.LBB84_17
	jmp	.LBB84_39
.LBB84_17:                              # %for.body71
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	$0, -20(%rbp)
.LBB84_18:                              # %for.cond72
                                        #   Parent Loop BB84_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_20 Depth 3
                                        #         Child Loop BB84_22 Depth 4
                                        #       Child Loop BB84_28 Depth 3
                                        #         Child Loop BB84_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB84_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB84_18 Depth=2
	movl	$0, -12(%rbp)
.LBB84_20:                              # %for.cond76
                                        #   Parent Loop BB84_14 Depth=1
                                        #     Parent Loop BB84_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB84_20 Depth=3
	movl	$0, -16(%rbp)
.LBB84_22:                              # %for.cond80
                                        #   Parent Loop BB84_14 Depth=1
                                        #     Parent Loop BB84_18 Depth=2
                                        #       Parent Loop BB84_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB84_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB84_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB84_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_22
.LBB84_25:                              # %for.end125
                                        #   in Loop: Header=BB84_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB84_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_20
.LBB84_27:                              # %for.end169
                                        #   in Loop: Header=BB84_18 Depth=2
	movl	$0, -16(%rbp)
.LBB84_28:                              # %for.cond170
                                        #   Parent Loop BB84_14 Depth=1
                                        #     Parent Loop BB84_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB84_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB84_28 Depth=3
	movl	$0, -12(%rbp)
.LBB84_30:                              # %for.cond174
                                        #   Parent Loop BB84_14 Depth=1
                                        #     Parent Loop BB84_18 Depth=2
                                        #       Parent Loop BB84_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB84_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB84_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB84_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_30
.LBB84_33:                              # %for.end219
                                        #   in Loop: Header=BB84_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB84_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_28
.LBB84_35:                              # %for.end264
                                        #   in Loop: Header=BB84_18 Depth=2
	jmp	.LBB84_36
.LBB84_36:                              # %for.inc265
                                        #   in Loop: Header=BB84_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB84_18
.LBB84_37:                              # %for.end267
                                        #   in Loop: Header=BB84_14 Depth=1
	jmp	.LBB84_38
.LBB84_38:                              # %for.inc268
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_14
.LBB84_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB84_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB84_40 Depth=1
	movl	$0, -16(%rbp)
.LBB84_42:                              # %for.cond275
                                        #   Parent Loop BB84_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB84_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB84_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB84_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_42
.LBB84_45:                              # %for.end291
                                        #   in Loop: Header=BB84_40 Depth=1
	jmp	.LBB84_46
.LBB84_46:                              # %for.inc292
                                        #   in Loop: Header=BB84_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_40
.LBB84_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB84_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB84_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_50:                              # %land.end301
                                        #   in Loop: Header=BB84_48 Depth=1
	testb	$1, %al
	jne	.LBB84_51
	jmp	.LBB84_57
.LBB84_51:                              # %for.body303
                                        #   in Loop: Header=BB84_48 Depth=1
	movl	$0, -16(%rbp)
.LBB84_52:                              # %for.cond304
                                        #   Parent Loop BB84_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB84_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB84_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_52
.LBB84_55:                              # %for.end333
                                        #   in Loop: Header=BB84_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB84_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_48
.LBB84_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB84_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB84_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_60:                              # %land.end367
                                        #   in Loop: Header=BB84_58 Depth=1
	testb	$1, %al
	jne	.LBB84_61
	jmp	.LBB84_67
.LBB84_61:                              # %for.body369
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	$0, -12(%rbp)
.LBB84_62:                              # %for.cond370
                                        #   Parent Loop BB84_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB84_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB84_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_62
.LBB84_65:                              # %for.end399
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB84_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_58
.LBB84_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB84_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB84_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB84_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB84_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB84_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB84_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB84_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB84_73
.LBB84_72:                              # %if.then437
                                        #   in Loop: Header=BB84_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_74
.LBB84_73:                              # %if.else446
                                        #   in Loop: Header=BB84_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB84_74:                              # %if.end455
                                        #   in Loop: Header=BB84_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB84_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB84_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB84_77
.LBB84_76:                              # %if.else463
                                        #   in Loop: Header=BB84_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB84_77:                              # %if.end481
                                        #   in Loop: Header=BB84_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB84_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB84_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB84_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB84_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB84_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB84_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB84_81:                              # %if.end492
                                        #   in Loop: Header=BB84_68 Depth=1
	jmp	.LBB84_82
.LBB84_82:                              # %if.end493
                                        #   in Loop: Header=BB84_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB84_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB84_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB84_84:                              # %if.end507
                                        #   in Loop: Header=BB84_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB84_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB84_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_86:                              # %if.end519
                                        #   in Loop: Header=BB84_68 Depth=1
	jmp	.LBB84_87
.LBB84_87:                              # %for.inc520
                                        #   in Loop: Header=BB84_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB84_68
.LBB84_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB84_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_93 Depth 2
                                        #     Child Loop BB84_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB84_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_91:                              # %land.end531
                                        #   in Loop: Header=BB84_89 Depth=1
	testb	$1, %al
	jne	.LBB84_92
	jmp	.LBB84_102
.LBB84_92:                              # %for.body533
                                        #   in Loop: Header=BB84_89 Depth=1
	movl	$0, -16(%rbp)
.LBB84_93:                              # %for.cond534
                                        #   Parent Loop BB84_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB84_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB84_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB84_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_93
.LBB84_96:                              # %for.end546
                                        #   in Loop: Header=BB84_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB84_97:                              # %for.cond563
                                        #   Parent Loop BB84_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB84_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB84_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB84_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_97
.LBB84_100:                             # %for.end588
                                        #   in Loop: Header=BB84_89 Depth=1
	jmp	.LBB84_101
.LBB84_101:                             # %for.inc589
                                        #   in Loop: Header=BB84_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_89
.LBB84_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB84_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_107 Depth 2
                                        #     Child Loop BB84_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB84_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_105:                             # %land.end598
                                        #   in Loop: Header=BB84_103 Depth=1
	testb	$1, %al
	jne	.LBB84_106
	jmp	.LBB84_119
.LBB84_106:                             # %for.body600
                                        #   in Loop: Header=BB84_103 Depth=1
	movl	$0, -12(%rbp)
.LBB84_107:                             # %for.cond601
                                        #   Parent Loop BB84_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB84_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB84_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB84_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_107
.LBB84_110:                             # %for.end613
                                        #   in Loop: Header=BB84_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB84_111:                             # %for.cond630
                                        #   Parent Loop BB84_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB84_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB84_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB84_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB84_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB84_115
.LBB84_114:                             # %if.else680
                                        #   in Loop: Header=BB84_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB84_115:                             # %if.end717
                                        #   in Loop: Header=BB84_111 Depth=2
	jmp	.LBB84_116
.LBB84_116:                             # %for.inc718
                                        #   in Loop: Header=BB84_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_111
.LBB84_117:                             # %for.end720
                                        #   in Loop: Header=BB84_103 Depth=1
	jmp	.LBB84_118
.LBB84_118:                             # %for.inc721
                                        #   in Loop: Header=BB84_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_103
.LBB84_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB84_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_122 Depth 2
                                        #       Child Loop BB84_124 Depth 3
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_147 Depth 4
                                        #         Child Loop BB84_151 Depth 4
                                        #       Child Loop BB84_157 Depth 3
                                        #         Child Loop BB84_161 Depth 4
                                        #         Child Loop BB84_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB84_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	$0, -20(%rbp)
.LBB84_122:                             # %for.cond728
                                        #   Parent Loop BB84_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_124 Depth 3
                                        #       Child Loop BB84_143 Depth 3
                                        #         Child Loop BB84_147 Depth 4
                                        #         Child Loop BB84_151 Depth 4
                                        #       Child Loop BB84_157 Depth 3
                                        #         Child Loop BB84_161 Depth 4
                                        #         Child Loop BB84_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB84_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB84_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -116(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -60(%rbp)
.LBB84_124:                             # %for.cond751
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB84_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB84_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB84_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB84_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB84_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB84_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB84_129
.LBB84_128:                             # %if.then762
                                        #   in Loop: Header=BB84_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_130
.LBB84_129:                             # %if.else771
                                        #   in Loop: Header=BB84_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB84_130:                             # %if.end780
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB84_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB84_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB84_133
.LBB84_132:                             # %if.else793
                                        #   in Loop: Header=BB84_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB84_133:                             # %if.end818
                                        #   in Loop: Header=BB84_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB84_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB84_135:                             # %if.end836
                                        #   in Loop: Header=BB84_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB84_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB84_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB84_139
.LBB84_138:                             # %if.else871
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB84_139:                             # %if.end889
                                        #   in Loop: Header=BB84_124 Depth=3
	jmp	.LBB84_140
.LBB84_140:                             # %if.end890
                                        #   in Loop: Header=BB84_124 Depth=3
	jmp	.LBB84_141
.LBB84_141:                             # %for.inc891
                                        #   in Loop: Header=BB84_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB84_124
.LBB84_142:                             # %for.end893
                                        #   in Loop: Header=BB84_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB84_143:                             # %for.cond896
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_147 Depth 4
                                        #         Child Loop BB84_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB84_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB84_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_145:                             # %land.end902
                                        #   in Loop: Header=BB84_143 Depth=3
	testb	$1, %al
	jne	.LBB84_146
	jmp	.LBB84_156
.LBB84_146:                             # %for.body904
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	$0, -16(%rbp)
.LBB84_147:                             # %for.cond905
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        #       Parent Loop BB84_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB84_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB84_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB84_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_147
.LBB84_150:                             # %for.end921
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB84_151:                             # %for.cond940
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        #       Parent Loop BB84_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB84_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB84_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB84_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_151
.LBB84_154:                             # %for.end973
                                        #   in Loop: Header=BB84_143 Depth=3
	jmp	.LBB84_155
.LBB84_155:                             # %for.inc974
                                        #   in Loop: Header=BB84_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_143
.LBB84_156:                             # %for.end976
                                        #   in Loop: Header=BB84_122 Depth=2
	movl	$0, -16(%rbp)
.LBB84_157:                             # %for.cond977
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_161 Depth 4
                                        #         Child Loop BB84_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB84_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB84_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB84_159:                             # %land.end983
                                        #   in Loop: Header=BB84_157 Depth=3
	testb	$1, %al
	jne	.LBB84_160
	jmp	.LBB84_170
.LBB84_160:                             # %for.body985
                                        #   in Loop: Header=BB84_157 Depth=3
	movl	$0, -12(%rbp)
.LBB84_161:                             # %for.cond986
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        #       Parent Loop BB84_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB84_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB84_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB84_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_161
.LBB84_164:                             # %for.end1002
                                        #   in Loop: Header=BB84_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB84_165:                             # %for.cond1021
                                        #   Parent Loop BB84_120 Depth=1
                                        #     Parent Loop BB84_122 Depth=2
                                        #       Parent Loop BB84_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB84_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB84_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB84_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_165
.LBB84_168:                             # %for.end1054
                                        #   in Loop: Header=BB84_157 Depth=3
	jmp	.LBB84_169
.LBB84_169:                             # %for.inc1055
                                        #   in Loop: Header=BB84_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_157
.LBB84_170:                             # %for.end1057
                                        #   in Loop: Header=BB84_122 Depth=2
	jmp	.LBB84_171
.LBB84_171:                             # %for.inc1058
                                        #   in Loop: Header=BB84_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB84_122
.LBB84_172:                             # %for.end1060
                                        #   in Loop: Header=BB84_120 Depth=1
	jmp	.LBB84_173
.LBB84_173:                             # %for.inc1061
                                        #   in Loop: Header=BB84_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB84_120
.LBB84_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB84_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB84_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB84_176 Depth=1
	movl	$0, -16(%rbp)
.LBB84_178:                             # %for.cond1071
                                        #   Parent Loop BB84_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB84_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB84_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB84_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_178
.LBB84_181:                             # %for.end1093
                                        #   in Loop: Header=BB84_176 Depth=1
	jmp	.LBB84_182
.LBB84_182:                             # %for.inc1094
                                        #   in Loop: Header=BB84_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_176
.LBB84_183:                             # %for.end1096
	jmp	.LBB84_196
.LBB84_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB84_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB84_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB84_185 Depth=1
	movl	$0, -16(%rbp)
.LBB84_187:                             # %for.cond1102
                                        #   Parent Loop BB84_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB84_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB84_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB84_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB84_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB84_191
.LBB84_190:                             # %if.else1125
                                        #   in Loop: Header=BB84_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB84_191:                             # %if.end1145
                                        #   in Loop: Header=BB84_187 Depth=2
	jmp	.LBB84_192
.LBB84_192:                             # %for.inc1146
                                        #   in Loop: Header=BB84_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_187
.LBB84_193:                             # %for.end1148
                                        #   in Loop: Header=BB84_185 Depth=1
	jmp	.LBB84_194
.LBB84_194:                             # %for.inc1149
                                        #   in Loop: Header=BB84_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_185
.LBB84_195:                             # %for.end1151
	jmp	.LBB84_196
.LBB84_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB84_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB84_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB84_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB84_198 Depth=1
	movl	$0, -16(%rbp)
.LBB84_200:                             # %for.cond1160
                                        #   Parent Loop BB84_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB84_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB84_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB84_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB84_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB84_213
.LBB84_203:                             # %if.else1186
                                        #   in Loop: Header=BB84_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB84_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB84_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB84_206
.LBB84_205:                             # %cond.false
                                        #   in Loop: Header=BB84_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB84_206:                             # %cond.end
                                        #   in Loop: Header=BB84_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB84_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB84_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB84_212
.LBB84_208:                             # %cond.false1229
                                        #   in Loop: Header=BB84_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB84_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB84_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB84_211
.LBB84_210:                             # %cond.false1250
                                        #   in Loop: Header=BB84_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB84_211:                             # %cond.end1268
                                        #   in Loop: Header=BB84_200 Depth=2
.LBB84_212:                             # %cond.end1270
                                        #   in Loop: Header=BB84_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB84_213:                             # %if.end1282
                                        #   in Loop: Header=BB84_200 Depth=2
	jmp	.LBB84_214
.LBB84_214:                             # %for.inc1283
                                        #   in Loop: Header=BB84_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_200
.LBB84_215:                             # %for.end1285
                                        #   in Loop: Header=BB84_198 Depth=1
	jmp	.LBB84_216
.LBB84_216:                             # %for.inc1286
                                        #   in Loop: Header=BB84_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_198
.LBB84_217:                             # %for.end1288
	jmp	.LBB84_218
.LBB84_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$229446329, -132(%rbp)  # imm = 0xDAD12B9
	jne	.LBB84_220
.LBB84_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_219
.Lfunc_end84:
	.size	dct_luma_16x16.75, .Lfunc_end84-dct_luma_16x16.75
	.cfi_endproc
                                        # -- End function
	.globl	dct_chroma_DC.76        # -- Begin function dct_chroma_DC.76
	.p2align	4, 0x90
	.type	dct_chroma_DC.76,@function
dct_chroma_DC.76:                       # @dct_chroma_DC.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$616685486, -44(%rbp)   # imm = 0x24C1DFAE
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -16(%rbp)
	jge	.LBB85_9
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB85_7
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$1, %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB85_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$1, %eax
	jmp	.LBB85_6
.LBB85_5:                               # %cond.false
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-20(%rbp), %eax
.LBB85_6:                               # %cond.end
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	%eax, -20(%rbp)
	movl	-36(%rbp), %edi
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rcx
	addq	%rax, %rcx
	movslq	-40(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-56(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-24(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	$-1, -24(%rbp)
.LBB85_7:                               # %if.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_1
.LBB85_9:                               # %for.end
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-20(%rbp), %ebx
	cmpl	$616685486, -44(%rbp)   # imm = 0x24C1DFAE
	jne	.LBB85_11
.LBB85_10:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_10
.Lfunc_end85:
	.size	dct_chroma_DC.76, .Lfunc_end85-dct_chroma_DC.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function dct_chroma_sp.77
.LCPI86_0:
	.quad	4616189618054758400     # double 4
.LCPI86_1:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI86_2:
	.quad	4611686018427387904     # double 2
.LCPI86_3:
	.quad	4613937818241073152     # double 3
	.text
	.globl	dct_chroma_sp.77
	.p2align	4, 0x90
	.type	dct_chroma_sp.77,@function
dct_chroma_sp.77:                       # @dct_chroma_sp.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$552, %rsp              # imm = 0x228
	.cfi_offset %rbx, -24
	vmovsd	.LCPI86_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$724974175, -268(%rbp)  # imm = 0x2B363A5F
	movl	%edi, -112(%rbp)
	movl	%esi, -204(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -184(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -288(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI86_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmulsd	%xmm0, %xmm2, %xmm0
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -264(%rbp)
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB86_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB86_6
.LBB86_2:                               # %cond.false
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB86_4
# %bb.3:                                # %cond.true18
	movl	$51, %eax
	jmp	.LBB86_5
.LBB86_4:                               # %cond.false19
	movq	-184(%rbp), %rax
	movl	12(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB86_5:                               # %cond.end
.LBB86_6:                               # %cond.end23
	movl	%eax, -148(%rbp)
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB86_8
# %bb.7:                                # %cond.true29
	xorl	%eax, %eax
	jmp	.LBB86_12
.LBB86_8:                               # %cond.false30
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB86_10
# %bb.9:                                # %cond.true36
	movl	$51, %eax
	jmp	.LBB86_11
.LBB86_10:                              # %cond.false37
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	movq	active_pps, %rcx
	addl	208(%rcx), %eax
.LBB86_11:                              # %cond.end41
.LBB86_12:                              # %cond.end43
	movl	%eax, -224(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB86_14
# %bb.13:                               # %cond.true47
	movl	-148(%rbp), %eax
	jmp	.LBB86_15
.LBB86_14:                              # %cond.false48
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB86_15:                              # %cond.end52
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -116(%rbp)
	cmpl	$0, -148(%rbp)
	jge	.LBB86_17
# %bb.16:                               # %cond.true58
	movl	-148(%rbp), %eax
	jmp	.LBB86_18
.LBB86_17:                              # %cond.false59
	movslq	-148(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB86_18:                              # %cond.end63
	subl	$0, %eax
	cltd
	movl	$6, %esi
	idivl	%esi
	movl	%edx, -96(%rbp)
	movl	-116(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -208(%rbp)
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	idivl	%esi
	movl	%eax, -216(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB86_20
# %bb.19:                               # %cond.true70
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB86_21
.LBB86_20:                              # %cond.false72
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB86_21:                              # %cond.end76
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -232(%rbp)
	cmpl	$0, -224(%rbp)
	jge	.LBB86_23
# %bb.22:                               # %cond.true82
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.LBB86_24
.LBB86_23:                              # %cond.false84
	movslq	-224(%rbp), %rax
	movzbl	QP_SCALE_CR(,%rax), %eax
.LBB86_24:                              # %cond.end88
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%edx, -108(%rbp)
	movl	-232(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -220(%rbp)
	movl	$0, -12(%rbp)
.LBB86_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_27 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB86_32
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB86_25 Depth=1
	movl	$0, -16(%rbp)
.LBB86_27:                              # %for.cond97
                                        #   Parent Loop BB86_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB86_30
# %bb.28:                               # %for.body100
                                        #   in Loop: Header=BB86_27 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.29:                               # %for.inc
                                        #   in Loop: Header=BB86_27 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_27
.LBB86_30:                              # %for.end
                                        #   in Loop: Header=BB86_25 Depth=1
	jmp	.LBB86_31
.LBB86_31:                              # %for.inc121
                                        #   in Loop: Header=BB86_25 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_25
.LBB86_32:                              # %for.end123
	movl	$0, -20(%rbp)
.LBB86_33:                              # %for.cond124
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_35 Depth 2
                                        #       Child Loop BB86_37 Depth 3
                                        #         Child Loop BB86_39 Depth 4
                                        #       Child Loop BB86_45 Depth 3
                                        #         Child Loop BB86_47 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB86_56
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB86_33 Depth=1
	movl	$0, -24(%rbp)
.LBB86_35:                              # %for.cond128
                                        #   Parent Loop BB86_33 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_37 Depth 3
                                        #         Child Loop BB86_39 Depth 4
                                        #       Child Loop BB86_45 Depth 3
                                        #         Child Loop BB86_47 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB86_54
# %bb.36:                               # %for.body131
                                        #   in Loop: Header=BB86_35 Depth=2
	movl	$0, -12(%rbp)
.LBB86_37:                              # %for.cond132
                                        #   Parent Loop BB86_33 Depth=1
                                        #     Parent Loop BB86_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_39 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_44
# %bb.38:                               # %for.body135
                                        #   in Loop: Header=BB86_37 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB86_39:                              # %for.cond137
                                        #   Parent Loop BB86_33 Depth=1
                                        #     Parent Loop BB86_35 Depth=2
                                        #       Parent Loop BB86_37 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB86_42
# %bb.40:                               # %for.body140
                                        #   in Loop: Header=BB86_39 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-56(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-92(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.41:                               # %for.inc172
                                        #   in Loop: Header=BB86_39 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_39
.LBB86_42:                              # %for.end174
                                        #   in Loop: Header=BB86_37 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc212
                                        #   in Loop: Header=BB86_37 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_37
.LBB86_44:                              # %for.end214
                                        #   in Loop: Header=BB86_35 Depth=2
	movl	$0, -16(%rbp)
.LBB86_45:                              # %for.cond215
                                        #   Parent Loop BB86_33 Depth=1
                                        #     Parent Loop BB86_35 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_47 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_52
# %bb.46:                               # %for.body218
                                        #   in Loop: Header=BB86_45 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB86_47:                              # %for.cond220
                                        #   Parent Loop BB86_33 Depth=1
                                        #     Parent Loop BB86_35 Depth=2
                                        #       Parent Loop BB86_45 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB86_50
# %bb.48:                               # %for.body223
                                        #   in Loop: Header=BB86_47 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-48(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.49:                               # %for.inc255
                                        #   in Loop: Header=BB86_47 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_47
.LBB86_50:                              # %for.end257
                                        #   in Loop: Header=BB86_45 Depth=3
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-68(%rbp), %eax
	movl	-72(%rbp), %ecx
	shll	$1, %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-48(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc296
                                        #   in Loop: Header=BB86_45 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_45
.LBB86_52:                              # %for.end298
                                        #   in Loop: Header=BB86_35 Depth=2
	jmp	.LBB86_53
.LBB86_53:                              # %for.inc299
                                        #   in Loop: Header=BB86_35 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_35
.LBB86_54:                              # %for.end301
                                        #   in Loop: Header=BB86_33 Depth=1
	jmp	.LBB86_55
.LBB86_55:                              # %for.inc302
                                        #   in Loop: Header=BB86_33 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_33
.LBB86_56:                              # %for.end304
	movl	$0, -20(%rbp)
.LBB86_57:                              # %for.cond305
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_59 Depth 2
                                        #       Child Loop BB86_61 Depth 3
                                        #         Child Loop BB86_63 Depth 4
                                        #       Child Loop BB86_69 Depth 3
                                        #         Child Loop BB86_71 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB86_80
# %bb.58:                               # %for.body308
                                        #   in Loop: Header=BB86_57 Depth=1
	movl	$0, -24(%rbp)
.LBB86_59:                              # %for.cond309
                                        #   Parent Loop BB86_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_61 Depth 3
                                        #         Child Loop BB86_63 Depth 4
                                        #       Child Loop BB86_69 Depth 3
                                        #         Child Loop BB86_71 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB86_78
# %bb.60:                               # %for.body312
                                        #   in Loop: Header=BB86_59 Depth=2
	movl	$0, -12(%rbp)
.LBB86_61:                              # %for.cond313
                                        #   Parent Loop BB86_57 Depth=1
                                        #     Parent Loop BB86_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_63 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_68
# %bb.62:                               # %for.body316
                                        #   in Loop: Header=BB86_61 Depth=3
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -16(%rbp)
.LBB86_63:                              # %for.cond318
                                        #   Parent Loop BB86_57 Depth=1
                                        #     Parent Loop BB86_59 Depth=2
                                        #       Parent Loop BB86_61 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB86_66
# %bb.64:                               # %for.body321
                                        #   in Loop: Header=BB86_63 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	movslq	%eax, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-56(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movl	-92(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-92(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.65:                               # %for.inc349
                                        #   in Loop: Header=BB86_63 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_63
.LBB86_66:                              # %for.end351
                                        #   in Loop: Header=BB86_61 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movl	-24(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-56(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.67:                               # %for.inc385
                                        #   in Loop: Header=BB86_61 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_61
.LBB86_68:                              # %for.end387
                                        #   in Loop: Header=BB86_59 Depth=2
	movl	$0, -16(%rbp)
.LBB86_69:                              # %for.cond388
                                        #   Parent Loop BB86_57 Depth=1
                                        #     Parent Loop BB86_59 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_71 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_76
# %bb.70:                               # %for.body391
                                        #   in Loop: Header=BB86_69 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -12(%rbp)
.LBB86_71:                              # %for.cond393
                                        #   Parent Loop BB86_57 Depth=1
                                        #     Parent Loop BB86_59 Depth=2
                                        #       Parent Loop BB86_69 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB86_74
# %bb.72:                               # %for.body396
                                        #   in Loop: Header=BB86_71 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -80(%rbp,%rdx,4)
	movslq	-48(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -80(%rbp,%rax,4)
# %bb.73:                               # %for.inc424
                                        #   in Loop: Header=BB86_71 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_71
.LBB86_74:                              # %for.end426
                                        #   in Loop: Header=BB86_69 Depth=3
	movl	-80(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-560(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-80(%rbp), %ecx
	subl	-76(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	shll	$1, %ecx
	addl	-72(%rbp), %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	-20(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-48(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.75:                               # %for.inc461
                                        #   in Loop: Header=BB86_69 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_69
.LBB86_76:                              # %for.end463
                                        #   in Loop: Header=BB86_59 Depth=2
	jmp	.LBB86_77
.LBB86_77:                              # %for.inc464
                                        #   in Loop: Header=BB86_59 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_59
.LBB86_78:                              # %for.end466
                                        #   in Loop: Header=BB86_57 Depth=1
	jmp	.LBB86_79
.LBB86_79:                              # %for.inc467
                                        #   in Loop: Header=BB86_57 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_57
.LBB86_80:                              # %for.end469
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -176(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	addl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	addl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	subl	13384(%rcx), %eax
	movl	%eax, -168(%rbp)
	movq	img, %rax
	movl	13112(%rax), %eax
	movq	img, %rcx
	subl	13368(%rcx), %eax
	movq	img, %rcx
	subl	13128(%rcx), %eax
	movq	img, %rcx
	addl	13384(%rcx), %eax
	movl	%eax, -164(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -256(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	addl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -252(%rbp)
	movl	-560(%rbp), %eax
	addl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	subl	-416(%rbp), %eax
	movl	%eax, -248(%rbp)
	movl	-560(%rbp), %eax
	subl	-432(%rbp), %eax
	subl	-544(%rbp), %eax
	addl	-416(%rbp), %eax
	movl	%eax, -244(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -32(%rbp)
.LBB86_81:                              # %for.cond582
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -32(%rbp)
	jge	.LBB86_120
# %bb.82:                               # %for.body585
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	cltd
	idivl	(%rsi)
	movl	%eax, -40(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-40(%rbp), %edi
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movslq	-32(%rbp), %rcx
	subl	-256(%rbp,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-216(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-208(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB86_98
# %bb.83:                               # %land.lhs.true
                                        #   in Loop: Header=BB86_81 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB86_98
# %bb.84:                               # %land.lhs.true640
                                        #   in Loop: Header=BB86_81 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB86_98
# %bb.85:                               # %if.then
                                        #   in Loop: Header=BB86_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movslq	-32(%rbp), %rax
	movl	-176(%rbp,%rax,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	subl	%eax, %ebx
	movslq	-32(%rbp), %rax
	subl	-256(%rbp,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_c2x2
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB86_90
	jp	.LBB86_90
# %bb.86:                               # %if.then685
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB86_88
# %bb.87:                               # %cond.true690
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB86_89
.LBB86_88:                              # %cond.false691
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-44(%rbp), %eax
.LBB86_89:                              # %cond.end692
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	%eax, -36(%rbp)
	jmp	.LBB86_94
.LBB86_90:                              # %if.else
                                        #   in Loop: Header=BB86_81 Depth=1
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_92
# %bb.91:                               # %if.then696
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB86_93
.LBB86_92:                              # %if.else697
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_93:                              # %if.end
                                        #   in Loop: Header=BB86_81 Depth=1
	jmp	.LBB86_94
.LBB86_94:                              # %if.end698
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB86_96
# %bb.95:                               # %cond.true701
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB86_97
.LBB86_96:                              # %cond.false702
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-100(%rbp), %eax
.LBB86_97:                              # %cond.end703
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	%eax, -104(%rbp)
	jmp	.LBB86_108
.LBB86_98:                              # %if.else705
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB86_100
# %bb.99:                               # %if.then708
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB86_107
.LBB86_100:                             # %if.else709
                                        #   in Loop: Header=BB86_81 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB86_102
# %bb.101:                              # %cond.true712
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-28(%rbp), %eax
	jmp	.LBB86_103
.LBB86_102:                             # %cond.false713
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-44(%rbp), %eax
.LBB86_103:                             # %cond.end714
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB86_105
# %bb.104:                              # %cond.true718
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-40(%rbp), %eax
	jmp	.LBB86_106
.LBB86_105:                             # %cond.false719
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-100(%rbp), %eax
.LBB86_106:                             # %cond.end720
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	%eax, -104(%rbp)
.LBB86_107:                             # %if.end722
                                        #   in Loop: Header=BB86_81 Depth=1
	jmp	.LBB86_108
.LBB86_108:                             # %if.end723
                                        #   in Loop: Header=BB86_81 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB86_113
# %bb.109:                              # %land.lhs.true726
                                        #   in Loop: Header=BB86_81 Depth=1
	movq	img, %rax
	cmpl	$4, 40(%rax)
	jge	.LBB86_113
# %bb.110:                              # %if.then730
                                        #   in Loop: Header=BB86_81 Depth=1
	cmpl	$2063, -36(%rbp)        # imm = 0x80F
	jle	.LBB86_112
# %bb.111:                              # %if.then733
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	$2063, -36(%rbp)        # imm = 0x80F
.LBB86_112:                             # %if.end734
                                        #   in Loop: Header=BB86_81 Depth=1
	jmp	.LBB86_113
.LBB86_113:                             # %if.end735
                                        #   in Loop: Header=BB86_81 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB86_118
# %bb.114:                              # %if.then738
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
                                        # kill: def $cl killed $ecx
	movl	$983040, %eax           # imm = 0xF0000
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	movl	$1, %eax
	cmpl	-204(%rbp), %eax
	jle	.LBB86_116
# %bb.115:                              # %cond.true744
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	$1, %eax
	jmp	.LBB86_117
.LBB86_116:                             # %cond.false745
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-204(%rbp), %eax
.LBB86_117:                             # %cond.end746
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	%eax, -204(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-288(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-296(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	imull	A, %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$5, %eax
	movl	%eax, -88(%rbp)
.LBB86_118:                             # %if.end763
                                        #   in Loop: Header=BB86_81 Depth=1
	movslq	-32(%rbp), %rax
	movl	-256(%rbp,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-220(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.119:                              # %for.inc786
                                        #   in Loop: Header=BB86_81 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB86_81
.LBB86_120:                             # %for.end788
	movq	-288(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13112(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13368(%rdx)
	movl	-176(%rbp), %eax
	addl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	subl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 13128(%rdx)
	movl	-176(%rbp), %eax
	subl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	addl	-164(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 13384(%rcx)
	movl	$0, -212(%rbp)
	movl	$0, -240(%rbp)
	movl	$0, -20(%rbp)
.LBB86_121:                             # %for.cond835
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_123 Depth 2
                                        #       Child Loop BB86_125 Depth 3
	cmpl	$4, -20(%rbp)
	jg	.LBB86_168
# %bb.122:                              # %for.body838
                                        #   in Loop: Header=BB86_121 Depth=1
	movl	$0, -24(%rbp)
.LBB86_123:                             # %for.cond839
                                        #   Parent Loop BB86_121 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_125 Depth 3
	cmpl	$4, -24(%rbp)
	jg	.LBB86_166
# %bb.124:                              # %for.body842
                                        #   in Loop: Header=BB86_123 Depth=2
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -236(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -280(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-112(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-236(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	movl	$-1, -60(%rbp)
	movl	$0, -84(%rbp)
	movl	$1, -32(%rbp)
.LBB86_125:                             # %for.cond860
                                        #   Parent Loop BB86_121 Depth=1
                                        #     Parent Loop BB86_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -32(%rbp)
	jge	.LBB86_164
# %bb.126:                              # %for.body863
                                        #   in Loop: Header=BB86_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB86_129
# %bb.127:                              # %lor.lhs.false
                                        #   in Loop: Header=BB86_125 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB86_130
# %bb.128:                              # %land.lhs.true865
                                        #   in Loop: Header=BB86_125 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB86_130
.LBB86_129:                             # %if.then867
                                        #   in Loop: Header=BB86_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_131
.LBB86_130:                             # %if.else876
                                        #   in Loop: Header=BB86_125 Depth=3
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-32(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB86_131:                             # %if.end885
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -88(%rbp)
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rsi
	movq	%rsi, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	cltd
	idivl	(%rsi,%rcx,4)
	movl	%eax, -40(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-40(%rbp), %edi
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %esi
	callq	sign
	subl	%eax, %ebx
	movl	%ebx, -40(%rbp)
	movl	-40(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	subl	(%rdx,%rcx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-100(%rbp), %edi
	callq	abs
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-216(%rbp), %eax
	movl	-208(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.LBB86_147
# %bb.132:                              # %land.lhs.true962
                                        #   in Loop: Header=BB86_125 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB86_147
# %bb.133:                              # %land.lhs.true965
                                        #   in Loop: Header=BB86_125 Depth=3
	cmpl	$0, -44(%rbp)
	je	.LBB86_147
# %bb.134:                              # %if.then968
                                        #   in Loop: Header=BB86_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movl	-28(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-200(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ebx
	movl	-44(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	subl	%eax, %ebx
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	subl	(%rcx,%rax,4), %ebx
	vcvtsi2sd	%ebx, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	movl	-44(%rbp), %edi
	movl	-60(%rbp), %esi
	leaq	-124(%rbp), %rdx
	leaq	-228(%rbp), %rcx
	callq	levrun_linfo_inter
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-192(%rbp), %xmm0, %xmm0
	vmovsd	-264(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-124(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vucomisd	-192(%rbp), %xmm0
	jne	.LBB86_139
	jp	.LBB86_139
# %bb.135:                              # %if.then1041
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %edi
	callq	abs
	movl	%eax, %ebx
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	%eax, %ebx
	jge	.LBB86_137
# %bb.136:                              # %cond.true1046
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB86_138
.LBB86_137:                             # %cond.false1047
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-44(%rbp), %eax
.LBB86_138:                             # %cond.end1048
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	%eax, -36(%rbp)
	jmp	.LBB86_143
.LBB86_139:                             # %if.else1050
                                        #   in Loop: Header=BB86_125 Depth=3
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-192(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_141
# %bb.140:                              # %if.then1053
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB86_142
.LBB86_141:                             # %if.else1054
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_142:                             # %if.end1055
                                        #   in Loop: Header=BB86_125 Depth=3
	jmp	.LBB86_143
.LBB86_143:                             # %if.end1056
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB86_145
# %bb.144:                              # %cond.true1059
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB86_146
.LBB86_145:                             # %cond.false1060
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-100(%rbp), %eax
.LBB86_146:                             # %cond.end1061
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	%eax, -104(%rbp)
	jmp	.LBB86_157
.LBB86_147:                             # %if.else1063
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.LBB86_149
# %bb.148:                              # %if.then1066
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -104(%rbp)
	jmp	.LBB86_156
.LBB86_149:                             # %if.else1067
                                        #   in Loop: Header=BB86_125 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB86_151
# %bb.150:                              # %cond.true1070
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-28(%rbp), %eax
	jmp	.LBB86_152
.LBB86_151:                             # %cond.false1071
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-44(%rbp), %eax
.LBB86_152:                             # %cond.end1072
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	%eax, -36(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.LBB86_154
# %bb.153:                              # %cond.true1076
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-40(%rbp), %eax
	jmp	.LBB86_155
.LBB86_154:                             # %cond.false1077
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-100(%rbp), %eax
.LBB86_155:                             # %cond.end1078
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	%eax, -104(%rbp)
.LBB86_156:                             # %if.end1080
                                        #   in Loop: Header=BB86_125 Depth=3
	jmp	.LBB86_157
.LBB86_157:                             # %if.end1081
                                        #   in Loop: Header=BB86_125 Depth=3
	cmpl	$0, -36(%rbp)
	je	.LBB86_162
# %bb.158:                              # %if.then1084
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-112(%rbp), %ecx
	shll	$2, %ecx
	addl	$16, %ecx
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	-24(%rbp), %edx
	sarl	$2, %edx
	addl	%edx, %eax
	addl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-184(%rbp), %rcx
	orq	464(%rcx), %rax
	movq	%rax, 464(%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB86_160
# %bb.159:                              # %if.then1097
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-212(%rbp), %eax
	addl	$999999, %eax           # imm = 0xF423F
	movl	%eax, -212(%rbp)
	jmp	.LBB86_161
.LBB86_160:                             # %if.else1099
                                        #   in Loop: Header=BB86_125 Depth=3
	movabsq	$COEFF_COST, %rax
	movq	input, %rcx
	movslq	2468(%rcx), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	-212(%rbp), %eax
	movl	%eax, -212(%rbp)
.LBB86_161:                             # %if.end1106
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	$2, -240(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movq	-280(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-60(%rbp), %eax
	movq	-304(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	$-1, -60(%rbp)
	movl	-36(%rbp), %edi
	movl	-104(%rbp), %esi
	callq	sign
	movslq	-96(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$A, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	sarl	$6, %eax
	movl	%eax, -88(%rbp)
.LBB86_162:                             # %if.end1128
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	cltq
	shlq	$5, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %edi
	callq	abs
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$quant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	addl	-220(%rbp), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	-88(%rbp), %esi
	movl	%eax, %edi
	callq	sign
	movslq	-108(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$dequant_coef, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-232(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.163:                              # %for.inc1162
                                        #   in Loop: Header=BB86_125 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB86_125
.LBB86_164:                             # %for.end1164
                                        #   in Loop: Header=BB86_123 Depth=2
	movq	-280(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.165:                              # %for.inc1167
                                        #   in Loop: Header=BB86_123 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_123
.LBB86_166:                             # %for.end1169
                                        #   in Loop: Header=BB86_121 Depth=1
	jmp	.LBB86_167
.LBB86_167:                             # %for.inc1170
                                        #   in Loop: Header=BB86_121 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_121
.LBB86_168:                             # %for.end1172
	cmpl	$2, -240(%rbp)
	jne	.LBB86_170
# %bb.169:                              # %if.then1175
	movl	$2, -204(%rbp)
.LBB86_170:                             # %if.end1176
	movl	$0, -20(%rbp)
.LBB86_171:                             # %for.cond1177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_173 Depth 2
                                        #       Child Loop BB86_175 Depth 3
                                        #         Child Loop BB86_177 Depth 4
                                        #         Child Loop BB86_181 Depth 4
                                        #       Child Loop BB86_187 Depth 3
                                        #         Child Loop BB86_189 Depth 4
                                        #         Child Loop BB86_193 Depth 4
	cmpl	$4, -20(%rbp)
	jg	.LBB86_220
# %bb.172:                              # %for.body1180
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	$0, -24(%rbp)
.LBB86_173:                             # %for.cond1181
                                        #   Parent Loop BB86_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_175 Depth 3
                                        #         Child Loop BB86_177 Depth 4
                                        #         Child Loop BB86_181 Depth 4
                                        #       Child Loop BB86_187 Depth 3
                                        #         Child Loop BB86_189 Depth 4
                                        #         Child Loop BB86_193 Depth 4
	cmpl	$4, -24(%rbp)
	jg	.LBB86_218
# %bb.174:                              # %for.body1184
                                        #   in Loop: Header=BB86_173 Depth=2
	movl	$0, -12(%rbp)
.LBB86_175:                             # %for.cond1185
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_177 Depth 4
                                        #         Child Loop BB86_181 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_186
# %bb.176:                              # %for.body1188
                                        #   in Loop: Header=BB86_175 Depth=3
	movl	$0, -16(%rbp)
.LBB86_177:                             # %for.cond1189
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        #       Parent Loop BB86_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_180
# %bb.178:                              # %for.body1192
                                        #   in Loop: Header=BB86_177 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.179:                              # %for.inc1202
                                        #   in Loop: Header=BB86_177 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_177
.LBB86_180:                             # %for.end1204
                                        #   in Loop: Header=BB86_175 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -16(%rbp)
.LBB86_181:                             # %for.cond1223
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        #       Parent Loop BB86_175 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB86_184
# %bb.182:                              # %for.body1226
                                        #   in Loop: Header=BB86_181 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -92(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-92(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-92(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc1252
                                        #   in Loop: Header=BB86_181 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_181
.LBB86_184:                             # %for.end1254
                                        #   in Loop: Header=BB86_175 Depth=3
	jmp	.LBB86_185
.LBB86_185:                             # %for.inc1255
                                        #   in Loop: Header=BB86_175 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_175
.LBB86_186:                             # %for.end1257
                                        #   in Loop: Header=BB86_173 Depth=2
	movl	$0, -16(%rbp)
.LBB86_187:                             # %for.cond1258
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_189 Depth 4
                                        #         Child Loop BB86_193 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_216
# %bb.188:                              # %for.body1261
                                        #   in Loop: Header=BB86_187 Depth=3
	movl	$0, -12(%rbp)
.LBB86_189:                             # %for.cond1262
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        #       Parent Loop BB86_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_192
# %bb.190:                              # %for.body1265
                                        #   in Loop: Header=BB86_189 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.191:                              # %for.inc1275
                                        #   in Loop: Header=BB86_189 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_189
.LBB86_192:                             # %for.end1277
                                        #   in Loop: Header=BB86_187 Depth=3
	movl	-80(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-80(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	sarl	$1, %eax
	subl	-68(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-76(%rbp), %eax
	movl	-68(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -132(%rbp)
	movl	$0, -12(%rbp)
.LBB86_193:                             # %for.cond1296
                                        #   Parent Loop BB86_171 Depth=1
                                        #     Parent Loop BB86_173 Depth=2
                                        #       Parent Loop BB86_187 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB86_214
# %bb.194:                              # %for.body1299
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%ecx, %ecx
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	addl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB86_196
# %bb.195:                              # %cond.true1310
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_197
.LBB86_196:                             # %cond.false1311
                                        #   in Loop: Header=BB86_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB86_197:                             # %cond.end1319
                                        #   in Loop: Header=BB86_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB86_199
# %bb.198:                              # %cond.true1323
                                        #   in Loop: Header=BB86_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB86_203
.LBB86_199:                             # %cond.false1325
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	addl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_201
# %bb.200:                              # %cond.true1335
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_202
.LBB86_201:                             # %cond.false1336
                                        #   in Loop: Header=BB86_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB86_202:                             # %cond.end1344
                                        #   in Loop: Header=BB86_193 Depth=4
.LBB86_203:                             # %cond.end1346
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%ecx, %ecx
	movq	img, %rdx
	addq	$13112, %rdx            # imm = 0x3338
	movl	-24(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movl	-20(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movl	%eax, (%rdx,%rsi,4)
	movq	img, %rax
	movl	72688(%rax), %eax
	movslq	-12(%rbp), %rdx
	movl	-144(%rbp,%rdx,4), %edx
	movslq	-52(%rbp), %rsi
	subl	-144(%rbp,%rsi,4), %edx
	addl	$32, %edx
	sarl	$6, %edx
	cmpl	%edx, %ecx
	jle	.LBB86_205
# %bb.204:                              # %cond.true1365
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_206
.LBB86_205:                             # %cond.false1366
                                        #   in Loop: Header=BB86_193 Depth=4
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
.LBB86_206:                             # %cond.end1374
                                        #   in Loop: Header=BB86_193 Depth=4
	cmpl	%ecx, %eax
	jge	.LBB86_208
# %bb.207:                              # %cond.true1378
                                        #   in Loop: Header=BB86_193 Depth=4
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB86_212
.LBB86_208:                             # %cond.false1380
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	movl	-144(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-144(%rbp,%rdx,4), %ecx
	addl	$32, %ecx
	sarl	$6, %ecx
	cmpl	%ecx, %eax
	jle	.LBB86_210
# %bb.209:                              # %cond.true1390
                                        #   in Loop: Header=BB86_193 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_211
.LBB86_210:                             # %cond.false1391
                                        #   in Loop: Header=BB86_193 Depth=4
	movslq	-12(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-52(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB86_211:                             # %cond.end1399
                                        #   in Loop: Header=BB86_193 Depth=4
.LBB86_212:                             # %cond.end1401
                                        #   in Loop: Header=BB86_193 Depth=4
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.213:                              # %for.inc1410
                                        #   in Loop: Header=BB86_193 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_193
.LBB86_214:                             # %for.end1412
                                        #   in Loop: Header=BB86_187 Depth=3
	jmp	.LBB86_215
.LBB86_215:                             # %for.inc1413
                                        #   in Loop: Header=BB86_187 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_187
.LBB86_216:                             # %for.end1415
                                        #   in Loop: Header=BB86_173 Depth=2
	jmp	.LBB86_217
.LBB86_217:                             # %for.inc1416
                                        #   in Loop: Header=BB86_173 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_173
.LBB86_218:                             # %for.end1418
                                        #   in Loop: Header=BB86_171 Depth=1
	jmp	.LBB86_219
.LBB86_219:                             # %for.inc1419
                                        #   in Loop: Header=BB86_171 Depth=1
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_171
.LBB86_220:                             # %for.end1421
	movl	$0, -12(%rbp)
.LBB86_221:                             # %for.cond1422
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_223 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB86_228
# %bb.222:                              # %for.body1425
                                        #   in Loop: Header=BB86_221 Depth=1
	movl	$0, -16(%rbp)
.LBB86_223:                             # %for.cond1426
                                        #   Parent Loop BB86_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB86_226
# %bb.224:                              # %for.body1429
                                        #   in Loop: Header=BB86_223 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-112(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.225:                              # %for.inc1444
                                        #   in Loop: Header=BB86_223 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_223
.LBB86_226:                             # %for.end1446
                                        #   in Loop: Header=BB86_221 Depth=1
	jmp	.LBB86_227
.LBB86_227:                             # %for.inc1447
                                        #   in Loop: Header=BB86_221 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_221
.LBB86_228:                             # %for.end1449
	movl	-204(%rbp), %ebx
	cmpl	$724974175, -268(%rbp)  # imm = 0x2B363A5F
	jne	.LBB86_230
.LBB86_229:
	movl	%ebx, %eax
	addq	$552, %rsp              # imm = 0x228
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_230:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_229
.Lfunc_end86:
	.size	dct_chroma_sp.77, .Lfunc_end86-dct_chroma_sp.77
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.78       # -- Begin function dct_luma_16x16.78
	.p2align	4, 0x90
	.type	dct_luma_16x16.78,@function
dct_luma_16x16.78:                      # @dct_luma_16x16.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1694355957, -132(%rbp) # imm = 0x64FDD1F5
	movl	%edi, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB87_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB87_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -12(%rbp)
.LBB87_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB87_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	$0, -16(%rbp)
.LBB87_5:                               # %for.cond16
                                        #   Parent Loop BB87_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB87_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB87_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB87_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB87_9
.LBB87_8:                               # %if.else
                                        #   in Loop: Header=BB87_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB87_9:                               # %if.end
                                        #   in Loop: Header=BB87_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB87_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_5
.LBB87_11:                              # %for.end
                                        #   in Loop: Header=BB87_3 Depth=1
	jmp	.LBB87_12
.LBB87_12:                              # %for.inc61
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_3
.LBB87_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB87_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_18 Depth 2
                                        #       Child Loop BB87_20 Depth 3
                                        #         Child Loop BB87_22 Depth 4
                                        #       Child Loop BB87_28 Depth 3
                                        #         Child Loop BB87_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB87_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB87_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_16:                              # %land.end69
                                        #   in Loop: Header=BB87_14 Depth=1
	testb	$1, %al
	jne	.LBB87_17
	jmp	.LBB87_39
.LBB87_17:                              # %for.body71
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	$0, -20(%rbp)
.LBB87_18:                              # %for.cond72
                                        #   Parent Loop BB87_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_20 Depth 3
                                        #         Child Loop BB87_22 Depth 4
                                        #       Child Loop BB87_28 Depth 3
                                        #         Child Loop BB87_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB87_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB87_18 Depth=2
	movl	$0, -12(%rbp)
.LBB87_20:                              # %for.cond76
                                        #   Parent Loop BB87_14 Depth=1
                                        #     Parent Loop BB87_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB87_20 Depth=3
	movl	$0, -16(%rbp)
.LBB87_22:                              # %for.cond80
                                        #   Parent Loop BB87_14 Depth=1
                                        #     Parent Loop BB87_18 Depth=2
                                        #       Parent Loop BB87_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB87_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB87_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-56(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB87_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_22
.LBB87_25:                              # %for.end125
                                        #   in Loop: Header=BB87_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB87_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_20
.LBB87_27:                              # %for.end169
                                        #   in Loop: Header=BB87_18 Depth=2
	movl	$0, -16(%rbp)
.LBB87_28:                              # %for.cond170
                                        #   Parent Loop BB87_14 Depth=1
                                        #     Parent Loop BB87_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB87_28 Depth=3
	movl	$0, -12(%rbp)
.LBB87_30:                              # %for.cond174
                                        #   Parent Loop BB87_14 Depth=1
                                        #     Parent Loop BB87_18 Depth=2
                                        #       Parent Loop BB87_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB87_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB87_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB87_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_30
.LBB87_33:                              # %for.end219
                                        #   in Loop: Header=BB87_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB87_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_28
.LBB87_35:                              # %for.end264
                                        #   in Loop: Header=BB87_18 Depth=2
	jmp	.LBB87_36
.LBB87_36:                              # %for.inc265
                                        #   in Loop: Header=BB87_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_18
.LBB87_37:                              # %for.end267
                                        #   in Loop: Header=BB87_14 Depth=1
	jmp	.LBB87_38
.LBB87_38:                              # %for.inc268
                                        #   in Loop: Header=BB87_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_14
.LBB87_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB87_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB87_40 Depth=1
	movl	$0, -16(%rbp)
.LBB87_42:                              # %for.cond275
                                        #   Parent Loop BB87_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB87_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB87_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_42
.LBB87_45:                              # %for.end291
                                        #   in Loop: Header=BB87_40 Depth=1
	jmp	.LBB87_46
.LBB87_46:                              # %for.inc292
                                        #   in Loop: Header=BB87_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_40
.LBB87_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB87_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB87_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB87_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_50:                              # %land.end301
                                        #   in Loop: Header=BB87_48 Depth=1
	testb	$1, %al
	jne	.LBB87_51
	jmp	.LBB87_57
.LBB87_51:                              # %for.body303
                                        #   in Loop: Header=BB87_48 Depth=1
	movl	$0, -16(%rbp)
.LBB87_52:                              # %for.cond304
                                        #   Parent Loop BB87_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB87_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-56(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-56(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB87_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_52
.LBB87_55:                              # %for.end333
                                        #   in Loop: Header=BB87_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB87_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_48
.LBB87_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB87_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB87_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB87_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_60:                              # %land.end367
                                        #   in Loop: Header=BB87_58 Depth=1
	testb	$1, %al
	jne	.LBB87_61
	jmp	.LBB87_67
.LBB87_61:                              # %for.body369
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	$0, -12(%rbp)
.LBB87_62:                              # %for.cond370
                                        #   Parent Loop BB87_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB87_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB87_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_62
.LBB87_65:                              # %for.end399
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB87_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_58
.LBB87_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -60(%rbp)
.LBB87_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -60(%rbp)
	jge	.LBB87_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB87_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB87_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB87_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB87_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB87_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB87_73
.LBB87_72:                              # %if.then437
                                        #   in Loop: Header=BB87_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_74
.LBB87_73:                              # %if.else446
                                        #   in Loop: Header=BB87_68 Depth=1
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB87_74:                              # %if.end455
                                        #   in Loop: Header=BB87_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB87_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB87_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB87_77
.LBB87_76:                              # %if.else463
                                        #   in Loop: Header=BB87_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-120(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB87_77:                              # %if.end481
                                        #   in Loop: Header=BB87_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB87_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB87_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB87_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB87_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB87_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB87_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB87_81:                              # %if.end492
                                        #   in Loop: Header=BB87_68 Depth=1
	jmp	.LBB87_82
.LBB87_82:                              # %if.end493
                                        #   in Loop: Header=BB87_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB87_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB87_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB87_84:                              # %if.end507
                                        #   in Loop: Header=BB87_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB87_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB87_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB87_86:                              # %if.end519
                                        #   in Loop: Header=BB87_68 Depth=1
	jmp	.LBB87_87
.LBB87_87:                              # %for.inc520
                                        #   in Loop: Header=BB87_68 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_68
.LBB87_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB87_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_93 Depth 2
                                        #     Child Loop BB87_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB87_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB87_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_91:                              # %land.end531
                                        #   in Loop: Header=BB87_89 Depth=1
	testb	$1, %al
	jne	.LBB87_92
	jmp	.LBB87_102
.LBB87_92:                              # %for.body533
                                        #   in Loop: Header=BB87_89 Depth=1
	movl	$0, -16(%rbp)
.LBB87_93:                              # %for.cond534
                                        #   Parent Loop BB87_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB87_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB87_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_93
.LBB87_96:                              # %for.end546
                                        #   in Loop: Header=BB87_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB87_97:                              # %for.cond563
                                        #   Parent Loop BB87_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB87_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB87_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-56(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-56(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB87_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_97
.LBB87_100:                             # %for.end588
                                        #   in Loop: Header=BB87_89 Depth=1
	jmp	.LBB87_101
.LBB87_101:                             # %for.inc589
                                        #   in Loop: Header=BB87_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_89
.LBB87_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB87_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_107 Depth 2
                                        #     Child Loop BB87_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB87_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB87_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_105:                             # %land.end598
                                        #   in Loop: Header=BB87_103 Depth=1
	testb	$1, %al
	jne	.LBB87_106
	jmp	.LBB87_119
.LBB87_106:                             # %for.body600
                                        #   in Loop: Header=BB87_103 Depth=1
	movl	$0, -12(%rbp)
.LBB87_107:                             # %for.cond601
                                        #   Parent Loop BB87_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB87_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB87_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_107
.LBB87_110:                             # %for.end613
                                        #   in Loop: Header=BB87_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB87_111:                             # %for.cond630
                                        #   Parent Loop BB87_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB87_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB87_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB87_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB87_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB87_115
.LBB87_114:                             # %if.else680
                                        #   in Loop: Header=BB87_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB87_115:                             # %if.end717
                                        #   in Loop: Header=BB87_111 Depth=2
	jmp	.LBB87_116
.LBB87_116:                             # %for.inc718
                                        #   in Loop: Header=BB87_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_111
.LBB87_117:                             # %for.end720
                                        #   in Loop: Header=BB87_103 Depth=1
	jmp	.LBB87_118
.LBB87_118:                             # %for.inc721
                                        #   in Loop: Header=BB87_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_103
.LBB87_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB87_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_122 Depth 2
                                        #       Child Loop BB87_124 Depth 3
                                        #       Child Loop BB87_143 Depth 3
                                        #         Child Loop BB87_147 Depth 4
                                        #         Child Loop BB87_151 Depth 4
                                        #       Child Loop BB87_157 Depth 3
                                        #         Child Loop BB87_161 Depth 4
                                        #         Child Loop BB87_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB87_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB87_120 Depth=1
	movl	$0, -20(%rbp)
.LBB87_122:                             # %for.cond728
                                        #   Parent Loop BB87_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_124 Depth 3
                                        #       Child Loop BB87_143 Depth 3
                                        #         Child Loop BB87_147 Depth 4
                                        #         Child Loop BB87_151 Depth 4
                                        #       Child Loop BB87_157 Depth 3
                                        #         Child Loop BB87_161 Depth 4
                                        #         Child Loop BB87_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB87_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB87_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-112(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -60(%rbp)
.LBB87_124:                             # %for.cond751
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -60(%rbp)
	jge	.LBB87_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB87_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB87_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB87_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB87_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB87_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB87_129
.LBB87_128:                             # %if.then762
                                        #   in Loop: Header=BB87_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_130
.LBB87_129:                             # %if.else771
                                        #   in Loop: Header=BB87_124 Depth=3
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-60(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB87_130:                             # %if.end780
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB87_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB87_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB87_133
.LBB87_132:                             # %if.else793
                                        #   in Loop: Header=BB87_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB87_133:                             # %if.end818
                                        #   in Loop: Header=BB87_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB87_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	$15, -108(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB87_135:                             # %if.end836
                                        #   in Loop: Header=BB87_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB87_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB87_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB87_139
.LBB87_138:                             # %if.else871
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB87_139:                             # %if.end889
                                        #   in Loop: Header=BB87_124 Depth=3
	jmp	.LBB87_140
.LBB87_140:                             # %if.end890
                                        #   in Loop: Header=BB87_124 Depth=3
	jmp	.LBB87_141
.LBB87_141:                             # %for.inc891
                                        #   in Loop: Header=BB87_124 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_124
.LBB87_142:                             # %for.end893
                                        #   in Loop: Header=BB87_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB87_143:                             # %for.cond896
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_147 Depth 4
                                        #         Child Loop BB87_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB87_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB87_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_145:                             # %land.end902
                                        #   in Loop: Header=BB87_143 Depth=3
	testb	$1, %al
	jne	.LBB87_146
	jmp	.LBB87_156
.LBB87_146:                             # %for.body904
                                        #   in Loop: Header=BB87_143 Depth=3
	movl	$0, -16(%rbp)
.LBB87_147:                             # %for.cond905
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        #       Parent Loop BB87_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB87_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB87_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_147
.LBB87_150:                             # %for.end921
                                        #   in Loop: Header=BB87_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB87_151:                             # %for.cond940
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        #       Parent Loop BB87_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB87_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB87_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-56(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-56(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-56(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB87_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_151
.LBB87_154:                             # %for.end973
                                        #   in Loop: Header=BB87_143 Depth=3
	jmp	.LBB87_155
.LBB87_155:                             # %for.inc974
                                        #   in Loop: Header=BB87_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_143
.LBB87_156:                             # %for.end976
                                        #   in Loop: Header=BB87_122 Depth=2
	movl	$0, -16(%rbp)
.LBB87_157:                             # %for.cond977
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_161 Depth 4
                                        #         Child Loop BB87_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB87_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB87_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB87_159:                             # %land.end983
                                        #   in Loop: Header=BB87_157 Depth=3
	testb	$1, %al
	jne	.LBB87_160
	jmp	.LBB87_170
.LBB87_160:                             # %for.body985
                                        #   in Loop: Header=BB87_157 Depth=3
	movl	$0, -12(%rbp)
.LBB87_161:                             # %for.cond986
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        #       Parent Loop BB87_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB87_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB87_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_161
.LBB87_164:                             # %for.end1002
                                        #   in Loop: Header=BB87_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB87_165:                             # %for.cond1021
                                        #   Parent Loop BB87_120 Depth=1
                                        #     Parent Loop BB87_122 Depth=2
                                        #       Parent Loop BB87_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB87_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB87_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB87_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_165
.LBB87_168:                             # %for.end1054
                                        #   in Loop: Header=BB87_157 Depth=3
	jmp	.LBB87_169
.LBB87_169:                             # %for.inc1055
                                        #   in Loop: Header=BB87_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_157
.LBB87_170:                             # %for.end1057
                                        #   in Loop: Header=BB87_122 Depth=2
	jmp	.LBB87_171
.LBB87_171:                             # %for.inc1058
                                        #   in Loop: Header=BB87_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_122
.LBB87_172:                             # %for.end1060
                                        #   in Loop: Header=BB87_120 Depth=1
	jmp	.LBB87_173
.LBB87_173:                             # %for.inc1061
                                        #   in Loop: Header=BB87_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_120
.LBB87_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB87_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB87_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB87_176 Depth=1
	movl	$0, -16(%rbp)
.LBB87_178:                             # %for.cond1071
                                        #   Parent Loop BB87_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB87_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB87_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB87_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_178
.LBB87_181:                             # %for.end1093
                                        #   in Loop: Header=BB87_176 Depth=1
	jmp	.LBB87_182
.LBB87_182:                             # %for.inc1094
                                        #   in Loop: Header=BB87_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_176
.LBB87_183:                             # %for.end1096
	jmp	.LBB87_196
.LBB87_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB87_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB87_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB87_185 Depth=1
	movl	$0, -16(%rbp)
.LBB87_187:                             # %for.cond1102
                                        #   Parent Loop BB87_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB87_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB87_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB87_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB87_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB87_191
.LBB87_190:                             # %if.else1125
                                        #   in Loop: Header=BB87_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB87_191:                             # %if.end1145
                                        #   in Loop: Header=BB87_187 Depth=2
	jmp	.LBB87_192
.LBB87_192:                             # %for.inc1146
                                        #   in Loop: Header=BB87_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_187
.LBB87_193:                             # %for.end1148
                                        #   in Loop: Header=BB87_185 Depth=1
	jmp	.LBB87_194
.LBB87_194:                             # %for.inc1149
                                        #   in Loop: Header=BB87_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_185
.LBB87_195:                             # %for.end1151
	jmp	.LBB87_196
.LBB87_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB87_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB87_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB87_198 Depth=1
	movl	$0, -16(%rbp)
.LBB87_200:                             # %for.cond1160
                                        #   Parent Loop BB87_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB87_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB87_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB87_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB87_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB87_213
.LBB87_203:                             # %if.else1186
                                        #   in Loop: Header=BB87_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB87_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB87_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB87_206
.LBB87_205:                             # %cond.false
                                        #   in Loop: Header=BB87_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB87_206:                             # %cond.end
                                        #   in Loop: Header=BB87_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB87_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB87_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB87_212
.LBB87_208:                             # %cond.false1229
                                        #   in Loop: Header=BB87_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB87_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB87_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB87_211
.LBB87_210:                             # %cond.false1250
                                        #   in Loop: Header=BB87_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB87_211:                             # %cond.end1268
                                        #   in Loop: Header=BB87_200 Depth=2
.LBB87_212:                             # %cond.end1270
                                        #   in Loop: Header=BB87_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB87_213:                             # %if.end1282
                                        #   in Loop: Header=BB87_200 Depth=2
	jmp	.LBB87_214
.LBB87_214:                             # %for.inc1283
                                        #   in Loop: Header=BB87_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_200
.LBB87_215:                             # %for.end1285
                                        #   in Loop: Header=BB87_198 Depth=1
	jmp	.LBB87_216
.LBB87_216:                             # %for.inc1286
                                        #   in Loop: Header=BB87_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_198
.LBB87_217:                             # %for.end1288
	jmp	.LBB87_218
.LBB87_218:                             # %if.end1289
	movl	-108(%rbp), %ebx
	cmpl	$1694355957, -132(%rbp) # imm = 0x64FDD1F5
	jne	.LBB87_220
.LBB87_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_219
.Lfunc_end87:
	.size	dct_luma_16x16.78, .Lfunc_end87-dct_luma_16x16.78
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.79       # -- Begin function dct_luma_16x16.79
	.p2align	4, 0x90
	.type	dct_luma_16x16.79,@function
dct_luma_16x16.79:                      # @dct_luma_16x16.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1978204078, -132(%rbp) # imm = 0x75E8FFAE
	movl	%edi, -104(%rbp)
	movl	$0, -120(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -240(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB88_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB88_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-68(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB88_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB88_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	$0, -16(%rbp)
.LBB88_5:                               # %for.cond16
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB88_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB88_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB88_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB88_9
.LBB88_8:                               # %if.else
                                        #   in Loop: Header=BB88_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB88_9:                               # %if.end
                                        #   in Loop: Header=BB88_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB88_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_5
.LBB88_11:                              # %for.end
                                        #   in Loop: Header=BB88_3 Depth=1
	jmp	.LBB88_12
.LBB88_12:                              # %for.inc61
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_3
.LBB88_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB88_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_18 Depth 2
                                        #       Child Loop BB88_20 Depth 3
                                        #         Child Loop BB88_22 Depth 4
                                        #       Child Loop BB88_28 Depth 3
                                        #         Child Loop BB88_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB88_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB88_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_16:                              # %land.end69
                                        #   in Loop: Header=BB88_14 Depth=1
	testb	$1, %al
	jne	.LBB88_17
	jmp	.LBB88_39
.LBB88_17:                              # %for.body71
                                        #   in Loop: Header=BB88_14 Depth=1
	movl	$0, -20(%rbp)
.LBB88_18:                              # %for.cond72
                                        #   Parent Loop BB88_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_20 Depth 3
                                        #         Child Loop BB88_22 Depth 4
                                        #       Child Loop BB88_28 Depth 3
                                        #         Child Loop BB88_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB88_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB88_18 Depth=2
	movl	$0, -12(%rbp)
.LBB88_20:                              # %for.cond76
                                        #   Parent Loop BB88_14 Depth=1
                                        #     Parent Loop BB88_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB88_20 Depth=3
	movl	$0, -16(%rbp)
.LBB88_22:                              # %for.cond80
                                        #   Parent Loop BB88_14 Depth=1
                                        #     Parent Loop BB88_18 Depth=2
                                        #       Parent Loop BB88_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB88_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB88_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB88_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_22
.LBB88_25:                              # %for.end125
                                        #   in Loop: Header=BB88_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB88_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_20
.LBB88_27:                              # %for.end169
                                        #   in Loop: Header=BB88_18 Depth=2
	movl	$0, -16(%rbp)
.LBB88_28:                              # %for.cond170
                                        #   Parent Loop BB88_14 Depth=1
                                        #     Parent Loop BB88_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	$0, -12(%rbp)
.LBB88_30:                              # %for.cond174
                                        #   Parent Loop BB88_14 Depth=1
                                        #     Parent Loop BB88_18 Depth=2
                                        #       Parent Loop BB88_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB88_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB88_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_30
.LBB88_33:                              # %for.end219
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_28
.LBB88_35:                              # %for.end264
                                        #   in Loop: Header=BB88_18 Depth=2
	jmp	.LBB88_36
.LBB88_36:                              # %for.inc265
                                        #   in Loop: Header=BB88_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_18
.LBB88_37:                              # %for.end267
                                        #   in Loop: Header=BB88_14 Depth=1
	jmp	.LBB88_38
.LBB88_38:                              # %for.inc268
                                        #   in Loop: Header=BB88_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_14
.LBB88_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB88_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	$0, -16(%rbp)
.LBB88_42:                              # %for.cond275
                                        #   Parent Loop BB88_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB88_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB88_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_42
.LBB88_45:                              # %for.end291
                                        #   in Loop: Header=BB88_40 Depth=1
	jmp	.LBB88_46
.LBB88_46:                              # %for.inc292
                                        #   in Loop: Header=BB88_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_40
.LBB88_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB88_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB88_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB88_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_50:                              # %land.end301
                                        #   in Loop: Header=BB88_48 Depth=1
	testb	$1, %al
	jne	.LBB88_51
	jmp	.LBB88_57
.LBB88_51:                              # %for.body303
                                        #   in Loop: Header=BB88_48 Depth=1
	movl	$0, -16(%rbp)
.LBB88_52:                              # %for.cond304
                                        #   Parent Loop BB88_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB88_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB88_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB88_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_52
.LBB88_55:                              # %for.end333
                                        #   in Loop: Header=BB88_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB88_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_48
.LBB88_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB88_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB88_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB88_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_60:                              # %land.end367
                                        #   in Loop: Header=BB88_58 Depth=1
	testb	$1, %al
	jne	.LBB88_61
	jmp	.LBB88_67
.LBB88_61:                              # %for.body369
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	$0, -12(%rbp)
.LBB88_62:                              # %for.cond370
                                        #   Parent Loop BB88_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB88_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB88_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB88_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_62
.LBB88_65:                              # %for.end399
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB88_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_58
.LBB88_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB88_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB88_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB88_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB88_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB88_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB88_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB88_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB88_73
.LBB88_72:                              # %if.then437
                                        #   in Loop: Header=BB88_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_74
.LBB88_73:                              # %if.else446
                                        #   in Loop: Header=BB88_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB88_74:                              # %if.end455
                                        #   in Loop: Header=BB88_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB88_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB88_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB88_77
.LBB88_76:                              # %if.else463
                                        #   in Loop: Header=BB88_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-112(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB88_77:                              # %if.end481
                                        #   in Loop: Header=BB88_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB88_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB88_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB88_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB88_68 Depth=1
	cmpl	$2063, -64(%rbp)        # imm = 0x80F
	jle	.LBB88_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB88_68 Depth=1
	movl	$2063, -64(%rbp)        # imm = 0x80F
.LBB88_81:                              # %if.end492
                                        #   in Loop: Header=BB88_68 Depth=1
	jmp	.LBB88_82
.LBB88_82:                              # %if.end493
                                        #   in Loop: Header=BB88_68 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB88_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB88_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB88_84:                              # %if.end507
                                        #   in Loop: Header=BB88_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB88_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB88_68 Depth=1
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB88_86:                              # %if.end519
                                        #   in Loop: Header=BB88_68 Depth=1
	jmp	.LBB88_87
.LBB88_87:                              # %for.inc520
                                        #   in Loop: Header=BB88_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB88_68
.LBB88_88:                              # %for.end522
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB88_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_93 Depth 2
                                        #     Child Loop BB88_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB88_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB88_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_91:                              # %land.end531
                                        #   in Loop: Header=BB88_89 Depth=1
	testb	$1, %al
	jne	.LBB88_92
	jmp	.LBB88_102
.LBB88_92:                              # %for.body533
                                        #   in Loop: Header=BB88_89 Depth=1
	movl	$0, -16(%rbp)
.LBB88_93:                              # %for.cond534
                                        #   Parent Loop BB88_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB88_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB88_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB88_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_93
.LBB88_96:                              # %for.end546
                                        #   in Loop: Header=BB88_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB88_97:                              # %for.cond563
                                        #   Parent Loop BB88_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB88_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB88_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB88_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_97
.LBB88_100:                             # %for.end588
                                        #   in Loop: Header=BB88_89 Depth=1
	jmp	.LBB88_101
.LBB88_101:                             # %for.inc589
                                        #   in Loop: Header=BB88_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_89
.LBB88_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB88_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_107 Depth 2
                                        #     Child Loop BB88_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB88_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB88_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_105:                             # %land.end598
                                        #   in Loop: Header=BB88_103 Depth=1
	testb	$1, %al
	jne	.LBB88_106
	jmp	.LBB88_119
.LBB88_106:                             # %for.body600
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	$0, -12(%rbp)
.LBB88_107:                             # %for.cond601
                                        #   Parent Loop BB88_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB88_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB88_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB88_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_107
.LBB88_110:                             # %for.end613
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB88_111:                             # %for.cond630
                                        #   Parent Loop BB88_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB88_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB88_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -68(%rbp)
	jge	.LBB88_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB88_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-68(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-68(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB88_115
.LBB88_114:                             # %if.else680
                                        #   in Loop: Header=BB88_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-68(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB88_115:                             # %if.end717
                                        #   in Loop: Header=BB88_111 Depth=2
	jmp	.LBB88_116
.LBB88_116:                             # %for.inc718
                                        #   in Loop: Header=BB88_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_111
.LBB88_117:                             # %for.end720
                                        #   in Loop: Header=BB88_103 Depth=1
	jmp	.LBB88_118
.LBB88_118:                             # %for.inc721
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_103
.LBB88_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB88_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_122 Depth 2
                                        #       Child Loop BB88_124 Depth 3
                                        #       Child Loop BB88_143 Depth 3
                                        #         Child Loop BB88_147 Depth 4
                                        #         Child Loop BB88_151 Depth 4
                                        #       Child Loop BB88_157 Depth 3
                                        #         Child Loop BB88_161 Depth 4
                                        #         Child Loop BB88_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB88_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	$0, -20(%rbp)
.LBB88_122:                             # %for.cond728
                                        #   Parent Loop BB88_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_124 Depth 3
                                        #       Child Loop BB88_143 Depth 3
                                        #         Child Loop BB88_147 Depth 4
                                        #         Child Loop BB88_151 Depth 4
                                        #       Child Loop BB88_157 Depth 3
                                        #         Child Loop BB88_161 Depth 4
                                        #         Child Loop BB88_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB88_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB88_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -108(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -232(%rbp)
	movl	$1, -56(%rbp)
.LBB88_124:                             # %for.cond751
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB88_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB88_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB88_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB88_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB88_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB88_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB88_129
.LBB88_128:                             # %if.then762
                                        #   in Loop: Header=BB88_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_130
.LBB88_129:                             # %if.else771
                                        #   in Loop: Header=BB88_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB88_130:                             # %if.end780
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB88_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB88_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -64(%rbp)
	jmp	.LBB88_133
.LBB88_132:                             # %if.else793
                                        #   in Loop: Header=BB88_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-68(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -64(%rbp)
.LBB88_133:                             # %if.end818
                                        #   in Loop: Header=BB88_124 Depth=3
	cmpl	$0, -64(%rbp)
	je	.LBB88_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	$15, -120(%rbp)
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB88_135:                             # %if.end836
                                        #   in Loop: Header=BB88_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB88_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	-64(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -64(%rbp)
	cmpl	$4, -68(%rbp)
	jge	.LBB88_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-68(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB88_139
.LBB88_138:                             # %if.else871
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	-64(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-68(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB88_139:                             # %if.end889
                                        #   in Loop: Header=BB88_124 Depth=3
	jmp	.LBB88_140
.LBB88_140:                             # %if.end890
                                        #   in Loop: Header=BB88_124 Depth=3
	jmp	.LBB88_141
.LBB88_141:                             # %for.inc891
                                        #   in Loop: Header=BB88_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB88_124
.LBB88_142:                             # %for.end893
                                        #   in Loop: Header=BB88_122 Depth=2
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB88_143:                             # %for.cond896
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_147 Depth 4
                                        #         Child Loop BB88_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB88_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB88_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_145:                             # %land.end902
                                        #   in Loop: Header=BB88_143 Depth=3
	testb	$1, %al
	jne	.LBB88_146
	jmp	.LBB88_156
.LBB88_146:                             # %for.body904
                                        #   in Loop: Header=BB88_143 Depth=3
	movl	$0, -16(%rbp)
.LBB88_147:                             # %for.cond905
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        #       Parent Loop BB88_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB88_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB88_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB88_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_147
.LBB88_150:                             # %for.end921
                                        #   in Loop: Header=BB88_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB88_151:                             # %for.cond940
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        #       Parent Loop BB88_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB88_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB88_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB88_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_151
.LBB88_154:                             # %for.end973
                                        #   in Loop: Header=BB88_143 Depth=3
	jmp	.LBB88_155
.LBB88_155:                             # %for.inc974
                                        #   in Loop: Header=BB88_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_143
.LBB88_156:                             # %for.end976
                                        #   in Loop: Header=BB88_122 Depth=2
	movl	$0, -16(%rbp)
.LBB88_157:                             # %for.cond977
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_161 Depth 4
                                        #         Child Loop BB88_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB88_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB88_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB88_159:                             # %land.end983
                                        #   in Loop: Header=BB88_157 Depth=3
	testb	$1, %al
	jne	.LBB88_160
	jmp	.LBB88_170
.LBB88_160:                             # %for.body985
                                        #   in Loop: Header=BB88_157 Depth=3
	movl	$0, -12(%rbp)
.LBB88_161:                             # %for.cond986
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        #       Parent Loop BB88_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB88_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB88_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB88_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_161
.LBB88_164:                             # %for.end1002
                                        #   in Loop: Header=BB88_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB88_165:                             # %for.cond1021
                                        #   Parent Loop BB88_120 Depth=1
                                        #     Parent Loop BB88_122 Depth=2
                                        #       Parent Loop BB88_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB88_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB88_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_165
.LBB88_168:                             # %for.end1054
                                        #   in Loop: Header=BB88_157 Depth=3
	jmp	.LBB88_169
.LBB88_169:                             # %for.inc1055
                                        #   in Loop: Header=BB88_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_157
.LBB88_170:                             # %for.end1057
                                        #   in Loop: Header=BB88_122 Depth=2
	jmp	.LBB88_171
.LBB88_171:                             # %for.inc1058
                                        #   in Loop: Header=BB88_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_122
.LBB88_172:                             # %for.end1060
                                        #   in Loop: Header=BB88_120 Depth=1
	jmp	.LBB88_173
.LBB88_173:                             # %for.inc1061
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_120
.LBB88_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB88_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB88_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB88_176 Depth=1
	movl	$0, -16(%rbp)
.LBB88_178:                             # %for.cond1071
                                        #   Parent Loop BB88_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB88_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB88_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB88_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_178
.LBB88_181:                             # %for.end1093
                                        #   in Loop: Header=BB88_176 Depth=1
	jmp	.LBB88_182
.LBB88_182:                             # %for.inc1094
                                        #   in Loop: Header=BB88_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_176
.LBB88_183:                             # %for.end1096
	jmp	.LBB88_196
.LBB88_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB88_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB88_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB88_185 Depth=1
	movl	$0, -16(%rbp)
.LBB88_187:                             # %for.cond1102
                                        #   Parent Loop BB88_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB88_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB88_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB88_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB88_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB88_191
.LBB88_190:                             # %if.else1125
                                        #   in Loop: Header=BB88_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB88_191:                             # %if.end1145
                                        #   in Loop: Header=BB88_187 Depth=2
	jmp	.LBB88_192
.LBB88_192:                             # %for.inc1146
                                        #   in Loop: Header=BB88_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_187
.LBB88_193:                             # %for.end1148
                                        #   in Loop: Header=BB88_185 Depth=1
	jmp	.LBB88_194
.LBB88_194:                             # %for.inc1149
                                        #   in Loop: Header=BB88_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_185
.LBB88_195:                             # %for.end1151
	jmp	.LBB88_196
.LBB88_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB88_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB88_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB88_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB88_198 Depth=1
	movl	$0, -16(%rbp)
.LBB88_200:                             # %for.cond1160
                                        #   Parent Loop BB88_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB88_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB88_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB88_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB88_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB88_213
.LBB88_203:                             # %if.else1186
                                        #   in Loop: Header=BB88_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB88_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB88_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB88_206
.LBB88_205:                             # %cond.false
                                        #   in Loop: Header=BB88_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB88_206:                             # %cond.end
                                        #   in Loop: Header=BB88_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB88_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB88_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB88_212
.LBB88_208:                             # %cond.false1229
                                        #   in Loop: Header=BB88_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB88_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB88_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB88_211
.LBB88_210:                             # %cond.false1250
                                        #   in Loop: Header=BB88_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB88_211:                             # %cond.end1268
                                        #   in Loop: Header=BB88_200 Depth=2
.LBB88_212:                             # %cond.end1270
                                        #   in Loop: Header=BB88_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB88_213:                             # %if.end1282
                                        #   in Loop: Header=BB88_200 Depth=2
	jmp	.LBB88_214
.LBB88_214:                             # %for.inc1283
                                        #   in Loop: Header=BB88_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_200
.LBB88_215:                             # %for.end1285
                                        #   in Loop: Header=BB88_198 Depth=1
	jmp	.LBB88_216
.LBB88_216:                             # %for.inc1286
                                        #   in Loop: Header=BB88_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_198
.LBB88_217:                             # %for.end1288
	jmp	.LBB88_218
.LBB88_218:                             # %if.end1289
	movl	-120(%rbp), %ebx
	cmpl	$1978204078, -132(%rbp) # imm = 0x75E8FFAE
	jne	.LBB88_220
.LBB88_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_219
.Lfunc_end88:
	.size	dct_luma_16x16.79, .Lfunc_end88-dct_luma_16x16.79
	.cfi_endproc
                                        # -- End function
	.globl	dct_luma_16x16.80       # -- Begin function dct_luma_16x16.80
	.p2align	4, 0x90
	.type	dct_luma_16x16.80,@function
dct_luma_16x16.80:                      # @dct_luma_16x16.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2280, %rsp             # imm = 0x8E8
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$450213211, -132(%rbp)  # imm = 0x1AD5B55B
	movl	%edi, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -144(%rbp)
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -232(%rbp)
	movq	-128(%rbp), %rcx
	movl	12(%rcx), %ecx
	movq	img, %rdx
	addl	72668(%rdx), %ecx
	cmpl	$0, %ecx
	jne	.LBB89_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	sete	%al
.LBB89_2:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	subl	$0, %eax
	cltd
	movl	$6, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movq	-128(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rdx
	addl	72668(%rdx), %eax
	subl	$0, %eax
	cltd
	idivl	%ecx
	movl	%edx, -100(%rbp)
	movl	-64(%rbp), %eax
	addl	$15, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -12(%rbp)
.LBB89_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_5 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB89_13
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	$0, -16(%rbp)
.LBB89_5:                               # %for.cond16
                                        #   Parent Loop BB89_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB89_11
# %bb.6:                                # %for.body18
                                        #   in Loop: Header=BB89_5 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB89_5 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB89_9
.LBB89_8:                               # %if.else
                                        #   in Loop: Header=BB89_5 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB89_9:                               # %if.end
                                        #   in Loop: Header=BB89_5 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB89_5 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_5
.LBB89_11:                              # %for.end
                                        #   in Loop: Header=BB89_3 Depth=1
	jmp	.LBB89_12
.LBB89_12:                              # %for.inc61
                                        #   in Loop: Header=BB89_3 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_3
.LBB89_13:                              # %for.end63
	movl	$0, -24(%rbp)
.LBB89_14:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_18 Depth 2
                                        #       Child Loop BB89_20 Depth 3
                                        #         Child Loop BB89_22 Depth 4
                                        #       Child Loop BB89_28 Depth 3
                                        #         Child Loop BB89_30 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -24(%rbp)
	jge	.LBB89_16
# %bb.15:                               # %land.rhs67
                                        #   in Loop: Header=BB89_14 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_16:                              # %land.end69
                                        #   in Loop: Header=BB89_14 Depth=1
	testb	$1, %al
	jne	.LBB89_17
	jmp	.LBB89_39
.LBB89_17:                              # %for.body71
                                        #   in Loop: Header=BB89_14 Depth=1
	movl	$0, -20(%rbp)
.LBB89_18:                              # %for.cond72
                                        #   Parent Loop BB89_14 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_20 Depth 3
                                        #         Child Loop BB89_22 Depth 4
                                        #       Child Loop BB89_28 Depth 3
                                        #         Child Loop BB89_30 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB89_37
# %bb.19:                               # %for.body75
                                        #   in Loop: Header=BB89_18 Depth=2
	movl	$0, -12(%rbp)
.LBB89_20:                              # %for.cond76
                                        #   Parent Loop BB89_14 Depth=1
                                        #     Parent Loop BB89_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_22 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB89_27
# %bb.21:                               # %for.body79
                                        #   in Loop: Header=BB89_20 Depth=3
	movl	$0, -16(%rbp)
.LBB89_22:                              # %for.cond80
                                        #   Parent Loop BB89_14 Depth=1
                                        #     Parent Loop BB89_18 Depth=2
                                        #       Parent Loop BB89_20 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB89_25
# %bb.23:                               # %for.body83
                                        #   in Loop: Header=BB89_22 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-60(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.24:                               # %for.inc123
                                        #   in Loop: Header=BB89_22 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_22
.LBB89_25:                              # %for.end125
                                        #   in Loop: Header=BB89_20 Depth=3
	leaq	-1264(%rbp), %rax
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.26:                               # %for.inc167
                                        #   in Loop: Header=BB89_20 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_20
.LBB89_27:                              # %for.end169
                                        #   in Loop: Header=BB89_18 Depth=2
	movl	$0, -16(%rbp)
.LBB89_28:                              # %for.cond170
                                        #   Parent Loop BB89_14 Depth=1
                                        #     Parent Loop BB89_18 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_30 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB89_35
# %bb.29:                               # %for.body173
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	$0, -12(%rbp)
.LBB89_30:                              # %for.cond174
                                        #   Parent Loop BB89_14 Depth=1
                                        #     Parent Loop BB89_18 Depth=2
                                        #       Parent Loop BB89_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB89_33
# %bb.31:                               # %for.body177
                                        #   in Loop: Header=BB89_30 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movslq	-12(%rbp), %rdx
	movl	%ecx, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	subl	(%rax,%rdx,4), %ecx
	movslq	-52(%rbp), %rax
	movl	%ecx, -48(%rbp,%rax,4)
# %bb.32:                               # %for.inc217
                                        #   in Loop: Header=BB89_30 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_30
.LBB89_33:                              # %for.end219
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	shll	$1, %ecx
	addl	-40(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	movl	-40(%rbp), %edx
	shll	$1, %edx
	subl	%edx, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
# %bb.34:                               # %for.inc262
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_28
.LBB89_35:                              # %for.end264
                                        #   in Loop: Header=BB89_18 Depth=2
	jmp	.LBB89_36
.LBB89_36:                              # %for.inc265
                                        #   in Loop: Header=BB89_18 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_18
.LBB89_37:                              # %for.end267
                                        #   in Loop: Header=BB89_14 Depth=1
	jmp	.LBB89_38
.LBB89_38:                              # %for.inc268
                                        #   in Loop: Header=BB89_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_14
.LBB89_39:                              # %for.end270
	movl	$0, -12(%rbp)
.LBB89_40:                              # %for.cond271
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_42 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_47
# %bb.41:                               # %for.body274
                                        #   in Loop: Header=BB89_40 Depth=1
	movl	$0, -16(%rbp)
.LBB89_42:                              # %for.cond275
                                        #   Parent Loop BB89_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_45
# %bb.43:                               # %for.body278
                                        #   in Loop: Header=BB89_42 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.44:                               # %for.inc289
                                        #   in Loop: Header=BB89_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_42
.LBB89_45:                              # %for.end291
                                        #   in Loop: Header=BB89_40 Depth=1
	jmp	.LBB89_46
.LBB89_46:                              # %for.inc292
                                        #   in Loop: Header=BB89_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_40
.LBB89_47:                              # %for.end294
	movl	$0, -12(%rbp)
.LBB89_48:                              # %for.cond295
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_52 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_50
# %bb.49:                               # %land.rhs298
                                        #   in Loop: Header=BB89_48 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_50:                              # %land.end301
                                        #   in Loop: Header=BB89_48 Depth=1
	testb	$1, %al
	jne	.LBB89_51
	jmp	.LBB89_57
.LBB89_51:                              # %for.body303
                                        #   in Loop: Header=BB89_48 Depth=1
	movl	$0, -16(%rbp)
.LBB89_52:                              # %for.cond304
                                        #   Parent Loop BB89_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_55
# %bb.53:                               # %for.body307
                                        #   in Loop: Header=BB89_52 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-16(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-60(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-60(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.54:                               # %for.inc331
                                        #   in Loop: Header=BB89_52 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_52
.LBB89_55:                              # %for.end333
                                        #   in Loop: Header=BB89_48 Depth=1
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -224(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -192(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
# %bb.56:                               # %for.inc358
                                        #   in Loop: Header=BB89_48 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_48
.LBB89_57:                              # %for.end360
	movl	$0, -16(%rbp)
.LBB89_58:                              # %for.cond361
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_62 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_60
# %bb.59:                               # %land.rhs364
                                        #   in Loop: Header=BB89_58 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_60:                              # %land.end367
                                        #   in Loop: Header=BB89_58 Depth=1
	testb	$1, %al
	jne	.LBB89_61
	jmp	.LBB89_67
.LBB89_61:                              # %for.body369
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	$0, -12(%rbp)
.LBB89_62:                              # %for.cond370
                                        #   Parent Loop BB89_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_65
# %bb.63:                               # %for.body373
                                        #   in Loop: Header=BB89_62 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-52(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movslq	-12(%rbp), %rdx
	movl	%eax, -48(%rbp,%rdx,4)
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-52(%rbp), %rdx
	subl	(%rcx,%rdx,4), %eax
	movslq	-52(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.64:                               # %for.inc397
                                        #   in Loop: Header=BB89_62 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_62
.LBB89_65:                              # %for.end399
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	leaq	-224(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-36(%rbp), %ecx
	addl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	sarl	$1, %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
# %bb.66:                               # %for.inc427
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_58
.LBB89_67:                              # %for.end429
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -56(%rbp)
.LBB89_68:                              # %for.cond430
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -56(%rbp)
	jge	.LBB89_88
# %bb.69:                               # %for.body433
                                        #   in Loop: Header=BB89_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB89_72
# %bb.70:                               # %lor.lhs.false
                                        #   in Loop: Header=BB89_68 Depth=1
	cmpl	$0, mb_adaptive
	je	.LBB89_73
# %bb.71:                               # %land.lhs.true
                                        #   in Loop: Header=BB89_68 Depth=1
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB89_73
.LBB89_72:                              # %if.then437
                                        #   in Loop: Header=BB89_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_74
.LBB89_73:                              # %if.else446
                                        #   in Loop: Header=BB89_68 Depth=1
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB89_74:                              # %if.end455
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB89_76
# %bb.75:                               # %if.then458
                                        #   in Loop: Header=BB89_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB89_77
.LBB89_76:                              # %if.else463
                                        #   in Loop: Header=BB89_68 Depth=1
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	-116(%rbp), %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB89_77:                              # %if.end481
                                        #   in Loop: Header=BB89_68 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB89_82
# %bb.78:                               # %land.lhs.true484
                                        #   in Loop: Header=BB89_68 Depth=1
	movq	img, %rax
	cmpl	$10, 40(%rax)
	jge	.LBB89_82
# %bb.79:                               # %if.then488
                                        #   in Loop: Header=BB89_68 Depth=1
	cmpl	$2063, -68(%rbp)        # imm = 0x80F
	jle	.LBB89_81
# %bb.80:                               # %if.then491
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	$2063, -68(%rbp)        # imm = 0x80F
.LBB89_81:                              # %if.end492
                                        #   in Loop: Header=BB89_68 Depth=1
	jmp	.LBB89_82
.LBB89_82:                              # %if.end493
                                        #   in Loop: Header=BB89_68 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB89_84
# %bb.83:                               # %if.then496
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-144(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-232(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB89_84:                              # %if.end507
                                        #   in Loop: Header=BB89_68 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB89_86
# %bb.85:                               # %if.then509
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB89_86:                              # %if.end519
                                        #   in Loop: Header=BB89_68 Depth=1
	jmp	.LBB89_87
.LBB89_87:                              # %for.inc520
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB89_68
.LBB89_88:                              # %for.end522
	movq	-144(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB89_89:                              # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_93 Depth 2
                                        #     Child Loop BB89_97 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_91
# %bb.90:                               # %land.rhs528
                                        #   in Loop: Header=BB89_89 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_91:                              # %land.end531
                                        #   in Loop: Header=BB89_89 Depth=1
	testb	$1, %al
	jne	.LBB89_92
	jmp	.LBB89_102
.LBB89_92:                              # %for.body533
                                        #   in Loop: Header=BB89_89 Depth=1
	movl	$0, -16(%rbp)
.LBB89_93:                              # %for.cond534
                                        #   Parent Loop BB89_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_96
# %bb.94:                               # %for.body537
                                        #   in Loop: Header=BB89_93 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.95:                               # %for.inc544
                                        #   in Loop: Header=BB89_93 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_93
.LBB89_96:                              # %for.end546
                                        #   in Loop: Header=BB89_89 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB89_97:                              # %for.cond563
                                        #   Parent Loop BB89_89 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -16(%rbp)
	jge	.LBB89_100
# %bb.98:                               # %for.body566
                                        #   in Loop: Header=BB89_97 Depth=2
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	-60(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %eax
	movslq	-60(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.99:                               # %for.inc586
                                        #   in Loop: Header=BB89_97 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_97
.LBB89_100:                             # %for.end588
                                        #   in Loop: Header=BB89_89 Depth=1
	jmp	.LBB89_101
.LBB89_101:                             # %for.inc589
                                        #   in Loop: Header=BB89_89 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_89
.LBB89_102:                             # %for.end591
	movl	$0, -16(%rbp)
.LBB89_103:                             # %for.cond592
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_107 Depth 2
                                        #     Child Loop BB89_111 Depth 2
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_105
# %bb.104:                              # %land.rhs595
                                        #   in Loop: Header=BB89_103 Depth=1
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_105:                             # %land.end598
                                        #   in Loop: Header=BB89_103 Depth=1
	testb	$1, %al
	jne	.LBB89_106
	jmp	.LBB89_119
.LBB89_106:                             # %for.body600
                                        #   in Loop: Header=BB89_103 Depth=1
	movl	$0, -12(%rbp)
.LBB89_107:                             # %for.cond601
                                        #   Parent Loop BB89_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB89_110
# %bb.108:                              # %for.body604
                                        #   in Loop: Header=BB89_107 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	leaq	-224(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.109:                              # %for.inc611
                                        #   in Loop: Header=BB89_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_107
.LBB89_110:                             # %for.end613
                                        #   in Loop: Header=BB89_103 Depth=1
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB89_111:                             # %for.cond630
                                        #   Parent Loop BB89_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -12(%rbp)
	jge	.LBB89_117
# %bb.112:                              # %for.body633
                                        #   in Loop: Header=BB89_111 Depth=2
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	cmpl	$6, -64(%rbp)
	jge	.LBB89_114
# %bb.113:                              # %if.then637
                                        #   in Loop: Header=BB89_111 Depth=2
	leaq	-1264(%rbp), %r8
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %esi
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %esi
	movslq	-100(%rbp), %rax
	shlq	$6, %rax
	movabsq	$InvLevelScale4x4Luma_Intra, %rdi
	movq	%rdi, %rcx
	addq	%rax, %rcx
	imull	(%rcx), %esi
	movl	$5, %eax
	movl	$5, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %r9d
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %esi
	movl	$6, %edx
	movl	$6, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%r8, %rbx
	addq	%rcx, %rbx
	movslq	-12(%rbp), %rcx
	movl	%esi, (%rbx,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %esi
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %esi
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	imull	(%rdi), %esi
	subl	-64(%rbp), %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %r9d
	addl	%r9d, %esi
	subl	-64(%rbp), %edx
	movl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %esi
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r8
	movslq	-52(%rbp), %rax
	movl	%esi, (%r8,%rax,4)
	jmp	.LBB89_115
.LBB89_114:                             # %if.else680
                                        #   in Loop: Header=BB89_111 Depth=2
	leaq	-1264(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	addl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rsi
	movq	%rsi, %rdi
	addq	%rcx, %rdi
	imull	(%rdi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdi
	addq	%rcx, %rdi
	movslq	-12(%rbp), %rcx
	movl	%edx, (%rdi,%rcx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %edx
	movslq	-52(%rbp), %rcx
	subl	-96(%rbp,%rcx,4), %edx
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	imull	(%rsi), %edx
	movl	-64(%rbp), %ecx
	subl	$6, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-52(%rbp), %rcx
	movl	%edx, (%rax,%rcx,4)
.LBB89_115:                             # %if.end717
                                        #   in Loop: Header=BB89_111 Depth=2
	jmp	.LBB89_116
.LBB89_116:                             # %for.inc718
                                        #   in Loop: Header=BB89_111 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_111
.LBB89_117:                             # %for.end720
                                        #   in Loop: Header=BB89_103 Depth=1
	jmp	.LBB89_118
.LBB89_118:                             # %for.inc721
                                        #   in Loop: Header=BB89_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_103
.LBB89_119:                             # %for.end723
	movl	$0, -24(%rbp)
.LBB89_120:                             # %for.cond724
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_122 Depth 2
                                        #       Child Loop BB89_124 Depth 3
                                        #       Child Loop BB89_143 Depth 3
                                        #         Child Loop BB89_147 Depth 4
                                        #         Child Loop BB89_151 Depth 4
                                        #       Child Loop BB89_157 Depth 3
                                        #         Child Loop BB89_161 Depth 4
                                        #         Child Loop BB89_165 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB89_174
# %bb.121:                              # %for.body727
                                        #   in Loop: Header=BB89_120 Depth=1
	movl	$0, -20(%rbp)
.LBB89_122:                             # %for.cond728
                                        #   Parent Loop BB89_120 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_124 Depth 3
                                        #       Child Loop BB89_143 Depth 3
                                        #         Child Loop BB89_147 Depth 4
                                        #         Child Loop BB89_151 Depth 4
                                        #       Child Loop BB89_157 Depth 3
                                        #         Child Loop BB89_161 Depth 4
                                        #         Child Loop BB89_165 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB89_172
# %bb.123:                              # %for.body731
                                        #   in Loop: Header=BB89_122 Depth=2
	movl	$-1, -80(%rbp)
	movl	$0, -76(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -108(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-108(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -240(%rbp)
	movl	$1, -56(%rbp)
.LBB89_124:                             # %for.cond751
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -56(%rbp)
	jge	.LBB89_142
# %bb.125:                              # %for.body754
                                        #   in Loop: Header=BB89_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72444(%rax)
	jne	.LBB89_128
# %bb.126:                              # %lor.lhs.false757
                                        #   in Loop: Header=BB89_124 Depth=3
	cmpl	$0, mb_adaptive
	je	.LBB89_129
# %bb.127:                              # %land.lhs.true759
                                        #   in Loop: Header=BB89_124 Depth=3
	movq	img, %rax
	cmpl	$0, 72008(%rax)
	je	.LBB89_129
.LBB89_128:                             # %if.then762
                                        #   in Loop: Header=BB89_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	FIELD_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_130
.LBB89_129:                             # %if.else771
                                        #   in Loop: Header=BB89_124 Depth=3
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN(,%rax,2), %eax
	movl	%eax, -16(%rbp)
	movslq	-56(%rbp), %rax
	movzbl	SNGL_SCAN+1(,%rax,2), %eax
	movl	%eax, -12(%rbp)
.LBB89_130:                             # %if.end780
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB89_132
# %bb.131:                              # %if.then783
                                        #   in Loop: Header=BB89_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movl	%eax, -68(%rbp)
	jmp	.LBB89_133
.LBB89_132:                             # %if.else793
                                        #   in Loop: Header=BB89_124 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movslq	-64(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$LevelOffset4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movl	%eax, -68(%rbp)
.LBB89_133:                             # %if.end818
                                        #   in Loop: Header=BB89_124 Depth=3
	cmpl	$0, -68(%rbp)
	je	.LBB89_135
# %bb.134:                              # %if.then821
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	$15, -112(%rbp)
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movq	-152(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-80(%rbp), %eax
	movq	-240(%rbp), %rcx
	movslq	-76(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	$-1, -80(%rbp)
.LBB89_135:                             # %if.end836
                                        #   in Loop: Header=BB89_124 Depth=3
	cmpl	$0, -72(%rbp)
	jne	.LBB89_140
# %bb.136:                              # %if.then838
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	-68(%rbp), %edi
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %esi
	callq	sign
	movl	%eax, -68(%rbp)
	cmpl	$4, -64(%rbp)
	jge	.LBB89_138
# %bb.137:                              # %if.then850
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	$3, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	addl	%edx, %eax
	movl	$4, %ecx
	subl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB89_139
.LBB89_138:                             # %if.else871
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	-68(%rbp), %eax
	movslq	-100(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$InvLevelScale4x4Luma_Intra, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imull	(%rdx,%rcx,4), %eax
	movl	-64(%rbp), %ecx
	subl	$4, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movslq	-16(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1264(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB89_139:                             # %if.end889
                                        #   in Loop: Header=BB89_124 Depth=3
	jmp	.LBB89_140
.LBB89_140:                             # %if.end890
                                        #   in Loop: Header=BB89_124 Depth=3
	jmp	.LBB89_141
.LBB89_141:                             # %for.inc891
                                        #   in Loop: Header=BB89_124 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB89_124
.LBB89_142:                             # %for.end893
                                        #   in Loop: Header=BB89_122 Depth=2
	movq	-152(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movl	$0, -12(%rbp)
.LBB89_143:                             # %for.cond896
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_147 Depth 4
                                        #         Child Loop BB89_151 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -12(%rbp)
	jge	.LBB89_145
# %bb.144:                              # %land.rhs899
                                        #   in Loop: Header=BB89_143 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_145:                             # %land.end902
                                        #   in Loop: Header=BB89_143 Depth=3
	testb	$1, %al
	jne	.LBB89_146
	jmp	.LBB89_156
.LBB89_146:                             # %for.body904
                                        #   in Loop: Header=BB89_143 Depth=3
	movl	$0, -16(%rbp)
.LBB89_147:                             # %for.cond905
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        #       Parent Loop BB89_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB89_150
# %bb.148:                              # %for.body908
                                        #   in Loop: Header=BB89_147 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.149:                              # %for.inc919
                                        #   in Loop: Header=BB89_147 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_147
.LBB89_150:                             # %for.end921
                                        #   in Loop: Header=BB89_143 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB89_151:                             # %for.cond940
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        #       Parent Loop BB89_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -16(%rbp)
	jge	.LBB89_154
# %bb.152:                              # %for.body943
                                        #   in Loop: Header=BB89_151 Depth=4
	movl	$3, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-16(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-60(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-16(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-60(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-60(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.153:                              # %for.inc971
                                        #   in Loop: Header=BB89_151 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_151
.LBB89_154:                             # %for.end973
                                        #   in Loop: Header=BB89_143 Depth=3
	jmp	.LBB89_155
.LBB89_155:                             # %for.inc974
                                        #   in Loop: Header=BB89_143 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_143
.LBB89_156:                             # %for.end976
                                        #   in Loop: Header=BB89_122 Depth=2
	movl	$0, -16(%rbp)
.LBB89_157:                             # %for.cond977
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB89_161 Depth 4
                                        #         Child Loop BB89_165 Depth 4
	xorl	%eax, %eax
	cmpl	$4, -16(%rbp)
	jge	.LBB89_159
# %bb.158:                              # %land.rhs980
                                        #   in Loop: Header=BB89_157 Depth=3
	cmpl	$0, -72(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB89_159:                             # %land.end983
                                        #   in Loop: Header=BB89_157 Depth=3
	testb	$1, %al
	jne	.LBB89_160
	jmp	.LBB89_170
.LBB89_160:                             # %for.body985
                                        #   in Loop: Header=BB89_157 Depth=3
	movl	$0, -12(%rbp)
.LBB89_161:                             # %for.cond986
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        #       Parent Loop BB89_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB89_164
# %bb.162:                              # %for.body989
                                        #   in Loop: Header=BB89_161 Depth=4
	movslq	-16(%rbp), %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -48(%rbp,%rcx,4)
# %bb.163:                              # %for.inc1000
                                        #   in Loop: Header=BB89_161 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_161
.LBB89_164:                             # %for.end1002
                                        #   in Loop: Header=BB89_157 Depth=3
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-48(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-44(%rbp), %eax
	sarl	$1, %eax
	subl	-36(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-44(%rbp), %eax
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB89_165:                             # %for.cond1021
                                        #   Parent Loop BB89_120 Depth=1
                                        #     Parent Loop BB89_122 Depth=2
                                        #       Parent Loop BB89_157 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -12(%rbp)
	jge	.LBB89_168
# %bb.166:                              # %for.body1024
                                        #   in Loop: Header=BB89_165 Depth=4
	movl	$3, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-12(%rbp), %rax
	movl	-96(%rbp,%rax,4), %ecx
	movslq	-52(%rbp), %rax
	addl	-96(%rbp,%rax,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	leaq	-1264(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movslq	-12(%rbp), %rcx
	movl	-96(%rbp,%rcx,4), %ecx
	movslq	-52(%rbp), %rdx
	subl	-96(%rbp,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-52(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.167:                              # %for.inc1052
                                        #   in Loop: Header=BB89_165 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_165
.LBB89_168:                             # %for.end1054
                                        #   in Loop: Header=BB89_157 Depth=3
	jmp	.LBB89_169
.LBB89_169:                             # %for.inc1055
                                        #   in Loop: Header=BB89_157 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_157
.LBB89_170:                             # %for.end1057
                                        #   in Loop: Header=BB89_122 Depth=2
	jmp	.LBB89_171
.LBB89_171:                             # %for.inc1058
                                        #   in Loop: Header=BB89_122 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_122
.LBB89_172:                             # %for.end1060
                                        #   in Loop: Header=BB89_120 Depth=1
	jmp	.LBB89_173
.LBB89_173:                             # %for.inc1061
                                        #   in Loop: Header=BB89_120 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_120
.LBB89_174:                             # %for.end1063
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_184
# %bb.175:                              # %if.then1066
	movl	$0, -12(%rbp)
.LBB89_176:                             # %for.cond1067
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_178 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB89_183
# %bb.177:                              # %for.body1070
                                        #   in Loop: Header=BB89_176 Depth=1
	movl	$0, -16(%rbp)
.LBB89_178:                             # %for.cond1071
                                        #   Parent Loop BB89_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB89_181
# %bb.179:                              # %for.body1074
                                        #   in Loop: Header=BB89_178 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.180:                              # %for.inc1091
                                        #   in Loop: Header=BB89_178 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_178
.LBB89_181:                             # %for.end1093
                                        #   in Loop: Header=BB89_176 Depth=1
	jmp	.LBB89_182
.LBB89_182:                             # %for.inc1094
                                        #   in Loop: Header=BB89_176 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_176
.LBB89_183:                             # %for.end1096
	jmp	.LBB89_196
.LBB89_184:                             # %if.else1097
	movl	$0, -12(%rbp)
.LBB89_185:                             # %for.cond1098
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_187 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB89_195
# %bb.186:                              # %for.body1101
                                        #   in Loop: Header=BB89_185 Depth=1
	movl	$0, -16(%rbp)
.LBB89_187:                             # %for.cond1102
                                        #   Parent Loop BB89_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB89_193
# %bb.188:                              # %for.body1105
                                        #   in Loop: Header=BB89_187 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB89_190
# %bb.189:                              # %if.then1107
                                        #   in Loop: Header=BB89_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_191
.LBB89_190:                             # %if.else1125
                                        #   in Loop: Header=BB89_187 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1264(%rbp), %rsi
	addq	%rax, %rsi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	shlq	$6, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rsi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltq
	movl	(%rsi,%rax,4), %eax
	addl	$32, %eax
	sarl	$6, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_191:                             # %if.end1145
                                        #   in Loop: Header=BB89_187 Depth=2
	jmp	.LBB89_192
.LBB89_192:                             # %for.inc1146
                                        #   in Loop: Header=BB89_187 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_187
.LBB89_193:                             # %for.end1148
                                        #   in Loop: Header=BB89_185 Depth=1
	jmp	.LBB89_194
.LBB89_194:                             # %for.inc1149
                                        #   in Loop: Header=BB89_185 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_185
.LBB89_195:                             # %for.end1151
	jmp	.LBB89_196
.LBB89_196:                             # %if.end1152
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB89_218
# %bb.197:                              # %if.then1155
	movl	$0, -12(%rbp)
.LBB89_198:                             # %for.cond1156
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_200 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB89_217
# %bb.199:                              # %for.body1159
                                        #   in Loop: Header=BB89_198 Depth=1
	movl	$0, -16(%rbp)
.LBB89_200:                             # %for.cond1160
                                        #   Parent Loop BB89_198 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB89_215
# %bb.201:                              # %for.body1163
                                        #   in Loop: Header=BB89_200 Depth=2
	cmpl	$0, -72(%rbp)
	je	.LBB89_203
# %bb.202:                              # %if.then1165
                                        #   in Loop: Header=BB89_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB89_213
.LBB89_203:                             # %if.else1186
                                        #   in Loop: Header=BB89_200 Depth=2
	xorl	%ecx, %ecx
	movq	img, %rax
	movslq	72684(%rax), %rax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	leaq	-2288(%rbp), %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movslq	(%rsi,%rdx,4), %rdx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-104(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	addq	$32, %rdx
	sarq	$6, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB89_205
# %bb.204:                              # %cond.true
                                        #   in Loop: Header=BB89_200 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB89_206
.LBB89_205:                             # %cond.false
                                        #   in Loop: Header=BB89_200 Depth=2
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
.LBB89_206:                             # %cond.end
                                        #   in Loop: Header=BB89_200 Depth=2
	cmpq	%rcx, %rax
	jge	.LBB89_208
# %bb.207:                              # %cond.true1226
                                        #   in Loop: Header=BB89_200 Depth=2
	movq	img, %rax
	movslq	72684(%rax), %rax
	jmp	.LBB89_212
.LBB89_208:                             # %cond.false1229
                                        #   in Loop: Header=BB89_200 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2288(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movslq	(%rdx,%rcx,4), %rcx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-104(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	addq	$32, %rcx
	sarq	$6, %rcx
	cmpq	%rcx, %rax
	jle	.LBB89_210
# %bb.209:                              # %cond.true1249
                                        #   in Loop: Header=BB89_200 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_211
.LBB89_210:                             # %cond.false1250
                                        #   in Loop: Header=BB89_200 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	leaq	-2288(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movslq	(%rcx,%rax,4), %rax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-104(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	shlq	$6, %rcx
	addq	%rcx, %rax
	addq	$32, %rax
	sarq	$6, %rax
.LBB89_211:                             # %cond.end1268
                                        #   in Loop: Header=BB89_200 Depth=2
.LBB89_212:                             # %cond.end1270
                                        #   in Loop: Header=BB89_200 Depth=2
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB89_213:                             # %if.end1282
                                        #   in Loop: Header=BB89_200 Depth=2
	jmp	.LBB89_214
.LBB89_214:                             # %for.inc1283
                                        #   in Loop: Header=BB89_200 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_200
.LBB89_215:                             # %for.end1285
                                        #   in Loop: Header=BB89_198 Depth=1
	jmp	.LBB89_216
.LBB89_216:                             # %for.inc1286
                                        #   in Loop: Header=BB89_198 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_198
.LBB89_217:                             # %for.end1288
	jmp	.LBB89_218
.LBB89_218:                             # %if.end1289
	movl	-112(%rbp), %ebx
	cmpl	$450213211, -132(%rbp)  # imm = 0x1AD5B55B
	jne	.LBB89_220
.LBB89_219:
	movl	%ebx, %eax
	addq	$2280, %rsp             # imm = 0x8E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_220:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_219
.Lfunc_end89:
	.size	dct_luma_16x16.80, .Lfunc_end89-dct_luma_16x16.80
	.cfi_endproc
                                        # -- End function
	.type	QP_SCALE_CR,@object     # @QP_SCALE_CR
	.section	.rodata,"a",@progbits
	.globl	QP_SCALE_CR
	.p2align	4
QP_SCALE_CR:
	.ascii	"\000\001\002\003\004\005\006\007\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031\032\033\034\035\035\036\037  !\"\"##$$%%%&&&''''"
	.size	QP_SCALE_CR, 52

	.type	SNGL_SCAN,@object       # @SNGL_SCAN
	.globl	SNGL_SCAN
	.p2align	4
SNGL_SCAN:
	.zero	2
	.asciz	"\001"
	.ascii	"\000\001"
	.ascii	"\000\002"
	.zero	2,1
	.asciz	"\002"
	.asciz	"\003"
	.ascii	"\002\001"
	.ascii	"\001\002"
	.ascii	"\000\003"
	.ascii	"\001\003"
	.zero	2,2
	.ascii	"\003\001"
	.ascii	"\003\002"
	.ascii	"\002\003"
	.zero	2,3
	.size	SNGL_SCAN, 32

	.type	FIELD_SCAN,@object      # @FIELD_SCAN
	.globl	FIELD_SCAN
	.p2align	4
FIELD_SCAN:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.asciz	"\002"
	.ascii	"\002\001"
	.zero	2,2
	.ascii	"\002\003"
	.asciz	"\003"
	.ascii	"\003\001"
	.ascii	"\003\002"
	.zero	2,3
	.size	FIELD_SCAN, 32

	.type	COEFF_COST,@object      # @COEFF_COST
	.globl	COEFF_COST
	.p2align	4
COEFF_COST:
	.byte	3                       # 0x3
	.byte	2                       # 0x2
	.byte	2                       # 0x2
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.byte	1                       # 0x1
	.zero	10
	.zero	16,9
	.size	COEFF_COST, 32

	.type	COEFF_BIT_COST,@object  # @COEFF_BIT_COST
	.globl	COEFF_BIT_COST
	.p2align	4
COEFF_BIT_COST:
	.ascii	"\003\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r"
	.ascii	"\005\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\t\t\013\013\013\013\r\r\r\r\r\r\r\r\017"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\007\007\t\t\t\t\013\013\013\013\013\013\013\013\r\r"
	.ascii	"\003\005\007\007\007\t\t\t\t\013\013\r\r\r\r\017"
	.ascii	"\005\t\t\013\013\r\r\r\r\017\017\017\017\017\017\017"
	.ascii	"\007\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\t\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.ascii	"\013\013\r\r\r\r\017\017\017\017\017\017\017\017\021\021"
	.zero	16
	.zero	16
	.ascii	"\003\007\t\t\013\r\r\017\017\017\017\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\005\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\007\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\t\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.ascii	"\013\r\r\017\017\017\017\021\021\021\021\021\021\021\021\023"
	.size	COEFF_BIT_COST, 768

	.type	SCAN_YUV422,@object     # @SCAN_YUV422
	.globl	SCAN_YUV422
	.p2align	4
SCAN_YUV422:
	.zero	2
	.ascii	"\000\001"
	.asciz	"\001"
	.ascii	"\000\002"
	.ascii	"\000\003"
	.zero	2,1
	.ascii	"\001\002"
	.ascii	"\001\003"
	.size	SCAN_YUV422, 16

	.type	hor_offset,@object      # @hor_offset
	.globl	hor_offset
	.p2align	4
hor_offset:
	.zero	16
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	hor_offset, 64

	.type	ver_offset,@object      # @ver_offset
	.globl	ver_offset
	.p2align	4
ver_offset:
	.zero	16
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	ver_offset, 64

	.type	quant_coef,@object      # @quant_coef
	.globl	quant_coef
	.p2align	4
quant_coef:
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	13107                   # 0x3333
	.long	8066                    # 0x1f82
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	8066                    # 0x1f82
	.long	5243                    # 0x147b
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	11916                   # 0x2e8c
	.long	7490                    # 0x1d42
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	7490                    # 0x1d42
	.long	4660                    # 0x1234
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	10082                   # 0x2762
	.long	6554                    # 0x199a
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	6554                    # 0x199a
	.long	4194                    # 0x1062
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	9362                    # 0x2492
	.long	5825                    # 0x16c1
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	5825                    # 0x16c1
	.long	3647                    # 0xe3f
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	8192                    # 0x2000
	.long	5243                    # 0x147b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	5243                    # 0x147b
	.long	3355                    # 0xd1b
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	7282                    # 0x1c72
	.long	4559                    # 0x11cf
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.long	4559                    # 0x11cf
	.long	2893                    # 0xb4d
	.size	quant_coef, 384

	.type	dequant_coef,@object    # @dequant_coef
	.globl	dequant_coef
	.p2align	4
dequant_coef:
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	10                      # 0xa
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	13                      # 0xd
	.long	16                      # 0x10
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	18                      # 0x12
	.long	23                      # 0x17
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	29                      # 0x1d
	.size	dequant_coef, 384

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	.L__const.dct_chroma.cbpblk_pattern,@object # @__const.dct_chroma.cbpblk_pattern
	.section	.rodata.cst32,"aM",@progbits,32
	.p2align	4
.L__const.dct_chroma.cbpblk_pattern:
	.quad	0                       # 0x0
	.quad	983040                  # 0xf0000
	.quad	16711680                # 0xff0000
	.quad	4294901760              # 0xffff0000
	.size	.L__const.dct_chroma.cbpblk_pattern, 32

	.type	cbp_blk_chroma,@object  # @cbp_blk_chroma
	.data
	.p2align	4
cbp_blk_chroma:
	.ascii	"\020\021\022\023"
	.ascii	"\024\025\026\027"
	.ascii	"\030\031\032\033"
	.ascii	"\034\035\036\037"
	.ascii	" !\"#"
	.ascii	"$%&'"
	.ascii	"()*+"
	.ascii	",-./"
	.size	cbp_blk_chroma, 32

	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	A,@object               # @A
	.section	.rodata,"a",@progbits
	.p2align	4
A:
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	16                      # 0x10
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	25                      # 0x19
	.long	20                      # 0x14
	.long	25                      # 0x19
	.size	A, 64

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
