	.text
	.file	"weighted_prediction.c"
	.globl	estimate_weighting_factor_P_slice # -- Begin function estimate_weighting_factor_P_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice,@function
estimate_weighting_factor_P_slice:      # @estimate_weighting_factor_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_estimate_weighting_factor_P_slice.2
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_estimate_weighting_factor_P_slice.6
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_estimate_weighting_factor_P_slice.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_estimate_weighting_factor_P_slice.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_estimate_weighting_factor_P_slice.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_estimate_weighting_factor_P_slice.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_estimate_weighting_factor_P_slice.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_estimate_weighting_factor_P_slice.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_estimate_weighting_factor_P_slice.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_estimate_weighting_factor_P_slice.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_estimate_weighting_factor_P_slice.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_estimate_weighting_factor_P_slice.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_estimate_weighting_factor_P_slice.46
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_estimate_weighting_factor_P_slice.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_estimate_weighting_factor_P_slice.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_estimate_weighting_factor_P_slice.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	estimate_weighting_factor_P_slice.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	estimate_weighting_factor_P_slice, .Lfunc_end0-estimate_weighting_factor_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	estimate_weighting_factor_B_slice # -- Begin function estimate_weighting_factor_B_slice
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice,@function
estimate_weighting_factor_B_slice:      # @estimate_weighting_factor_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_estimate_weighting_factor_B_slice.1
	callq	estimate_weighting_factor_B_slice.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_estimate_weighting_factor_B_slice.10
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_estimate_weighting_factor_B_slice.11
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_estimate_weighting_factor_B_slice.13
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_estimate_weighting_factor_B_slice.14
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_estimate_weighting_factor_B_slice.21
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_estimate_weighting_factor_B_slice.22
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_estimate_weighting_factor_B_slice.23
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_estimate_weighting_factor_B_slice.29
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_estimate_weighting_factor_B_slice.35
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_estimate_weighting_factor_B_slice.38
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_estimate_weighting_factor_B_slice.40
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_estimate_weighting_factor_B_slice.42
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_estimate_weighting_factor_B_slice.43
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_estimate_weighting_factor_B_slice.48
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_estimate_weighting_factor_B_slice.61
	.cfi_def_cfa %rbp, 16
	callq	estimate_weighting_factor_B_slice.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	estimate_weighting_factor_B_slice, .Lfunc_end1-estimate_weighting_factor_B_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_P_slice         # -- Begin function test_wp_P_slice
	.p2align	4, 0x90
	.type	test_wp_P_slice,@function
test_wp_P_slice:                        # @test_wp_P_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_17
# %bb.1:                                # %func_test_wp_P_slice.3
	movl	%ebx, %edi
	callq	test_wp_P_slice.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_test_wp_P_slice.5
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_test_wp_P_slice.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_test_wp_P_slice.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_test_wp_P_slice.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_test_wp_P_slice.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_test_wp_P_slice.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_test_wp_P_slice.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %func_test_wp_P_slice.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_10:                               # %func_test_wp_P_slice.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:                               # %func_test_wp_P_slice.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_12:                               # %func_test_wp_P_slice.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_13:                               # %func_test_wp_P_slice.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_14:                               # %func_test_wp_P_slice.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_15:                               # %func_test_wp_P_slice.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_16:                               # %func_test_wp_P_slice.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_P_slice.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB2_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB2_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB2_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB2_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB2_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB2_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB2_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB2_15
	jmp	.LBB2_16
.Lfunc_end2:
	.size	test_wp_P_slice, .Lfunc_end2-test_wp_P_slice
	.cfi_endproc
                                        # -- End function
	.globl	test_wp_B_slice         # -- Begin function test_wp_B_slice
	.p2align	4, 0x90
	.type	test_wp_B_slice,@function
test_wp_B_slice:                        # @test_wp_B_slice
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_test_wp_B_slice.4
	movl	%ebx, %edi
	callq	test_wp_B_slice.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_test_wp_B_slice.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_test_wp_B_slice.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_test_wp_B_slice.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_test_wp_B_slice.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_test_wp_B_slice.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_test_wp_B_slice.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_test_wp_B_slice.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.49
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_test_wp_B_slice.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_test_wp_B_slice.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_test_wp_B_slice.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_test_wp_B_slice.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_test_wp_B_slice.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_test_wp_B_slice.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_test_wp_B_slice.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.62
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_test_wp_B_slice.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	test_wp_B_slice.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	test_wp_B_slice, .Lfunc_end3-test_wp_B_slice
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.1
.LCPI4_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.1
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.1,@function
estimate_weighting_factor_B_slice.1:    # @estimate_weighting_factor_B_slice.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1635147423, -92(%rbp)  # imm = 0x61765E9F
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB4_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB4_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB4_4
.LBB4_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB4_4
.LBB4_4:                                # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB4_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB4_7
.LBB4_6:                                # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB4_7:                                # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB4_8:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_10 Depth 2
                                        #       Child Loop BB4_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB4_8 Depth=1
	movl	$0, -8(%rbp)
.LBB4_10:                               # %for.cond14
                                        #   Parent Loop BB4_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB4_10 Depth=2
	movl	$0, -16(%rbp)
.LBB4_12:                               # %for.cond19
                                        #   Parent Loop BB4_8 Depth=1
                                        #     Parent Loop BB4_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB4_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB4_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB4_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_12
.LBB4_15:                               # %for.end
                                        #   in Loop: Header=BB4_10 Depth=2
	jmp	.LBB4_16
.LBB4_16:                               # %for.inc50
                                        #   in Loop: Header=BB4_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_10
.LBB4_17:                               # %for.end52
                                        #   in Loop: Header=BB4_8 Depth=1
	jmp	.LBB4_18
.LBB4_18:                               # %for.inc53
                                        #   in Loop: Header=BB4_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_8
.LBB4_19:                               # %for.end55
	movl	$0, -4(%rbp)
.LBB4_20:                               # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_22 Depth 2
                                        #       Child Loop BB4_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB4_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB4_20 Depth=1
	movl	$0, -8(%rbp)
.LBB4_22:                               # %for.cond59
                                        #   Parent Loop BB4_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB4_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB4_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB4_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB4_29
.LBB4_25:                               # %cond.false70
                                        #   in Loop: Header=BB4_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB4_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	$127, %eax
	jmp	.LBB4_28
.LBB4_27:                               # %cond.false80
                                        #   in Loop: Header=BB4_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB4_28:                               # %cond.end88
                                        #   in Loop: Header=BB4_22 Depth=2
.LBB4_29:                               # %cond.end90
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB4_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB4_35
.LBB4_31:                               # %cond.false99
                                        #   in Loop: Header=BB4_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB4_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	$127, %eax
	jmp	.LBB4_34
.LBB4_33:                               # %cond.false107
                                        #   in Loop: Header=BB4_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB4_34:                               # %cond.end113
                                        #   in Loop: Header=BB4_22 Depth=2
.LBB4_35:                               # %cond.end115
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB4_36:                               # %for.cond117
                                        #   Parent Loop BB4_20 Depth=1
                                        #     Parent Loop BB4_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB4_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB4_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB4_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB4_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB4_49
.LBB4_39:                               # %if.else154
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB4_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB4_45
.LBB4_41:                               # %cond.false160
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB4_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB4_44
.LBB4_43:                               # %cond.false166
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB4_44:                               # %cond.end170
                                        #   in Loop: Header=BB4_36 Depth=3
.LBB4_45:                               # %cond.end172
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB4_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB4_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB4_48
.LBB4_47:                               # %if.then198
                                        #   in Loop: Header=BB4_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB4_48:                               # %if.end208
                                        #   in Loop: Header=BB4_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB4_49:                               # %if.end238
                                        #   in Loop: Header=BB4_36 Depth=3
	jmp	.LBB4_50
.LBB4_50:                               # %for.inc239
                                        #   in Loop: Header=BB4_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_36
.LBB4_51:                               # %for.end241
                                        #   in Loop: Header=BB4_22 Depth=2
	jmp	.LBB4_52
.LBB4_52:                               # %for.inc242
                                        #   in Loop: Header=BB4_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_22
.LBB4_53:                               # %for.end244
                                        #   in Loop: Header=BB4_20 Depth=1
	jmp	.LBB4_54
.LBB4_54:                               # %for.inc245
                                        #   in Loop: Header=BB4_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_20
.LBB4_55:                               # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB4_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB4_57:                               # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_59 Depth 2
                                        #       Child Loop BB4_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB4_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB4_57 Depth=1
	movl	$0, -8(%rbp)
.LBB4_59:                               # %for.cond254
                                        #   Parent Loop BB4_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB4_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB4_59 Depth=2
	movl	$0, -20(%rbp)
.LBB4_61:                               # %for.cond257
                                        #   Parent Loop BB4_57 Depth=1
                                        #     Parent Loop BB4_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB4_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB4_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB4_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB4_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB4_65
.LBB4_64:                               # %cond.false262
                                        #   in Loop: Header=BB4_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB4_65:                               # %cond.end263
                                        #   in Loop: Header=BB4_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB4_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_61
.LBB4_67:                               # %for.end295
                                        #   in Loop: Header=BB4_59 Depth=2
	jmp	.LBB4_68
.LBB4_68:                               # %for.inc296
                                        #   in Loop: Header=BB4_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_59
.LBB4_69:                               # %for.end298
                                        #   in Loop: Header=BB4_57 Depth=1
	jmp	.LBB4_70
.LBB4_70:                               # %for.inc299
                                        #   in Loop: Header=BB4_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_57
.LBB4_71:                               # %for.end301
	movl	$0, -12(%rbp)
.LBB4_72:                               # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB4_72 Depth=1
	movl	$0, -24(%rbp)
.LBB4_74:                               # %for.cond306
                                        #   Parent Loop BB4_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB4_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB4_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_74
.LBB4_77:                               # %for.end346
                                        #   in Loop: Header=BB4_72 Depth=1
	jmp	.LBB4_78
.LBB4_78:                               # %for.inc347
                                        #   in Loop: Header=BB4_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_72
.LBB4_79:                               # %for.end349
	movl	$0, -4(%rbp)
.LBB4_80:                               # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_82 Depth 2
                                        #       Child Loop BB4_84 Depth 3
                                        #       Child Loop BB4_88 Depth 3
                                        #         Child Loop BB4_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB4_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB4_80 Depth=1
	movl	$0, -8(%rbp)
.LBB4_82:                               # %for.cond353
                                        #   Parent Loop BB4_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_84 Depth 3
                                        #       Child Loop BB4_88 Depth 3
                                        #         Child Loop BB4_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB4_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB4_82 Depth=2
	movl	$0, -16(%rbp)
.LBB4_84:                               # %for.cond356
                                        #   Parent Loop BB4_80 Depth=1
                                        #     Parent Loop BB4_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB4_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB4_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_84
.LBB4_87:                               # %for.end380
                                        #   in Loop: Header=BB4_82 Depth=2
	movl	$0, -16(%rbp)
.LBB4_88:                               # %for.cond381
                                        #   Parent Loop BB4_80 Depth=1
                                        #     Parent Loop BB4_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB4_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB4_88 Depth=3
	movl	$0, -32(%rbp)
.LBB4_90:                               # %for.cond387
                                        #   Parent Loop BB4_80 Depth=1
                                        #     Parent Loop BB4_82 Depth=2
                                        #       Parent Loop BB4_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB4_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB4_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB4_90
.LBB4_93:                               # %for.end421
                                        #   in Loop: Header=BB4_88 Depth=3
	jmp	.LBB4_94
.LBB4_94:                               # %for.inc422
                                        #   in Loop: Header=BB4_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_88
.LBB4_95:                               # %for.end424
                                        #   in Loop: Header=BB4_82 Depth=2
	jmp	.LBB4_96
.LBB4_96:                               # %for.inc425
                                        #   in Loop: Header=BB4_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_82
.LBB4_97:                               # %for.end427
                                        #   in Loop: Header=BB4_80 Depth=1
	jmp	.LBB4_98
.LBB4_98:                               # %for.inc428
                                        #   in Loop: Header=BB4_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_80
.LBB4_99:                               # %for.end430
	jmp	.LBB4_189
.LBB4_100:                              # %if.else431
	movl	$0, -4(%rbp)
.LBB4_101:                              # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB4_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB4_101 Depth=1
	movl	$0, -8(%rbp)
.LBB4_103:                              # %for.cond436
                                        #   Parent Loop BB4_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB4_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB4_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB4_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_103
.LBB4_106:                              # %for.end447
                                        #   in Loop: Header=BB4_101 Depth=1
	jmp	.LBB4_107
.LBB4_107:                              # %for.inc448
                                        #   in Loop: Header=BB4_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_101
.LBB4_108:                              # %for.end450
	movl	$0, -12(%rbp)
.LBB4_109:                              # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_111 Depth 2
                                        #       Child Loop BB4_113 Depth 3
                                        #       Child Loop BB4_123 Depth 3
                                        #       Child Loop BB4_133 Depth 3
                                        #         Child Loop BB4_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB4_109 Depth=1
	movl	$0, -16(%rbp)
.LBB4_111:                              # %for.cond456
                                        #   Parent Loop BB4_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_113 Depth 3
                                        #       Child Loop BB4_123 Depth 3
                                        #       Child Loop BB4_133 Depth 3
                                        #         Child Loop BB4_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB4_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB4_113:                              # %for.cond476
                                        #   Parent Loop BB4_109 Depth=1
                                        #     Parent Loop BB4_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB4_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB4_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_113
.LBB4_116:                              # %for.end493
                                        #   in Loop: Header=BB4_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB4_117
	jp	.LBB4_117
	jmp	.LBB4_118
.LBB4_117:                              # %if.then500
                                        #   in Loop: Header=BB4_111 Depth=2
	vmovsd	.LCPI4_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB4_119
.LBB4_118:                              # %if.else511
                                        #   in Loop: Header=BB4_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB4_119:                              # %if.end513
                                        #   in Loop: Header=BB4_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB4_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB4_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB4_122
.LBB4_121:                              # %if.then519
                                        #   in Loop: Header=BB4_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB4_122:                              # %if.end521
                                        #   in Loop: Header=BB4_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB4_123:                              # %for.cond554
                                        #   Parent Loop BB4_109 Depth=1
                                        #     Parent Loop BB4_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB4_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB4_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB4_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB4_130
.LBB4_126:                              # %cond.false571
                                        #   in Loop: Header=BB4_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB4_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB4_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB4_129
.LBB4_128:                              # %cond.false583
                                        #   in Loop: Header=BB4_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB4_129:                              # %cond.end591
                                        #   in Loop: Header=BB4_123 Depth=3
.LBB4_130:                              # %cond.end593
                                        #   in Loop: Header=BB4_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB4_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_123
.LBB4_132:                              # %for.end600
                                        #   in Loop: Header=BB4_111 Depth=2
	movl	$0, -4(%rbp)
.LBB4_133:                              # %for.cond601
                                        #   Parent Loop BB4_109 Depth=1
                                        #     Parent Loop BB4_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB4_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB4_133 Depth=3
	movl	$0, -8(%rbp)
.LBB4_135:                              # %for.cond608
                                        #   Parent Loop BB4_109 Depth=1
                                        #     Parent Loop BB4_111 Depth=2
                                        #       Parent Loop BB4_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB4_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB4_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB4_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB4_142
.LBB4_138:                              # %cond.false630
                                        #   in Loop: Header=BB4_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB4_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB4_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB4_141
.LBB4_140:                              # %cond.false648
                                        #   in Loop: Header=BB4_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB4_141:                              # %cond.end661
                                        #   in Loop: Header=BB4_135 Depth=4
.LBB4_142:                              # %cond.end663
                                        #   in Loop: Header=BB4_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB4_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_135
.LBB4_144:                              # %for.end675
                                        #   in Loop: Header=BB4_133 Depth=3
	jmp	.LBB4_145
.LBB4_145:                              # %for.inc676
                                        #   in Loop: Header=BB4_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_133
.LBB4_146:                              # %for.end678
                                        #   in Loop: Header=BB4_111 Depth=2
	jmp	.LBB4_147
.LBB4_147:                              # %for.inc679
                                        #   in Loop: Header=BB4_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB4_111
.LBB4_148:                              # %for.end681
                                        #   in Loop: Header=BB4_109 Depth=1
	jmp	.LBB4_149
.LBB4_149:                              # %for.inc682
                                        #   in Loop: Header=BB4_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_109
.LBB4_150:                              # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB4_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB4_152:                              # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_154 Depth 2
                                        #       Child Loop BB4_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB4_152 Depth=1
	movl	$0, -24(%rbp)
.LBB4_154:                              # %for.cond694
                                        #   Parent Loop BB4_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB4_154 Depth=2
	movl	$0, -20(%rbp)
.LBB4_156:                              # %for.cond700
                                        #   Parent Loop BB4_152 Depth=1
                                        #     Parent Loop BB4_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB4_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB4_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB4_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_156
.LBB4_159:                              # %for.end730
                                        #   in Loop: Header=BB4_154 Depth=2
	jmp	.LBB4_160
.LBB4_160:                              # %for.inc731
                                        #   in Loop: Header=BB4_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_154
.LBB4_161:                              # %for.end733
                                        #   in Loop: Header=BB4_152 Depth=1
	jmp	.LBB4_162
.LBB4_162:                              # %for.inc734
                                        #   in Loop: Header=BB4_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_152
.LBB4_163:                              # %for.end736
	jmp	.LBB4_173
.LBB4_164:                              # %if.else737
	movl	$0, -12(%rbp)
.LBB4_165:                              # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB4_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB4_165 Depth=1
	movl	$0, -24(%rbp)
.LBB4_167:                              # %for.cond743
                                        #   Parent Loop BB4_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB4_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB4_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB4_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB4_167
.LBB4_170:                              # %for.end784
                                        #   in Loop: Header=BB4_165 Depth=1
	jmp	.LBB4_171
.LBB4_171:                              # %for.inc785
                                        #   in Loop: Header=BB4_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB4_165
.LBB4_172:                              # %for.end787
	jmp	.LBB4_173
.LBB4_173:                              # %if.end788
	movl	$0, -4(%rbp)
.LBB4_174:                              # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB4_176 Depth 2
                                        #       Child Loop BB4_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB4_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB4_174 Depth=1
	movl	$0, -8(%rbp)
.LBB4_176:                              # %for.cond793
                                        #   Parent Loop BB4_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB4_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB4_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB4_176 Depth=2
	movl	$0, -20(%rbp)
.LBB4_178:                              # %for.cond797
                                        #   Parent Loop BB4_174 Depth=1
                                        #     Parent Loop BB4_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB4_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB4_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB4_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB4_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB4_182
.LBB4_181:                              # %cond.false804
                                        #   in Loop: Header=BB4_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB4_182:                              # %cond.end805
                                        #   in Loop: Header=BB4_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB4_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB4_178
.LBB4_184:                              # %for.end833
                                        #   in Loop: Header=BB4_176 Depth=2
	jmp	.LBB4_185
.LBB4_185:                              # %for.inc834
                                        #   in Loop: Header=BB4_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB4_176
.LBB4_186:                              # %for.end836
                                        #   in Loop: Header=BB4_174 Depth=1
	jmp	.LBB4_187
.LBB4_187:                              # %for.inc837
                                        #   in Loop: Header=BB4_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_174
.LBB4_188:                              # %for.end839
	jmp	.LBB4_189
.LBB4_189:                              # %if.end840
	cmpl	$1635147423, -92(%rbp)  # imm = 0x61765E9F
	jne	.LBB4_191
.LBB4_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_191:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB4_190
.Lfunc_end4:
	.size	estimate_weighting_factor_B_slice.1, .Lfunc_end4-estimate_weighting_factor_B_slice.1
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.2
.LCPI5_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.2
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.2,@function
estimate_weighting_factor_P_slice.2:    # @estimate_weighting_factor_P_slice.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1496503710, -60(%rbp)  # imm = 0x5932D59E
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB5_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB5_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB5_4
.LBB5_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB5_4
.LBB5_4:                                # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB5_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_7 Depth 2
                                        #       Child Loop BB5_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB5_5 Depth=1
	movl	$0, -16(%rbp)
.LBB5_7:                                # %for.cond12
                                        #   Parent Loop BB5_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB5_7 Depth=2
	movl	$0, -4(%rbp)
.LBB5_9:                                # %for.cond17
                                        #   Parent Loop BB5_5 Depth=1
                                        #     Parent Loop BB5_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB5_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB5_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB5_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_9
.LBB5_12:                               # %for.end
                                        #   in Loop: Header=BB5_7 Depth=2
	jmp	.LBB5_13
.LBB5_13:                               # %for.inc48
                                        #   in Loop: Header=BB5_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_7
.LBB5_14:                               # %for.end50
                                        #   in Loop: Header=BB5_5 Depth=1
	jmp	.LBB5_15
.LBB5_15:                               # %for.inc51
                                        #   in Loop: Header=BB5_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_5
.LBB5_16:                               # %for.end53
	movl	$0, -12(%rbp)
.LBB5_17:                               # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB5_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB5_17 Depth=1
	movl	$0, -16(%rbp)
.LBB5_19:                               # %for.cond57
                                        #   Parent Loop BB5_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB5_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB5_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB5_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_19
.LBB5_22:                               # %for.end67
                                        #   in Loop: Header=BB5_17 Depth=1
	jmp	.LBB5_23
.LBB5_23:                               # %for.inc68
                                        #   in Loop: Header=BB5_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_17
.LBB5_24:                               # %for.end70
	movl	$0, -8(%rbp)
.LBB5_25:                               # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_27 Depth 2
                                        #       Child Loop BB5_29 Depth 3
                                        #       Child Loop BB5_48 Depth 3
                                        #       Child Loop BB5_58 Depth 3
                                        #         Child Loop BB5_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB5_25 Depth=1
	movl	$0, -4(%rbp)
.LBB5_27:                               # %for.cond76
                                        #   Parent Loop BB5_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_29 Depth 3
                                        #       Child Loop BB5_48 Depth 3
                                        #       Child Loop BB5_58 Depth 3
                                        #         Child Loop BB5_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB5_29:                               # %for.cond92
                                        #   Parent Loop BB5_25 Depth=1
                                        #     Parent Loop BB5_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB5_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB5_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_29
.LBB5_32:                               # %for.end106
                                        #   in Loop: Header=BB5_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB5_40
	jp	.LBB5_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB5_34
	jp	.LBB5_34
	jmp	.LBB5_35
.LBB5_34:                               # %if.then114
                                        #   in Loop: Header=BB5_27 Depth=2
	vmovsd	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB5_36
.LBB5_35:                               # %if.else
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB5_36:                               # %if.end
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB5_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB5_39
.LBB5_38:                               # %if.then147
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB5_39:                               # %if.end154
                                        #   in Loop: Header=BB5_27 Depth=2
	jmp	.LBB5_47
.LBB5_40:                               # %if.else155
                                        #   in Loop: Header=BB5_27 Depth=2
	vmovsd	.LCPI5_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB5_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB5_46
.LBB5_42:                               # %cond.false179
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB5_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	$127, %eax
	jmp	.LBB5_45
.LBB5_44:                               # %cond.false188
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB5_45:                               # %cond.end194
                                        #   in Loop: Header=BB5_27 Depth=2
.LBB5_46:                               # %cond.end196
                                        #   in Loop: Header=BB5_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB5_47:                               # %if.end209
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB5_48:                               # %for.cond222
                                        #   Parent Loop BB5_25 Depth=1
                                        #     Parent Loop BB5_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB5_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB5_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB5_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB5_55
.LBB5_51:                               # %cond.false248
                                        #   in Loop: Header=BB5_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB5_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_54
.LBB5_53:                               # %cond.false270
                                        #   in Loop: Header=BB5_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB5_54:                               # %cond.end288
                                        #   in Loop: Header=BB5_48 Depth=3
.LBB5_55:                               # %cond.end290
                                        #   in Loop: Header=BB5_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB5_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_48
.LBB5_57:                               # %for.end297
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	$0, -12(%rbp)
.LBB5_58:                               # %for.cond298
                                        #   Parent Loop BB5_25 Depth=1
                                        #     Parent Loop BB5_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB5_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB5_58 Depth=3
	movl	$0, -16(%rbp)
.LBB5_60:                               # %for.cond305
                                        #   Parent Loop BB5_25 Depth=1
                                        #     Parent Loop BB5_27 Depth=2
                                        #       Parent Loop BB5_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB5_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB5_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB5_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB5_67
.LBB5_63:                               # %cond.false336
                                        #   in Loop: Header=BB5_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB5_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB5_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB5_66
.LBB5_65:                               # %cond.false364
                                        #   in Loop: Header=BB5_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB5_66:                               # %cond.end387
                                        #   in Loop: Header=BB5_60 Depth=4
.LBB5_67:                               # %cond.end389
                                        #   in Loop: Header=BB5_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB5_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB5_60
.LBB5_69:                               # %for.end400
                                        #   in Loop: Header=BB5_58 Depth=3
	jmp	.LBB5_70
.LBB5_70:                               # %for.inc401
                                        #   in Loop: Header=BB5_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB5_58
.LBB5_71:                               # %for.end403
                                        #   in Loop: Header=BB5_27 Depth=2
	jmp	.LBB5_72
.LBB5_72:                               # %for.inc404
                                        #   in Loop: Header=BB5_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB5_27
.LBB5_73:                               # %for.end406
                                        #   in Loop: Header=BB5_25 Depth=1
	jmp	.LBB5_74
.LBB5_74:                               # %for.inc407
                                        #   in Loop: Header=BB5_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_25
.LBB5_75:                               # %for.end409
	movl	$0, -8(%rbp)
.LBB5_76:                               # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB5_78 Depth 2
                                        #       Child Loop BB5_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB5_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB5_76 Depth=1
	movl	$0, -20(%rbp)
.LBB5_78:                               # %for.cond415
                                        #   Parent Loop BB5_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB5_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB5_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB5_78 Depth=2
	movl	$0, -24(%rbp)
.LBB5_80:                               # %for.cond421
                                        #   Parent Loop BB5_76 Depth=1
                                        #     Parent Loop BB5_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB5_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB5_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB5_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB5_80
.LBB5_83:                               # %for.end451
                                        #   in Loop: Header=BB5_78 Depth=2
	jmp	.LBB5_84
.LBB5_84:                               # %for.inc452
                                        #   in Loop: Header=BB5_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB5_78
.LBB5_85:                               # %for.end454
                                        #   in Loop: Header=BB5_76 Depth=1
	jmp	.LBB5_86
.LBB5_86:                               # %for.inc455
                                        #   in Loop: Header=BB5_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB5_76
.LBB5_87:                               # %for.end457
	cmpl	$1496503710, -60(%rbp)  # imm = 0x5932D59E
	jne	.LBB5_89
.LBB5_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_89:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB5_88
.Lfunc_end5:
	.size	estimate_weighting_factor_P_slice.2, .Lfunc_end5-estimate_weighting_factor_P_slice.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.3
.LCPI6_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.3
	.p2align	4, 0x90
	.type	test_wp_P_slice.3,@function
test_wp_P_slice.3:                      # @test_wp_P_slice.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$664241568, -64(%rbp)   # imm = 0x279785A0
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB6_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB6_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB6_4
.LBB6_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB6_4
.LBB6_4:                                # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB6_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_7 Depth 2
                                        #       Child Loop BB6_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB6_5 Depth=1
	movl	$0, -24(%rbp)
.LBB6_7:                                # %for.cond9
                                        #   Parent Loop BB6_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB6_7 Depth=2
	movl	$0, -12(%rbp)
.LBB6_9:                                # %for.cond14
                                        #   Parent Loop BB6_5 Depth=1
                                        #     Parent Loop BB6_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB6_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB6_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB6_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_9
.LBB6_12:                               # %for.end
                                        #   in Loop: Header=BB6_7 Depth=2
	jmp	.LBB6_13
.LBB6_13:                               # %for.inc41
                                        #   in Loop: Header=BB6_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_7
.LBB6_14:                               # %for.end43
                                        #   in Loop: Header=BB6_5 Depth=1
	jmp	.LBB6_15
.LBB6_15:                               # %for.inc44
                                        #   in Loop: Header=BB6_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_5
.LBB6_16:                               # %for.end46
	movl	$0, -20(%rbp)
.LBB6_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB6_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	$0, -24(%rbp)
.LBB6_19:                               # %for.cond50
                                        #   Parent Loop BB6_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB6_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB6_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB6_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB6_19
.LBB6_22:                               # %for.end60
                                        #   in Loop: Header=BB6_17 Depth=1
	jmp	.LBB6_23
.LBB6_23:                               # %for.inc61
                                        #   in Loop: Header=BB6_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_17
.LBB6_24:                               # %for.end63
	movl	$0, -16(%rbp)
.LBB6_25:                               # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_27 Depth 2
                                        #       Child Loop BB6_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB6_25 Depth=1
	movl	$0, -12(%rbp)
.LBB6_27:                               # %for.cond69
                                        #   Parent Loop BB6_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB6_29:                               # %for.cond85
                                        #   Parent Loop BB6_25 Depth=1
                                        #     Parent Loop BB6_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB6_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB6_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB6_29
.LBB6_32:                               # %for.end99
                                        #   in Loop: Header=BB6_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB6_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB6_34
	jp	.LBB6_34
	jmp	.LBB6_35
.LBB6_34:                               # %if.then106
                                        #   in Loop: Header=BB6_27 Depth=2
	vmovsd	.LCPI6_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB6_36
.LBB6_35:                               # %if.else
                                        #   in Loop: Header=BB6_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB6_36:                               # %if.end
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB6_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB6_39
.LBB6_38:                               # %if.then137
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB6_39:                               # %if.end143
                                        #   in Loop: Header=BB6_27 Depth=2
	jmp	.LBB6_47
.LBB6_40:                               # %if.else144
                                        #   in Loop: Header=BB6_27 Depth=2
	vmovsd	.LCPI6_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB6_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB6_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB6_46
.LBB6_42:                               # %cond.false168
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB6_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB6_27 Depth=2
	movl	$127, %eax
	jmp	.LBB6_45
.LBB6_44:                               # %cond.false177
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB6_45:                               # %cond.end183
                                        #   in Loop: Header=BB6_27 Depth=2
.LBB6_46:                               # %cond.end185
                                        #   in Loop: Header=BB6_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB6_47:                               # %if.end197
                                        #   in Loop: Header=BB6_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB6_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB6_27
.LBB6_49:                               # %for.end210
                                        #   in Loop: Header=BB6_25 Depth=1
	jmp	.LBB6_50
.LBB6_50:                               # %for.inc211
                                        #   in Loop: Header=BB6_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_25
.LBB6_51:                               # %for.end213
	movl	$0, -16(%rbp)
.LBB6_52:                               # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_54 Depth 2
                                        #       Child Loop BB6_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB6_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB6_52 Depth=1
	movl	$0, -36(%rbp)
.LBB6_54:                               # %for.cond219
                                        #   Parent Loop BB6_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB6_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB6_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB6_54 Depth=2
	movl	$0, -32(%rbp)
.LBB6_56:                               # %for.cond225
                                        #   Parent Loop BB6_52 Depth=1
                                        #     Parent Loop BB6_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB6_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB6_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB6_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB6_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB6_60
.LBB6_59:                               # %if.then246
                                        #   in Loop: Header=BB6_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB6_63
.LBB6_60:                               # %if.end247
                                        #   in Loop: Header=BB6_56 Depth=3
	jmp	.LBB6_61
.LBB6_61:                               # %for.inc248
                                        #   in Loop: Header=BB6_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB6_56
.LBB6_62:                               # %for.end250.loopexit
                                        #   in Loop: Header=BB6_54 Depth=2
	jmp	.LBB6_63
.LBB6_63:                               # %for.end250
                                        #   in Loop: Header=BB6_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB6_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB6_52 Depth=1
	jmp	.LBB6_68
.LBB6_65:                               # %if.end254
                                        #   in Loop: Header=BB6_54 Depth=2
	jmp	.LBB6_66
.LBB6_66:                               # %for.inc255
                                        #   in Loop: Header=BB6_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB6_54
.LBB6_67:                               # %for.end257.loopexit
                                        #   in Loop: Header=BB6_52 Depth=1
	jmp	.LBB6_68
.LBB6_68:                               # %for.end257
                                        #   in Loop: Header=BB6_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB6_70
# %bb.69:                               # %if.then260
	jmp	.LBB6_73
.LBB6_70:                               # %if.end261
                                        #   in Loop: Header=BB6_52 Depth=1
	jmp	.LBB6_71
.LBB6_71:                               # %for.inc262
                                        #   in Loop: Header=BB6_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB6_52
.LBB6_72:                               # %for.end264.loopexit
	jmp	.LBB6_73
.LBB6_73:                               # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$664241568, -64(%rbp)   # imm = 0x279785A0
	jne	.LBB6_75
.LBB6_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_75:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB6_74
.Lfunc_end6:
	.size	test_wp_P_slice.3, .Lfunc_end6-test_wp_P_slice.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.4
.LCPI7_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.4
	.p2align	4, 0x90
	.type	test_wp_B_slice.4,@function
test_wp_B_slice.4:                      # @test_wp_B_slice.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$94769887, -88(%rbp)    # imm = 0x5A612DF
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB7_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB7_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB7_4
.LBB7_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB7_4
.LBB7_4:                                # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB7_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_7 Depth 2
                                        #       Child Loop BB7_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	$0, -24(%rbp)
.LBB7_7:                                # %for.cond9
                                        #   Parent Loop BB7_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	$0, -32(%rbp)
.LBB7_9:                                # %for.cond14
                                        #   Parent Loop BB7_5 Depth=1
                                        #     Parent Loop BB7_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB7_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB7_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_9
.LBB7_12:                               # %for.end
                                        #   in Loop: Header=BB7_7 Depth=2
	jmp	.LBB7_13
.LBB7_13:                               # %for.inc41
                                        #   in Loop: Header=BB7_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_7
.LBB7_14:                               # %for.end43
                                        #   in Loop: Header=BB7_5 Depth=1
	jmp	.LBB7_15
.LBB7_15:                               # %for.inc44
                                        #   in Loop: Header=BB7_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_5
.LBB7_16:                               # %for.end46
	movl	$0, -12(%rbp)
.LBB7_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_19 Depth 2
                                        #       Child Loop BB7_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	$0, -24(%rbp)
.LBB7_19:                               # %for.cond50
                                        #   Parent Loop BB7_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_26
.LBB7_22:                               # %cond.false61
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_25
.LBB7_24:                               # %cond.false71
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_25:                               # %cond.end79
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_26:                               # %cond.end81
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB7_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB7_32
.LBB7_28:                               # %cond.false90
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB7_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	$127, %eax
	jmp	.LBB7_31
.LBB7_30:                               # %cond.false98
                                        #   in Loop: Header=BB7_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB7_31:                               # %cond.end104
                                        #   in Loop: Header=BB7_19 Depth=2
.LBB7_32:                               # %cond.end106
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB7_33:                               # %for.cond108
                                        #   Parent Loop BB7_17 Depth=1
                                        #     Parent Loop BB7_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB7_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB7_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB7_46
.LBB7_36:                               # %if.else
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB7_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB7_42
.LBB7_38:                               # %cond.false145
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB7_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB7_41
.LBB7_40:                               # %cond.false151
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB7_41:                               # %cond.end155
                                        #   in Loop: Header=BB7_33 Depth=3
.LBB7_42:                               # %cond.end157
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB7_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB7_45
.LBB7_44:                               # %if.then183
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB7_45:                               # %if.end
                                        #   in Loop: Header=BB7_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB7_46:                               # %if.end220
                                        #   in Loop: Header=BB7_33 Depth=3
	jmp	.LBB7_47
.LBB7_47:                               # %for.inc221
                                        #   in Loop: Header=BB7_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_33
.LBB7_48:                               # %for.end223
                                        #   in Loop: Header=BB7_19 Depth=2
	jmp	.LBB7_49
.LBB7_49:                               # %for.inc224
                                        #   in Loop: Header=BB7_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_19
.LBB7_50:                               # %for.end226
                                        #   in Loop: Header=BB7_17 Depth=1
	jmp	.LBB7_51
.LBB7_51:                               # %for.inc227
                                        #   in Loop: Header=BB7_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_17
.LBB7_52:                               # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB7_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB7_54:                               # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_56 Depth 2
                                        #       Child Loop BB7_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	$0, -24(%rbp)
.LBB7_56:                               # %for.cond235
                                        #   Parent Loop BB7_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	$0, -20(%rbp)
.LBB7_58:                               # %for.cond238
                                        #   Parent Loop BB7_54 Depth=1
                                        #     Parent Loop BB7_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB7_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_62
.LBB7_61:                               # %cond.false243
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_62:                               # %cond.end244
                                        #   in Loop: Header=BB7_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB7_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_58
.LBB7_64:                               # %for.end276
                                        #   in Loop: Header=BB7_56 Depth=2
	jmp	.LBB7_65
.LBB7_65:                               # %for.inc277
                                        #   in Loop: Header=BB7_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_56
.LBB7_66:                               # %for.end279
                                        #   in Loop: Header=BB7_54 Depth=1
	jmp	.LBB7_67
.LBB7_67:                               # %for.inc280
                                        #   in Loop: Header=BB7_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_54
.LBB7_68:                               # %for.end282
	movl	$0, -16(%rbp)
.LBB7_69:                               # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	$0, -28(%rbp)
.LBB7_71:                               # %for.cond287
                                        #   Parent Loop BB7_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB7_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_71
.LBB7_74:                               # %for.end327
                                        #   in Loop: Header=BB7_69 Depth=1
	jmp	.LBB7_75
.LBB7_75:                               # %for.inc328
                                        #   in Loop: Header=BB7_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_69
.LBB7_76:                               # %for.end330
	jmp	.LBB7_142
.LBB7_77:                               # %if.else331
	movl	$0, -12(%rbp)
.LBB7_78:                               # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB7_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	$0, -24(%rbp)
.LBB7_80:                               # %for.cond335
                                        #   Parent Loop BB7_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB7_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB7_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB7_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_80
.LBB7_83:                               # %for.end345
                                        #   in Loop: Header=BB7_78 Depth=1
	jmp	.LBB7_84
.LBB7_84:                               # %for.inc346
                                        #   in Loop: Header=BB7_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_78
.LBB7_85:                               # %for.end348
	movl	$0, -16(%rbp)
.LBB7_86:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_88 Depth 2
                                        #       Child Loop BB7_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	$0, -32(%rbp)
.LBB7_88:                               # %for.cond354
                                        #   Parent Loop BB7_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB7_90:                               # %for.cond372
                                        #   Parent Loop BB7_86 Depth=1
                                        #     Parent Loop BB7_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB7_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB7_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_90
.LBB7_93:                               # %for.end389
                                        #   in Loop: Header=BB7_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB7_94
	jp	.LBB7_94
	jmp	.LBB7_95
.LBB7_94:                               # %if.then396
                                        #   in Loop: Header=BB7_88 Depth=2
	vmovsd	.LCPI7_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB7_96
.LBB7_95:                               # %if.else406
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_96:                               # %if.end407
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB7_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB7_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB7_99
.LBB7_98:                               # %if.then413
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB7_99:                               # %if.end414
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB7_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB7_88
.LBB7_101:                              # %for.end447
                                        #   in Loop: Header=BB7_86 Depth=1
	jmp	.LBB7_102
.LBB7_102:                              # %for.inc448
                                        #   in Loop: Header=BB7_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_86
.LBB7_103:                              # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB7_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB7_105:                              # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_107 Depth 2
                                        #       Child Loop BB7_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	$0, -28(%rbp)
.LBB7_107:                              # %for.cond459
                                        #   Parent Loop BB7_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	$0, -20(%rbp)
.LBB7_109:                              # %for.cond465
                                        #   Parent Loop BB7_105 Depth=1
                                        #     Parent Loop BB7_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB7_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB7_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_109
.LBB7_112:                              # %for.end495
                                        #   in Loop: Header=BB7_107 Depth=2
	jmp	.LBB7_113
.LBB7_113:                              # %for.inc496
                                        #   in Loop: Header=BB7_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_107
.LBB7_114:                              # %for.end498
                                        #   in Loop: Header=BB7_105 Depth=1
	jmp	.LBB7_115
.LBB7_115:                              # %for.inc499
                                        #   in Loop: Header=BB7_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_105
.LBB7_116:                              # %for.end501
	jmp	.LBB7_126
.LBB7_117:                              # %if.else502
	movl	$0, -16(%rbp)
.LBB7_118:                              # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	$0, -28(%rbp)
.LBB7_120:                              # %for.cond508
                                        #   Parent Loop BB7_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB7_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_120
.LBB7_123:                              # %for.end549
                                        #   in Loop: Header=BB7_118 Depth=1
	jmp	.LBB7_124
.LBB7_124:                              # %for.inc550
                                        #   in Loop: Header=BB7_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_118
.LBB7_125:                              # %for.end552
	jmp	.LBB7_126
.LBB7_126:                              # %if.end553
	movl	$0, -12(%rbp)
.LBB7_127:                              # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_129 Depth 2
                                        #       Child Loop BB7_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB7_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	$0, -24(%rbp)
.LBB7_129:                              # %for.cond558
                                        #   Parent Loop BB7_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB7_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	$0, -20(%rbp)
.LBB7_131:                              # %for.cond562
                                        #   Parent Loop BB7_127 Depth=1
                                        #     Parent Loop BB7_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB7_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB7_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB7_135
.LBB7_134:                              # %cond.false569
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB7_135:                              # %cond.end570
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB7_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_131
.LBB7_137:                              # %for.end598
                                        #   in Loop: Header=BB7_129 Depth=2
	jmp	.LBB7_138
.LBB7_138:                              # %for.inc599
                                        #   in Loop: Header=BB7_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB7_129
.LBB7_139:                              # %for.end601
                                        #   in Loop: Header=BB7_127 Depth=1
	jmp	.LBB7_140
.LBB7_140:                              # %for.inc602
                                        #   in Loop: Header=BB7_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB7_127
.LBB7_141:                              # %for.end604
	jmp	.LBB7_142
.LBB7_142:                              # %if.end605
	movl	$0, -16(%rbp)
.LBB7_143:                              # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_145 Depth 2
                                        #       Child Loop BB7_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB7_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	$0, -28(%rbp)
.LBB7_145:                              # %for.cond611
                                        #   Parent Loop BB7_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB7_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB7_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$0, -20(%rbp)
.LBB7_147:                              # %for.cond617
                                        #   Parent Loop BB7_143 Depth=1
                                        #     Parent Loop BB7_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB7_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB7_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB7_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB7_151
.LBB7_150:                              # %if.then638
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB7_154
.LBB7_151:                              # %if.end639
                                        #   in Loop: Header=BB7_147 Depth=3
	jmp	.LBB7_152
.LBB7_152:                              # %for.inc640
                                        #   in Loop: Header=BB7_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB7_147
.LBB7_153:                              # %for.end642.loopexit
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_154
.LBB7_154:                              # %for.end642
                                        #   in Loop: Header=BB7_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB7_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_156:                              # %if.end646
                                        #   in Loop: Header=BB7_145 Depth=2
	jmp	.LBB7_157
.LBB7_157:                              # %for.inc647
                                        #   in Loop: Header=BB7_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB7_145
.LBB7_158:                              # %for.end649.loopexit
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_159
.LBB7_159:                              # %for.end649
                                        #   in Loop: Header=BB7_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB7_161
# %bb.160:                              # %if.then652
	jmp	.LBB7_164
.LBB7_161:                              # %if.end653
                                        #   in Loop: Header=BB7_143 Depth=1
	jmp	.LBB7_162
.LBB7_162:                              # %for.inc654
                                        #   in Loop: Header=BB7_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB7_143
.LBB7_163:                              # %for.end656.loopexit
	jmp	.LBB7_164
.LBB7_164:                              # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$94769887, -88(%rbp)    # imm = 0x5A612DF
	jne	.LBB7_166
.LBB7_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_166:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB7_165
.Lfunc_end7:
	.size	test_wp_B_slice.4, .Lfunc_end7-test_wp_B_slice.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.5
.LCPI8_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.5
	.p2align	4, 0x90
	.type	test_wp_P_slice.5,@function
test_wp_P_slice.5:                      # @test_wp_P_slice.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1010155874, -60(%rbp)  # imm = 0x3C35C162
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB8_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB8_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB8_4
.LBB8_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB8_4
.LBB8_4:                                # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB8_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_7 Depth 2
                                        #       Child Loop BB8_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	$0, -24(%rbp)
.LBB8_7:                                # %for.cond9
                                        #   Parent Loop BB8_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	$0, -12(%rbp)
.LBB8_9:                                # %for.cond14
                                        #   Parent Loop BB8_5 Depth=1
                                        #     Parent Loop BB8_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB8_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB8_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB8_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_9
.LBB8_12:                               # %for.end
                                        #   in Loop: Header=BB8_7 Depth=2
	jmp	.LBB8_13
.LBB8_13:                               # %for.inc41
                                        #   in Loop: Header=BB8_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_7
.LBB8_14:                               # %for.end43
                                        #   in Loop: Header=BB8_5 Depth=1
	jmp	.LBB8_15
.LBB8_15:                               # %for.inc44
                                        #   in Loop: Header=BB8_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB8_5
.LBB8_16:                               # %for.end46
	movl	$0, -20(%rbp)
.LBB8_17:                               # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB8_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	$0, -24(%rbp)
.LBB8_19:                               # %for.cond50
                                        #   Parent Loop BB8_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB8_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB8_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB8_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB8_19
.LBB8_22:                               # %for.end60
                                        #   in Loop: Header=BB8_17 Depth=1
	jmp	.LBB8_23
.LBB8_23:                               # %for.inc61
                                        #   in Loop: Header=BB8_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB8_17
.LBB8_24:                               # %for.end63
	movl	$0, -16(%rbp)
.LBB8_25:                               # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_27 Depth 2
                                        #       Child Loop BB8_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	$0, -12(%rbp)
.LBB8_27:                               # %for.cond69
                                        #   Parent Loop BB8_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB8_29:                               # %for.cond85
                                        #   Parent Loop BB8_25 Depth=1
                                        #     Parent Loop BB8_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB8_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB8_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB8_29
.LBB8_32:                               # %for.end99
                                        #   in Loop: Header=BB8_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB8_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB8_34
	jp	.LBB8_34
	jmp	.LBB8_35
.LBB8_34:                               # %if.then106
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB8_36
.LBB8_35:                               # %if.else
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_36:                               # %if.end
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB8_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_39
.LBB8_38:                               # %if.then137
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB8_39:                               # %if.end143
                                        #   in Loop: Header=BB8_27 Depth=2
	jmp	.LBB8_47
.LBB8_40:                               # %if.else144
                                        #   in Loop: Header=BB8_27 Depth=2
	vmovsd	.LCPI8_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB8_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB8_46
.LBB8_42:                               # %cond.false168
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB8_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	$127, %eax
	jmp	.LBB8_45
.LBB8_44:                               # %cond.false177
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB8_45:                               # %cond.end183
                                        #   in Loop: Header=BB8_27 Depth=2
.LBB8_46:                               # %cond.end185
                                        #   in Loop: Header=BB8_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB8_47:                               # %if.end197
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB8_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB8_27
.LBB8_49:                               # %for.end210
                                        #   in Loop: Header=BB8_25 Depth=1
	jmp	.LBB8_50
.LBB8_50:                               # %for.inc211
                                        #   in Loop: Header=BB8_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_25
.LBB8_51:                               # %for.end213
	movl	$0, -16(%rbp)
.LBB8_52:                               # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_54 Depth 2
                                        #       Child Loop BB8_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB8_52 Depth=1
	movl	$0, -32(%rbp)
.LBB8_54:                               # %for.cond219
                                        #   Parent Loop BB8_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB8_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB8_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB8_54 Depth=2
	movl	$0, -36(%rbp)
.LBB8_56:                               # %for.cond225
                                        #   Parent Loop BB8_52 Depth=1
                                        #     Parent Loop BB8_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB8_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB8_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB8_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB8_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB8_60
.LBB8_59:                               # %if.then246
                                        #   in Loop: Header=BB8_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB8_63
.LBB8_60:                               # %if.end247
                                        #   in Loop: Header=BB8_56 Depth=3
	jmp	.LBB8_61
.LBB8_61:                               # %for.inc248
                                        #   in Loop: Header=BB8_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB8_56
.LBB8_62:                               # %for.end250.loopexit
                                        #   in Loop: Header=BB8_54 Depth=2
	jmp	.LBB8_63
.LBB8_63:                               # %for.end250
                                        #   in Loop: Header=BB8_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB8_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB8_52 Depth=1
	jmp	.LBB8_68
.LBB8_65:                               # %if.end254
                                        #   in Loop: Header=BB8_54 Depth=2
	jmp	.LBB8_66
.LBB8_66:                               # %for.inc255
                                        #   in Loop: Header=BB8_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB8_54
.LBB8_67:                               # %for.end257.loopexit
                                        #   in Loop: Header=BB8_52 Depth=1
	jmp	.LBB8_68
.LBB8_68:                               # %for.end257
                                        #   in Loop: Header=BB8_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB8_70
# %bb.69:                               # %if.then260
	jmp	.LBB8_73
.LBB8_70:                               # %if.end261
                                        #   in Loop: Header=BB8_52 Depth=1
	jmp	.LBB8_71
.LBB8_71:                               # %for.inc262
                                        #   in Loop: Header=BB8_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB8_52
.LBB8_72:                               # %for.end264.loopexit
	jmp	.LBB8_73
.LBB8_73:                               # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1010155874, -60(%rbp)  # imm = 0x3C35C162
	jne	.LBB8_75
.LBB8_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_75:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_74
.Lfunc_end8:
	.size	test_wp_P_slice.5, .Lfunc_end8-test_wp_P_slice.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.6
.LCPI9_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.6
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.6,@function
estimate_weighting_factor_P_slice.6:    # @estimate_weighting_factor_P_slice.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$90265355, -64(%rbp)    # imm = 0x561570B
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB9_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB9_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB9_4
.LBB9_3:                                # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB9_4
.LBB9_4:                                # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB9_5:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_7 Depth 2
                                        #       Child Loop BB9_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB9_5 Depth=1
	movl	$0, -16(%rbp)
.LBB9_7:                                # %for.cond12
                                        #   Parent Loop BB9_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB9_7 Depth=2
	movl	$0, -4(%rbp)
.LBB9_9:                                # %for.cond17
                                        #   Parent Loop BB9_5 Depth=1
                                        #     Parent Loop BB9_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB9_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB9_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB9_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_9
.LBB9_12:                               # %for.end
                                        #   in Loop: Header=BB9_7 Depth=2
	jmp	.LBB9_13
.LBB9_13:                               # %for.inc48
                                        #   in Loop: Header=BB9_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_7
.LBB9_14:                               # %for.end50
                                        #   in Loop: Header=BB9_5 Depth=1
	jmp	.LBB9_15
.LBB9_15:                               # %for.inc51
                                        #   in Loop: Header=BB9_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_5
.LBB9_16:                               # %for.end53
	movl	$0, -12(%rbp)
.LBB9_17:                               # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB9_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB9_17 Depth=1
	movl	$0, -16(%rbp)
.LBB9_19:                               # %for.cond57
                                        #   Parent Loop BB9_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB9_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB9_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB9_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_19
.LBB9_22:                               # %for.end67
                                        #   in Loop: Header=BB9_17 Depth=1
	jmp	.LBB9_23
.LBB9_23:                               # %for.inc68
                                        #   in Loop: Header=BB9_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_17
.LBB9_24:                               # %for.end70
	movl	$0, -8(%rbp)
.LBB9_25:                               # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_27 Depth 2
                                        #       Child Loop BB9_29 Depth 3
                                        #       Child Loop BB9_48 Depth 3
                                        #       Child Loop BB9_58 Depth 3
                                        #         Child Loop BB9_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB9_25 Depth=1
	movl	$0, -4(%rbp)
.LBB9_27:                               # %for.cond76
                                        #   Parent Loop BB9_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_29 Depth 3
                                        #       Child Loop BB9_48 Depth 3
                                        #       Child Loop BB9_58 Depth 3
                                        #         Child Loop BB9_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB9_29:                               # %for.cond92
                                        #   Parent Loop BB9_25 Depth=1
                                        #     Parent Loop BB9_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB9_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB9_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_29
.LBB9_32:                               # %for.end106
                                        #   in Loop: Header=BB9_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB9_40
	jp	.LBB9_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB9_34
	jp	.LBB9_34
	jmp	.LBB9_35
.LBB9_34:                               # %if.then114
                                        #   in Loop: Header=BB9_27 Depth=2
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB9_36
.LBB9_35:                               # %if.else
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB9_36:                               # %if.end
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB9_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB9_39
.LBB9_38:                               # %if.then147
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB9_39:                               # %if.end154
                                        #   in Loop: Header=BB9_27 Depth=2
	jmp	.LBB9_47
.LBB9_40:                               # %if.else155
                                        #   in Loop: Header=BB9_27 Depth=2
	vmovsd	.LCPI9_0(%rip), %xmm0   # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB9_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB9_46
.LBB9_42:                               # %cond.false179
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB9_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	$127, %eax
	jmp	.LBB9_45
.LBB9_44:                               # %cond.false188
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB9_45:                               # %cond.end194
                                        #   in Loop: Header=BB9_27 Depth=2
.LBB9_46:                               # %cond.end196
                                        #   in Loop: Header=BB9_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB9_47:                               # %if.end209
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB9_48:                               # %for.cond222
                                        #   Parent Loop BB9_25 Depth=1
                                        #     Parent Loop BB9_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB9_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB9_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB9_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB9_55
.LBB9_51:                               # %cond.false248
                                        #   in Loop: Header=BB9_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB9_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_54
.LBB9_53:                               # %cond.false270
                                        #   in Loop: Header=BB9_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB9_54:                               # %cond.end288
                                        #   in Loop: Header=BB9_48 Depth=3
.LBB9_55:                               # %cond.end290
                                        #   in Loop: Header=BB9_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB9_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_48
.LBB9_57:                               # %for.end297
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	$0, -12(%rbp)
.LBB9_58:                               # %for.cond298
                                        #   Parent Loop BB9_25 Depth=1
                                        #     Parent Loop BB9_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB9_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB9_58 Depth=3
	movl	$0, -16(%rbp)
.LBB9_60:                               # %for.cond305
                                        #   Parent Loop BB9_25 Depth=1
                                        #     Parent Loop BB9_27 Depth=2
                                        #       Parent Loop BB9_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB9_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB9_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB9_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB9_67
.LBB9_63:                               # %cond.false336
                                        #   in Loop: Header=BB9_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB9_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB9_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB9_66
.LBB9_65:                               # %cond.false364
                                        #   in Loop: Header=BB9_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB9_66:                               # %cond.end387
                                        #   in Loop: Header=BB9_60 Depth=4
.LBB9_67:                               # %cond.end389
                                        #   in Loop: Header=BB9_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB9_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB9_60
.LBB9_69:                               # %for.end400
                                        #   in Loop: Header=BB9_58 Depth=3
	jmp	.LBB9_70
.LBB9_70:                               # %for.inc401
                                        #   in Loop: Header=BB9_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB9_58
.LBB9_71:                               # %for.end403
                                        #   in Loop: Header=BB9_27 Depth=2
	jmp	.LBB9_72
.LBB9_72:                               # %for.inc404
                                        #   in Loop: Header=BB9_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_27
.LBB9_73:                               # %for.end406
                                        #   in Loop: Header=BB9_25 Depth=1
	jmp	.LBB9_74
.LBB9_74:                               # %for.inc407
                                        #   in Loop: Header=BB9_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_25
.LBB9_75:                               # %for.end409
	movl	$0, -8(%rbp)
.LBB9_76:                               # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_78 Depth 2
                                        #       Child Loop BB9_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB9_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB9_76 Depth=1
	movl	$0, -20(%rbp)
.LBB9_78:                               # %for.cond415
                                        #   Parent Loop BB9_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB9_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB9_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB9_78 Depth=2
	movl	$0, -24(%rbp)
.LBB9_80:                               # %for.cond421
                                        #   Parent Loop BB9_76 Depth=1
                                        #     Parent Loop BB9_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB9_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB9_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB9_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB9_80
.LBB9_83:                               # %for.end451
                                        #   in Loop: Header=BB9_78 Depth=2
	jmp	.LBB9_84
.LBB9_84:                               # %for.inc452
                                        #   in Loop: Header=BB9_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB9_78
.LBB9_85:                               # %for.end454
                                        #   in Loop: Header=BB9_76 Depth=1
	jmp	.LBB9_86
.LBB9_86:                               # %for.inc455
                                        #   in Loop: Header=BB9_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_76
.LBB9_87:                               # %for.end457
	cmpl	$90265355, -64(%rbp)    # imm = 0x561570B
	jne	.LBB9_89
.LBB9_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_89:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_88
.Lfunc_end9:
	.size	estimate_weighting_factor_P_slice.6, .Lfunc_end9-estimate_weighting_factor_P_slice.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.7
.LCPI10_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.7
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.7,@function
estimate_weighting_factor_P_slice.7:    # @estimate_weighting_factor_P_slice.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$288746313, -60(%rbp)   # imm = 0x1135EB49
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB10_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB10_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB10_4
.LBB10_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB10_4
.LBB10_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB10_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_7 Depth 2
                                        #       Child Loop BB10_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	$0, -16(%rbp)
.LBB10_7:                               # %for.cond12
                                        #   Parent Loop BB10_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB10_7 Depth=2
	movl	$0, -4(%rbp)
.LBB10_9:                               # %for.cond17
                                        #   Parent Loop BB10_5 Depth=1
                                        #     Parent Loop BB10_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB10_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB10_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB10_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_9
.LBB10_12:                              # %for.end
                                        #   in Loop: Header=BB10_7 Depth=2
	jmp	.LBB10_13
.LBB10_13:                              # %for.inc48
                                        #   in Loop: Header=BB10_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_7
.LBB10_14:                              # %for.end50
                                        #   in Loop: Header=BB10_5 Depth=1
	jmp	.LBB10_15
.LBB10_15:                              # %for.inc51
                                        #   in Loop: Header=BB10_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_5
.LBB10_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB10_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB10_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	$0, -16(%rbp)
.LBB10_19:                              # %for.cond57
                                        #   Parent Loop BB10_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB10_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB10_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB10_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_19
.LBB10_22:                              # %for.end67
                                        #   in Loop: Header=BB10_17 Depth=1
	jmp	.LBB10_23
.LBB10_23:                              # %for.inc68
                                        #   in Loop: Header=BB10_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_17
.LBB10_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB10_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_27 Depth 2
                                        #       Child Loop BB10_29 Depth 3
                                        #       Child Loop BB10_48 Depth 3
                                        #       Child Loop BB10_58 Depth 3
                                        #         Child Loop BB10_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	$0, -4(%rbp)
.LBB10_27:                              # %for.cond76
                                        #   Parent Loop BB10_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_29 Depth 3
                                        #       Child Loop BB10_48 Depth 3
                                        #       Child Loop BB10_58 Depth 3
                                        #         Child Loop BB10_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB10_29:                              # %for.cond92
                                        #   Parent Loop BB10_25 Depth=1
                                        #     Parent Loop BB10_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB10_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB10_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_29
.LBB10_32:                              # %for.end106
                                        #   in Loop: Header=BB10_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB10_40
	jp	.LBB10_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB10_34
	jp	.LBB10_34
	jmp	.LBB10_35
.LBB10_34:                              # %if.then114
                                        #   in Loop: Header=BB10_27 Depth=2
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB10_36
.LBB10_35:                              # %if.else
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB10_36:                              # %if.end
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB10_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB10_39
.LBB10_38:                              # %if.then147
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB10_39:                              # %if.end154
                                        #   in Loop: Header=BB10_27 Depth=2
	jmp	.LBB10_47
.LBB10_40:                              # %if.else155
                                        #   in Loop: Header=BB10_27 Depth=2
	vmovsd	.LCPI10_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB10_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB10_46
.LBB10_42:                              # %cond.false179
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB10_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	$127, %eax
	jmp	.LBB10_45
.LBB10_44:                              # %cond.false188
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB10_45:                              # %cond.end194
                                        #   in Loop: Header=BB10_27 Depth=2
.LBB10_46:                              # %cond.end196
                                        #   in Loop: Header=BB10_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB10_47:                              # %if.end209
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB10_48:                              # %for.cond222
                                        #   Parent Loop BB10_25 Depth=1
                                        #     Parent Loop BB10_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB10_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB10_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB10_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB10_55
.LBB10_51:                              # %cond.false248
                                        #   in Loop: Header=BB10_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB10_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_54
.LBB10_53:                              # %cond.false270
                                        #   in Loop: Header=BB10_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB10_54:                              # %cond.end288
                                        #   in Loop: Header=BB10_48 Depth=3
.LBB10_55:                              # %cond.end290
                                        #   in Loop: Header=BB10_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB10_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_48
.LBB10_57:                              # %for.end297
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	$0, -12(%rbp)
.LBB10_58:                              # %for.cond298
                                        #   Parent Loop BB10_25 Depth=1
                                        #     Parent Loop BB10_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB10_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB10_58 Depth=3
	movl	$0, -16(%rbp)
.LBB10_60:                              # %for.cond305
                                        #   Parent Loop BB10_25 Depth=1
                                        #     Parent Loop BB10_27 Depth=2
                                        #       Parent Loop BB10_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB10_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB10_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB10_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB10_67
.LBB10_63:                              # %cond.false336
                                        #   in Loop: Header=BB10_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB10_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB10_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB10_66
.LBB10_65:                              # %cond.false364
                                        #   in Loop: Header=BB10_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB10_66:                              # %cond.end387
                                        #   in Loop: Header=BB10_60 Depth=4
.LBB10_67:                              # %cond.end389
                                        #   in Loop: Header=BB10_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB10_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB10_60
.LBB10_69:                              # %for.end400
                                        #   in Loop: Header=BB10_58 Depth=3
	jmp	.LBB10_70
.LBB10_70:                              # %for.inc401
                                        #   in Loop: Header=BB10_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB10_58
.LBB10_71:                              # %for.end403
                                        #   in Loop: Header=BB10_27 Depth=2
	jmp	.LBB10_72
.LBB10_72:                              # %for.inc404
                                        #   in Loop: Header=BB10_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_27
.LBB10_73:                              # %for.end406
                                        #   in Loop: Header=BB10_25 Depth=1
	jmp	.LBB10_74
.LBB10_74:                              # %for.inc407
                                        #   in Loop: Header=BB10_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_25
.LBB10_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB10_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_78 Depth 2
                                        #       Child Loop BB10_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB10_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB10_76 Depth=1
	movl	$0, -20(%rbp)
.LBB10_78:                              # %for.cond415
                                        #   Parent Loop BB10_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB10_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB10_78 Depth=2
	movl	$0, -24(%rbp)
.LBB10_80:                              # %for.cond421
                                        #   Parent Loop BB10_76 Depth=1
                                        #     Parent Loop BB10_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB10_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB10_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB10_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB10_80
.LBB10_83:                              # %for.end451
                                        #   in Loop: Header=BB10_78 Depth=2
	jmp	.LBB10_84
.LBB10_84:                              # %for.inc452
                                        #   in Loop: Header=BB10_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB10_78
.LBB10_85:                              # %for.end454
                                        #   in Loop: Header=BB10_76 Depth=1
	jmp	.LBB10_86
.LBB10_86:                              # %for.inc455
                                        #   in Loop: Header=BB10_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_76
.LBB10_87:                              # %for.end457
	cmpl	$288746313, -60(%rbp)   # imm = 0x1135EB49
	jne	.LBB10_89
.LBB10_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_88
.Lfunc_end10:
	.size	estimate_weighting_factor_P_slice.7, .Lfunc_end10-estimate_weighting_factor_P_slice.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.8
.LCPI11_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.8
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.8,@function
estimate_weighting_factor_P_slice.8:    # @estimate_weighting_factor_P_slice.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1708850096, -60(%rbp)  # imm = 0x65DAFBB0
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB11_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB11_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB11_4
.LBB11_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB11_4
.LBB11_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB11_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_7 Depth 2
                                        #       Child Loop BB11_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	$0, -16(%rbp)
.LBB11_7:                               # %for.cond12
                                        #   Parent Loop BB11_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	$0, -4(%rbp)
.LBB11_9:                               # %for.cond17
                                        #   Parent Loop BB11_5 Depth=1
                                        #     Parent Loop BB11_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB11_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB11_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB11_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_9
.LBB11_12:                              # %for.end
                                        #   in Loop: Header=BB11_7 Depth=2
	jmp	.LBB11_13
.LBB11_13:                              # %for.inc48
                                        #   in Loop: Header=BB11_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_7
.LBB11_14:                              # %for.end50
                                        #   in Loop: Header=BB11_5 Depth=1
	jmp	.LBB11_15
.LBB11_15:                              # %for.inc51
                                        #   in Loop: Header=BB11_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_5
.LBB11_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB11_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB11_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	$0, -16(%rbp)
.LBB11_19:                              # %for.cond57
                                        #   Parent Loop BB11_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB11_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB11_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB11_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_19
.LBB11_22:                              # %for.end67
                                        #   in Loop: Header=BB11_17 Depth=1
	jmp	.LBB11_23
.LBB11_23:                              # %for.inc68
                                        #   in Loop: Header=BB11_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_17
.LBB11_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB11_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_27 Depth 2
                                        #       Child Loop BB11_29 Depth 3
                                        #       Child Loop BB11_48 Depth 3
                                        #       Child Loop BB11_58 Depth 3
                                        #         Child Loop BB11_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	$0, -4(%rbp)
.LBB11_27:                              # %for.cond76
                                        #   Parent Loop BB11_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_29 Depth 3
                                        #       Child Loop BB11_48 Depth 3
                                        #       Child Loop BB11_58 Depth 3
                                        #         Child Loop BB11_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB11_29:                              # %for.cond92
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB11_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB11_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_29
.LBB11_32:                              # %for.end106
                                        #   in Loop: Header=BB11_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB11_40
	jp	.LBB11_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB11_34
	jp	.LBB11_34
	jmp	.LBB11_35
.LBB11_34:                              # %if.then114
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB11_36
.LBB11_35:                              # %if.else
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_36:                              # %if.end
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB11_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_39
.LBB11_38:                              # %if.then147
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_39:                              # %if.end154
                                        #   in Loop: Header=BB11_27 Depth=2
	jmp	.LBB11_47
.LBB11_40:                              # %if.else155
                                        #   in Loop: Header=BB11_27 Depth=2
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB11_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB11_46
.LBB11_42:                              # %cond.false179
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB11_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$127, %eax
	jmp	.LBB11_45
.LBB11_44:                              # %cond.false188
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB11_45:                              # %cond.end194
                                        #   in Loop: Header=BB11_27 Depth=2
.LBB11_46:                              # %cond.end196
                                        #   in Loop: Header=BB11_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB11_47:                              # %if.end209
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB11_48:                              # %for.cond222
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB11_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB11_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB11_55
.LBB11_51:                              # %cond.false248
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_54
.LBB11_53:                              # %cond.false270
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB11_54:                              # %cond.end288
                                        #   in Loop: Header=BB11_48 Depth=3
.LBB11_55:                              # %cond.end290
                                        #   in Loop: Header=BB11_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB11_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_48
.LBB11_57:                              # %for.end297
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	$0, -12(%rbp)
.LBB11_58:                              # %for.cond298
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB11_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB11_58 Depth=3
	movl	$0, -16(%rbp)
.LBB11_60:                              # %for.cond305
                                        #   Parent Loop BB11_25 Depth=1
                                        #     Parent Loop BB11_27 Depth=2
                                        #       Parent Loop BB11_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB11_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB11_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB11_67
.LBB11_63:                              # %cond.false336
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB11_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_66
.LBB11_65:                              # %cond.false364
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB11_66:                              # %cond.end387
                                        #   in Loop: Header=BB11_60 Depth=4
.LBB11_67:                              # %cond.end389
                                        #   in Loop: Header=BB11_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB11_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_60
.LBB11_69:                              # %for.end400
                                        #   in Loop: Header=BB11_58 Depth=3
	jmp	.LBB11_70
.LBB11_70:                              # %for.inc401
                                        #   in Loop: Header=BB11_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_58
.LBB11_71:                              # %for.end403
                                        #   in Loop: Header=BB11_27 Depth=2
	jmp	.LBB11_72
.LBB11_72:                              # %for.inc404
                                        #   in Loop: Header=BB11_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_27
.LBB11_73:                              # %for.end406
                                        #   in Loop: Header=BB11_25 Depth=1
	jmp	.LBB11_74
.LBB11_74:                              # %for.inc407
                                        #   in Loop: Header=BB11_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_25
.LBB11_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB11_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_78 Depth 2
                                        #       Child Loop BB11_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB11_76 Depth=1
	movl	$0, -20(%rbp)
.LBB11_78:                              # %for.cond415
                                        #   Parent Loop BB11_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB11_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB11_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB11_78 Depth=2
	movl	$0, -24(%rbp)
.LBB11_80:                              # %for.cond421
                                        #   Parent Loop BB11_76 Depth=1
                                        #     Parent Loop BB11_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB11_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB11_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB11_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB11_80
.LBB11_83:                              # %for.end451
                                        #   in Loop: Header=BB11_78 Depth=2
	jmp	.LBB11_84
.LBB11_84:                              # %for.inc452
                                        #   in Loop: Header=BB11_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_78
.LBB11_85:                              # %for.end454
                                        #   in Loop: Header=BB11_76 Depth=1
	jmp	.LBB11_86
.LBB11_86:                              # %for.inc455
                                        #   in Loop: Header=BB11_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_76
.LBB11_87:                              # %for.end457
	cmpl	$1708850096, -60(%rbp)  # imm = 0x65DAFBB0
	jne	.LBB11_89
.LBB11_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_88
.Lfunc_end11:
	.size	estimate_weighting_factor_P_slice.8, .Lfunc_end11-estimate_weighting_factor_P_slice.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.9
.LCPI12_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.9
	.p2align	4, 0x90
	.type	test_wp_P_slice.9,@function
test_wp_P_slice.9:                      # @test_wp_P_slice.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$219893787, -64(%rbp)   # imm = 0xD1B501B
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB12_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB12_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB12_4
.LBB12_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB12_4
.LBB12_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB12_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_7 Depth 2
                                        #       Child Loop BB12_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB12_5 Depth=1
	movl	$0, -24(%rbp)
.LBB12_7:                               # %for.cond9
                                        #   Parent Loop BB12_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	$0, -12(%rbp)
.LBB12_9:                               # %for.cond14
                                        #   Parent Loop BB12_5 Depth=1
                                        #     Parent Loop BB12_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB12_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB12_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB12_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_9
.LBB12_12:                              # %for.end
                                        #   in Loop: Header=BB12_7 Depth=2
	jmp	.LBB12_13
.LBB12_13:                              # %for.inc41
                                        #   in Loop: Header=BB12_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_7
.LBB12_14:                              # %for.end43
                                        #   in Loop: Header=BB12_5 Depth=1
	jmp	.LBB12_15
.LBB12_15:                              # %for.inc44
                                        #   in Loop: Header=BB12_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_5
.LBB12_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB12_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB12_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	$0, -24(%rbp)
.LBB12_19:                              # %for.cond50
                                        #   Parent Loop BB12_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB12_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB12_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB12_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB12_19
.LBB12_22:                              # %for.end60
                                        #   in Loop: Header=BB12_17 Depth=1
	jmp	.LBB12_23
.LBB12_23:                              # %for.inc61
                                        #   in Loop: Header=BB12_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_17
.LBB12_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB12_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_27 Depth 2
                                        #       Child Loop BB12_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB12_25 Depth=1
	movl	$0, -12(%rbp)
.LBB12_27:                              # %for.cond69
                                        #   Parent Loop BB12_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB12_29:                              # %for.cond85
                                        #   Parent Loop BB12_25 Depth=1
                                        #     Parent Loop BB12_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB12_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB12_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB12_29
.LBB12_32:                              # %for.end99
                                        #   in Loop: Header=BB12_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB12_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB12_34
	jp	.LBB12_34
	jmp	.LBB12_35
.LBB12_34:                              # %if.then106
                                        #   in Loop: Header=BB12_27 Depth=2
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB12_36
.LBB12_35:                              # %if.else
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB12_36:                              # %if.end
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB12_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB12_39
.LBB12_38:                              # %if.then137
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB12_39:                              # %if.end143
                                        #   in Loop: Header=BB12_27 Depth=2
	jmp	.LBB12_47
.LBB12_40:                              # %if.else144
                                        #   in Loop: Header=BB12_27 Depth=2
	vmovsd	.LCPI12_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB12_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB12_46
.LBB12_42:                              # %cond.false168
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB12_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	$127, %eax
	jmp	.LBB12_45
.LBB12_44:                              # %cond.false177
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB12_45:                              # %cond.end183
                                        #   in Loop: Header=BB12_27 Depth=2
.LBB12_46:                              # %cond.end185
                                        #   in Loop: Header=BB12_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB12_47:                              # %if.end197
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB12_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB12_27
.LBB12_49:                              # %for.end210
                                        #   in Loop: Header=BB12_25 Depth=1
	jmp	.LBB12_50
.LBB12_50:                              # %for.inc211
                                        #   in Loop: Header=BB12_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_25
.LBB12_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB12_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_54 Depth 2
                                        #       Child Loop BB12_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB12_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	$0, -36(%rbp)
.LBB12_54:                              # %for.cond219
                                        #   Parent Loop BB12_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB12_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB12_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	$0, -32(%rbp)
.LBB12_56:                              # %for.cond225
                                        #   Parent Loop BB12_52 Depth=1
                                        #     Parent Loop BB12_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB12_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB12_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB12_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB12_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB12_60
.LBB12_59:                              # %if.then246
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB12_63
.LBB12_60:                              # %if.end247
                                        #   in Loop: Header=BB12_56 Depth=3
	jmp	.LBB12_61
.LBB12_61:                              # %for.inc248
                                        #   in Loop: Header=BB12_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB12_56
.LBB12_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_63
.LBB12_63:                              # %for.end250
                                        #   in Loop: Header=BB12_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB12_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_68
.LBB12_65:                              # %if.end254
                                        #   in Loop: Header=BB12_54 Depth=2
	jmp	.LBB12_66
.LBB12_66:                              # %for.inc255
                                        #   in Loop: Header=BB12_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB12_54
.LBB12_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_68
.LBB12_68:                              # %for.end257
                                        #   in Loop: Header=BB12_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB12_70
# %bb.69:                               # %if.then260
	jmp	.LBB12_73
.LBB12_70:                              # %if.end261
                                        #   in Loop: Header=BB12_52 Depth=1
	jmp	.LBB12_71
.LBB12_71:                              # %for.inc262
                                        #   in Loop: Header=BB12_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB12_52
.LBB12_72:                              # %for.end264.loopexit
	jmp	.LBB12_73
.LBB12_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$219893787, -64(%rbp)   # imm = 0xD1B501B
	jne	.LBB12_75
.LBB12_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_74
.Lfunc_end12:
	.size	test_wp_P_slice.9, .Lfunc_end12-test_wp_P_slice.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.10
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.10
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.10,@function
estimate_weighting_factor_B_slice.10:   # @estimate_weighting_factor_B_slice.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1081514765, -84(%rbp)  # imm = 0x40769B0D
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB13_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB13_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB13_4
.LBB13_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB13_4
.LBB13_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB13_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB13_7
.LBB13_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB13_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB13_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_10 Depth 2
                                        #       Child Loop BB13_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	$0, -8(%rbp)
.LBB13_10:                              # %for.cond14
                                        #   Parent Loop BB13_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB13_10 Depth=2
	movl	$0, -16(%rbp)
.LBB13_12:                              # %for.cond19
                                        #   Parent Loop BB13_8 Depth=1
                                        #     Parent Loop BB13_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB13_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB13_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB13_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_12
.LBB13_15:                              # %for.end
                                        #   in Loop: Header=BB13_10 Depth=2
	jmp	.LBB13_16
.LBB13_16:                              # %for.inc50
                                        #   in Loop: Header=BB13_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_10
.LBB13_17:                              # %for.end52
                                        #   in Loop: Header=BB13_8 Depth=1
	jmp	.LBB13_18
.LBB13_18:                              # %for.inc53
                                        #   in Loop: Header=BB13_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_8
.LBB13_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB13_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_22 Depth 2
                                        #       Child Loop BB13_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	$0, -8(%rbp)
.LBB13_22:                              # %for.cond59
                                        #   Parent Loop BB13_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB13_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB13_29
.LBB13_25:                              # %cond.false70
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB13_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$127, %eax
	jmp	.LBB13_28
.LBB13_27:                              # %cond.false80
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB13_28:                              # %cond.end88
                                        #   in Loop: Header=BB13_22 Depth=2
.LBB13_29:                              # %cond.end90
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB13_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB13_35
.LBB13_31:                              # %cond.false99
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB13_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	$127, %eax
	jmp	.LBB13_34
.LBB13_33:                              # %cond.false107
                                        #   in Loop: Header=BB13_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB13_34:                              # %cond.end113
                                        #   in Loop: Header=BB13_22 Depth=2
.LBB13_35:                              # %cond.end115
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB13_36:                              # %for.cond117
                                        #   Parent Loop BB13_20 Depth=1
                                        #     Parent Loop BB13_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB13_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB13_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB13_49
.LBB13_39:                              # %if.else154
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB13_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB13_45
.LBB13_41:                              # %cond.false160
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB13_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB13_44
.LBB13_43:                              # %cond.false166
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB13_44:                              # %cond.end170
                                        #   in Loop: Header=BB13_36 Depth=3
.LBB13_45:                              # %cond.end172
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB13_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB13_48
.LBB13_47:                              # %if.then198
                                        #   in Loop: Header=BB13_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB13_48:                              # %if.end208
                                        #   in Loop: Header=BB13_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB13_49:                              # %if.end238
                                        #   in Loop: Header=BB13_36 Depth=3
	jmp	.LBB13_50
.LBB13_50:                              # %for.inc239
                                        #   in Loop: Header=BB13_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_36
.LBB13_51:                              # %for.end241
                                        #   in Loop: Header=BB13_22 Depth=2
	jmp	.LBB13_52
.LBB13_52:                              # %for.inc242
                                        #   in Loop: Header=BB13_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_22
.LBB13_53:                              # %for.end244
                                        #   in Loop: Header=BB13_20 Depth=1
	jmp	.LBB13_54
.LBB13_54:                              # %for.inc245
                                        #   in Loop: Header=BB13_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_20
.LBB13_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB13_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB13_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_59 Depth 2
                                        #       Child Loop BB13_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB13_57 Depth=1
	movl	$0, -8(%rbp)
.LBB13_59:                              # %for.cond254
                                        #   Parent Loop BB13_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB13_59 Depth=2
	movl	$0, -20(%rbp)
.LBB13_61:                              # %for.cond257
                                        #   Parent Loop BB13_57 Depth=1
                                        #     Parent Loop BB13_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB13_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB13_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB13_65
.LBB13_64:                              # %cond.false262
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB13_65:                              # %cond.end263
                                        #   in Loop: Header=BB13_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB13_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_61
.LBB13_67:                              # %for.end295
                                        #   in Loop: Header=BB13_59 Depth=2
	jmp	.LBB13_68
.LBB13_68:                              # %for.inc296
                                        #   in Loop: Header=BB13_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_59
.LBB13_69:                              # %for.end298
                                        #   in Loop: Header=BB13_57 Depth=1
	jmp	.LBB13_70
.LBB13_70:                              # %for.inc299
                                        #   in Loop: Header=BB13_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_57
.LBB13_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB13_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB13_72 Depth=1
	movl	$0, -24(%rbp)
.LBB13_74:                              # %for.cond306
                                        #   Parent Loop BB13_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB13_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB13_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_74
.LBB13_77:                              # %for.end346
                                        #   in Loop: Header=BB13_72 Depth=1
	jmp	.LBB13_78
.LBB13_78:                              # %for.inc347
                                        #   in Loop: Header=BB13_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_72
.LBB13_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB13_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_82 Depth 2
                                        #       Child Loop BB13_84 Depth 3
                                        #       Child Loop BB13_88 Depth 3
                                        #         Child Loop BB13_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	$0, -8(%rbp)
.LBB13_82:                              # %for.cond353
                                        #   Parent Loop BB13_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_84 Depth 3
                                        #       Child Loop BB13_88 Depth 3
                                        #         Child Loop BB13_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	$0, -16(%rbp)
.LBB13_84:                              # %for.cond356
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB13_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB13_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_84
.LBB13_87:                              # %for.end380
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	$0, -16(%rbp)
.LBB13_88:                              # %for.cond381
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB13_88 Depth=3
	movl	$0, -32(%rbp)
.LBB13_90:                              # %for.cond387
                                        #   Parent Loop BB13_80 Depth=1
                                        #     Parent Loop BB13_82 Depth=2
                                        #       Parent Loop BB13_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB13_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB13_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB13_90
.LBB13_93:                              # %for.end421
                                        #   in Loop: Header=BB13_88 Depth=3
	jmp	.LBB13_94
.LBB13_94:                              # %for.inc422
                                        #   in Loop: Header=BB13_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_88
.LBB13_95:                              # %for.end424
                                        #   in Loop: Header=BB13_82 Depth=2
	jmp	.LBB13_96
.LBB13_96:                              # %for.inc425
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_82
.LBB13_97:                              # %for.end427
                                        #   in Loop: Header=BB13_80 Depth=1
	jmp	.LBB13_98
.LBB13_98:                              # %for.inc428
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_80
.LBB13_99:                              # %for.end430
	jmp	.LBB13_189
.LBB13_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB13_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB13_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB13_101 Depth=1
	movl	$0, -8(%rbp)
.LBB13_103:                             # %for.cond436
                                        #   Parent Loop BB13_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB13_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB13_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB13_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_103
.LBB13_106:                             # %for.end447
                                        #   in Loop: Header=BB13_101 Depth=1
	jmp	.LBB13_107
.LBB13_107:                             # %for.inc448
                                        #   in Loop: Header=BB13_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_101
.LBB13_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB13_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_111 Depth 2
                                        #       Child Loop BB13_113 Depth 3
                                        #       Child Loop BB13_123 Depth 3
                                        #       Child Loop BB13_133 Depth 3
                                        #         Child Loop BB13_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB13_109 Depth=1
	movl	$0, -16(%rbp)
.LBB13_111:                             # %for.cond456
                                        #   Parent Loop BB13_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_113 Depth 3
                                        #       Child Loop BB13_123 Depth 3
                                        #       Child Loop BB13_133 Depth 3
                                        #         Child Loop BB13_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB13_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB13_113:                             # %for.cond476
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB13_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB13_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_113
.LBB13_116:                             # %for.end493
                                        #   in Loop: Header=BB13_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB13_117
	jp	.LBB13_117
	jmp	.LBB13_118
.LBB13_117:                             # %if.then500
                                        #   in Loop: Header=BB13_111 Depth=2
	vmovsd	.LCPI13_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB13_119
.LBB13_118:                             # %if.else511
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB13_119:                             # %if.end513
                                        #   in Loop: Header=BB13_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB13_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB13_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB13_122
.LBB13_121:                             # %if.then519
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB13_122:                             # %if.end521
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB13_123:                             # %for.cond554
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB13_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB13_130
.LBB13_126:                             # %cond.false571
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_129
.LBB13_128:                             # %cond.false583
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB13_129:                             # %cond.end591
                                        #   in Loop: Header=BB13_123 Depth=3
.LBB13_130:                             # %cond.end593
                                        #   in Loop: Header=BB13_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB13_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_123
.LBB13_132:                             # %for.end600
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	$0, -4(%rbp)
.LBB13_133:                             # %for.cond601
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB13_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB13_133 Depth=3
	movl	$0, -8(%rbp)
.LBB13_135:                             # %for.cond608
                                        #   Parent Loop BB13_109 Depth=1
                                        #     Parent Loop BB13_111 Depth=2
                                        #       Parent Loop BB13_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB13_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB13_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB13_142
.LBB13_138:                             # %cond.false630
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB13_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB13_141
.LBB13_140:                             # %cond.false648
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB13_141:                             # %cond.end661
                                        #   in Loop: Header=BB13_135 Depth=4
.LBB13_142:                             # %cond.end663
                                        #   in Loop: Header=BB13_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB13_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_135
.LBB13_144:                             # %for.end675
                                        #   in Loop: Header=BB13_133 Depth=3
	jmp	.LBB13_145
.LBB13_145:                             # %for.inc676
                                        #   in Loop: Header=BB13_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_133
.LBB13_146:                             # %for.end678
                                        #   in Loop: Header=BB13_111 Depth=2
	jmp	.LBB13_147
.LBB13_147:                             # %for.inc679
                                        #   in Loop: Header=BB13_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB13_111
.LBB13_148:                             # %for.end681
                                        #   in Loop: Header=BB13_109 Depth=1
	jmp	.LBB13_149
.LBB13_149:                             # %for.inc682
                                        #   in Loop: Header=BB13_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_109
.LBB13_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB13_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB13_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_154 Depth 2
                                        #       Child Loop BB13_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB13_152 Depth=1
	movl	$0, -24(%rbp)
.LBB13_154:                             # %for.cond694
                                        #   Parent Loop BB13_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB13_154 Depth=2
	movl	$0, -20(%rbp)
.LBB13_156:                             # %for.cond700
                                        #   Parent Loop BB13_152 Depth=1
                                        #     Parent Loop BB13_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB13_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB13_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_156
.LBB13_159:                             # %for.end730
                                        #   in Loop: Header=BB13_154 Depth=2
	jmp	.LBB13_160
.LBB13_160:                             # %for.inc731
                                        #   in Loop: Header=BB13_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_154
.LBB13_161:                             # %for.end733
                                        #   in Loop: Header=BB13_152 Depth=1
	jmp	.LBB13_162
.LBB13_162:                             # %for.inc734
                                        #   in Loop: Header=BB13_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_152
.LBB13_163:                             # %for.end736
	jmp	.LBB13_173
.LBB13_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB13_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB13_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB13_165 Depth=1
	movl	$0, -24(%rbp)
.LBB13_167:                             # %for.cond743
                                        #   Parent Loop BB13_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB13_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB13_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB13_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB13_167
.LBB13_170:                             # %for.end784
                                        #   in Loop: Header=BB13_165 Depth=1
	jmp	.LBB13_171
.LBB13_171:                             # %for.inc785
                                        #   in Loop: Header=BB13_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB13_165
.LBB13_172:                             # %for.end787
	jmp	.LBB13_173
.LBB13_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB13_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_176 Depth 2
                                        #       Child Loop BB13_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB13_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	$0, -8(%rbp)
.LBB13_176:                             # %for.cond793
                                        #   Parent Loop BB13_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB13_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB13_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB13_176 Depth=2
	movl	$0, -20(%rbp)
.LBB13_178:                             # %for.cond797
                                        #   Parent Loop BB13_174 Depth=1
                                        #     Parent Loop BB13_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB13_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB13_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB13_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB13_182
.LBB13_181:                             # %cond.false804
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB13_182:                             # %cond.end805
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB13_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB13_178
.LBB13_184:                             # %for.end833
                                        #   in Loop: Header=BB13_176 Depth=2
	jmp	.LBB13_185
.LBB13_185:                             # %for.inc834
                                        #   in Loop: Header=BB13_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_176
.LBB13_186:                             # %for.end836
                                        #   in Loop: Header=BB13_174 Depth=1
	jmp	.LBB13_187
.LBB13_187:                             # %for.inc837
                                        #   in Loop: Header=BB13_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_174
.LBB13_188:                             # %for.end839
	jmp	.LBB13_189
.LBB13_189:                             # %if.end840
	cmpl	$1081514765, -84(%rbp)  # imm = 0x40769B0D
	jne	.LBB13_191
.LBB13_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_190
.Lfunc_end13:
	.size	estimate_weighting_factor_B_slice.10, .Lfunc_end13-estimate_weighting_factor_B_slice.10
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.11
.LCPI14_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.11
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.11,@function
estimate_weighting_factor_B_slice.11:   # @estimate_weighting_factor_B_slice.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$160001627, -92(%rbp)   # imm = 0x9896E5B
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB14_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB14_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB14_4
.LBB14_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB14_4
.LBB14_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB14_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB14_7
.LBB14_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB14_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB14_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_10 Depth 2
                                        #       Child Loop BB14_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	$0, -8(%rbp)
.LBB14_10:                              # %for.cond14
                                        #   Parent Loop BB14_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB14_10 Depth=2
	movl	$0, -16(%rbp)
.LBB14_12:                              # %for.cond19
                                        #   Parent Loop BB14_8 Depth=1
                                        #     Parent Loop BB14_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB14_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB14_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB14_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_12
.LBB14_15:                              # %for.end
                                        #   in Loop: Header=BB14_10 Depth=2
	jmp	.LBB14_16
.LBB14_16:                              # %for.inc50
                                        #   in Loop: Header=BB14_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_10
.LBB14_17:                              # %for.end52
                                        #   in Loop: Header=BB14_8 Depth=1
	jmp	.LBB14_18
.LBB14_18:                              # %for.inc53
                                        #   in Loop: Header=BB14_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_8
.LBB14_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB14_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_22 Depth 2
                                        #       Child Loop BB14_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB14_20 Depth=1
	movl	$0, -8(%rbp)
.LBB14_22:                              # %for.cond59
                                        #   Parent Loop BB14_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB14_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB14_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB14_29
.LBB14_25:                              # %cond.false70
                                        #   in Loop: Header=BB14_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB14_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	$127, %eax
	jmp	.LBB14_28
.LBB14_27:                              # %cond.false80
                                        #   in Loop: Header=BB14_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB14_28:                              # %cond.end88
                                        #   in Loop: Header=BB14_22 Depth=2
.LBB14_29:                              # %cond.end90
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB14_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB14_35
.LBB14_31:                              # %cond.false99
                                        #   in Loop: Header=BB14_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB14_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	$127, %eax
	jmp	.LBB14_34
.LBB14_33:                              # %cond.false107
                                        #   in Loop: Header=BB14_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB14_34:                              # %cond.end113
                                        #   in Loop: Header=BB14_22 Depth=2
.LBB14_35:                              # %cond.end115
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB14_36:                              # %for.cond117
                                        #   Parent Loop BB14_20 Depth=1
                                        #     Parent Loop BB14_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB14_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB14_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB14_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB14_49
.LBB14_39:                              # %if.else154
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB14_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB14_45
.LBB14_41:                              # %cond.false160
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB14_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB14_44
.LBB14_43:                              # %cond.false166
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB14_44:                              # %cond.end170
                                        #   in Loop: Header=BB14_36 Depth=3
.LBB14_45:                              # %cond.end172
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB14_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB14_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB14_48
.LBB14_47:                              # %if.then198
                                        #   in Loop: Header=BB14_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB14_48:                              # %if.end208
                                        #   in Loop: Header=BB14_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB14_49:                              # %if.end238
                                        #   in Loop: Header=BB14_36 Depth=3
	jmp	.LBB14_50
.LBB14_50:                              # %for.inc239
                                        #   in Loop: Header=BB14_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_36
.LBB14_51:                              # %for.end241
                                        #   in Loop: Header=BB14_22 Depth=2
	jmp	.LBB14_52
.LBB14_52:                              # %for.inc242
                                        #   in Loop: Header=BB14_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_22
.LBB14_53:                              # %for.end244
                                        #   in Loop: Header=BB14_20 Depth=1
	jmp	.LBB14_54
.LBB14_54:                              # %for.inc245
                                        #   in Loop: Header=BB14_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_20
.LBB14_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB14_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB14_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_59 Depth 2
                                        #       Child Loop BB14_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB14_57 Depth=1
	movl	$0, -8(%rbp)
.LBB14_59:                              # %for.cond254
                                        #   Parent Loop BB14_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB14_59 Depth=2
	movl	$0, -20(%rbp)
.LBB14_61:                              # %for.cond257
                                        #   Parent Loop BB14_57 Depth=1
                                        #     Parent Loop BB14_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB14_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB14_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB14_65
.LBB14_64:                              # %cond.false262
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB14_65:                              # %cond.end263
                                        #   in Loop: Header=BB14_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB14_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_61
.LBB14_67:                              # %for.end295
                                        #   in Loop: Header=BB14_59 Depth=2
	jmp	.LBB14_68
.LBB14_68:                              # %for.inc296
                                        #   in Loop: Header=BB14_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_59
.LBB14_69:                              # %for.end298
                                        #   in Loop: Header=BB14_57 Depth=1
	jmp	.LBB14_70
.LBB14_70:                              # %for.inc299
                                        #   in Loop: Header=BB14_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_57
.LBB14_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB14_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB14_72 Depth=1
	movl	$0, -24(%rbp)
.LBB14_74:                              # %for.cond306
                                        #   Parent Loop BB14_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB14_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB14_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_74
.LBB14_77:                              # %for.end346
                                        #   in Loop: Header=BB14_72 Depth=1
	jmp	.LBB14_78
.LBB14_78:                              # %for.inc347
                                        #   in Loop: Header=BB14_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_72
.LBB14_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB14_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_82 Depth 2
                                        #       Child Loop BB14_84 Depth 3
                                        #       Child Loop BB14_88 Depth 3
                                        #         Child Loop BB14_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	$0, -8(%rbp)
.LBB14_82:                              # %for.cond353
                                        #   Parent Loop BB14_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_84 Depth 3
                                        #       Child Loop BB14_88 Depth 3
                                        #         Child Loop BB14_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB14_82 Depth=2
	movl	$0, -16(%rbp)
.LBB14_84:                              # %for.cond356
                                        #   Parent Loop BB14_80 Depth=1
                                        #     Parent Loop BB14_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB14_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB14_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_84
.LBB14_87:                              # %for.end380
                                        #   in Loop: Header=BB14_82 Depth=2
	movl	$0, -16(%rbp)
.LBB14_88:                              # %for.cond381
                                        #   Parent Loop BB14_80 Depth=1
                                        #     Parent Loop BB14_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB14_88 Depth=3
	movl	$0, -32(%rbp)
.LBB14_90:                              # %for.cond387
                                        #   Parent Loop BB14_80 Depth=1
                                        #     Parent Loop BB14_82 Depth=2
                                        #       Parent Loop BB14_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB14_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB14_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB14_90
.LBB14_93:                              # %for.end421
                                        #   in Loop: Header=BB14_88 Depth=3
	jmp	.LBB14_94
.LBB14_94:                              # %for.inc422
                                        #   in Loop: Header=BB14_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_88
.LBB14_95:                              # %for.end424
                                        #   in Loop: Header=BB14_82 Depth=2
	jmp	.LBB14_96
.LBB14_96:                              # %for.inc425
                                        #   in Loop: Header=BB14_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_82
.LBB14_97:                              # %for.end427
                                        #   in Loop: Header=BB14_80 Depth=1
	jmp	.LBB14_98
.LBB14_98:                              # %for.inc428
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_80
.LBB14_99:                              # %for.end430
	jmp	.LBB14_189
.LBB14_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB14_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB14_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB14_101 Depth=1
	movl	$0, -8(%rbp)
.LBB14_103:                             # %for.cond436
                                        #   Parent Loop BB14_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB14_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB14_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB14_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_103
.LBB14_106:                             # %for.end447
                                        #   in Loop: Header=BB14_101 Depth=1
	jmp	.LBB14_107
.LBB14_107:                             # %for.inc448
                                        #   in Loop: Header=BB14_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_101
.LBB14_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB14_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_111 Depth 2
                                        #       Child Loop BB14_113 Depth 3
                                        #       Child Loop BB14_123 Depth 3
                                        #       Child Loop BB14_133 Depth 3
                                        #         Child Loop BB14_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB14_109 Depth=1
	movl	$0, -16(%rbp)
.LBB14_111:                             # %for.cond456
                                        #   Parent Loop BB14_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_113 Depth 3
                                        #       Child Loop BB14_123 Depth 3
                                        #       Child Loop BB14_133 Depth 3
                                        #         Child Loop BB14_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB14_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB14_113:                             # %for.cond476
                                        #   Parent Loop BB14_109 Depth=1
                                        #     Parent Loop BB14_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB14_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB14_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_113
.LBB14_116:                             # %for.end493
                                        #   in Loop: Header=BB14_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB14_117
	jp	.LBB14_117
	jmp	.LBB14_118
.LBB14_117:                             # %if.then500
                                        #   in Loop: Header=BB14_111 Depth=2
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB14_119
.LBB14_118:                             # %if.else511
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB14_119:                             # %if.end513
                                        #   in Loop: Header=BB14_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB14_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB14_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB14_122
.LBB14_121:                             # %if.then519
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB14_122:                             # %if.end521
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB14_123:                             # %for.cond554
                                        #   Parent Loop BB14_109 Depth=1
                                        #     Parent Loop BB14_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB14_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB14_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB14_130
.LBB14_126:                             # %cond.false571
                                        #   in Loop: Header=BB14_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB14_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB14_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_129
.LBB14_128:                             # %cond.false583
                                        #   in Loop: Header=BB14_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB14_129:                             # %cond.end591
                                        #   in Loop: Header=BB14_123 Depth=3
.LBB14_130:                             # %cond.end593
                                        #   in Loop: Header=BB14_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB14_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_123
.LBB14_132:                             # %for.end600
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	$0, -4(%rbp)
.LBB14_133:                             # %for.cond601
                                        #   Parent Loop BB14_109 Depth=1
                                        #     Parent Loop BB14_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB14_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB14_133 Depth=3
	movl	$0, -8(%rbp)
.LBB14_135:                             # %for.cond608
                                        #   Parent Loop BB14_109 Depth=1
                                        #     Parent Loop BB14_111 Depth=2
                                        #       Parent Loop BB14_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB14_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB14_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB14_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB14_142
.LBB14_138:                             # %cond.false630
                                        #   in Loop: Header=BB14_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB14_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB14_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_141
.LBB14_140:                             # %cond.false648
                                        #   in Loop: Header=BB14_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB14_141:                             # %cond.end661
                                        #   in Loop: Header=BB14_135 Depth=4
.LBB14_142:                             # %cond.end663
                                        #   in Loop: Header=BB14_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB14_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_135
.LBB14_144:                             # %for.end675
                                        #   in Loop: Header=BB14_133 Depth=3
	jmp	.LBB14_145
.LBB14_145:                             # %for.inc676
                                        #   in Loop: Header=BB14_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_133
.LBB14_146:                             # %for.end678
                                        #   in Loop: Header=BB14_111 Depth=2
	jmp	.LBB14_147
.LBB14_147:                             # %for.inc679
                                        #   in Loop: Header=BB14_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_111
.LBB14_148:                             # %for.end681
                                        #   in Loop: Header=BB14_109 Depth=1
	jmp	.LBB14_149
.LBB14_149:                             # %for.inc682
                                        #   in Loop: Header=BB14_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_109
.LBB14_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB14_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB14_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_154 Depth 2
                                        #       Child Loop BB14_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB14_152 Depth=1
	movl	$0, -24(%rbp)
.LBB14_154:                             # %for.cond694
                                        #   Parent Loop BB14_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB14_154 Depth=2
	movl	$0, -20(%rbp)
.LBB14_156:                             # %for.cond700
                                        #   Parent Loop BB14_152 Depth=1
                                        #     Parent Loop BB14_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB14_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB14_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_156
.LBB14_159:                             # %for.end730
                                        #   in Loop: Header=BB14_154 Depth=2
	jmp	.LBB14_160
.LBB14_160:                             # %for.inc731
                                        #   in Loop: Header=BB14_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_154
.LBB14_161:                             # %for.end733
                                        #   in Loop: Header=BB14_152 Depth=1
	jmp	.LBB14_162
.LBB14_162:                             # %for.inc734
                                        #   in Loop: Header=BB14_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_152
.LBB14_163:                             # %for.end736
	jmp	.LBB14_173
.LBB14_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB14_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB14_165 Depth=1
	movl	$0, -24(%rbp)
.LBB14_167:                             # %for.cond743
                                        #   Parent Loop BB14_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB14_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB14_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB14_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB14_167
.LBB14_170:                             # %for.end784
                                        #   in Loop: Header=BB14_165 Depth=1
	jmp	.LBB14_171
.LBB14_171:                             # %for.inc785
                                        #   in Loop: Header=BB14_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_165
.LBB14_172:                             # %for.end787
	jmp	.LBB14_173
.LBB14_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB14_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_176 Depth 2
                                        #       Child Loop BB14_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB14_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB14_174 Depth=1
	movl	$0, -8(%rbp)
.LBB14_176:                             # %for.cond793
                                        #   Parent Loop BB14_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB14_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB14_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB14_176 Depth=2
	movl	$0, -20(%rbp)
.LBB14_178:                             # %for.cond797
                                        #   Parent Loop BB14_174 Depth=1
                                        #     Parent Loop BB14_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB14_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB14_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB14_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB14_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB14_182
.LBB14_181:                             # %cond.false804
                                        #   in Loop: Header=BB14_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB14_182:                             # %cond.end805
                                        #   in Loop: Header=BB14_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB14_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_178
.LBB14_184:                             # %for.end833
                                        #   in Loop: Header=BB14_176 Depth=2
	jmp	.LBB14_185
.LBB14_185:                             # %for.inc834
                                        #   in Loop: Header=BB14_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_176
.LBB14_186:                             # %for.end836
                                        #   in Loop: Header=BB14_174 Depth=1
	jmp	.LBB14_187
.LBB14_187:                             # %for.inc837
                                        #   in Loop: Header=BB14_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_174
.LBB14_188:                             # %for.end839
	jmp	.LBB14_189
.LBB14_189:                             # %if.end840
	cmpl	$160001627, -92(%rbp)   # imm = 0x9896E5B
	jne	.LBB14_191
.LBB14_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_190
.Lfunc_end14:
	.size	estimate_weighting_factor_B_slice.11, .Lfunc_end14-estimate_weighting_factor_B_slice.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.12
.LCPI15_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.12
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.12,@function
estimate_weighting_factor_P_slice.12:   # @estimate_weighting_factor_P_slice.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1886193383, -60(%rbp)  # imm = 0x706D06E7
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB15_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB15_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB15_4
.LBB15_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB15_4
.LBB15_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB15_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_7 Depth 2
                                        #       Child Loop BB15_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	$0, -16(%rbp)
.LBB15_7:                               # %for.cond12
                                        #   Parent Loop BB15_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	$0, -4(%rbp)
.LBB15_9:                               # %for.cond17
                                        #   Parent Loop BB15_5 Depth=1
                                        #     Parent Loop BB15_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB15_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB15_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB15_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_9
.LBB15_12:                              # %for.end
                                        #   in Loop: Header=BB15_7 Depth=2
	jmp	.LBB15_13
.LBB15_13:                              # %for.inc48
                                        #   in Loop: Header=BB15_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_7
.LBB15_14:                              # %for.end50
                                        #   in Loop: Header=BB15_5 Depth=1
	jmp	.LBB15_15
.LBB15_15:                              # %for.inc51
                                        #   in Loop: Header=BB15_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_5
.LBB15_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB15_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB15_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	$0, -16(%rbp)
.LBB15_19:                              # %for.cond57
                                        #   Parent Loop BB15_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB15_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB15_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB15_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_19
.LBB15_22:                              # %for.end67
                                        #   in Loop: Header=BB15_17 Depth=1
	jmp	.LBB15_23
.LBB15_23:                              # %for.inc68
                                        #   in Loop: Header=BB15_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_17
.LBB15_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB15_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_27 Depth 2
                                        #       Child Loop BB15_29 Depth 3
                                        #       Child Loop BB15_48 Depth 3
                                        #       Child Loop BB15_58 Depth 3
                                        #         Child Loop BB15_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB15_25 Depth=1
	movl	$0, -4(%rbp)
.LBB15_27:                              # %for.cond76
                                        #   Parent Loop BB15_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_29 Depth 3
                                        #       Child Loop BB15_48 Depth 3
                                        #       Child Loop BB15_58 Depth 3
                                        #         Child Loop BB15_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB15_29:                              # %for.cond92
                                        #   Parent Loop BB15_25 Depth=1
                                        #     Parent Loop BB15_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB15_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB15_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_29
.LBB15_32:                              # %for.end106
                                        #   in Loop: Header=BB15_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB15_40
	jp	.LBB15_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB15_34
	jp	.LBB15_34
	jmp	.LBB15_35
.LBB15_34:                              # %if.then114
                                        #   in Loop: Header=BB15_27 Depth=2
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB15_36
.LBB15_35:                              # %if.else
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB15_36:                              # %if.end
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB15_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB15_39
.LBB15_38:                              # %if.then147
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB15_39:                              # %if.end154
                                        #   in Loop: Header=BB15_27 Depth=2
	jmp	.LBB15_47
.LBB15_40:                              # %if.else155
                                        #   in Loop: Header=BB15_27 Depth=2
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB15_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB15_46
.LBB15_42:                              # %cond.false179
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB15_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	$127, %eax
	jmp	.LBB15_45
.LBB15_44:                              # %cond.false188
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB15_45:                              # %cond.end194
                                        #   in Loop: Header=BB15_27 Depth=2
.LBB15_46:                              # %cond.end196
                                        #   in Loop: Header=BB15_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB15_47:                              # %if.end209
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB15_48:                              # %for.cond222
                                        #   Parent Loop BB15_25 Depth=1
                                        #     Parent Loop BB15_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB15_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB15_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB15_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB15_55
.LBB15_51:                              # %cond.false248
                                        #   in Loop: Header=BB15_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB15_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB15_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB15_54
.LBB15_53:                              # %cond.false270
                                        #   in Loop: Header=BB15_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB15_54:                              # %cond.end288
                                        #   in Loop: Header=BB15_48 Depth=3
.LBB15_55:                              # %cond.end290
                                        #   in Loop: Header=BB15_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB15_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_48
.LBB15_57:                              # %for.end297
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	$0, -12(%rbp)
.LBB15_58:                              # %for.cond298
                                        #   Parent Loop BB15_25 Depth=1
                                        #     Parent Loop BB15_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB15_58 Depth=3
	movl	$0, -16(%rbp)
.LBB15_60:                              # %for.cond305
                                        #   Parent Loop BB15_25 Depth=1
                                        #     Parent Loop BB15_27 Depth=2
                                        #       Parent Loop BB15_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB15_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB15_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB15_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB15_67
.LBB15_63:                              # %cond.false336
                                        #   in Loop: Header=BB15_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB15_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB15_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB15_66
.LBB15_65:                              # %cond.false364
                                        #   in Loop: Header=BB15_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB15_66:                              # %cond.end387
                                        #   in Loop: Header=BB15_60 Depth=4
.LBB15_67:                              # %cond.end389
                                        #   in Loop: Header=BB15_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB15_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_60
.LBB15_69:                              # %for.end400
                                        #   in Loop: Header=BB15_58 Depth=3
	jmp	.LBB15_70
.LBB15_70:                              # %for.inc401
                                        #   in Loop: Header=BB15_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_58
.LBB15_71:                              # %for.end403
                                        #   in Loop: Header=BB15_27 Depth=2
	jmp	.LBB15_72
.LBB15_72:                              # %for.inc404
                                        #   in Loop: Header=BB15_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_27
.LBB15_73:                              # %for.end406
                                        #   in Loop: Header=BB15_25 Depth=1
	jmp	.LBB15_74
.LBB15_74:                              # %for.inc407
                                        #   in Loop: Header=BB15_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_25
.LBB15_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB15_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_78 Depth 2
                                        #       Child Loop BB15_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB15_76 Depth=1
	movl	$0, -20(%rbp)
.LBB15_78:                              # %for.cond415
                                        #   Parent Loop BB15_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB15_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB15_78 Depth=2
	movl	$0, -24(%rbp)
.LBB15_80:                              # %for.cond421
                                        #   Parent Loop BB15_76 Depth=1
                                        #     Parent Loop BB15_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB15_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB15_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB15_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB15_80
.LBB15_83:                              # %for.end451
                                        #   in Loop: Header=BB15_78 Depth=2
	jmp	.LBB15_84
.LBB15_84:                              # %for.inc452
                                        #   in Loop: Header=BB15_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB15_78
.LBB15_85:                              # %for.end454
                                        #   in Loop: Header=BB15_76 Depth=1
	jmp	.LBB15_86
.LBB15_86:                              # %for.inc455
                                        #   in Loop: Header=BB15_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_76
.LBB15_87:                              # %for.end457
	cmpl	$1886193383, -60(%rbp)  # imm = 0x706D06E7
	jne	.LBB15_89
.LBB15_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_88
.Lfunc_end15:
	.size	estimate_weighting_factor_P_slice.12, .Lfunc_end15-estimate_weighting_factor_P_slice.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.13
.LCPI16_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.13
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.13,@function
estimate_weighting_factor_B_slice.13:   # @estimate_weighting_factor_B_slice.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$319272572, -92(%rbp)   # imm = 0x1307B67C
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB16_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB16_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB16_4
.LBB16_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB16_4
.LBB16_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB16_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB16_7
.LBB16_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB16_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB16_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_10 Depth 2
                                        #       Child Loop BB16_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	$0, -8(%rbp)
.LBB16_10:                              # %for.cond14
                                        #   Parent Loop BB16_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB16_10 Depth=2
	movl	$0, -16(%rbp)
.LBB16_12:                              # %for.cond19
                                        #   Parent Loop BB16_8 Depth=1
                                        #     Parent Loop BB16_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB16_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB16_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB16_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_12
.LBB16_15:                              # %for.end
                                        #   in Loop: Header=BB16_10 Depth=2
	jmp	.LBB16_16
.LBB16_16:                              # %for.inc50
                                        #   in Loop: Header=BB16_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_10
.LBB16_17:                              # %for.end52
                                        #   in Loop: Header=BB16_8 Depth=1
	jmp	.LBB16_18
.LBB16_18:                              # %for.inc53
                                        #   in Loop: Header=BB16_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_8
.LBB16_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB16_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_22 Depth 2
                                        #       Child Loop BB16_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB16_20 Depth=1
	movl	$0, -8(%rbp)
.LBB16_22:                              # %for.cond59
                                        #   Parent Loop BB16_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB16_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB16_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB16_29
.LBB16_25:                              # %cond.false70
                                        #   in Loop: Header=BB16_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB16_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	$127, %eax
	jmp	.LBB16_28
.LBB16_27:                              # %cond.false80
                                        #   in Loop: Header=BB16_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB16_28:                              # %cond.end88
                                        #   in Loop: Header=BB16_22 Depth=2
.LBB16_29:                              # %cond.end90
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB16_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB16_35
.LBB16_31:                              # %cond.false99
                                        #   in Loop: Header=BB16_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB16_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	$127, %eax
	jmp	.LBB16_34
.LBB16_33:                              # %cond.false107
                                        #   in Loop: Header=BB16_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB16_34:                              # %cond.end113
                                        #   in Loop: Header=BB16_22 Depth=2
.LBB16_35:                              # %cond.end115
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB16_36:                              # %for.cond117
                                        #   Parent Loop BB16_20 Depth=1
                                        #     Parent Loop BB16_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB16_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB16_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB16_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB16_49
.LBB16_39:                              # %if.else154
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB16_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB16_45
.LBB16_41:                              # %cond.false160
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB16_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB16_44
.LBB16_43:                              # %cond.false166
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB16_44:                              # %cond.end170
                                        #   in Loop: Header=BB16_36 Depth=3
.LBB16_45:                              # %cond.end172
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB16_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB16_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB16_48
.LBB16_47:                              # %if.then198
                                        #   in Loop: Header=BB16_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB16_48:                              # %if.end208
                                        #   in Loop: Header=BB16_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB16_49:                              # %if.end238
                                        #   in Loop: Header=BB16_36 Depth=3
	jmp	.LBB16_50
.LBB16_50:                              # %for.inc239
                                        #   in Loop: Header=BB16_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_36
.LBB16_51:                              # %for.end241
                                        #   in Loop: Header=BB16_22 Depth=2
	jmp	.LBB16_52
.LBB16_52:                              # %for.inc242
                                        #   in Loop: Header=BB16_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_22
.LBB16_53:                              # %for.end244
                                        #   in Loop: Header=BB16_20 Depth=1
	jmp	.LBB16_54
.LBB16_54:                              # %for.inc245
                                        #   in Loop: Header=BB16_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_20
.LBB16_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB16_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB16_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_59 Depth 2
                                        #       Child Loop BB16_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB16_57 Depth=1
	movl	$0, -8(%rbp)
.LBB16_59:                              # %for.cond254
                                        #   Parent Loop BB16_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB16_59 Depth=2
	movl	$0, -20(%rbp)
.LBB16_61:                              # %for.cond257
                                        #   Parent Loop BB16_57 Depth=1
                                        #     Parent Loop BB16_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB16_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB16_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB16_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB16_65
.LBB16_64:                              # %cond.false262
                                        #   in Loop: Header=BB16_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB16_65:                              # %cond.end263
                                        #   in Loop: Header=BB16_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB16_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_61
.LBB16_67:                              # %for.end295
                                        #   in Loop: Header=BB16_59 Depth=2
	jmp	.LBB16_68
.LBB16_68:                              # %for.inc296
                                        #   in Loop: Header=BB16_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_59
.LBB16_69:                              # %for.end298
                                        #   in Loop: Header=BB16_57 Depth=1
	jmp	.LBB16_70
.LBB16_70:                              # %for.inc299
                                        #   in Loop: Header=BB16_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_57
.LBB16_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB16_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB16_72 Depth=1
	movl	$0, -24(%rbp)
.LBB16_74:                              # %for.cond306
                                        #   Parent Loop BB16_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB16_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB16_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_74
.LBB16_77:                              # %for.end346
                                        #   in Loop: Header=BB16_72 Depth=1
	jmp	.LBB16_78
.LBB16_78:                              # %for.inc347
                                        #   in Loop: Header=BB16_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_72
.LBB16_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB16_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_82 Depth 2
                                        #       Child Loop BB16_84 Depth 3
                                        #       Child Loop BB16_88 Depth 3
                                        #         Child Loop BB16_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB16_80 Depth=1
	movl	$0, -8(%rbp)
.LBB16_82:                              # %for.cond353
                                        #   Parent Loop BB16_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_84 Depth 3
                                        #       Child Loop BB16_88 Depth 3
                                        #         Child Loop BB16_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	$0, -16(%rbp)
.LBB16_84:                              # %for.cond356
                                        #   Parent Loop BB16_80 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB16_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_84
.LBB16_87:                              # %for.end380
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	$0, -16(%rbp)
.LBB16_88:                              # %for.cond381
                                        #   Parent Loop BB16_80 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB16_88 Depth=3
	movl	$0, -32(%rbp)
.LBB16_90:                              # %for.cond387
                                        #   Parent Loop BB16_80 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        #       Parent Loop BB16_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB16_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB16_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB16_90
.LBB16_93:                              # %for.end421
                                        #   in Loop: Header=BB16_88 Depth=3
	jmp	.LBB16_94
.LBB16_94:                              # %for.inc422
                                        #   in Loop: Header=BB16_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_88
.LBB16_95:                              # %for.end424
                                        #   in Loop: Header=BB16_82 Depth=2
	jmp	.LBB16_96
.LBB16_96:                              # %for.inc425
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_82
.LBB16_97:                              # %for.end427
                                        #   in Loop: Header=BB16_80 Depth=1
	jmp	.LBB16_98
.LBB16_98:                              # %for.inc428
                                        #   in Loop: Header=BB16_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_80
.LBB16_99:                              # %for.end430
	jmp	.LBB16_189
.LBB16_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB16_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB16_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB16_101 Depth=1
	movl	$0, -8(%rbp)
.LBB16_103:                             # %for.cond436
                                        #   Parent Loop BB16_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB16_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB16_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB16_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_103
.LBB16_106:                             # %for.end447
                                        #   in Loop: Header=BB16_101 Depth=1
	jmp	.LBB16_107
.LBB16_107:                             # %for.inc448
                                        #   in Loop: Header=BB16_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_101
.LBB16_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB16_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_111 Depth 2
                                        #       Child Loop BB16_113 Depth 3
                                        #       Child Loop BB16_123 Depth 3
                                        #       Child Loop BB16_133 Depth 3
                                        #         Child Loop BB16_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB16_109 Depth=1
	movl	$0, -16(%rbp)
.LBB16_111:                             # %for.cond456
                                        #   Parent Loop BB16_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_113 Depth 3
                                        #       Child Loop BB16_123 Depth 3
                                        #       Child Loop BB16_133 Depth 3
                                        #         Child Loop BB16_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB16_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB16_113:                             # %for.cond476
                                        #   Parent Loop BB16_109 Depth=1
                                        #     Parent Loop BB16_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB16_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB16_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_113
.LBB16_116:                             # %for.end493
                                        #   in Loop: Header=BB16_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB16_117
	jp	.LBB16_117
	jmp	.LBB16_118
.LBB16_117:                             # %if.then500
                                        #   in Loop: Header=BB16_111 Depth=2
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB16_119
.LBB16_118:                             # %if.else511
                                        #   in Loop: Header=BB16_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB16_119:                             # %if.end513
                                        #   in Loop: Header=BB16_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB16_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB16_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB16_122
.LBB16_121:                             # %if.then519
                                        #   in Loop: Header=BB16_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB16_122:                             # %if.end521
                                        #   in Loop: Header=BB16_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB16_123:                             # %for.cond554
                                        #   Parent Loop BB16_109 Depth=1
                                        #     Parent Loop BB16_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB16_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB16_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB16_130
.LBB16_126:                             # %cond.false571
                                        #   in Loop: Header=BB16_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB16_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_129
.LBB16_128:                             # %cond.false583
                                        #   in Loop: Header=BB16_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB16_129:                             # %cond.end591
                                        #   in Loop: Header=BB16_123 Depth=3
.LBB16_130:                             # %cond.end593
                                        #   in Loop: Header=BB16_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB16_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_123
.LBB16_132:                             # %for.end600
                                        #   in Loop: Header=BB16_111 Depth=2
	movl	$0, -4(%rbp)
.LBB16_133:                             # %for.cond601
                                        #   Parent Loop BB16_109 Depth=1
                                        #     Parent Loop BB16_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB16_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB16_133 Depth=3
	movl	$0, -8(%rbp)
.LBB16_135:                             # %for.cond608
                                        #   Parent Loop BB16_109 Depth=1
                                        #     Parent Loop BB16_111 Depth=2
                                        #       Parent Loop BB16_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB16_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB16_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB16_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB16_142
.LBB16_138:                             # %cond.false630
                                        #   in Loop: Header=BB16_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB16_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB16_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB16_141
.LBB16_140:                             # %cond.false648
                                        #   in Loop: Header=BB16_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB16_141:                             # %cond.end661
                                        #   in Loop: Header=BB16_135 Depth=4
.LBB16_142:                             # %cond.end663
                                        #   in Loop: Header=BB16_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB16_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_135
.LBB16_144:                             # %for.end675
                                        #   in Loop: Header=BB16_133 Depth=3
	jmp	.LBB16_145
.LBB16_145:                             # %for.inc676
                                        #   in Loop: Header=BB16_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_133
.LBB16_146:                             # %for.end678
                                        #   in Loop: Header=BB16_111 Depth=2
	jmp	.LBB16_147
.LBB16_147:                             # %for.inc679
                                        #   in Loop: Header=BB16_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB16_111
.LBB16_148:                             # %for.end681
                                        #   in Loop: Header=BB16_109 Depth=1
	jmp	.LBB16_149
.LBB16_149:                             # %for.inc682
                                        #   in Loop: Header=BB16_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_109
.LBB16_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB16_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB16_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_154 Depth 2
                                        #       Child Loop BB16_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB16_152 Depth=1
	movl	$0, -24(%rbp)
.LBB16_154:                             # %for.cond694
                                        #   Parent Loop BB16_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB16_154 Depth=2
	movl	$0, -20(%rbp)
.LBB16_156:                             # %for.cond700
                                        #   Parent Loop BB16_152 Depth=1
                                        #     Parent Loop BB16_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB16_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB16_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_156
.LBB16_159:                             # %for.end730
                                        #   in Loop: Header=BB16_154 Depth=2
	jmp	.LBB16_160
.LBB16_160:                             # %for.inc731
                                        #   in Loop: Header=BB16_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_154
.LBB16_161:                             # %for.end733
                                        #   in Loop: Header=BB16_152 Depth=1
	jmp	.LBB16_162
.LBB16_162:                             # %for.inc734
                                        #   in Loop: Header=BB16_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_152
.LBB16_163:                             # %for.end736
	jmp	.LBB16_173
.LBB16_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB16_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB16_165 Depth=1
	movl	$0, -24(%rbp)
.LBB16_167:                             # %for.cond743
                                        #   Parent Loop BB16_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB16_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB16_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB16_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB16_167
.LBB16_170:                             # %for.end784
                                        #   in Loop: Header=BB16_165 Depth=1
	jmp	.LBB16_171
.LBB16_171:                             # %for.inc785
                                        #   in Loop: Header=BB16_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_165
.LBB16_172:                             # %for.end787
	jmp	.LBB16_173
.LBB16_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB16_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_176 Depth 2
                                        #       Child Loop BB16_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB16_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB16_174 Depth=1
	movl	$0, -8(%rbp)
.LBB16_176:                             # %for.cond793
                                        #   Parent Loop BB16_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB16_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB16_176 Depth=2
	movl	$0, -20(%rbp)
.LBB16_178:                             # %for.cond797
                                        #   Parent Loop BB16_174 Depth=1
                                        #     Parent Loop BB16_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB16_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB16_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB16_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB16_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB16_182
.LBB16_181:                             # %cond.false804
                                        #   in Loop: Header=BB16_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB16_182:                             # %cond.end805
                                        #   in Loop: Header=BB16_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB16_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB16_178
.LBB16_184:                             # %for.end833
                                        #   in Loop: Header=BB16_176 Depth=2
	jmp	.LBB16_185
.LBB16_185:                             # %for.inc834
                                        #   in Loop: Header=BB16_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_176
.LBB16_186:                             # %for.end836
                                        #   in Loop: Header=BB16_174 Depth=1
	jmp	.LBB16_187
.LBB16_187:                             # %for.inc837
                                        #   in Loop: Header=BB16_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_174
.LBB16_188:                             # %for.end839
	jmp	.LBB16_189
.LBB16_189:                             # %if.end840
	cmpl	$319272572, -92(%rbp)   # imm = 0x1307B67C
	jne	.LBB16_191
.LBB16_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_190
.Lfunc_end16:
	.size	estimate_weighting_factor_B_slice.13, .Lfunc_end16-estimate_weighting_factor_B_slice.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.14
.LCPI17_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.14
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.14,@function
estimate_weighting_factor_B_slice.14:   # @estimate_weighting_factor_B_slice.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$82642344, -92(%rbp)    # imm = 0x4ED05A8
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB17_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB17_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB17_4
.LBB17_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB17_4
.LBB17_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB17_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB17_7
.LBB17_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB17_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB17_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_10 Depth 2
                                        #       Child Loop BB17_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB17_8 Depth=1
	movl	$0, -8(%rbp)
.LBB17_10:                              # %for.cond14
                                        #   Parent Loop BB17_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB17_10 Depth=2
	movl	$0, -16(%rbp)
.LBB17_12:                              # %for.cond19
                                        #   Parent Loop BB17_8 Depth=1
                                        #     Parent Loop BB17_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB17_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB17_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB17_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_12
.LBB17_15:                              # %for.end
                                        #   in Loop: Header=BB17_10 Depth=2
	jmp	.LBB17_16
.LBB17_16:                              # %for.inc50
                                        #   in Loop: Header=BB17_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_10
.LBB17_17:                              # %for.end52
                                        #   in Loop: Header=BB17_8 Depth=1
	jmp	.LBB17_18
.LBB17_18:                              # %for.inc53
                                        #   in Loop: Header=BB17_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_8
.LBB17_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB17_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_22 Depth 2
                                        #       Child Loop BB17_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB17_20 Depth=1
	movl	$0, -8(%rbp)
.LBB17_22:                              # %for.cond59
                                        #   Parent Loop BB17_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB17_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB17_29
.LBB17_25:                              # %cond.false70
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB17_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$127, %eax
	jmp	.LBB17_28
.LBB17_27:                              # %cond.false80
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB17_28:                              # %cond.end88
                                        #   in Loop: Header=BB17_22 Depth=2
.LBB17_29:                              # %cond.end90
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB17_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB17_35
.LBB17_31:                              # %cond.false99
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB17_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	$127, %eax
	jmp	.LBB17_34
.LBB17_33:                              # %cond.false107
                                        #   in Loop: Header=BB17_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB17_34:                              # %cond.end113
                                        #   in Loop: Header=BB17_22 Depth=2
.LBB17_35:                              # %cond.end115
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB17_36:                              # %for.cond117
                                        #   Parent Loop BB17_20 Depth=1
                                        #     Parent Loop BB17_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB17_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB17_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB17_49
.LBB17_39:                              # %if.else154
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB17_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB17_45
.LBB17_41:                              # %cond.false160
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB17_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB17_44
.LBB17_43:                              # %cond.false166
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB17_44:                              # %cond.end170
                                        #   in Loop: Header=BB17_36 Depth=3
.LBB17_45:                              # %cond.end172
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB17_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB17_48
.LBB17_47:                              # %if.then198
                                        #   in Loop: Header=BB17_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB17_48:                              # %if.end208
                                        #   in Loop: Header=BB17_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB17_49:                              # %if.end238
                                        #   in Loop: Header=BB17_36 Depth=3
	jmp	.LBB17_50
.LBB17_50:                              # %for.inc239
                                        #   in Loop: Header=BB17_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_36
.LBB17_51:                              # %for.end241
                                        #   in Loop: Header=BB17_22 Depth=2
	jmp	.LBB17_52
.LBB17_52:                              # %for.inc242
                                        #   in Loop: Header=BB17_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_22
.LBB17_53:                              # %for.end244
                                        #   in Loop: Header=BB17_20 Depth=1
	jmp	.LBB17_54
.LBB17_54:                              # %for.inc245
                                        #   in Loop: Header=BB17_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_20
.LBB17_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB17_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB17_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_59 Depth 2
                                        #       Child Loop BB17_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB17_57 Depth=1
	movl	$0, -8(%rbp)
.LBB17_59:                              # %for.cond254
                                        #   Parent Loop BB17_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB17_59 Depth=2
	movl	$0, -20(%rbp)
.LBB17_61:                              # %for.cond257
                                        #   Parent Loop BB17_57 Depth=1
                                        #     Parent Loop BB17_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB17_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB17_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB17_65
.LBB17_64:                              # %cond.false262
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB17_65:                              # %cond.end263
                                        #   in Loop: Header=BB17_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB17_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_61
.LBB17_67:                              # %for.end295
                                        #   in Loop: Header=BB17_59 Depth=2
	jmp	.LBB17_68
.LBB17_68:                              # %for.inc296
                                        #   in Loop: Header=BB17_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_59
.LBB17_69:                              # %for.end298
                                        #   in Loop: Header=BB17_57 Depth=1
	jmp	.LBB17_70
.LBB17_70:                              # %for.inc299
                                        #   in Loop: Header=BB17_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_57
.LBB17_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB17_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	$0, -24(%rbp)
.LBB17_74:                              # %for.cond306
                                        #   Parent Loop BB17_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB17_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB17_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_74
.LBB17_77:                              # %for.end346
                                        #   in Loop: Header=BB17_72 Depth=1
	jmp	.LBB17_78
.LBB17_78:                              # %for.inc347
                                        #   in Loop: Header=BB17_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_72
.LBB17_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB17_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_82 Depth 2
                                        #       Child Loop BB17_84 Depth 3
                                        #       Child Loop BB17_88 Depth 3
                                        #         Child Loop BB17_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	$0, -8(%rbp)
.LBB17_82:                              # %for.cond353
                                        #   Parent Loop BB17_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_84 Depth 3
                                        #       Child Loop BB17_88 Depth 3
                                        #         Child Loop BB17_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	$0, -16(%rbp)
.LBB17_84:                              # %for.cond356
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB17_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB17_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_84
.LBB17_87:                              # %for.end380
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	$0, -16(%rbp)
.LBB17_88:                              # %for.cond381
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB17_88 Depth=3
	movl	$0, -32(%rbp)
.LBB17_90:                              # %for.cond387
                                        #   Parent Loop BB17_80 Depth=1
                                        #     Parent Loop BB17_82 Depth=2
                                        #       Parent Loop BB17_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB17_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB17_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB17_90
.LBB17_93:                              # %for.end421
                                        #   in Loop: Header=BB17_88 Depth=3
	jmp	.LBB17_94
.LBB17_94:                              # %for.inc422
                                        #   in Loop: Header=BB17_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_88
.LBB17_95:                              # %for.end424
                                        #   in Loop: Header=BB17_82 Depth=2
	jmp	.LBB17_96
.LBB17_96:                              # %for.inc425
                                        #   in Loop: Header=BB17_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_82
.LBB17_97:                              # %for.end427
                                        #   in Loop: Header=BB17_80 Depth=1
	jmp	.LBB17_98
.LBB17_98:                              # %for.inc428
                                        #   in Loop: Header=BB17_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_80
.LBB17_99:                              # %for.end430
	jmp	.LBB17_189
.LBB17_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB17_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB17_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB17_101 Depth=1
	movl	$0, -8(%rbp)
.LBB17_103:                             # %for.cond436
                                        #   Parent Loop BB17_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB17_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB17_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB17_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_103
.LBB17_106:                             # %for.end447
                                        #   in Loop: Header=BB17_101 Depth=1
	jmp	.LBB17_107
.LBB17_107:                             # %for.inc448
                                        #   in Loop: Header=BB17_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_101
.LBB17_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB17_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_111 Depth 2
                                        #       Child Loop BB17_113 Depth 3
                                        #       Child Loop BB17_123 Depth 3
                                        #       Child Loop BB17_133 Depth 3
                                        #         Child Loop BB17_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB17_109 Depth=1
	movl	$0, -16(%rbp)
.LBB17_111:                             # %for.cond456
                                        #   Parent Loop BB17_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_113 Depth 3
                                        #       Child Loop BB17_123 Depth 3
                                        #       Child Loop BB17_133 Depth 3
                                        #         Child Loop BB17_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB17_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB17_113:                             # %for.cond476
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB17_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB17_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_113
.LBB17_116:                             # %for.end493
                                        #   in Loop: Header=BB17_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_117
	jp	.LBB17_117
	jmp	.LBB17_118
.LBB17_117:                             # %if.then500
                                        #   in Loop: Header=BB17_111 Depth=2
	vmovsd	.LCPI17_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB17_119
.LBB17_118:                             # %if.else511
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB17_119:                             # %if.end513
                                        #   in Loop: Header=BB17_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB17_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB17_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB17_122
.LBB17_121:                             # %if.then519
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB17_122:                             # %if.end521
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB17_123:                             # %for.cond554
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB17_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB17_130
.LBB17_126:                             # %cond.false571
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_129
.LBB17_128:                             # %cond.false583
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB17_129:                             # %cond.end591
                                        #   in Loop: Header=BB17_123 Depth=3
.LBB17_130:                             # %cond.end593
                                        #   in Loop: Header=BB17_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB17_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_123
.LBB17_132:                             # %for.end600
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	$0, -4(%rbp)
.LBB17_133:                             # %for.cond601
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB17_133 Depth=3
	movl	$0, -8(%rbp)
.LBB17_135:                             # %for.cond608
                                        #   Parent Loop BB17_109 Depth=1
                                        #     Parent Loop BB17_111 Depth=2
                                        #       Parent Loop BB17_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB17_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB17_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB17_142
.LBB17_138:                             # %cond.false630
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB17_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB17_141
.LBB17_140:                             # %cond.false648
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB17_141:                             # %cond.end661
                                        #   in Loop: Header=BB17_135 Depth=4
.LBB17_142:                             # %cond.end663
                                        #   in Loop: Header=BB17_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB17_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_135
.LBB17_144:                             # %for.end675
                                        #   in Loop: Header=BB17_133 Depth=3
	jmp	.LBB17_145
.LBB17_145:                             # %for.inc676
                                        #   in Loop: Header=BB17_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_133
.LBB17_146:                             # %for.end678
                                        #   in Loop: Header=BB17_111 Depth=2
	jmp	.LBB17_147
.LBB17_147:                             # %for.inc679
                                        #   in Loop: Header=BB17_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_111
.LBB17_148:                             # %for.end681
                                        #   in Loop: Header=BB17_109 Depth=1
	jmp	.LBB17_149
.LBB17_149:                             # %for.inc682
                                        #   in Loop: Header=BB17_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_109
.LBB17_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB17_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB17_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_154 Depth 2
                                        #       Child Loop BB17_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB17_152 Depth=1
	movl	$0, -24(%rbp)
.LBB17_154:                             # %for.cond694
                                        #   Parent Loop BB17_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB17_154 Depth=2
	movl	$0, -20(%rbp)
.LBB17_156:                             # %for.cond700
                                        #   Parent Loop BB17_152 Depth=1
                                        #     Parent Loop BB17_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB17_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB17_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_156
.LBB17_159:                             # %for.end730
                                        #   in Loop: Header=BB17_154 Depth=2
	jmp	.LBB17_160
.LBB17_160:                             # %for.inc731
                                        #   in Loop: Header=BB17_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_154
.LBB17_161:                             # %for.end733
                                        #   in Loop: Header=BB17_152 Depth=1
	jmp	.LBB17_162
.LBB17_162:                             # %for.inc734
                                        #   in Loop: Header=BB17_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_152
.LBB17_163:                             # %for.end736
	jmp	.LBB17_173
.LBB17_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB17_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB17_165 Depth=1
	movl	$0, -24(%rbp)
.LBB17_167:                             # %for.cond743
                                        #   Parent Loop BB17_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB17_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB17_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB17_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB17_167
.LBB17_170:                             # %for.end784
                                        #   in Loop: Header=BB17_165 Depth=1
	jmp	.LBB17_171
.LBB17_171:                             # %for.inc785
                                        #   in Loop: Header=BB17_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_165
.LBB17_172:                             # %for.end787
	jmp	.LBB17_173
.LBB17_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB17_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_176 Depth 2
                                        #       Child Loop BB17_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB17_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB17_174 Depth=1
	movl	$0, -8(%rbp)
.LBB17_176:                             # %for.cond793
                                        #   Parent Loop BB17_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB17_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB17_176 Depth=2
	movl	$0, -20(%rbp)
.LBB17_178:                             # %for.cond797
                                        #   Parent Loop BB17_174 Depth=1
                                        #     Parent Loop BB17_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB17_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB17_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB17_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB17_182
.LBB17_181:                             # %cond.false804
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB17_182:                             # %cond.end805
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB17_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB17_178
.LBB17_184:                             # %for.end833
                                        #   in Loop: Header=BB17_176 Depth=2
	jmp	.LBB17_185
.LBB17_185:                             # %for.inc834
                                        #   in Loop: Header=BB17_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_176
.LBB17_186:                             # %for.end836
                                        #   in Loop: Header=BB17_174 Depth=1
	jmp	.LBB17_187
.LBB17_187:                             # %for.inc837
                                        #   in Loop: Header=BB17_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_174
.LBB17_188:                             # %for.end839
	jmp	.LBB17_189
.LBB17_189:                             # %if.end840
	cmpl	$82642344, -92(%rbp)    # imm = 0x4ED05A8
	jne	.LBB17_191
.LBB17_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_190
.Lfunc_end17:
	.size	estimate_weighting_factor_B_slice.14, .Lfunc_end17-estimate_weighting_factor_B_slice.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.15
.LCPI18_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.15
	.p2align	4, 0x90
	.type	test_wp_P_slice.15,@function
test_wp_P_slice.15:                     # @test_wp_P_slice.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$829636573, -64(%rbp)   # imm = 0x31733FDD
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB18_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB18_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB18_4
.LBB18_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB18_4
.LBB18_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB18_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_7 Depth 2
                                        #       Child Loop BB18_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB18_5 Depth=1
	movl	$0, -24(%rbp)
.LBB18_7:                               # %for.cond9
                                        #   Parent Loop BB18_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB18_7 Depth=2
	movl	$0, -12(%rbp)
.LBB18_9:                               # %for.cond14
                                        #   Parent Loop BB18_5 Depth=1
                                        #     Parent Loop BB18_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB18_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB18_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB18_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_9
.LBB18_12:                              # %for.end
                                        #   in Loop: Header=BB18_7 Depth=2
	jmp	.LBB18_13
.LBB18_13:                              # %for.inc41
                                        #   in Loop: Header=BB18_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_7
.LBB18_14:                              # %for.end43
                                        #   in Loop: Header=BB18_5 Depth=1
	jmp	.LBB18_15
.LBB18_15:                              # %for.inc44
                                        #   in Loop: Header=BB18_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_5
.LBB18_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB18_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	$0, -24(%rbp)
.LBB18_19:                              # %for.cond50
                                        #   Parent Loop BB18_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB18_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB18_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB18_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB18_19
.LBB18_22:                              # %for.end60
                                        #   in Loop: Header=BB18_17 Depth=1
	jmp	.LBB18_23
.LBB18_23:                              # %for.inc61
                                        #   in Loop: Header=BB18_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_17
.LBB18_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB18_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_27 Depth 2
                                        #       Child Loop BB18_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	$0, -12(%rbp)
.LBB18_27:                              # %for.cond69
                                        #   Parent Loop BB18_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB18_29:                              # %for.cond85
                                        #   Parent Loop BB18_25 Depth=1
                                        #     Parent Loop BB18_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB18_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB18_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB18_29
.LBB18_32:                              # %for.end99
                                        #   in Loop: Header=BB18_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB18_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB18_34
	jp	.LBB18_34
	jmp	.LBB18_35
.LBB18_34:                              # %if.then106
                                        #   in Loop: Header=BB18_27 Depth=2
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB18_36
.LBB18_35:                              # %if.else
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB18_36:                              # %if.end
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB18_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB18_39
.LBB18_38:                              # %if.then137
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB18_39:                              # %if.end143
                                        #   in Loop: Header=BB18_27 Depth=2
	jmp	.LBB18_47
.LBB18_40:                              # %if.else144
                                        #   in Loop: Header=BB18_27 Depth=2
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB18_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB18_46
.LBB18_42:                              # %cond.false168
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB18_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	$127, %eax
	jmp	.LBB18_45
.LBB18_44:                              # %cond.false177
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB18_45:                              # %cond.end183
                                        #   in Loop: Header=BB18_27 Depth=2
.LBB18_46:                              # %cond.end185
                                        #   in Loop: Header=BB18_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB18_47:                              # %if.end197
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB18_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_27
.LBB18_49:                              # %for.end210
                                        #   in Loop: Header=BB18_25 Depth=1
	jmp	.LBB18_50
.LBB18_50:                              # %for.inc211
                                        #   in Loop: Header=BB18_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_25
.LBB18_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB18_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_54 Depth 2
                                        #       Child Loop BB18_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB18_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	$0, -36(%rbp)
.LBB18_54:                              # %for.cond219
                                        #   Parent Loop BB18_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB18_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB18_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	$0, -32(%rbp)
.LBB18_56:                              # %for.cond225
                                        #   Parent Loop BB18_52 Depth=1
                                        #     Parent Loop BB18_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB18_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB18_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB18_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB18_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB18_60
.LBB18_59:                              # %if.then246
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB18_63
.LBB18_60:                              # %if.end247
                                        #   in Loop: Header=BB18_56 Depth=3
	jmp	.LBB18_61
.LBB18_61:                              # %for.inc248
                                        #   in Loop: Header=BB18_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB18_56
.LBB18_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB18_54 Depth=2
	jmp	.LBB18_63
.LBB18_63:                              # %for.end250
                                        #   in Loop: Header=BB18_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB18_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_68
.LBB18_65:                              # %if.end254
                                        #   in Loop: Header=BB18_54 Depth=2
	jmp	.LBB18_66
.LBB18_66:                              # %for.inc255
                                        #   in Loop: Header=BB18_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB18_54
.LBB18_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_68
.LBB18_68:                              # %for.end257
                                        #   in Loop: Header=BB18_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB18_70
# %bb.69:                               # %if.then260
	jmp	.LBB18_73
.LBB18_70:                              # %if.end261
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_71
.LBB18_71:                              # %for.inc262
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB18_52
.LBB18_72:                              # %for.end264.loopexit
	jmp	.LBB18_73
.LBB18_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$829636573, -64(%rbp)   # imm = 0x31733FDD
	jne	.LBB18_75
.LBB18_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_74
.Lfunc_end18:
	.size	test_wp_P_slice.15, .Lfunc_end18-test_wp_P_slice.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.16
.LCPI19_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.16
	.p2align	4, 0x90
	.type	test_wp_P_slice.16,@function
test_wp_P_slice.16:                     # @test_wp_P_slice.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1376094059, -64(%rbp)  # imm = 0x5205876B
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB19_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB19_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB19_4
.LBB19_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB19_4
.LBB19_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB19_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_7 Depth 2
                                        #       Child Loop BB19_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	$0, -24(%rbp)
.LBB19_7:                               # %for.cond9
                                        #   Parent Loop BB19_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	$0, -12(%rbp)
.LBB19_9:                               # %for.cond14
                                        #   Parent Loop BB19_5 Depth=1
                                        #     Parent Loop BB19_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB19_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB19_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB19_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_9
.LBB19_12:                              # %for.end
                                        #   in Loop: Header=BB19_7 Depth=2
	jmp	.LBB19_13
.LBB19_13:                              # %for.inc41
                                        #   in Loop: Header=BB19_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_7
.LBB19_14:                              # %for.end43
                                        #   in Loop: Header=BB19_5 Depth=1
	jmp	.LBB19_15
.LBB19_15:                              # %for.inc44
                                        #   in Loop: Header=BB19_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_5
.LBB19_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB19_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB19_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	$0, -24(%rbp)
.LBB19_19:                              # %for.cond50
                                        #   Parent Loop BB19_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB19_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB19_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB19_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB19_19
.LBB19_22:                              # %for.end60
                                        #   in Loop: Header=BB19_17 Depth=1
	jmp	.LBB19_23
.LBB19_23:                              # %for.inc61
                                        #   in Loop: Header=BB19_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_17
.LBB19_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB19_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_27 Depth 2
                                        #       Child Loop BB19_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	$0, -12(%rbp)
.LBB19_27:                              # %for.cond69
                                        #   Parent Loop BB19_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB19_29:                              # %for.cond85
                                        #   Parent Loop BB19_25 Depth=1
                                        #     Parent Loop BB19_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB19_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB19_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB19_29
.LBB19_32:                              # %for.end99
                                        #   in Loop: Header=BB19_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB19_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB19_34
	jp	.LBB19_34
	jmp	.LBB19_35
.LBB19_34:                              # %if.then106
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB19_36
.LBB19_35:                              # %if.else
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_36:                              # %if.end
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB19_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_39
.LBB19_38:                              # %if.then137
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB19_39:                              # %if.end143
                                        #   in Loop: Header=BB19_27 Depth=2
	jmp	.LBB19_47
.LBB19_40:                              # %if.else144
                                        #   in Loop: Header=BB19_27 Depth=2
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB19_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB19_46
.LBB19_42:                              # %cond.false168
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB19_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	$127, %eax
	jmp	.LBB19_45
.LBB19_44:                              # %cond.false177
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB19_45:                              # %cond.end183
                                        #   in Loop: Header=BB19_27 Depth=2
.LBB19_46:                              # %cond.end185
                                        #   in Loop: Header=BB19_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB19_47:                              # %if.end197
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB19_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_27
.LBB19_49:                              # %for.end210
                                        #   in Loop: Header=BB19_25 Depth=1
	jmp	.LBB19_50
.LBB19_50:                              # %for.inc211
                                        #   in Loop: Header=BB19_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_25
.LBB19_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB19_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_54 Depth 2
                                        #       Child Loop BB19_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB19_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	$0, -32(%rbp)
.LBB19_54:                              # %for.cond219
                                        #   Parent Loop BB19_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB19_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	$0, -36(%rbp)
.LBB19_56:                              # %for.cond225
                                        #   Parent Loop BB19_52 Depth=1
                                        #     Parent Loop BB19_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB19_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB19_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB19_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB19_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB19_60
.LBB19_59:                              # %if.then246
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB19_63
.LBB19_60:                              # %if.end247
                                        #   in Loop: Header=BB19_56 Depth=3
	jmp	.LBB19_61
.LBB19_61:                              # %for.inc248
                                        #   in Loop: Header=BB19_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB19_56
.LBB19_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB19_54 Depth=2
	jmp	.LBB19_63
.LBB19_63:                              # %for.end250
                                        #   in Loop: Header=BB19_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB19_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_68
.LBB19_65:                              # %if.end254
                                        #   in Loop: Header=BB19_54 Depth=2
	jmp	.LBB19_66
.LBB19_66:                              # %for.inc255
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB19_54
.LBB19_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_68
.LBB19_68:                              # %for.end257
                                        #   in Loop: Header=BB19_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB19_70
# %bb.69:                               # %if.then260
	jmp	.LBB19_73
.LBB19_70:                              # %if.end261
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_71
.LBB19_71:                              # %for.inc262
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB19_52
.LBB19_72:                              # %for.end264.loopexit
	jmp	.LBB19_73
.LBB19_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1376094059, -64(%rbp)  # imm = 0x5205876B
	jne	.LBB19_75
.LBB19_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_74
.Lfunc_end19:
	.size	test_wp_P_slice.16, .Lfunc_end19-test_wp_P_slice.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.17
.LCPI20_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.17
	.p2align	4, 0x90
	.type	test_wp_B_slice.17,@function
test_wp_B_slice.17:                     # @test_wp_B_slice.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1514836374, -88(%rbp)  # imm = 0x5A4A9196
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB20_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB20_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB20_4
.LBB20_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB20_4
.LBB20_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB20_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_7 Depth 2
                                        #       Child Loop BB20_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB20_5 Depth=1
	movl	$0, -24(%rbp)
.LBB20_7:                               # %for.cond9
                                        #   Parent Loop BB20_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB20_7 Depth=2
	movl	$0, -32(%rbp)
.LBB20_9:                               # %for.cond14
                                        #   Parent Loop BB20_5 Depth=1
                                        #     Parent Loop BB20_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB20_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB20_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB20_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB20_9
.LBB20_12:                              # %for.end
                                        #   in Loop: Header=BB20_7 Depth=2
	jmp	.LBB20_13
.LBB20_13:                              # %for.inc41
                                        #   in Loop: Header=BB20_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_7
.LBB20_14:                              # %for.end43
                                        #   in Loop: Header=BB20_5 Depth=1
	jmp	.LBB20_15
.LBB20_15:                              # %for.inc44
                                        #   in Loop: Header=BB20_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_5
.LBB20_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB20_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_19 Depth 2
                                        #       Child Loop BB20_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB20_17 Depth=1
	movl	$0, -24(%rbp)
.LBB20_19:                              # %for.cond50
                                        #   Parent Loop BB20_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB20_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_26
.LBB20_22:                              # %cond.false61
                                        #   in Loop: Header=BB20_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	$127, %eax
	jmp	.LBB20_25
.LBB20_24:                              # %cond.false71
                                        #   in Loop: Header=BB20_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_25:                              # %cond.end79
                                        #   in Loop: Header=BB20_19 Depth=2
.LBB20_26:                              # %cond.end81
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB20_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB20_32
.LBB20_28:                              # %cond.false90
                                        #   in Loop: Header=BB20_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB20_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	$127, %eax
	jmp	.LBB20_31
.LBB20_30:                              # %cond.false98
                                        #   in Loop: Header=BB20_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB20_31:                              # %cond.end104
                                        #   in Loop: Header=BB20_19 Depth=2
.LBB20_32:                              # %cond.end106
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB20_33:                              # %for.cond108
                                        #   Parent Loop BB20_17 Depth=1
                                        #     Parent Loop BB20_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB20_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB20_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB20_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB20_46
.LBB20_36:                              # %if.else
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB20_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB20_42
.LBB20_38:                              # %cond.false145
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB20_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB20_41
.LBB20_40:                              # %cond.false151
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB20_41:                              # %cond.end155
                                        #   in Loop: Header=BB20_33 Depth=3
.LBB20_42:                              # %cond.end157
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB20_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB20_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB20_45
.LBB20_44:                              # %if.then183
                                        #   in Loop: Header=BB20_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB20_45:                              # %if.end
                                        #   in Loop: Header=BB20_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB20_46:                              # %if.end220
                                        #   in Loop: Header=BB20_33 Depth=3
	jmp	.LBB20_47
.LBB20_47:                              # %for.inc221
                                        #   in Loop: Header=BB20_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_33
.LBB20_48:                              # %for.end223
                                        #   in Loop: Header=BB20_19 Depth=2
	jmp	.LBB20_49
.LBB20_49:                              # %for.inc224
                                        #   in Loop: Header=BB20_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_19
.LBB20_50:                              # %for.end226
                                        #   in Loop: Header=BB20_17 Depth=1
	jmp	.LBB20_51
.LBB20_51:                              # %for.inc227
                                        #   in Loop: Header=BB20_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_17
.LBB20_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB20_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB20_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_56 Depth 2
                                        #       Child Loop BB20_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB20_54 Depth=1
	movl	$0, -24(%rbp)
.LBB20_56:                              # %for.cond235
                                        #   Parent Loop BB20_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB20_56 Depth=2
	movl	$0, -20(%rbp)
.LBB20_58:                              # %for.cond238
                                        #   Parent Loop BB20_54 Depth=1
                                        #     Parent Loop BB20_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB20_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB20_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_62
.LBB20_61:                              # %cond.false243
                                        #   in Loop: Header=BB20_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_62:                              # %cond.end244
                                        #   in Loop: Header=BB20_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB20_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_58
.LBB20_64:                              # %for.end276
                                        #   in Loop: Header=BB20_56 Depth=2
	jmp	.LBB20_65
.LBB20_65:                              # %for.inc277
                                        #   in Loop: Header=BB20_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_56
.LBB20_66:                              # %for.end279
                                        #   in Loop: Header=BB20_54 Depth=1
	jmp	.LBB20_67
.LBB20_67:                              # %for.inc280
                                        #   in Loop: Header=BB20_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_54
.LBB20_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB20_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB20_69 Depth=1
	movl	$0, -28(%rbp)
.LBB20_71:                              # %for.cond287
                                        #   Parent Loop BB20_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB20_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB20_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_71
.LBB20_74:                              # %for.end327
                                        #   in Loop: Header=BB20_69 Depth=1
	jmp	.LBB20_75
.LBB20_75:                              # %for.inc328
                                        #   in Loop: Header=BB20_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_69
.LBB20_76:                              # %for.end330
	jmp	.LBB20_142
.LBB20_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB20_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB20_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB20_78 Depth=1
	movl	$0, -24(%rbp)
.LBB20_80:                              # %for.cond335
                                        #   Parent Loop BB20_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB20_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB20_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB20_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_80
.LBB20_83:                              # %for.end345
                                        #   in Loop: Header=BB20_78 Depth=1
	jmp	.LBB20_84
.LBB20_84:                              # %for.inc346
                                        #   in Loop: Header=BB20_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_78
.LBB20_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB20_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_88 Depth 2
                                        #       Child Loop BB20_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB20_86 Depth=1
	movl	$0, -32(%rbp)
.LBB20_88:                              # %for.cond354
                                        #   Parent Loop BB20_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB20_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB20_90:                              # %for.cond372
                                        #   Parent Loop BB20_86 Depth=1
                                        #     Parent Loop BB20_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB20_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB20_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_90
.LBB20_93:                              # %for.end389
                                        #   in Loop: Header=BB20_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB20_94
	jp	.LBB20_94
	jmp	.LBB20_95
.LBB20_94:                              # %if.then396
                                        #   in Loop: Header=BB20_88 Depth=2
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB20_96
.LBB20_95:                              # %if.else406
                                        #   in Loop: Header=BB20_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB20_96:                              # %if.end407
                                        #   in Loop: Header=BB20_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB20_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB20_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB20_99
.LBB20_98:                              # %if.then413
                                        #   in Loop: Header=BB20_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB20_99:                              # %if.end414
                                        #   in Loop: Header=BB20_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB20_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB20_88
.LBB20_101:                             # %for.end447
                                        #   in Loop: Header=BB20_86 Depth=1
	jmp	.LBB20_102
.LBB20_102:                             # %for.inc448
                                        #   in Loop: Header=BB20_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_86
.LBB20_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB20_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB20_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_107 Depth 2
                                        #       Child Loop BB20_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB20_105 Depth=1
	movl	$0, -28(%rbp)
.LBB20_107:                             # %for.cond459
                                        #   Parent Loop BB20_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB20_107 Depth=2
	movl	$0, -20(%rbp)
.LBB20_109:                             # %for.cond465
                                        #   Parent Loop BB20_105 Depth=1
                                        #     Parent Loop BB20_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB20_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB20_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_109
.LBB20_112:                             # %for.end495
                                        #   in Loop: Header=BB20_107 Depth=2
	jmp	.LBB20_113
.LBB20_113:                             # %for.inc496
                                        #   in Loop: Header=BB20_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_107
.LBB20_114:                             # %for.end498
                                        #   in Loop: Header=BB20_105 Depth=1
	jmp	.LBB20_115
.LBB20_115:                             # %for.inc499
                                        #   in Loop: Header=BB20_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_105
.LBB20_116:                             # %for.end501
	jmp	.LBB20_126
.LBB20_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB20_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB20_118 Depth=1
	movl	$0, -28(%rbp)
.LBB20_120:                             # %for.cond508
                                        #   Parent Loop BB20_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB20_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB20_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_120
.LBB20_123:                             # %for.end549
                                        #   in Loop: Header=BB20_118 Depth=1
	jmp	.LBB20_124
.LBB20_124:                             # %for.inc550
                                        #   in Loop: Header=BB20_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_118
.LBB20_125:                             # %for.end552
	jmp	.LBB20_126
.LBB20_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB20_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_129 Depth 2
                                        #       Child Loop BB20_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB20_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB20_127 Depth=1
	movl	$0, -24(%rbp)
.LBB20_129:                             # %for.cond558
                                        #   Parent Loop BB20_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB20_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB20_129 Depth=2
	movl	$0, -20(%rbp)
.LBB20_131:                             # %for.cond562
                                        #   Parent Loop BB20_127 Depth=1
                                        #     Parent Loop BB20_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB20_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB20_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB20_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB20_135
.LBB20_134:                             # %cond.false569
                                        #   in Loop: Header=BB20_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB20_135:                             # %cond.end570
                                        #   in Loop: Header=BB20_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB20_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_131
.LBB20_137:                             # %for.end598
                                        #   in Loop: Header=BB20_129 Depth=2
	jmp	.LBB20_138
.LBB20_138:                             # %for.inc599
                                        #   in Loop: Header=BB20_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB20_129
.LBB20_139:                             # %for.end601
                                        #   in Loop: Header=BB20_127 Depth=1
	jmp	.LBB20_140
.LBB20_140:                             # %for.inc602
                                        #   in Loop: Header=BB20_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_127
.LBB20_141:                             # %for.end604
	jmp	.LBB20_142
.LBB20_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB20_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_145 Depth 2
                                        #       Child Loop BB20_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB20_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB20_143 Depth=1
	movl	$0, -28(%rbp)
.LBB20_145:                             # %for.cond611
                                        #   Parent Loop BB20_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB20_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB20_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB20_145 Depth=2
	movl	$0, -20(%rbp)
.LBB20_147:                             # %for.cond617
                                        #   Parent Loop BB20_143 Depth=1
                                        #     Parent Loop BB20_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB20_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB20_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB20_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB20_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB20_151
.LBB20_150:                             # %if.then638
                                        #   in Loop: Header=BB20_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB20_154
.LBB20_151:                             # %if.end639
                                        #   in Loop: Header=BB20_147 Depth=3
	jmp	.LBB20_152
.LBB20_152:                             # %for.inc640
                                        #   in Loop: Header=BB20_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB20_147
.LBB20_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB20_145 Depth=2
	jmp	.LBB20_154
.LBB20_154:                             # %for.end642
                                        #   in Loop: Header=BB20_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB20_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB20_143 Depth=1
	jmp	.LBB20_159
.LBB20_156:                             # %if.end646
                                        #   in Loop: Header=BB20_145 Depth=2
	jmp	.LBB20_157
.LBB20_157:                             # %for.inc647
                                        #   in Loop: Header=BB20_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB20_145
.LBB20_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB20_143 Depth=1
	jmp	.LBB20_159
.LBB20_159:                             # %for.end649
                                        #   in Loop: Header=BB20_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB20_161
# %bb.160:                              # %if.then652
	jmp	.LBB20_164
.LBB20_161:                             # %if.end653
                                        #   in Loop: Header=BB20_143 Depth=1
	jmp	.LBB20_162
.LBB20_162:                             # %for.inc654
                                        #   in Loop: Header=BB20_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB20_143
.LBB20_163:                             # %for.end656.loopexit
	jmp	.LBB20_164
.LBB20_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1514836374, -88(%rbp)  # imm = 0x5A4A9196
	jne	.LBB20_166
.LBB20_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_165
.Lfunc_end20:
	.size	test_wp_B_slice.17, .Lfunc_end20-test_wp_B_slice.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.18
.LCPI21_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.18
	.p2align	4, 0x90
	.type	test_wp_B_slice.18,@function
test_wp_B_slice.18:                     # @test_wp_B_slice.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$329890349, -84(%rbp)   # imm = 0x13A9BA2D
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB21_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB21_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB21_4
.LBB21_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB21_4
.LBB21_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB21_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_7 Depth 2
                                        #       Child Loop BB21_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	$0, -24(%rbp)
.LBB21_7:                               # %for.cond9
                                        #   Parent Loop BB21_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	$0, -32(%rbp)
.LBB21_9:                               # %for.cond14
                                        #   Parent Loop BB21_5 Depth=1
                                        #     Parent Loop BB21_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB21_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB21_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_9
.LBB21_12:                              # %for.end
                                        #   in Loop: Header=BB21_7 Depth=2
	jmp	.LBB21_13
.LBB21_13:                              # %for.inc41
                                        #   in Loop: Header=BB21_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_7
.LBB21_14:                              # %for.end43
                                        #   in Loop: Header=BB21_5 Depth=1
	jmp	.LBB21_15
.LBB21_15:                              # %for.inc44
                                        #   in Loop: Header=BB21_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_5
.LBB21_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB21_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_19 Depth 2
                                        #       Child Loop BB21_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	$0, -24(%rbp)
.LBB21_19:                              # %for.cond50
                                        #   Parent Loop BB21_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB21_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB21_26
.LBB21_22:                              # %cond.false61
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB21_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$127, %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false71
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB21_25:                              # %cond.end79
                                        #   in Loop: Header=BB21_19 Depth=2
.LBB21_26:                              # %cond.end81
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB21_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB21_32
.LBB21_28:                              # %cond.false90
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB21_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	$127, %eax
	jmp	.LBB21_31
.LBB21_30:                              # %cond.false98
                                        #   in Loop: Header=BB21_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB21_31:                              # %cond.end104
                                        #   in Loop: Header=BB21_19 Depth=2
.LBB21_32:                              # %cond.end106
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB21_33:                              # %for.cond108
                                        #   Parent Loop BB21_17 Depth=1
                                        #     Parent Loop BB21_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB21_33 Depth=3
	cmpl	$0, -52(%rbp)
	jne	.LBB21_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB21_46
.LBB21_36:                              # %if.else
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-52(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB21_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false145
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB21_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false151
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB21_41:                              # %cond.end155
                                        #   in Loop: Header=BB21_33 Depth=3
.LBB21_42:                              # %cond.end157
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB21_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB21_45
.LBB21_44:                              # %if.then183
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB21_45:                              # %if.end
                                        #   in Loop: Header=BB21_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB21_46:                              # %if.end220
                                        #   in Loop: Header=BB21_33 Depth=3
	jmp	.LBB21_47
.LBB21_47:                              # %for.inc221
                                        #   in Loop: Header=BB21_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_33
.LBB21_48:                              # %for.end223
                                        #   in Loop: Header=BB21_19 Depth=2
	jmp	.LBB21_49
.LBB21_49:                              # %for.inc224
                                        #   in Loop: Header=BB21_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_19
.LBB21_50:                              # %for.end226
                                        #   in Loop: Header=BB21_17 Depth=1
	jmp	.LBB21_51
.LBB21_51:                              # %for.inc227
                                        #   in Loop: Header=BB21_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_17
.LBB21_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB21_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB21_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_56 Depth 2
                                        #       Child Loop BB21_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB21_54 Depth=1
	movl	$0, -24(%rbp)
.LBB21_56:                              # %for.cond235
                                        #   Parent Loop BB21_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB21_56 Depth=2
	movl	$0, -20(%rbp)
.LBB21_58:                              # %for.cond238
                                        #   Parent Loop BB21_54 Depth=1
                                        #     Parent Loop BB21_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB21_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB21_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false243
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB21_62:                              # %cond.end244
                                        #   in Loop: Header=BB21_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB21_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_58
.LBB21_64:                              # %for.end276
                                        #   in Loop: Header=BB21_56 Depth=2
	jmp	.LBB21_65
.LBB21_65:                              # %for.inc277
                                        #   in Loop: Header=BB21_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_56
.LBB21_66:                              # %for.end279
                                        #   in Loop: Header=BB21_54 Depth=1
	jmp	.LBB21_67
.LBB21_67:                              # %for.inc280
                                        #   in Loop: Header=BB21_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_54
.LBB21_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB21_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB21_69 Depth=1
	movl	$0, -28(%rbp)
.LBB21_71:                              # %for.cond287
                                        #   Parent Loop BB21_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB21_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB21_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_71
.LBB21_74:                              # %for.end327
                                        #   in Loop: Header=BB21_69 Depth=1
	jmp	.LBB21_75
.LBB21_75:                              # %for.inc328
                                        #   in Loop: Header=BB21_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_69
.LBB21_76:                              # %for.end330
	jmp	.LBB21_142
.LBB21_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB21_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB21_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB21_78 Depth=1
	movl	$0, -24(%rbp)
.LBB21_80:                              # %for.cond335
                                        #   Parent Loop BB21_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB21_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB21_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB21_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_80
.LBB21_83:                              # %for.end345
                                        #   in Loop: Header=BB21_78 Depth=1
	jmp	.LBB21_84
.LBB21_84:                              # %for.inc346
                                        #   in Loop: Header=BB21_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_78
.LBB21_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB21_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_88 Depth 2
                                        #       Child Loop BB21_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB21_86 Depth=1
	movl	$0, -32(%rbp)
.LBB21_88:                              # %for.cond354
                                        #   Parent Loop BB21_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB21_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB21_90:                              # %for.cond372
                                        #   Parent Loop BB21_86 Depth=1
                                        #     Parent Loop BB21_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB21_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB21_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_90
.LBB21_93:                              # %for.end389
                                        #   in Loop: Header=BB21_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB21_94
	jp	.LBB21_94
	jmp	.LBB21_95
.LBB21_94:                              # %if.then396
                                        #   in Loop: Header=BB21_88 Depth=2
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB21_96
.LBB21_95:                              # %if.else406
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB21_96:                              # %if.end407
                                        #   in Loop: Header=BB21_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB21_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB21_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB21_99
.LBB21_98:                              # %if.then413
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB21_99:                              # %if.end414
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB21_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB21_88
.LBB21_101:                             # %for.end447
                                        #   in Loop: Header=BB21_86 Depth=1
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc448
                                        #   in Loop: Header=BB21_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_86
.LBB21_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB21_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB21_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_107 Depth 2
                                        #       Child Loop BB21_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB21_105 Depth=1
	movl	$0, -28(%rbp)
.LBB21_107:                             # %for.cond459
                                        #   Parent Loop BB21_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB21_107 Depth=2
	movl	$0, -20(%rbp)
.LBB21_109:                             # %for.cond465
                                        #   Parent Loop BB21_105 Depth=1
                                        #     Parent Loop BB21_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB21_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB21_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_109
.LBB21_112:                             # %for.end495
                                        #   in Loop: Header=BB21_107 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc496
                                        #   in Loop: Header=BB21_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_107
.LBB21_114:                             # %for.end498
                                        #   in Loop: Header=BB21_105 Depth=1
	jmp	.LBB21_115
.LBB21_115:                             # %for.inc499
                                        #   in Loop: Header=BB21_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_105
.LBB21_116:                             # %for.end501
	jmp	.LBB21_126
.LBB21_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB21_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB21_118 Depth=1
	movl	$0, -28(%rbp)
.LBB21_120:                             # %for.cond508
                                        #   Parent Loop BB21_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB21_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB21_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_120
.LBB21_123:                             # %for.end549
                                        #   in Loop: Header=BB21_118 Depth=1
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc550
                                        #   in Loop: Header=BB21_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_118
.LBB21_125:                             # %for.end552
	jmp	.LBB21_126
.LBB21_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB21_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_129 Depth 2
                                        #       Child Loop BB21_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB21_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB21_127 Depth=1
	movl	$0, -24(%rbp)
.LBB21_129:                             # %for.cond558
                                        #   Parent Loop BB21_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB21_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB21_129 Depth=2
	movl	$0, -20(%rbp)
.LBB21_131:                             # %for.cond562
                                        #   Parent Loop BB21_127 Depth=1
                                        #     Parent Loop BB21_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB21_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB21_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB21_135
.LBB21_134:                             # %cond.false569
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB21_135:                             # %cond.end570
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB21_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_131
.LBB21_137:                             # %for.end598
                                        #   in Loop: Header=BB21_129 Depth=2
	jmp	.LBB21_138
.LBB21_138:                             # %for.inc599
                                        #   in Loop: Header=BB21_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB21_129
.LBB21_139:                             # %for.end601
                                        #   in Loop: Header=BB21_127 Depth=1
	jmp	.LBB21_140
.LBB21_140:                             # %for.inc602
                                        #   in Loop: Header=BB21_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_127
.LBB21_141:                             # %for.end604
	jmp	.LBB21_142
.LBB21_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB21_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_145 Depth 2
                                        #       Child Loop BB21_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB21_143 Depth=1
	movl	$0, -28(%rbp)
.LBB21_145:                             # %for.cond611
                                        #   Parent Loop BB21_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB21_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	$0, -20(%rbp)
.LBB21_147:                             # %for.cond617
                                        #   Parent Loop BB21_143 Depth=1
                                        #     Parent Loop BB21_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB21_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB21_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB21_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB21_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB21_151
.LBB21_150:                             # %if.then638
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB21_154
.LBB21_151:                             # %if.end639
                                        #   in Loop: Header=BB21_147 Depth=3
	jmp	.LBB21_152
.LBB21_152:                             # %for.inc640
                                        #   in Loop: Header=BB21_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_147
.LBB21_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB21_145 Depth=2
	jmp	.LBB21_154
.LBB21_154:                             # %for.end642
                                        #   in Loop: Header=BB21_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB21_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_159
.LBB21_156:                             # %if.end646
                                        #   in Loop: Header=BB21_145 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc647
                                        #   in Loop: Header=BB21_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB21_145
.LBB21_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_159
.LBB21_159:                             # %for.end649
                                        #   in Loop: Header=BB21_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB21_161
# %bb.160:                              # %if.then652
	jmp	.LBB21_164
.LBB21_161:                             # %if.end653
                                        #   in Loop: Header=BB21_143 Depth=1
	jmp	.LBB21_162
.LBB21_162:                             # %for.inc654
                                        #   in Loop: Header=BB21_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_143
.LBB21_163:                             # %for.end656.loopexit
	jmp	.LBB21_164
.LBB21_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$329890349, -84(%rbp)   # imm = 0x13A9BA2D
	jne	.LBB21_166
.LBB21_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_165
.Lfunc_end21:
	.size	test_wp_B_slice.18, .Lfunc_end21-test_wp_B_slice.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.19
.LCPI22_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.19
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.19,@function
estimate_weighting_factor_P_slice.19:   # @estimate_weighting_factor_P_slice.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$927817038, -64(%rbp)   # imm = 0x374D5D4E
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB22_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB22_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB22_4
.LBB22_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB22_4
.LBB22_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB22_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_7 Depth 2
                                        #       Child Loop BB22_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, -16(%rbp)
.LBB22_7:                               # %for.cond12
                                        #   Parent Loop BB22_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	$0, -4(%rbp)
.LBB22_9:                               # %for.cond17
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB22_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB22_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB22_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_9
.LBB22_12:                              # %for.end
                                        #   in Loop: Header=BB22_7 Depth=2
	jmp	.LBB22_13
.LBB22_13:                              # %for.inc48
                                        #   in Loop: Header=BB22_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_7
.LBB22_14:                              # %for.end50
                                        #   in Loop: Header=BB22_5 Depth=1
	jmp	.LBB22_15
.LBB22_15:                              # %for.inc51
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_5
.LBB22_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB22_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB22_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	$0, -16(%rbp)
.LBB22_19:                              # %for.cond57
                                        #   Parent Loop BB22_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB22_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB22_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB22_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_19
.LBB22_22:                              # %for.end67
                                        #   in Loop: Header=BB22_17 Depth=1
	jmp	.LBB22_23
.LBB22_23:                              # %for.inc68
                                        #   in Loop: Header=BB22_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_17
.LBB22_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB22_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_27 Depth 2
                                        #       Child Loop BB22_29 Depth 3
                                        #       Child Loop BB22_48 Depth 3
                                        #       Child Loop BB22_58 Depth 3
                                        #         Child Loop BB22_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	$0, -4(%rbp)
.LBB22_27:                              # %for.cond76
                                        #   Parent Loop BB22_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_29 Depth 3
                                        #       Child Loop BB22_48 Depth 3
                                        #       Child Loop BB22_58 Depth 3
                                        #         Child Loop BB22_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB22_29:                              # %for.cond92
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB22_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB22_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_29
.LBB22_32:                              # %for.end106
                                        #   in Loop: Header=BB22_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB22_40
	jp	.LBB22_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB22_34
	jp	.LBB22_34
	jmp	.LBB22_35
.LBB22_34:                              # %if.then114
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB22_36
.LBB22_35:                              # %if.else
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_36:                              # %if.end
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB22_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_39
.LBB22_38:                              # %if.then147
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_39:                              # %if.end154
                                        #   in Loop: Header=BB22_27 Depth=2
	jmp	.LBB22_47
.LBB22_40:                              # %if.else155
                                        #   in Loop: Header=BB22_27 Depth=2
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB22_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB22_46
.LBB22_42:                              # %cond.false179
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB22_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$127, %eax
	jmp	.LBB22_45
.LBB22_44:                              # %cond.false188
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB22_45:                              # %cond.end194
                                        #   in Loop: Header=BB22_27 Depth=2
.LBB22_46:                              # %cond.end196
                                        #   in Loop: Header=BB22_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB22_47:                              # %if.end209
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB22_48:                              # %for.cond222
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB22_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB22_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB22_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB22_55
.LBB22_51:                              # %cond.false248
                                        #   in Loop: Header=BB22_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB22_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB22_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_54
.LBB22_53:                              # %cond.false270
                                        #   in Loop: Header=BB22_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB22_54:                              # %cond.end288
                                        #   in Loop: Header=BB22_48 Depth=3
.LBB22_55:                              # %cond.end290
                                        #   in Loop: Header=BB22_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB22_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_48
.LBB22_57:                              # %for.end297
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	$0, -12(%rbp)
.LBB22_58:                              # %for.cond298
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB22_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB22_58 Depth=3
	movl	$0, -16(%rbp)
.LBB22_60:                              # %for.cond305
                                        #   Parent Loop BB22_25 Depth=1
                                        #     Parent Loop BB22_27 Depth=2
                                        #       Parent Loop BB22_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB22_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB22_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB22_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB22_67
.LBB22_63:                              # %cond.false336
                                        #   in Loop: Header=BB22_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB22_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB22_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_66
.LBB22_65:                              # %cond.false364
                                        #   in Loop: Header=BB22_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB22_66:                              # %cond.end387
                                        #   in Loop: Header=BB22_60 Depth=4
.LBB22_67:                              # %cond.end389
                                        #   in Loop: Header=BB22_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB22_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_60
.LBB22_69:                              # %for.end400
                                        #   in Loop: Header=BB22_58 Depth=3
	jmp	.LBB22_70
.LBB22_70:                              # %for.inc401
                                        #   in Loop: Header=BB22_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_58
.LBB22_71:                              # %for.end403
                                        #   in Loop: Header=BB22_27 Depth=2
	jmp	.LBB22_72
.LBB22_72:                              # %for.inc404
                                        #   in Loop: Header=BB22_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_27
.LBB22_73:                              # %for.end406
                                        #   in Loop: Header=BB22_25 Depth=1
	jmp	.LBB22_74
.LBB22_74:                              # %for.inc407
                                        #   in Loop: Header=BB22_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_25
.LBB22_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB22_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_78 Depth 2
                                        #       Child Loop BB22_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB22_76 Depth=1
	movl	$0, -24(%rbp)
.LBB22_78:                              # %for.cond415
                                        #   Parent Loop BB22_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB22_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB22_78 Depth=2
	movl	$0, -20(%rbp)
.LBB22_80:                              # %for.cond421
                                        #   Parent Loop BB22_76 Depth=1
                                        #     Parent Loop BB22_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB22_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB22_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB22_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_80
.LBB22_83:                              # %for.end451
                                        #   in Loop: Header=BB22_78 Depth=2
	jmp	.LBB22_84
.LBB22_84:                              # %for.inc452
                                        #   in Loop: Header=BB22_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB22_78
.LBB22_85:                              # %for.end454
                                        #   in Loop: Header=BB22_76 Depth=1
	jmp	.LBB22_86
.LBB22_86:                              # %for.inc455
                                        #   in Loop: Header=BB22_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_76
.LBB22_87:                              # %for.end457
	cmpl	$927817038, -64(%rbp)   # imm = 0x374D5D4E
	jne	.LBB22_89
.LBB22_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_88
.Lfunc_end22:
	.size	estimate_weighting_factor_P_slice.19, .Lfunc_end22-estimate_weighting_factor_P_slice.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.20
.LCPI23_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.20
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.20,@function
estimate_weighting_factor_P_slice.20:   # @estimate_weighting_factor_P_slice.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$440832308, -64(%rbp)   # imm = 0x1A469134
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB23_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB23_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB23_4
.LBB23_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB23_4
.LBB23_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB23_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_7 Depth 2
                                        #       Child Loop BB23_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	$0, -16(%rbp)
.LBB23_7:                               # %for.cond12
                                        #   Parent Loop BB23_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	$0, -4(%rbp)
.LBB23_9:                               # %for.cond17
                                        #   Parent Loop BB23_5 Depth=1
                                        #     Parent Loop BB23_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB23_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB23_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB23_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_9
.LBB23_12:                              # %for.end
                                        #   in Loop: Header=BB23_7 Depth=2
	jmp	.LBB23_13
.LBB23_13:                              # %for.inc48
                                        #   in Loop: Header=BB23_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_7
.LBB23_14:                              # %for.end50
                                        #   in Loop: Header=BB23_5 Depth=1
	jmp	.LBB23_15
.LBB23_15:                              # %for.inc51
                                        #   in Loop: Header=BB23_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_5
.LBB23_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB23_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB23_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB23_17 Depth=1
	movl	$0, -16(%rbp)
.LBB23_19:                              # %for.cond57
                                        #   Parent Loop BB23_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB23_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB23_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB23_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_19
.LBB23_22:                              # %for.end67
                                        #   in Loop: Header=BB23_17 Depth=1
	jmp	.LBB23_23
.LBB23_23:                              # %for.inc68
                                        #   in Loop: Header=BB23_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_17
.LBB23_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB23_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_27 Depth 2
                                        #       Child Loop BB23_29 Depth 3
                                        #       Child Loop BB23_48 Depth 3
                                        #       Child Loop BB23_58 Depth 3
                                        #         Child Loop BB23_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB23_25 Depth=1
	movl	$0, -4(%rbp)
.LBB23_27:                              # %for.cond76
                                        #   Parent Loop BB23_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_29 Depth 3
                                        #       Child Loop BB23_48 Depth 3
                                        #       Child Loop BB23_58 Depth 3
                                        #         Child Loop BB23_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB23_29:                              # %for.cond92
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB23_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB23_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_29
.LBB23_32:                              # %for.end106
                                        #   in Loop: Header=BB23_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB23_40
	jp	.LBB23_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB23_34
	jp	.LBB23_34
	jmp	.LBB23_35
.LBB23_34:                              # %if.then114
                                        #   in Loop: Header=BB23_27 Depth=2
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB23_36
.LBB23_35:                              # %if.else
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_36:                              # %if.end
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB23_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB23_39
.LBB23_38:                              # %if.then147
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_39:                              # %if.end154
                                        #   in Loop: Header=BB23_27 Depth=2
	jmp	.LBB23_47
.LBB23_40:                              # %if.else155
                                        #   in Loop: Header=BB23_27 Depth=2
	vmovsd	.LCPI23_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB23_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB23_46
.LBB23_42:                              # %cond.false179
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB23_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$127, %eax
	jmp	.LBB23_45
.LBB23_44:                              # %cond.false188
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB23_45:                              # %cond.end194
                                        #   in Loop: Header=BB23_27 Depth=2
.LBB23_46:                              # %cond.end196
                                        #   in Loop: Header=BB23_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB23_47:                              # %if.end209
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB23_48:                              # %for.cond222
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB23_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB23_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB23_55
.LBB23_51:                              # %cond.false248
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_54
.LBB23_53:                              # %cond.false270
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB23_54:                              # %cond.end288
                                        #   in Loop: Header=BB23_48 Depth=3
.LBB23_55:                              # %cond.end290
                                        #   in Loop: Header=BB23_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB23_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_48
.LBB23_57:                              # %for.end297
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	$0, -12(%rbp)
.LBB23_58:                              # %for.cond298
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB23_58 Depth=3
	movl	$0, -16(%rbp)
.LBB23_60:                              # %for.cond305
                                        #   Parent Loop BB23_25 Depth=1
                                        #     Parent Loop BB23_27 Depth=2
                                        #       Parent Loop BB23_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB23_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB23_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB23_67
.LBB23_63:                              # %cond.false336
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB23_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB23_66
.LBB23_65:                              # %cond.false364
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB23_66:                              # %cond.end387
                                        #   in Loop: Header=BB23_60 Depth=4
.LBB23_67:                              # %cond.end389
                                        #   in Loop: Header=BB23_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB23_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_60
.LBB23_69:                              # %for.end400
                                        #   in Loop: Header=BB23_58 Depth=3
	jmp	.LBB23_70
.LBB23_70:                              # %for.inc401
                                        #   in Loop: Header=BB23_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_58
.LBB23_71:                              # %for.end403
                                        #   in Loop: Header=BB23_27 Depth=2
	jmp	.LBB23_72
.LBB23_72:                              # %for.inc404
                                        #   in Loop: Header=BB23_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_27
.LBB23_73:                              # %for.end406
                                        #   in Loop: Header=BB23_25 Depth=1
	jmp	.LBB23_74
.LBB23_74:                              # %for.inc407
                                        #   in Loop: Header=BB23_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_25
.LBB23_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB23_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_78 Depth 2
                                        #       Child Loop BB23_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB23_76 Depth=1
	movl	$0, -24(%rbp)
.LBB23_78:                              # %for.cond415
                                        #   Parent Loop BB23_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB23_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB23_78 Depth=2
	movl	$0, -20(%rbp)
.LBB23_80:                              # %for.cond421
                                        #   Parent Loop BB23_76 Depth=1
                                        #     Parent Loop BB23_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB23_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB23_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB23_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB23_80
.LBB23_83:                              # %for.end451
                                        #   in Loop: Header=BB23_78 Depth=2
	jmp	.LBB23_84
.LBB23_84:                              # %for.inc452
                                        #   in Loop: Header=BB23_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB23_78
.LBB23_85:                              # %for.end454
                                        #   in Loop: Header=BB23_76 Depth=1
	jmp	.LBB23_86
.LBB23_86:                              # %for.inc455
                                        #   in Loop: Header=BB23_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_76
.LBB23_87:                              # %for.end457
	cmpl	$440832308, -64(%rbp)   # imm = 0x1A469134
	jne	.LBB23_89
.LBB23_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_88
.Lfunc_end23:
	.size	estimate_weighting_factor_P_slice.20, .Lfunc_end23-estimate_weighting_factor_P_slice.20
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.21
.LCPI24_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.21
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.21,@function
estimate_weighting_factor_B_slice.21:   # @estimate_weighting_factor_B_slice.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$751288149, -84(%rbp)   # imm = 0x2CC7BF55
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB24_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB24_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB24_4
.LBB24_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB24_4
.LBB24_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB24_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB24_7
.LBB24_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB24_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB24_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_10 Depth 2
                                        #       Child Loop BB24_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB24_8 Depth=1
	movl	$0, -8(%rbp)
.LBB24_10:                              # %for.cond14
                                        #   Parent Loop BB24_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB24_10 Depth=2
	movl	$0, -16(%rbp)
.LBB24_12:                              # %for.cond19
                                        #   Parent Loop BB24_8 Depth=1
                                        #     Parent Loop BB24_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB24_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB24_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB24_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_12
.LBB24_15:                              # %for.end
                                        #   in Loop: Header=BB24_10 Depth=2
	jmp	.LBB24_16
.LBB24_16:                              # %for.inc50
                                        #   in Loop: Header=BB24_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_10
.LBB24_17:                              # %for.end52
                                        #   in Loop: Header=BB24_8 Depth=1
	jmp	.LBB24_18
.LBB24_18:                              # %for.inc53
                                        #   in Loop: Header=BB24_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_8
.LBB24_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB24_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_22 Depth 2
                                        #       Child Loop BB24_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	$0, -8(%rbp)
.LBB24_22:                              # %for.cond59
                                        #   Parent Loop BB24_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_29
.LBB24_25:                              # %cond.false70
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$127, %eax
	jmp	.LBB24_28
.LBB24_27:                              # %cond.false80
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_28:                              # %cond.end88
                                        #   in Loop: Header=BB24_22 Depth=2
.LBB24_29:                              # %cond.end90
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB24_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB24_35
.LBB24_31:                              # %cond.false99
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB24_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	$127, %eax
	jmp	.LBB24_34
.LBB24_33:                              # %cond.false107
                                        #   in Loop: Header=BB24_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB24_34:                              # %cond.end113
                                        #   in Loop: Header=BB24_22 Depth=2
.LBB24_35:                              # %cond.end115
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB24_36:                              # %for.cond117
                                        #   Parent Loop BB24_20 Depth=1
                                        #     Parent Loop BB24_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB24_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB24_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB24_49
.LBB24_39:                              # %if.else154
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB24_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB24_45
.LBB24_41:                              # %cond.false160
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB24_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB24_44
.LBB24_43:                              # %cond.false166
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB24_44:                              # %cond.end170
                                        #   in Loop: Header=BB24_36 Depth=3
.LBB24_45:                              # %cond.end172
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB24_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB24_48
.LBB24_47:                              # %if.then198
                                        #   in Loop: Header=BB24_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB24_48:                              # %if.end208
                                        #   in Loop: Header=BB24_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB24_49:                              # %if.end238
                                        #   in Loop: Header=BB24_36 Depth=3
	jmp	.LBB24_50
.LBB24_50:                              # %for.inc239
                                        #   in Loop: Header=BB24_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_36
.LBB24_51:                              # %for.end241
                                        #   in Loop: Header=BB24_22 Depth=2
	jmp	.LBB24_52
.LBB24_52:                              # %for.inc242
                                        #   in Loop: Header=BB24_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_22
.LBB24_53:                              # %for.end244
                                        #   in Loop: Header=BB24_20 Depth=1
	jmp	.LBB24_54
.LBB24_54:                              # %for.inc245
                                        #   in Loop: Header=BB24_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_20
.LBB24_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB24_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB24_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_59 Depth 2
                                        #       Child Loop BB24_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	$0, -8(%rbp)
.LBB24_59:                              # %for.cond254
                                        #   Parent Loop BB24_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	$0, -20(%rbp)
.LBB24_61:                              # %for.cond257
                                        #   Parent Loop BB24_57 Depth=1
                                        #     Parent Loop BB24_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB24_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_65
.LBB24_64:                              # %cond.false262
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_65:                              # %cond.end263
                                        #   in Loop: Header=BB24_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB24_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_61
.LBB24_67:                              # %for.end295
                                        #   in Loop: Header=BB24_59 Depth=2
	jmp	.LBB24_68
.LBB24_68:                              # %for.inc296
                                        #   in Loop: Header=BB24_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_59
.LBB24_69:                              # %for.end298
                                        #   in Loop: Header=BB24_57 Depth=1
	jmp	.LBB24_70
.LBB24_70:                              # %for.inc299
                                        #   in Loop: Header=BB24_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_57
.LBB24_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB24_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB24_72 Depth=1
	movl	$0, -24(%rbp)
.LBB24_74:                              # %for.cond306
                                        #   Parent Loop BB24_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB24_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB24_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_74
.LBB24_77:                              # %for.end346
                                        #   in Loop: Header=BB24_72 Depth=1
	jmp	.LBB24_78
.LBB24_78:                              # %for.inc347
                                        #   in Loop: Header=BB24_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_72
.LBB24_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB24_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_82 Depth 2
                                        #       Child Loop BB24_84 Depth 3
                                        #       Child Loop BB24_88 Depth 3
                                        #         Child Loop BB24_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	$0, -8(%rbp)
.LBB24_82:                              # %for.cond353
                                        #   Parent Loop BB24_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_84 Depth 3
                                        #       Child Loop BB24_88 Depth 3
                                        #         Child Loop BB24_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	$0, -16(%rbp)
.LBB24_84:                              # %for.cond356
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB24_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB24_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_84
.LBB24_87:                              # %for.end380
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	$0, -16(%rbp)
.LBB24_88:                              # %for.cond381
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB24_88 Depth=3
	movl	$0, -32(%rbp)
.LBB24_90:                              # %for.cond387
                                        #   Parent Loop BB24_80 Depth=1
                                        #     Parent Loop BB24_82 Depth=2
                                        #       Parent Loop BB24_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB24_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB24_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB24_90
.LBB24_93:                              # %for.end421
                                        #   in Loop: Header=BB24_88 Depth=3
	jmp	.LBB24_94
.LBB24_94:                              # %for.inc422
                                        #   in Loop: Header=BB24_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_88
.LBB24_95:                              # %for.end424
                                        #   in Loop: Header=BB24_82 Depth=2
	jmp	.LBB24_96
.LBB24_96:                              # %for.inc425
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_82
.LBB24_97:                              # %for.end427
                                        #   in Loop: Header=BB24_80 Depth=1
	jmp	.LBB24_98
.LBB24_98:                              # %for.inc428
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_80
.LBB24_99:                              # %for.end430
	jmp	.LBB24_189
.LBB24_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB24_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB24_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB24_101 Depth=1
	movl	$0, -8(%rbp)
.LBB24_103:                             # %for.cond436
                                        #   Parent Loop BB24_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB24_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB24_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB24_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_103
.LBB24_106:                             # %for.end447
                                        #   in Loop: Header=BB24_101 Depth=1
	jmp	.LBB24_107
.LBB24_107:                             # %for.inc448
                                        #   in Loop: Header=BB24_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_101
.LBB24_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB24_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_111 Depth 2
                                        #       Child Loop BB24_113 Depth 3
                                        #       Child Loop BB24_123 Depth 3
                                        #       Child Loop BB24_133 Depth 3
                                        #         Child Loop BB24_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB24_109 Depth=1
	movl	$0, -16(%rbp)
.LBB24_111:                             # %for.cond456
                                        #   Parent Loop BB24_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_113 Depth 3
                                        #       Child Loop BB24_123 Depth 3
                                        #       Child Loop BB24_133 Depth 3
                                        #         Child Loop BB24_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB24_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB24_113:                             # %for.cond476
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB24_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB24_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_113
.LBB24_116:                             # %for.end493
                                        #   in Loop: Header=BB24_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB24_117
	jp	.LBB24_117
	jmp	.LBB24_118
.LBB24_117:                             # %if.then500
                                        #   in Loop: Header=BB24_111 Depth=2
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB24_119
.LBB24_118:                             # %if.else511
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB24_119:                             # %if.end513
                                        #   in Loop: Header=BB24_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB24_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB24_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB24_122
.LBB24_121:                             # %if.then519
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB24_122:                             # %if.end521
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB24_123:                             # %for.cond554
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB24_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB24_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB24_130
.LBB24_126:                             # %cond.false571
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB24_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_129
.LBB24_128:                             # %cond.false583
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB24_129:                             # %cond.end591
                                        #   in Loop: Header=BB24_123 Depth=3
.LBB24_130:                             # %cond.end593
                                        #   in Loop: Header=BB24_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB24_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_123
.LBB24_132:                             # %for.end600
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	$0, -4(%rbp)
.LBB24_133:                             # %for.cond601
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB24_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB24_133 Depth=3
	movl	$0, -8(%rbp)
.LBB24_135:                             # %for.cond608
                                        #   Parent Loop BB24_109 Depth=1
                                        #     Parent Loop BB24_111 Depth=2
                                        #       Parent Loop BB24_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB24_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB24_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB24_142
.LBB24_138:                             # %cond.false630
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB24_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB24_141
.LBB24_140:                             # %cond.false648
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB24_141:                             # %cond.end661
                                        #   in Loop: Header=BB24_135 Depth=4
.LBB24_142:                             # %cond.end663
                                        #   in Loop: Header=BB24_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB24_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_135
.LBB24_144:                             # %for.end675
                                        #   in Loop: Header=BB24_133 Depth=3
	jmp	.LBB24_145
.LBB24_145:                             # %for.inc676
                                        #   in Loop: Header=BB24_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_133
.LBB24_146:                             # %for.end678
                                        #   in Loop: Header=BB24_111 Depth=2
	jmp	.LBB24_147
.LBB24_147:                             # %for.inc679
                                        #   in Loop: Header=BB24_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB24_111
.LBB24_148:                             # %for.end681
                                        #   in Loop: Header=BB24_109 Depth=1
	jmp	.LBB24_149
.LBB24_149:                             # %for.inc682
                                        #   in Loop: Header=BB24_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_109
.LBB24_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB24_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB24_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_154 Depth 2
                                        #       Child Loop BB24_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB24_152 Depth=1
	movl	$0, -24(%rbp)
.LBB24_154:                             # %for.cond694
                                        #   Parent Loop BB24_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB24_154 Depth=2
	movl	$0, -20(%rbp)
.LBB24_156:                             # %for.cond700
                                        #   Parent Loop BB24_152 Depth=1
                                        #     Parent Loop BB24_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB24_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB24_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_156
.LBB24_159:                             # %for.end730
                                        #   in Loop: Header=BB24_154 Depth=2
	jmp	.LBB24_160
.LBB24_160:                             # %for.inc731
                                        #   in Loop: Header=BB24_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_154
.LBB24_161:                             # %for.end733
                                        #   in Loop: Header=BB24_152 Depth=1
	jmp	.LBB24_162
.LBB24_162:                             # %for.inc734
                                        #   in Loop: Header=BB24_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_152
.LBB24_163:                             # %for.end736
	jmp	.LBB24_173
.LBB24_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB24_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB24_165 Depth=1
	movl	$0, -24(%rbp)
.LBB24_167:                             # %for.cond743
                                        #   Parent Loop BB24_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB24_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB24_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB24_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB24_167
.LBB24_170:                             # %for.end784
                                        #   in Loop: Header=BB24_165 Depth=1
	jmp	.LBB24_171
.LBB24_171:                             # %for.inc785
                                        #   in Loop: Header=BB24_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_165
.LBB24_172:                             # %for.end787
	jmp	.LBB24_173
.LBB24_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB24_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_176 Depth 2
                                        #       Child Loop BB24_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB24_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB24_174 Depth=1
	movl	$0, -8(%rbp)
.LBB24_176:                             # %for.cond793
                                        #   Parent Loop BB24_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB24_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB24_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB24_176 Depth=2
	movl	$0, -20(%rbp)
.LBB24_178:                             # %for.cond797
                                        #   Parent Loop BB24_174 Depth=1
                                        #     Parent Loop BB24_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB24_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB24_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB24_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB24_182
.LBB24_181:                             # %cond.false804
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB24_182:                             # %cond.end805
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB24_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB24_178
.LBB24_184:                             # %for.end833
                                        #   in Loop: Header=BB24_176 Depth=2
	jmp	.LBB24_185
.LBB24_185:                             # %for.inc834
                                        #   in Loop: Header=BB24_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_176
.LBB24_186:                             # %for.end836
                                        #   in Loop: Header=BB24_174 Depth=1
	jmp	.LBB24_187
.LBB24_187:                             # %for.inc837
                                        #   in Loop: Header=BB24_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_174
.LBB24_188:                             # %for.end839
	jmp	.LBB24_189
.LBB24_189:                             # %if.end840
	cmpl	$751288149, -84(%rbp)   # imm = 0x2CC7BF55
	jne	.LBB24_191
.LBB24_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_190
.Lfunc_end24:
	.size	estimate_weighting_factor_B_slice.21, .Lfunc_end24-estimate_weighting_factor_B_slice.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.22
.LCPI25_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.22
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.22,@function
estimate_weighting_factor_B_slice.22:   # @estimate_weighting_factor_B_slice.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$855491328, -92(%rbp)   # imm = 0x32FDC300
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB25_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB25_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB25_4
.LBB25_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB25_4
.LBB25_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB25_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB25_7
.LBB25_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB25_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB25_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_10 Depth 2
                                        #       Child Loop BB25_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	$0, -8(%rbp)
.LBB25_10:                              # %for.cond14
                                        #   Parent Loop BB25_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB25_10 Depth=2
	movl	$0, -16(%rbp)
.LBB25_12:                              # %for.cond19
                                        #   Parent Loop BB25_8 Depth=1
                                        #     Parent Loop BB25_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB25_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB25_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB25_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_12
.LBB25_15:                              # %for.end
                                        #   in Loop: Header=BB25_10 Depth=2
	jmp	.LBB25_16
.LBB25_16:                              # %for.inc50
                                        #   in Loop: Header=BB25_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_10
.LBB25_17:                              # %for.end52
                                        #   in Loop: Header=BB25_8 Depth=1
	jmp	.LBB25_18
.LBB25_18:                              # %for.inc53
                                        #   in Loop: Header=BB25_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_8
.LBB25_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB25_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_22 Depth 2
                                        #       Child Loop BB25_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB25_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB25_20 Depth=1
	movl	$0, -8(%rbp)
.LBB25_22:                              # %for.cond59
                                        #   Parent Loop BB25_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB25_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB25_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB25_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB25_29
.LBB25_25:                              # %cond.false70
                                        #   in Loop: Header=BB25_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB25_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	$127, %eax
	jmp	.LBB25_28
.LBB25_27:                              # %cond.false80
                                        #   in Loop: Header=BB25_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB25_28:                              # %cond.end88
                                        #   in Loop: Header=BB25_22 Depth=2
.LBB25_29:                              # %cond.end90
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB25_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB25_35
.LBB25_31:                              # %cond.false99
                                        #   in Loop: Header=BB25_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB25_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	$127, %eax
	jmp	.LBB25_34
.LBB25_33:                              # %cond.false107
                                        #   in Loop: Header=BB25_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB25_34:                              # %cond.end113
                                        #   in Loop: Header=BB25_22 Depth=2
.LBB25_35:                              # %cond.end115
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB25_36:                              # %for.cond117
                                        #   Parent Loop BB25_20 Depth=1
                                        #     Parent Loop BB25_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB25_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB25_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB25_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB25_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB25_49
.LBB25_39:                              # %if.else154
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB25_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB25_45
.LBB25_41:                              # %cond.false160
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB25_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB25_44
.LBB25_43:                              # %cond.false166
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB25_44:                              # %cond.end170
                                        #   in Loop: Header=BB25_36 Depth=3
.LBB25_45:                              # %cond.end172
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB25_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB25_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB25_48
.LBB25_47:                              # %if.then198
                                        #   in Loop: Header=BB25_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB25_48:                              # %if.end208
                                        #   in Loop: Header=BB25_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB25_49:                              # %if.end238
                                        #   in Loop: Header=BB25_36 Depth=3
	jmp	.LBB25_50
.LBB25_50:                              # %for.inc239
                                        #   in Loop: Header=BB25_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_36
.LBB25_51:                              # %for.end241
                                        #   in Loop: Header=BB25_22 Depth=2
	jmp	.LBB25_52
.LBB25_52:                              # %for.inc242
                                        #   in Loop: Header=BB25_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_22
.LBB25_53:                              # %for.end244
                                        #   in Loop: Header=BB25_20 Depth=1
	jmp	.LBB25_54
.LBB25_54:                              # %for.inc245
                                        #   in Loop: Header=BB25_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_20
.LBB25_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB25_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB25_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_59 Depth 2
                                        #       Child Loop BB25_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB25_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB25_57 Depth=1
	movl	$0, -8(%rbp)
.LBB25_59:                              # %for.cond254
                                        #   Parent Loop BB25_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB25_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB25_59 Depth=2
	movl	$0, -20(%rbp)
.LBB25_61:                              # %for.cond257
                                        #   Parent Loop BB25_57 Depth=1
                                        #     Parent Loop BB25_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB25_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB25_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB25_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB25_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB25_65
.LBB25_64:                              # %cond.false262
                                        #   in Loop: Header=BB25_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB25_65:                              # %cond.end263
                                        #   in Loop: Header=BB25_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB25_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_61
.LBB25_67:                              # %for.end295
                                        #   in Loop: Header=BB25_59 Depth=2
	jmp	.LBB25_68
.LBB25_68:                              # %for.inc296
                                        #   in Loop: Header=BB25_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_59
.LBB25_69:                              # %for.end298
                                        #   in Loop: Header=BB25_57 Depth=1
	jmp	.LBB25_70
.LBB25_70:                              # %for.inc299
                                        #   in Loop: Header=BB25_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_57
.LBB25_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB25_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB25_72 Depth=1
	movl	$0, -24(%rbp)
.LBB25_74:                              # %for.cond306
                                        #   Parent Loop BB25_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB25_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB25_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_74
.LBB25_77:                              # %for.end346
                                        #   in Loop: Header=BB25_72 Depth=1
	jmp	.LBB25_78
.LBB25_78:                              # %for.inc347
                                        #   in Loop: Header=BB25_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_72
.LBB25_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB25_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_82 Depth 2
                                        #       Child Loop BB25_84 Depth 3
                                        #       Child Loop BB25_88 Depth 3
                                        #         Child Loop BB25_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB25_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB25_80 Depth=1
	movl	$0, -8(%rbp)
.LBB25_82:                              # %for.cond353
                                        #   Parent Loop BB25_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_84 Depth 3
                                        #       Child Loop BB25_88 Depth 3
                                        #         Child Loop BB25_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB25_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB25_82 Depth=2
	movl	$0, -16(%rbp)
.LBB25_84:                              # %for.cond356
                                        #   Parent Loop BB25_80 Depth=1
                                        #     Parent Loop BB25_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB25_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB25_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_84
.LBB25_87:                              # %for.end380
                                        #   in Loop: Header=BB25_82 Depth=2
	movl	$0, -16(%rbp)
.LBB25_88:                              # %for.cond381
                                        #   Parent Loop BB25_80 Depth=1
                                        #     Parent Loop BB25_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB25_88 Depth=3
	movl	$0, -32(%rbp)
.LBB25_90:                              # %for.cond387
                                        #   Parent Loop BB25_80 Depth=1
                                        #     Parent Loop BB25_82 Depth=2
                                        #       Parent Loop BB25_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB25_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB25_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB25_90
.LBB25_93:                              # %for.end421
                                        #   in Loop: Header=BB25_88 Depth=3
	jmp	.LBB25_94
.LBB25_94:                              # %for.inc422
                                        #   in Loop: Header=BB25_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_88
.LBB25_95:                              # %for.end424
                                        #   in Loop: Header=BB25_82 Depth=2
	jmp	.LBB25_96
.LBB25_96:                              # %for.inc425
                                        #   in Loop: Header=BB25_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_82
.LBB25_97:                              # %for.end427
                                        #   in Loop: Header=BB25_80 Depth=1
	jmp	.LBB25_98
.LBB25_98:                              # %for.inc428
                                        #   in Loop: Header=BB25_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_80
.LBB25_99:                              # %for.end430
	jmp	.LBB25_189
.LBB25_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB25_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB25_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB25_101 Depth=1
	movl	$0, -8(%rbp)
.LBB25_103:                             # %for.cond436
                                        #   Parent Loop BB25_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB25_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB25_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB25_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_103
.LBB25_106:                             # %for.end447
                                        #   in Loop: Header=BB25_101 Depth=1
	jmp	.LBB25_107
.LBB25_107:                             # %for.inc448
                                        #   in Loop: Header=BB25_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_101
.LBB25_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB25_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_111 Depth 2
                                        #       Child Loop BB25_113 Depth 3
                                        #       Child Loop BB25_123 Depth 3
                                        #       Child Loop BB25_133 Depth 3
                                        #         Child Loop BB25_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB25_109 Depth=1
	movl	$0, -16(%rbp)
.LBB25_111:                             # %for.cond456
                                        #   Parent Loop BB25_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_113 Depth 3
                                        #       Child Loop BB25_123 Depth 3
                                        #       Child Loop BB25_133 Depth 3
                                        #         Child Loop BB25_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB25_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB25_113:                             # %for.cond476
                                        #   Parent Loop BB25_109 Depth=1
                                        #     Parent Loop BB25_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB25_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB25_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_113
.LBB25_116:                             # %for.end493
                                        #   in Loop: Header=BB25_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB25_117
	jp	.LBB25_117
	jmp	.LBB25_118
.LBB25_117:                             # %if.then500
                                        #   in Loop: Header=BB25_111 Depth=2
	vmovsd	.LCPI25_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB25_119
.LBB25_118:                             # %if.else511
                                        #   in Loop: Header=BB25_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB25_119:                             # %if.end513
                                        #   in Loop: Header=BB25_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB25_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB25_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB25_122
.LBB25_121:                             # %if.then519
                                        #   in Loop: Header=BB25_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB25_122:                             # %if.end521
                                        #   in Loop: Header=BB25_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB25_123:                             # %for.cond554
                                        #   Parent Loop BB25_109 Depth=1
                                        #     Parent Loop BB25_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB25_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB25_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB25_130
.LBB25_126:                             # %cond.false571
                                        #   in Loop: Header=BB25_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB25_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_129
.LBB25_128:                             # %cond.false583
                                        #   in Loop: Header=BB25_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB25_129:                             # %cond.end591
                                        #   in Loop: Header=BB25_123 Depth=3
.LBB25_130:                             # %cond.end593
                                        #   in Loop: Header=BB25_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB25_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_123
.LBB25_132:                             # %for.end600
                                        #   in Loop: Header=BB25_111 Depth=2
	movl	$0, -4(%rbp)
.LBB25_133:                             # %for.cond601
                                        #   Parent Loop BB25_109 Depth=1
                                        #     Parent Loop BB25_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB25_133 Depth=3
	movl	$0, -8(%rbp)
.LBB25_135:                             # %for.cond608
                                        #   Parent Loop BB25_109 Depth=1
                                        #     Parent Loop BB25_111 Depth=2
                                        #       Parent Loop BB25_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB25_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB25_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB25_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB25_142
.LBB25_138:                             # %cond.false630
                                        #   in Loop: Header=BB25_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB25_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB25_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB25_141
.LBB25_140:                             # %cond.false648
                                        #   in Loop: Header=BB25_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB25_141:                             # %cond.end661
                                        #   in Loop: Header=BB25_135 Depth=4
.LBB25_142:                             # %cond.end663
                                        #   in Loop: Header=BB25_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB25_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_135
.LBB25_144:                             # %for.end675
                                        #   in Loop: Header=BB25_133 Depth=3
	jmp	.LBB25_145
.LBB25_145:                             # %for.inc676
                                        #   in Loop: Header=BB25_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_133
.LBB25_146:                             # %for.end678
                                        #   in Loop: Header=BB25_111 Depth=2
	jmp	.LBB25_147
.LBB25_147:                             # %for.inc679
                                        #   in Loop: Header=BB25_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_111
.LBB25_148:                             # %for.end681
                                        #   in Loop: Header=BB25_109 Depth=1
	jmp	.LBB25_149
.LBB25_149:                             # %for.inc682
                                        #   in Loop: Header=BB25_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_109
.LBB25_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB25_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB25_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_154 Depth 2
                                        #       Child Loop BB25_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB25_152 Depth=1
	movl	$0, -24(%rbp)
.LBB25_154:                             # %for.cond694
                                        #   Parent Loop BB25_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB25_154 Depth=2
	movl	$0, -20(%rbp)
.LBB25_156:                             # %for.cond700
                                        #   Parent Loop BB25_152 Depth=1
                                        #     Parent Loop BB25_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB25_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB25_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB25_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_156
.LBB25_159:                             # %for.end730
                                        #   in Loop: Header=BB25_154 Depth=2
	jmp	.LBB25_160
.LBB25_160:                             # %for.inc731
                                        #   in Loop: Header=BB25_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_154
.LBB25_161:                             # %for.end733
                                        #   in Loop: Header=BB25_152 Depth=1
	jmp	.LBB25_162
.LBB25_162:                             # %for.inc734
                                        #   in Loop: Header=BB25_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_152
.LBB25_163:                             # %for.end736
	jmp	.LBB25_173
.LBB25_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB25_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB25_165 Depth=1
	movl	$0, -24(%rbp)
.LBB25_167:                             # %for.cond743
                                        #   Parent Loop BB25_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB25_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB25_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB25_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB25_167
.LBB25_170:                             # %for.end784
                                        #   in Loop: Header=BB25_165 Depth=1
	jmp	.LBB25_171
.LBB25_171:                             # %for.inc785
                                        #   in Loop: Header=BB25_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_165
.LBB25_172:                             # %for.end787
	jmp	.LBB25_173
.LBB25_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB25_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_176 Depth 2
                                        #       Child Loop BB25_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB25_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB25_174 Depth=1
	movl	$0, -8(%rbp)
.LBB25_176:                             # %for.cond793
                                        #   Parent Loop BB25_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB25_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB25_176 Depth=2
	movl	$0, -20(%rbp)
.LBB25_178:                             # %for.cond797
                                        #   Parent Loop BB25_174 Depth=1
                                        #     Parent Loop BB25_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB25_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB25_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB25_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB25_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB25_182
.LBB25_181:                             # %cond.false804
                                        #   in Loop: Header=BB25_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB25_182:                             # %cond.end805
                                        #   in Loop: Header=BB25_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB25_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB25_178
.LBB25_184:                             # %for.end833
                                        #   in Loop: Header=BB25_176 Depth=2
	jmp	.LBB25_185
.LBB25_185:                             # %for.inc834
                                        #   in Loop: Header=BB25_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_176
.LBB25_186:                             # %for.end836
                                        #   in Loop: Header=BB25_174 Depth=1
	jmp	.LBB25_187
.LBB25_187:                             # %for.inc837
                                        #   in Loop: Header=BB25_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_174
.LBB25_188:                             # %for.end839
	jmp	.LBB25_189
.LBB25_189:                             # %if.end840
	cmpl	$855491328, -92(%rbp)   # imm = 0x32FDC300
	jne	.LBB25_191
.LBB25_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_190
.Lfunc_end25:
	.size	estimate_weighting_factor_B_slice.22, .Lfunc_end25-estimate_weighting_factor_B_slice.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.23
.LCPI26_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.23
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.23,@function
estimate_weighting_factor_B_slice.23:   # @estimate_weighting_factor_B_slice.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1612558350, -84(%rbp)  # imm = 0x601DB00E
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB26_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB26_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB26_4
.LBB26_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB26_4
.LBB26_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB26_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB26_7
.LBB26_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB26_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB26_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_10 Depth 2
                                        #       Child Loop BB26_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB26_8 Depth=1
	movl	$0, -8(%rbp)
.LBB26_10:                              # %for.cond14
                                        #   Parent Loop BB26_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB26_10 Depth=2
	movl	$0, -16(%rbp)
.LBB26_12:                              # %for.cond19
                                        #   Parent Loop BB26_8 Depth=1
                                        #     Parent Loop BB26_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB26_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB26_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB26_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_12
.LBB26_15:                              # %for.end
                                        #   in Loop: Header=BB26_10 Depth=2
	jmp	.LBB26_16
.LBB26_16:                              # %for.inc50
                                        #   in Loop: Header=BB26_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_10
.LBB26_17:                              # %for.end52
                                        #   in Loop: Header=BB26_8 Depth=1
	jmp	.LBB26_18
.LBB26_18:                              # %for.inc53
                                        #   in Loop: Header=BB26_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_8
.LBB26_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB26_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_22 Depth 2
                                        #       Child Loop BB26_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB26_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB26_20 Depth=1
	movl	$0, -8(%rbp)
.LBB26_22:                              # %for.cond59
                                        #   Parent Loop BB26_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB26_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB26_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB26_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB26_29
.LBB26_25:                              # %cond.false70
                                        #   in Loop: Header=BB26_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB26_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	$127, %eax
	jmp	.LBB26_28
.LBB26_27:                              # %cond.false80
                                        #   in Loop: Header=BB26_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB26_28:                              # %cond.end88
                                        #   in Loop: Header=BB26_22 Depth=2
.LBB26_29:                              # %cond.end90
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB26_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB26_35
.LBB26_31:                              # %cond.false99
                                        #   in Loop: Header=BB26_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB26_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	$127, %eax
	jmp	.LBB26_34
.LBB26_33:                              # %cond.false107
                                        #   in Loop: Header=BB26_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB26_34:                              # %cond.end113
                                        #   in Loop: Header=BB26_22 Depth=2
.LBB26_35:                              # %cond.end115
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB26_36:                              # %for.cond117
                                        #   Parent Loop BB26_20 Depth=1
                                        #     Parent Loop BB26_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB26_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB26_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB26_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB26_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB26_49
.LBB26_39:                              # %if.else154
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB26_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB26_45
.LBB26_41:                              # %cond.false160
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB26_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB26_44
.LBB26_43:                              # %cond.false166
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB26_44:                              # %cond.end170
                                        #   in Loop: Header=BB26_36 Depth=3
.LBB26_45:                              # %cond.end172
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB26_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB26_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB26_48
.LBB26_47:                              # %if.then198
                                        #   in Loop: Header=BB26_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB26_48:                              # %if.end208
                                        #   in Loop: Header=BB26_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB26_49:                              # %if.end238
                                        #   in Loop: Header=BB26_36 Depth=3
	jmp	.LBB26_50
.LBB26_50:                              # %for.inc239
                                        #   in Loop: Header=BB26_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_36
.LBB26_51:                              # %for.end241
                                        #   in Loop: Header=BB26_22 Depth=2
	jmp	.LBB26_52
.LBB26_52:                              # %for.inc242
                                        #   in Loop: Header=BB26_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_22
.LBB26_53:                              # %for.end244
                                        #   in Loop: Header=BB26_20 Depth=1
	jmp	.LBB26_54
.LBB26_54:                              # %for.inc245
                                        #   in Loop: Header=BB26_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_20
.LBB26_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB26_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB26_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_59 Depth 2
                                        #       Child Loop BB26_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB26_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB26_57 Depth=1
	movl	$0, -8(%rbp)
.LBB26_59:                              # %for.cond254
                                        #   Parent Loop BB26_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB26_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB26_59 Depth=2
	movl	$0, -20(%rbp)
.LBB26_61:                              # %for.cond257
                                        #   Parent Loop BB26_57 Depth=1
                                        #     Parent Loop BB26_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB26_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB26_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB26_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB26_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB26_65
.LBB26_64:                              # %cond.false262
                                        #   in Loop: Header=BB26_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB26_65:                              # %cond.end263
                                        #   in Loop: Header=BB26_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB26_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_61
.LBB26_67:                              # %for.end295
                                        #   in Loop: Header=BB26_59 Depth=2
	jmp	.LBB26_68
.LBB26_68:                              # %for.inc296
                                        #   in Loop: Header=BB26_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_59
.LBB26_69:                              # %for.end298
                                        #   in Loop: Header=BB26_57 Depth=1
	jmp	.LBB26_70
.LBB26_70:                              # %for.inc299
                                        #   in Loop: Header=BB26_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_57
.LBB26_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB26_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB26_72 Depth=1
	movl	$0, -24(%rbp)
.LBB26_74:                              # %for.cond306
                                        #   Parent Loop BB26_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB26_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB26_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_74
.LBB26_77:                              # %for.end346
                                        #   in Loop: Header=BB26_72 Depth=1
	jmp	.LBB26_78
.LBB26_78:                              # %for.inc347
                                        #   in Loop: Header=BB26_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_72
.LBB26_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB26_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_82 Depth 2
                                        #       Child Loop BB26_84 Depth 3
                                        #       Child Loop BB26_88 Depth 3
                                        #         Child Loop BB26_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB26_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	$0, -8(%rbp)
.LBB26_82:                              # %for.cond353
                                        #   Parent Loop BB26_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_84 Depth 3
                                        #       Child Loop BB26_88 Depth 3
                                        #         Child Loop BB26_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB26_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	$0, -16(%rbp)
.LBB26_84:                              # %for.cond356
                                        #   Parent Loop BB26_80 Depth=1
                                        #     Parent Loop BB26_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB26_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB26_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_84
.LBB26_87:                              # %for.end380
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	$0, -16(%rbp)
.LBB26_88:                              # %for.cond381
                                        #   Parent Loop BB26_80 Depth=1
                                        #     Parent Loop BB26_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB26_88 Depth=3
	movl	$0, -32(%rbp)
.LBB26_90:                              # %for.cond387
                                        #   Parent Loop BB26_80 Depth=1
                                        #     Parent Loop BB26_82 Depth=2
                                        #       Parent Loop BB26_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB26_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB26_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB26_90
.LBB26_93:                              # %for.end421
                                        #   in Loop: Header=BB26_88 Depth=3
	jmp	.LBB26_94
.LBB26_94:                              # %for.inc422
                                        #   in Loop: Header=BB26_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_88
.LBB26_95:                              # %for.end424
                                        #   in Loop: Header=BB26_82 Depth=2
	jmp	.LBB26_96
.LBB26_96:                              # %for.inc425
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_82
.LBB26_97:                              # %for.end427
                                        #   in Loop: Header=BB26_80 Depth=1
	jmp	.LBB26_98
.LBB26_98:                              # %for.inc428
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_80
.LBB26_99:                              # %for.end430
	jmp	.LBB26_189
.LBB26_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB26_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB26_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB26_101 Depth=1
	movl	$0, -8(%rbp)
.LBB26_103:                             # %for.cond436
                                        #   Parent Loop BB26_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB26_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB26_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB26_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_103
.LBB26_106:                             # %for.end447
                                        #   in Loop: Header=BB26_101 Depth=1
	jmp	.LBB26_107
.LBB26_107:                             # %for.inc448
                                        #   in Loop: Header=BB26_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_101
.LBB26_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB26_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_111 Depth 2
                                        #       Child Loop BB26_113 Depth 3
                                        #       Child Loop BB26_123 Depth 3
                                        #       Child Loop BB26_133 Depth 3
                                        #         Child Loop BB26_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB26_109 Depth=1
	movl	$0, -16(%rbp)
.LBB26_111:                             # %for.cond456
                                        #   Parent Loop BB26_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_113 Depth 3
                                        #       Child Loop BB26_123 Depth 3
                                        #       Child Loop BB26_133 Depth 3
                                        #         Child Loop BB26_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB26_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB26_113:                             # %for.cond476
                                        #   Parent Loop BB26_109 Depth=1
                                        #     Parent Loop BB26_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB26_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB26_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_113
.LBB26_116:                             # %for.end493
                                        #   in Loop: Header=BB26_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB26_117
	jp	.LBB26_117
	jmp	.LBB26_118
.LBB26_117:                             # %if.then500
                                        #   in Loop: Header=BB26_111 Depth=2
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB26_119
.LBB26_118:                             # %if.else511
                                        #   in Loop: Header=BB26_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB26_119:                             # %if.end513
                                        #   in Loop: Header=BB26_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB26_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB26_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB26_122
.LBB26_121:                             # %if.then519
                                        #   in Loop: Header=BB26_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB26_122:                             # %if.end521
                                        #   in Loop: Header=BB26_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB26_123:                             # %for.cond554
                                        #   Parent Loop BB26_109 Depth=1
                                        #     Parent Loop BB26_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB26_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB26_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB26_130
.LBB26_126:                             # %cond.false571
                                        #   in Loop: Header=BB26_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB26_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_129
.LBB26_128:                             # %cond.false583
                                        #   in Loop: Header=BB26_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB26_129:                             # %cond.end591
                                        #   in Loop: Header=BB26_123 Depth=3
.LBB26_130:                             # %cond.end593
                                        #   in Loop: Header=BB26_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB26_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_123
.LBB26_132:                             # %for.end600
                                        #   in Loop: Header=BB26_111 Depth=2
	movl	$0, -4(%rbp)
.LBB26_133:                             # %for.cond601
                                        #   Parent Loop BB26_109 Depth=1
                                        #     Parent Loop BB26_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB26_133 Depth=3
	movl	$0, -8(%rbp)
.LBB26_135:                             # %for.cond608
                                        #   Parent Loop BB26_109 Depth=1
                                        #     Parent Loop BB26_111 Depth=2
                                        #       Parent Loop BB26_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB26_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB26_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB26_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB26_142
.LBB26_138:                             # %cond.false630
                                        #   in Loop: Header=BB26_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB26_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB26_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB26_141
.LBB26_140:                             # %cond.false648
                                        #   in Loop: Header=BB26_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB26_141:                             # %cond.end661
                                        #   in Loop: Header=BB26_135 Depth=4
.LBB26_142:                             # %cond.end663
                                        #   in Loop: Header=BB26_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB26_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_135
.LBB26_144:                             # %for.end675
                                        #   in Loop: Header=BB26_133 Depth=3
	jmp	.LBB26_145
.LBB26_145:                             # %for.inc676
                                        #   in Loop: Header=BB26_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_133
.LBB26_146:                             # %for.end678
                                        #   in Loop: Header=BB26_111 Depth=2
	jmp	.LBB26_147
.LBB26_147:                             # %for.inc679
                                        #   in Loop: Header=BB26_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_111
.LBB26_148:                             # %for.end681
                                        #   in Loop: Header=BB26_109 Depth=1
	jmp	.LBB26_149
.LBB26_149:                             # %for.inc682
                                        #   in Loop: Header=BB26_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_109
.LBB26_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB26_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB26_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_154 Depth 2
                                        #       Child Loop BB26_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB26_152 Depth=1
	movl	$0, -24(%rbp)
.LBB26_154:                             # %for.cond694
                                        #   Parent Loop BB26_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB26_154 Depth=2
	movl	$0, -20(%rbp)
.LBB26_156:                             # %for.cond700
                                        #   Parent Loop BB26_152 Depth=1
                                        #     Parent Loop BB26_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB26_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB26_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB26_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_156
.LBB26_159:                             # %for.end730
                                        #   in Loop: Header=BB26_154 Depth=2
	jmp	.LBB26_160
.LBB26_160:                             # %for.inc731
                                        #   in Loop: Header=BB26_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_154
.LBB26_161:                             # %for.end733
                                        #   in Loop: Header=BB26_152 Depth=1
	jmp	.LBB26_162
.LBB26_162:                             # %for.inc734
                                        #   in Loop: Header=BB26_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_152
.LBB26_163:                             # %for.end736
	jmp	.LBB26_173
.LBB26_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB26_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB26_165 Depth=1
	movl	$0, -24(%rbp)
.LBB26_167:                             # %for.cond743
                                        #   Parent Loop BB26_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB26_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB26_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB26_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB26_167
.LBB26_170:                             # %for.end784
                                        #   in Loop: Header=BB26_165 Depth=1
	jmp	.LBB26_171
.LBB26_171:                             # %for.inc785
                                        #   in Loop: Header=BB26_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_165
.LBB26_172:                             # %for.end787
	jmp	.LBB26_173
.LBB26_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB26_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_176 Depth 2
                                        #       Child Loop BB26_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB26_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB26_174 Depth=1
	movl	$0, -8(%rbp)
.LBB26_176:                             # %for.cond793
                                        #   Parent Loop BB26_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB26_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB26_176 Depth=2
	movl	$0, -20(%rbp)
.LBB26_178:                             # %for.cond797
                                        #   Parent Loop BB26_174 Depth=1
                                        #     Parent Loop BB26_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB26_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB26_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB26_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB26_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB26_182
.LBB26_181:                             # %cond.false804
                                        #   in Loop: Header=BB26_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB26_182:                             # %cond.end805
                                        #   in Loop: Header=BB26_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB26_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_178
.LBB26_184:                             # %for.end833
                                        #   in Loop: Header=BB26_176 Depth=2
	jmp	.LBB26_185
.LBB26_185:                             # %for.inc834
                                        #   in Loop: Header=BB26_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_176
.LBB26_186:                             # %for.end836
                                        #   in Loop: Header=BB26_174 Depth=1
	jmp	.LBB26_187
.LBB26_187:                             # %for.inc837
                                        #   in Loop: Header=BB26_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_174
.LBB26_188:                             # %for.end839
	jmp	.LBB26_189
.LBB26_189:                             # %if.end840
	cmpl	$1612558350, -84(%rbp)  # imm = 0x601DB00E
	jne	.LBB26_191
.LBB26_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_190
.Lfunc_end26:
	.size	estimate_weighting_factor_B_slice.23, .Lfunc_end26-estimate_weighting_factor_B_slice.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.24
.LCPI27_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.24
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.24,@function
estimate_weighting_factor_P_slice.24:   # @estimate_weighting_factor_P_slice.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1649627352, -64(%rbp)  # imm = 0x625350D8
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB27_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB27_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB27_4
.LBB27_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB27_4
.LBB27_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB27_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_7 Depth 2
                                        #       Child Loop BB27_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	$0, -16(%rbp)
.LBB27_7:                               # %for.cond12
                                        #   Parent Loop BB27_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	$0, -4(%rbp)
.LBB27_9:                               # %for.cond17
                                        #   Parent Loop BB27_5 Depth=1
                                        #     Parent Loop BB27_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB27_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB27_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB27_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_9
.LBB27_12:                              # %for.end
                                        #   in Loop: Header=BB27_7 Depth=2
	jmp	.LBB27_13
.LBB27_13:                              # %for.inc48
                                        #   in Loop: Header=BB27_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_7
.LBB27_14:                              # %for.end50
                                        #   in Loop: Header=BB27_5 Depth=1
	jmp	.LBB27_15
.LBB27_15:                              # %for.inc51
                                        #   in Loop: Header=BB27_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_5
.LBB27_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB27_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB27_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	$0, -16(%rbp)
.LBB27_19:                              # %for.cond57
                                        #   Parent Loop BB27_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB27_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB27_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB27_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_19
.LBB27_22:                              # %for.end67
                                        #   in Loop: Header=BB27_17 Depth=1
	jmp	.LBB27_23
.LBB27_23:                              # %for.inc68
                                        #   in Loop: Header=BB27_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_17
.LBB27_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB27_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_27 Depth 2
                                        #       Child Loop BB27_29 Depth 3
                                        #       Child Loop BB27_48 Depth 3
                                        #       Child Loop BB27_58 Depth 3
                                        #         Child Loop BB27_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	$0, -4(%rbp)
.LBB27_27:                              # %for.cond76
                                        #   Parent Loop BB27_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_29 Depth 3
                                        #       Child Loop BB27_48 Depth 3
                                        #       Child Loop BB27_58 Depth 3
                                        #         Child Loop BB27_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB27_29:                              # %for.cond92
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB27_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB27_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_29
.LBB27_32:                              # %for.end106
                                        #   in Loop: Header=BB27_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB27_40
	jp	.LBB27_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB27_34
	jp	.LBB27_34
	jmp	.LBB27_35
.LBB27_34:                              # %if.then114
                                        #   in Loop: Header=BB27_27 Depth=2
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB27_36
.LBB27_35:                              # %if.else
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_36:                              # %if.end
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB27_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB27_39
.LBB27_38:                              # %if.then147
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_39:                              # %if.end154
                                        #   in Loop: Header=BB27_27 Depth=2
	jmp	.LBB27_47
.LBB27_40:                              # %if.else155
                                        #   in Loop: Header=BB27_27 Depth=2
	vmovsd	.LCPI27_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB27_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB27_46
.LBB27_42:                              # %cond.false179
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB27_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$127, %eax
	jmp	.LBB27_45
.LBB27_44:                              # %cond.false188
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB27_45:                              # %cond.end194
                                        #   in Loop: Header=BB27_27 Depth=2
.LBB27_46:                              # %cond.end196
                                        #   in Loop: Header=BB27_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB27_47:                              # %if.end209
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB27_48:                              # %for.cond222
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB27_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB27_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB27_55
.LBB27_51:                              # %cond.false248
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_54
.LBB27_53:                              # %cond.false270
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB27_54:                              # %cond.end288
                                        #   in Loop: Header=BB27_48 Depth=3
.LBB27_55:                              # %cond.end290
                                        #   in Loop: Header=BB27_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB27_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_48
.LBB27_57:                              # %for.end297
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	$0, -12(%rbp)
.LBB27_58:                              # %for.cond298
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	$0, -16(%rbp)
.LBB27_60:                              # %for.cond305
                                        #   Parent Loop BB27_25 Depth=1
                                        #     Parent Loop BB27_27 Depth=2
                                        #       Parent Loop BB27_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB27_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB27_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB27_67
.LBB27_63:                              # %cond.false336
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB27_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB27_66
.LBB27_65:                              # %cond.false364
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB27_66:                              # %cond.end387
                                        #   in Loop: Header=BB27_60 Depth=4
.LBB27_67:                              # %cond.end389
                                        #   in Loop: Header=BB27_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB27_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_60
.LBB27_69:                              # %for.end400
                                        #   in Loop: Header=BB27_58 Depth=3
	jmp	.LBB27_70
.LBB27_70:                              # %for.inc401
                                        #   in Loop: Header=BB27_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_58
.LBB27_71:                              # %for.end403
                                        #   in Loop: Header=BB27_27 Depth=2
	jmp	.LBB27_72
.LBB27_72:                              # %for.inc404
                                        #   in Loop: Header=BB27_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_27
.LBB27_73:                              # %for.end406
                                        #   in Loop: Header=BB27_25 Depth=1
	jmp	.LBB27_74
.LBB27_74:                              # %for.inc407
                                        #   in Loop: Header=BB27_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_25
.LBB27_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB27_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_78 Depth 2
                                        #       Child Loop BB27_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB27_76 Depth=1
	movl	$0, -24(%rbp)
.LBB27_78:                              # %for.cond415
                                        #   Parent Loop BB27_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB27_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB27_78 Depth=2
	movl	$0, -20(%rbp)
.LBB27_80:                              # %for.cond421
                                        #   Parent Loop BB27_76 Depth=1
                                        #     Parent Loop BB27_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB27_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB27_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB27_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB27_80
.LBB27_83:                              # %for.end451
                                        #   in Loop: Header=BB27_78 Depth=2
	jmp	.LBB27_84
.LBB27_84:                              # %for.inc452
                                        #   in Loop: Header=BB27_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB27_78
.LBB27_85:                              # %for.end454
                                        #   in Loop: Header=BB27_76 Depth=1
	jmp	.LBB27_86
.LBB27_86:                              # %for.inc455
                                        #   in Loop: Header=BB27_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_76
.LBB27_87:                              # %for.end457
	cmpl	$1649627352, -64(%rbp)  # imm = 0x625350D8
	jne	.LBB27_89
.LBB27_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_88
.Lfunc_end27:
	.size	estimate_weighting_factor_P_slice.24, .Lfunc_end27-estimate_weighting_factor_P_slice.24
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.25
.LCPI28_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.25
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.25,@function
estimate_weighting_factor_P_slice.25:   # @estimate_weighting_factor_P_slice.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1063481140, -64(%rbp)  # imm = 0x3F636F34
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB28_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB28_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB28_4
.LBB28_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB28_4
.LBB28_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB28_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_7 Depth 2
                                        #       Child Loop BB28_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	$0, -16(%rbp)
.LBB28_7:                               # %for.cond12
                                        #   Parent Loop BB28_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	$0, -4(%rbp)
.LBB28_9:                               # %for.cond17
                                        #   Parent Loop BB28_5 Depth=1
                                        #     Parent Loop BB28_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB28_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB28_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB28_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_9
.LBB28_12:                              # %for.end
                                        #   in Loop: Header=BB28_7 Depth=2
	jmp	.LBB28_13
.LBB28_13:                              # %for.inc48
                                        #   in Loop: Header=BB28_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_7
.LBB28_14:                              # %for.end50
                                        #   in Loop: Header=BB28_5 Depth=1
	jmp	.LBB28_15
.LBB28_15:                              # %for.inc51
                                        #   in Loop: Header=BB28_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_5
.LBB28_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB28_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB28_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	$0, -16(%rbp)
.LBB28_19:                              # %for.cond57
                                        #   Parent Loop BB28_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB28_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB28_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB28_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_19
.LBB28_22:                              # %for.end67
                                        #   in Loop: Header=BB28_17 Depth=1
	jmp	.LBB28_23
.LBB28_23:                              # %for.inc68
                                        #   in Loop: Header=BB28_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_17
.LBB28_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB28_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_27 Depth 2
                                        #       Child Loop BB28_29 Depth 3
                                        #       Child Loop BB28_48 Depth 3
                                        #       Child Loop BB28_58 Depth 3
                                        #         Child Loop BB28_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	$0, -4(%rbp)
.LBB28_27:                              # %for.cond76
                                        #   Parent Loop BB28_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_29 Depth 3
                                        #       Child Loop BB28_48 Depth 3
                                        #       Child Loop BB28_58 Depth 3
                                        #         Child Loop BB28_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB28_29:                              # %for.cond92
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB28_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB28_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_29
.LBB28_32:                              # %for.end106
                                        #   in Loop: Header=BB28_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB28_40
	jp	.LBB28_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB28_34
	jp	.LBB28_34
	jmp	.LBB28_35
.LBB28_34:                              # %if.then114
                                        #   in Loop: Header=BB28_27 Depth=2
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB28_36
.LBB28_35:                              # %if.else
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_36:                              # %if.end
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB28_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB28_39
.LBB28_38:                              # %if.then147
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_39:                              # %if.end154
                                        #   in Loop: Header=BB28_27 Depth=2
	jmp	.LBB28_47
.LBB28_40:                              # %if.else155
                                        #   in Loop: Header=BB28_27 Depth=2
	vmovsd	.LCPI28_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB28_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB28_46
.LBB28_42:                              # %cond.false179
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB28_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$127, %eax
	jmp	.LBB28_45
.LBB28_44:                              # %cond.false188
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB28_45:                              # %cond.end194
                                        #   in Loop: Header=BB28_27 Depth=2
.LBB28_46:                              # %cond.end196
                                        #   in Loop: Header=BB28_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB28_47:                              # %if.end209
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB28_48:                              # %for.cond222
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB28_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB28_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB28_55
.LBB28_51:                              # %cond.false248
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB28_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_54
.LBB28_53:                              # %cond.false270
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB28_54:                              # %cond.end288
                                        #   in Loop: Header=BB28_48 Depth=3
.LBB28_55:                              # %cond.end290
                                        #   in Loop: Header=BB28_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB28_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_48
.LBB28_57:                              # %for.end297
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	$0, -12(%rbp)
.LBB28_58:                              # %for.cond298
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	$0, -16(%rbp)
.LBB28_60:                              # %for.cond305
                                        #   Parent Loop BB28_25 Depth=1
                                        #     Parent Loop BB28_27 Depth=2
                                        #       Parent Loop BB28_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB28_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB28_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB28_67
.LBB28_63:                              # %cond.false336
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB28_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB28_66
.LBB28_65:                              # %cond.false364
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB28_66:                              # %cond.end387
                                        #   in Loop: Header=BB28_60 Depth=4
.LBB28_67:                              # %cond.end389
                                        #   in Loop: Header=BB28_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB28_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_60
.LBB28_69:                              # %for.end400
                                        #   in Loop: Header=BB28_58 Depth=3
	jmp	.LBB28_70
.LBB28_70:                              # %for.inc401
                                        #   in Loop: Header=BB28_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_58
.LBB28_71:                              # %for.end403
                                        #   in Loop: Header=BB28_27 Depth=2
	jmp	.LBB28_72
.LBB28_72:                              # %for.inc404
                                        #   in Loop: Header=BB28_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_27
.LBB28_73:                              # %for.end406
                                        #   in Loop: Header=BB28_25 Depth=1
	jmp	.LBB28_74
.LBB28_74:                              # %for.inc407
                                        #   in Loop: Header=BB28_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_25
.LBB28_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB28_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_78 Depth 2
                                        #       Child Loop BB28_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB28_76 Depth=1
	movl	$0, -24(%rbp)
.LBB28_78:                              # %for.cond415
                                        #   Parent Loop BB28_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB28_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB28_78 Depth=2
	movl	$0, -20(%rbp)
.LBB28_80:                              # %for.cond421
                                        #   Parent Loop BB28_76 Depth=1
                                        #     Parent Loop BB28_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB28_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB28_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB28_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB28_80
.LBB28_83:                              # %for.end451
                                        #   in Loop: Header=BB28_78 Depth=2
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc452
                                        #   in Loop: Header=BB28_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB28_78
.LBB28_85:                              # %for.end454
                                        #   in Loop: Header=BB28_76 Depth=1
	jmp	.LBB28_86
.LBB28_86:                              # %for.inc455
                                        #   in Loop: Header=BB28_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_76
.LBB28_87:                              # %for.end457
	cmpl	$1063481140, -64(%rbp)  # imm = 0x3F636F34
	jne	.LBB28_89
.LBB28_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_88
.Lfunc_end28:
	.size	estimate_weighting_factor_P_slice.25, .Lfunc_end28-estimate_weighting_factor_P_slice.25
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.26
.LCPI29_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.26
	.p2align	4, 0x90
	.type	test_wp_B_slice.26,@function
test_wp_B_slice.26:                     # @test_wp_B_slice.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$429781630, -88(%rbp)   # imm = 0x199DF27E
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB29_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB29_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB29_4
.LBB29_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB29_4
.LBB29_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB29_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_7 Depth 2
                                        #       Child Loop BB29_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	$0, -24(%rbp)
.LBB29_7:                               # %for.cond9
                                        #   Parent Loop BB29_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	$0, -32(%rbp)
.LBB29_9:                               # %for.cond14
                                        #   Parent Loop BB29_5 Depth=1
                                        #     Parent Loop BB29_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB29_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB29_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_9
.LBB29_12:                              # %for.end
                                        #   in Loop: Header=BB29_7 Depth=2
	jmp	.LBB29_13
.LBB29_13:                              # %for.inc41
                                        #   in Loop: Header=BB29_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_7
.LBB29_14:                              # %for.end43
                                        #   in Loop: Header=BB29_5 Depth=1
	jmp	.LBB29_15
.LBB29_15:                              # %for.inc44
                                        #   in Loop: Header=BB29_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_5
.LBB29_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB29_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_19 Depth 2
                                        #       Child Loop BB29_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	$0, -24(%rbp)
.LBB29_19:                              # %for.cond50
                                        #   Parent Loop BB29_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_26
.LBB29_22:                              # %cond.false61
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_25
.LBB29_24:                              # %cond.false71
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_25:                              # %cond.end79
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_26:                              # %cond.end81
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB29_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB29_32
.LBB29_28:                              # %cond.false90
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB29_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	$127, %eax
	jmp	.LBB29_31
.LBB29_30:                              # %cond.false98
                                        #   in Loop: Header=BB29_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB29_31:                              # %cond.end104
                                        #   in Loop: Header=BB29_19 Depth=2
.LBB29_32:                              # %cond.end106
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB29_33:                              # %for.cond108
                                        #   Parent Loop BB29_17 Depth=1
                                        #     Parent Loop BB29_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB29_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB29_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB29_46
.LBB29_36:                              # %if.else
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB29_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB29_42
.LBB29_38:                              # %cond.false145
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB29_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB29_41
.LBB29_40:                              # %cond.false151
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB29_41:                              # %cond.end155
                                        #   in Loop: Header=BB29_33 Depth=3
.LBB29_42:                              # %cond.end157
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB29_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB29_45
.LBB29_44:                              # %if.then183
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB29_45:                              # %if.end
                                        #   in Loop: Header=BB29_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB29_46:                              # %if.end220
                                        #   in Loop: Header=BB29_33 Depth=3
	jmp	.LBB29_47
.LBB29_47:                              # %for.inc221
                                        #   in Loop: Header=BB29_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_33
.LBB29_48:                              # %for.end223
                                        #   in Loop: Header=BB29_19 Depth=2
	jmp	.LBB29_49
.LBB29_49:                              # %for.inc224
                                        #   in Loop: Header=BB29_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_19
.LBB29_50:                              # %for.end226
                                        #   in Loop: Header=BB29_17 Depth=1
	jmp	.LBB29_51
.LBB29_51:                              # %for.inc227
                                        #   in Loop: Header=BB29_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_17
.LBB29_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB29_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB29_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_56 Depth 2
                                        #       Child Loop BB29_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	$0, -24(%rbp)
.LBB29_56:                              # %for.cond235
                                        #   Parent Loop BB29_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	$0, -20(%rbp)
.LBB29_58:                              # %for.cond238
                                        #   Parent Loop BB29_54 Depth=1
                                        #     Parent Loop BB29_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB29_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_62
.LBB29_61:                              # %cond.false243
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_62:                              # %cond.end244
                                        #   in Loop: Header=BB29_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB29_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_58
.LBB29_64:                              # %for.end276
                                        #   in Loop: Header=BB29_56 Depth=2
	jmp	.LBB29_65
.LBB29_65:                              # %for.inc277
                                        #   in Loop: Header=BB29_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_56
.LBB29_66:                              # %for.end279
                                        #   in Loop: Header=BB29_54 Depth=1
	jmp	.LBB29_67
.LBB29_67:                              # %for.inc280
                                        #   in Loop: Header=BB29_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_54
.LBB29_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB29_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	$0, -28(%rbp)
.LBB29_71:                              # %for.cond287
                                        #   Parent Loop BB29_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB29_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_71
.LBB29_74:                              # %for.end327
                                        #   in Loop: Header=BB29_69 Depth=1
	jmp	.LBB29_75
.LBB29_75:                              # %for.inc328
                                        #   in Loop: Header=BB29_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_69
.LBB29_76:                              # %for.end330
	jmp	.LBB29_142
.LBB29_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB29_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB29_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	$0, -24(%rbp)
.LBB29_80:                              # %for.cond335
                                        #   Parent Loop BB29_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB29_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB29_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB29_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_80
.LBB29_83:                              # %for.end345
                                        #   in Loop: Header=BB29_78 Depth=1
	jmp	.LBB29_84
.LBB29_84:                              # %for.inc346
                                        #   in Loop: Header=BB29_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_78
.LBB29_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB29_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_88 Depth 2
                                        #       Child Loop BB29_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	$0, -32(%rbp)
.LBB29_88:                              # %for.cond354
                                        #   Parent Loop BB29_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB29_90:                              # %for.cond372
                                        #   Parent Loop BB29_86 Depth=1
                                        #     Parent Loop BB29_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB29_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB29_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_90
.LBB29_93:                              # %for.end389
                                        #   in Loop: Header=BB29_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB29_94
	jp	.LBB29_94
	jmp	.LBB29_95
.LBB29_94:                              # %if.then396
                                        #   in Loop: Header=BB29_88 Depth=2
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB29_96
.LBB29_95:                              # %if.else406
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_96:                              # %if.end407
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB29_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB29_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB29_99
.LBB29_98:                              # %if.then413
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB29_99:                              # %if.end414
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB29_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB29_88
.LBB29_101:                             # %for.end447
                                        #   in Loop: Header=BB29_86 Depth=1
	jmp	.LBB29_102
.LBB29_102:                             # %for.inc448
                                        #   in Loop: Header=BB29_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_86
.LBB29_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB29_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB29_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_107 Depth 2
                                        #       Child Loop BB29_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	$0, -28(%rbp)
.LBB29_107:                             # %for.cond459
                                        #   Parent Loop BB29_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	$0, -20(%rbp)
.LBB29_109:                             # %for.cond465
                                        #   Parent Loop BB29_105 Depth=1
                                        #     Parent Loop BB29_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB29_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB29_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_109
.LBB29_112:                             # %for.end495
                                        #   in Loop: Header=BB29_107 Depth=2
	jmp	.LBB29_113
.LBB29_113:                             # %for.inc496
                                        #   in Loop: Header=BB29_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_107
.LBB29_114:                             # %for.end498
                                        #   in Loop: Header=BB29_105 Depth=1
	jmp	.LBB29_115
.LBB29_115:                             # %for.inc499
                                        #   in Loop: Header=BB29_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_105
.LBB29_116:                             # %for.end501
	jmp	.LBB29_126
.LBB29_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB29_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	$0, -28(%rbp)
.LBB29_120:                             # %for.cond508
                                        #   Parent Loop BB29_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB29_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_120
.LBB29_123:                             # %for.end549
                                        #   in Loop: Header=BB29_118 Depth=1
	jmp	.LBB29_124
.LBB29_124:                             # %for.inc550
                                        #   in Loop: Header=BB29_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_118
.LBB29_125:                             # %for.end552
	jmp	.LBB29_126
.LBB29_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB29_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_129 Depth 2
                                        #       Child Loop BB29_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB29_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	$0, -24(%rbp)
.LBB29_129:                             # %for.cond558
                                        #   Parent Loop BB29_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB29_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	$0, -20(%rbp)
.LBB29_131:                             # %for.cond562
                                        #   Parent Loop BB29_127 Depth=1
                                        #     Parent Loop BB29_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB29_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB29_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB29_135
.LBB29_134:                             # %cond.false569
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB29_135:                             # %cond.end570
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB29_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_131
.LBB29_137:                             # %for.end598
                                        #   in Loop: Header=BB29_129 Depth=2
	jmp	.LBB29_138
.LBB29_138:                             # %for.inc599
                                        #   in Loop: Header=BB29_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_129
.LBB29_139:                             # %for.end601
                                        #   in Loop: Header=BB29_127 Depth=1
	jmp	.LBB29_140
.LBB29_140:                             # %for.inc602
                                        #   in Loop: Header=BB29_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_127
.LBB29_141:                             # %for.end604
	jmp	.LBB29_142
.LBB29_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB29_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_145 Depth 2
                                        #       Child Loop BB29_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	$0, -28(%rbp)
.LBB29_145:                             # %for.cond611
                                        #   Parent Loop BB29_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB29_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$0, -20(%rbp)
.LBB29_147:                             # %for.cond617
                                        #   Parent Loop BB29_143 Depth=1
                                        #     Parent Loop BB29_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB29_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB29_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB29_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB29_151
.LBB29_150:                             # %if.then638
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB29_154
.LBB29_151:                             # %if.end639
                                        #   in Loop: Header=BB29_147 Depth=3
	jmp	.LBB29_152
.LBB29_152:                             # %for.inc640
                                        #   in Loop: Header=BB29_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_147
.LBB29_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_154
.LBB29_154:                             # %for.end642
                                        #   in Loop: Header=BB29_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB29_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_156:                             # %if.end646
                                        #   in Loop: Header=BB29_145 Depth=2
	jmp	.LBB29_157
.LBB29_157:                             # %for.inc647
                                        #   in Loop: Header=BB29_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_145
.LBB29_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_159
.LBB29_159:                             # %for.end649
                                        #   in Loop: Header=BB29_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB29_161
# %bb.160:                              # %if.then652
	jmp	.LBB29_164
.LBB29_161:                             # %if.end653
                                        #   in Loop: Header=BB29_143 Depth=1
	jmp	.LBB29_162
.LBB29_162:                             # %for.inc654
                                        #   in Loop: Header=BB29_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_143
.LBB29_163:                             # %for.end656.loopexit
	jmp	.LBB29_164
.LBB29_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$429781630, -88(%rbp)   # imm = 0x199DF27E
	jne	.LBB29_166
.LBB29_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_165
.Lfunc_end29:
	.size	test_wp_B_slice.26, .Lfunc_end29-test_wp_B_slice.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.27
.LCPI30_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.27
	.p2align	4, 0x90
	.type	test_wp_P_slice.27,@function
test_wp_P_slice.27:                     # @test_wp_P_slice.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1521314704, -60(%rbp)  # imm = 0x5AAD6B90
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB30_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB30_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB30_4
.LBB30_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB30_4
.LBB30_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB30_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_7 Depth 2
                                        #       Child Loop BB30_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB30_5 Depth=1
	movl	$0, -24(%rbp)
.LBB30_7:                               # %for.cond9
                                        #   Parent Loop BB30_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB30_7 Depth=2
	movl	$0, -12(%rbp)
.LBB30_9:                               # %for.cond14
                                        #   Parent Loop BB30_5 Depth=1
                                        #     Parent Loop BB30_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB30_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB30_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB30_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_9
.LBB30_12:                              # %for.end
                                        #   in Loop: Header=BB30_7 Depth=2
	jmp	.LBB30_13
.LBB30_13:                              # %for.inc41
                                        #   in Loop: Header=BB30_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_7
.LBB30_14:                              # %for.end43
                                        #   in Loop: Header=BB30_5 Depth=1
	jmp	.LBB30_15
.LBB30_15:                              # %for.inc44
                                        #   in Loop: Header=BB30_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_5
.LBB30_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB30_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB30_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	$0, -24(%rbp)
.LBB30_19:                              # %for.cond50
                                        #   Parent Loop BB30_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB30_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB30_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB30_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB30_19
.LBB30_22:                              # %for.end60
                                        #   in Loop: Header=BB30_17 Depth=1
	jmp	.LBB30_23
.LBB30_23:                              # %for.inc61
                                        #   in Loop: Header=BB30_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_17
.LBB30_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB30_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_27 Depth 2
                                        #       Child Loop BB30_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	$0, -12(%rbp)
.LBB30_27:                              # %for.cond69
                                        #   Parent Loop BB30_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB30_29:                              # %for.cond85
                                        #   Parent Loop BB30_25 Depth=1
                                        #     Parent Loop BB30_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB30_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB30_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_29
.LBB30_32:                              # %for.end99
                                        #   in Loop: Header=BB30_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB30_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB30_34
	jp	.LBB30_34
	jmp	.LBB30_35
.LBB30_34:                              # %if.then106
                                        #   in Loop: Header=BB30_27 Depth=2
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB30_36
.LBB30_35:                              # %if.else
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB30_36:                              # %if.end
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB30_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB30_39
.LBB30_38:                              # %if.then137
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB30_39:                              # %if.end143
                                        #   in Loop: Header=BB30_27 Depth=2
	jmp	.LBB30_47
.LBB30_40:                              # %if.else144
                                        #   in Loop: Header=BB30_27 Depth=2
	vmovsd	.LCPI30_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB30_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB30_46
.LBB30_42:                              # %cond.false168
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB30_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	$127, %eax
	jmp	.LBB30_45
.LBB30_44:                              # %cond.false177
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB30_45:                              # %cond.end183
                                        #   in Loop: Header=BB30_27 Depth=2
.LBB30_46:                              # %cond.end185
                                        #   in Loop: Header=BB30_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB30_47:                              # %if.end197
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB30_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_27
.LBB30_49:                              # %for.end210
                                        #   in Loop: Header=BB30_25 Depth=1
	jmp	.LBB30_50
.LBB30_50:                              # %for.inc211
                                        #   in Loop: Header=BB30_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_25
.LBB30_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB30_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_54 Depth 2
                                        #       Child Loop BB30_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	$0, -36(%rbp)
.LBB30_54:                              # %for.cond219
                                        #   Parent Loop BB30_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB30_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	$0, -32(%rbp)
.LBB30_56:                              # %for.cond225
                                        #   Parent Loop BB30_52 Depth=1
                                        #     Parent Loop BB30_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB30_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB30_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB30_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB30_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB30_60
.LBB30_59:                              # %if.then246
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB30_63
.LBB30_60:                              # %if.end247
                                        #   in Loop: Header=BB30_56 Depth=3
	jmp	.LBB30_61
.LBB30_61:                              # %for.inc248
                                        #   in Loop: Header=BB30_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_56
.LBB30_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB30_54 Depth=2
	jmp	.LBB30_63
.LBB30_63:                              # %for.end250
                                        #   in Loop: Header=BB30_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB30_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_68
.LBB30_65:                              # %if.end254
                                        #   in Loop: Header=BB30_54 Depth=2
	jmp	.LBB30_66
.LBB30_66:                              # %for.inc255
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB30_54
.LBB30_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_68
.LBB30_68:                              # %for.end257
                                        #   in Loop: Header=BB30_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB30_70
# %bb.69:                               # %if.then260
	jmp	.LBB30_73
.LBB30_70:                              # %if.end261
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_71
.LBB30_71:                              # %for.inc262
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_52
.LBB30_72:                              # %for.end264.loopexit
	jmp	.LBB30_73
.LBB30_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1521314704, -60(%rbp)  # imm = 0x5AAD6B90
	jne	.LBB30_75
.LBB30_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_74
.Lfunc_end30:
	.size	test_wp_P_slice.27, .Lfunc_end30-test_wp_P_slice.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.28
.LCPI31_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.28
	.p2align	4, 0x90
	.type	test_wp_B_slice.28,@function
test_wp_B_slice.28:                     # @test_wp_B_slice.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1712486329, -76(%rbp)  # imm = 0x661277B9
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB31_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB31_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB31_4
.LBB31_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB31_4
.LBB31_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB31_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_7 Depth 2
                                        #       Child Loop BB31_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	$0, -24(%rbp)
.LBB31_7:                               # %for.cond9
                                        #   Parent Loop BB31_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	$0, -32(%rbp)
.LBB31_9:                               # %for.cond14
                                        #   Parent Loop BB31_5 Depth=1
                                        #     Parent Loop BB31_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB31_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB31_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB31_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB31_9
.LBB31_12:                              # %for.end
                                        #   in Loop: Header=BB31_7 Depth=2
	jmp	.LBB31_13
.LBB31_13:                              # %for.inc41
                                        #   in Loop: Header=BB31_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_7
.LBB31_14:                              # %for.end43
                                        #   in Loop: Header=BB31_5 Depth=1
	jmp	.LBB31_15
.LBB31_15:                              # %for.inc44
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_5
.LBB31_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB31_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_19 Depth 2
                                        #       Child Loop BB31_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB31_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	$0, -24(%rbp)
.LBB31_19:                              # %for.cond50
                                        #   Parent Loop BB31_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB31_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB31_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB31_26
.LBB31_22:                              # %cond.false61
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB31_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$127, %eax
	jmp	.LBB31_25
.LBB31_24:                              # %cond.false71
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB31_25:                              # %cond.end79
                                        #   in Loop: Header=BB31_19 Depth=2
.LBB31_26:                              # %cond.end81
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB31_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB31_32
.LBB31_28:                              # %cond.false90
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB31_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	$127, %eax
	jmp	.LBB31_31
.LBB31_30:                              # %cond.false98
                                        #   in Loop: Header=BB31_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB31_31:                              # %cond.end104
                                        #   in Loop: Header=BB31_19 Depth=2
.LBB31_32:                              # %cond.end106
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB31_33:                              # %for.cond108
                                        #   Parent Loop BB31_17 Depth=1
                                        #     Parent Loop BB31_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB31_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB31_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB31_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB31_46
.LBB31_36:                              # %if.else
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB31_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB31_42
.LBB31_38:                              # %cond.false145
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB31_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB31_41
.LBB31_40:                              # %cond.false151
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB31_41:                              # %cond.end155
                                        #   in Loop: Header=BB31_33 Depth=3
.LBB31_42:                              # %cond.end157
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB31_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB31_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB31_45
.LBB31_44:                              # %if.then183
                                        #   in Loop: Header=BB31_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB31_45:                              # %if.end
                                        #   in Loop: Header=BB31_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB31_46:                              # %if.end220
                                        #   in Loop: Header=BB31_33 Depth=3
	jmp	.LBB31_47
.LBB31_47:                              # %for.inc221
                                        #   in Loop: Header=BB31_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_33
.LBB31_48:                              # %for.end223
                                        #   in Loop: Header=BB31_19 Depth=2
	jmp	.LBB31_49
.LBB31_49:                              # %for.inc224
                                        #   in Loop: Header=BB31_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_19
.LBB31_50:                              # %for.end226
                                        #   in Loop: Header=BB31_17 Depth=1
	jmp	.LBB31_51
.LBB31_51:                              # %for.inc227
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_17
.LBB31_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB31_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB31_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_56 Depth 2
                                        #       Child Loop BB31_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB31_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB31_54 Depth=1
	movl	$0, -24(%rbp)
.LBB31_56:                              # %for.cond235
                                        #   Parent Loop BB31_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB31_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB31_56 Depth=2
	movl	$0, -20(%rbp)
.LBB31_58:                              # %for.cond238
                                        #   Parent Loop BB31_54 Depth=1
                                        #     Parent Loop BB31_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB31_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB31_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB31_62
.LBB31_61:                              # %cond.false243
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB31_62:                              # %cond.end244
                                        #   in Loop: Header=BB31_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB31_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_58
.LBB31_64:                              # %for.end276
                                        #   in Loop: Header=BB31_56 Depth=2
	jmp	.LBB31_65
.LBB31_65:                              # %for.inc277
                                        #   in Loop: Header=BB31_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_56
.LBB31_66:                              # %for.end279
                                        #   in Loop: Header=BB31_54 Depth=1
	jmp	.LBB31_67
.LBB31_67:                              # %for.inc280
                                        #   in Loop: Header=BB31_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_54
.LBB31_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB31_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB31_69 Depth=1
	movl	$0, -28(%rbp)
.LBB31_71:                              # %for.cond287
                                        #   Parent Loop BB31_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB31_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB31_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_71
.LBB31_74:                              # %for.end327
                                        #   in Loop: Header=BB31_69 Depth=1
	jmp	.LBB31_75
.LBB31_75:                              # %for.inc328
                                        #   in Loop: Header=BB31_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_69
.LBB31_76:                              # %for.end330
	jmp	.LBB31_142
.LBB31_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB31_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB31_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB31_78 Depth=1
	movl	$0, -24(%rbp)
.LBB31_80:                              # %for.cond335
                                        #   Parent Loop BB31_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB31_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB31_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB31_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_80
.LBB31_83:                              # %for.end345
                                        #   in Loop: Header=BB31_78 Depth=1
	jmp	.LBB31_84
.LBB31_84:                              # %for.inc346
                                        #   in Loop: Header=BB31_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_78
.LBB31_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB31_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_88 Depth 2
                                        #       Child Loop BB31_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	$0, -32(%rbp)
.LBB31_88:                              # %for.cond354
                                        #   Parent Loop BB31_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB31_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB31_90:                              # %for.cond372
                                        #   Parent Loop BB31_86 Depth=1
                                        #     Parent Loop BB31_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB31_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB31_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_90
.LBB31_93:                              # %for.end389
                                        #   in Loop: Header=BB31_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB31_94
	jp	.LBB31_94
	jmp	.LBB31_95
.LBB31_94:                              # %if.then396
                                        #   in Loop: Header=BB31_88 Depth=2
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB31_96
.LBB31_95:                              # %if.else406
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB31_96:                              # %if.end407
                                        #   in Loop: Header=BB31_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB31_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB31_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB31_99
.LBB31_98:                              # %if.then413
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB31_99:                              # %if.end414
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB31_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB31_88
.LBB31_101:                             # %for.end447
                                        #   in Loop: Header=BB31_86 Depth=1
	jmp	.LBB31_102
.LBB31_102:                             # %for.inc448
                                        #   in Loop: Header=BB31_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_86
.LBB31_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB31_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB31_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_107 Depth 2
                                        #       Child Loop BB31_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB31_105 Depth=1
	movl	$0, -28(%rbp)
.LBB31_107:                             # %for.cond459
                                        #   Parent Loop BB31_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB31_107 Depth=2
	movl	$0, -20(%rbp)
.LBB31_109:                             # %for.cond465
                                        #   Parent Loop BB31_105 Depth=1
                                        #     Parent Loop BB31_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB31_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB31_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_109
.LBB31_112:                             # %for.end495
                                        #   in Loop: Header=BB31_107 Depth=2
	jmp	.LBB31_113
.LBB31_113:                             # %for.inc496
                                        #   in Loop: Header=BB31_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_107
.LBB31_114:                             # %for.end498
                                        #   in Loop: Header=BB31_105 Depth=1
	jmp	.LBB31_115
.LBB31_115:                             # %for.inc499
                                        #   in Loop: Header=BB31_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_105
.LBB31_116:                             # %for.end501
	jmp	.LBB31_126
.LBB31_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB31_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB31_118 Depth=1
	movl	$0, -28(%rbp)
.LBB31_120:                             # %for.cond508
                                        #   Parent Loop BB31_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB31_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB31_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_120
.LBB31_123:                             # %for.end549
                                        #   in Loop: Header=BB31_118 Depth=1
	jmp	.LBB31_124
.LBB31_124:                             # %for.inc550
                                        #   in Loop: Header=BB31_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_118
.LBB31_125:                             # %for.end552
	jmp	.LBB31_126
.LBB31_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB31_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_129 Depth 2
                                        #       Child Loop BB31_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB31_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB31_127 Depth=1
	movl	$0, -24(%rbp)
.LBB31_129:                             # %for.cond558
                                        #   Parent Loop BB31_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB31_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB31_129 Depth=2
	movl	$0, -20(%rbp)
.LBB31_131:                             # %for.cond562
                                        #   Parent Loop BB31_127 Depth=1
                                        #     Parent Loop BB31_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB31_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB31_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB31_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB31_135
.LBB31_134:                             # %cond.false569
                                        #   in Loop: Header=BB31_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB31_135:                             # %cond.end570
                                        #   in Loop: Header=BB31_131 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB31_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_131
.LBB31_137:                             # %for.end598
                                        #   in Loop: Header=BB31_129 Depth=2
	jmp	.LBB31_138
.LBB31_138:                             # %for.inc599
                                        #   in Loop: Header=BB31_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB31_129
.LBB31_139:                             # %for.end601
                                        #   in Loop: Header=BB31_127 Depth=1
	jmp	.LBB31_140
.LBB31_140:                             # %for.inc602
                                        #   in Loop: Header=BB31_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_127
.LBB31_141:                             # %for.end604
	jmp	.LBB31_142
.LBB31_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB31_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_145 Depth 2
                                        #       Child Loop BB31_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB31_143 Depth=1
	movl	$0, -28(%rbp)
.LBB31_145:                             # %for.cond611
                                        #   Parent Loop BB31_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB31_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB31_145 Depth=2
	movl	$0, -20(%rbp)
.LBB31_147:                             # %for.cond617
                                        #   Parent Loop BB31_143 Depth=1
                                        #     Parent Loop BB31_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB31_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB31_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB31_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB31_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB31_151
.LBB31_150:                             # %if.then638
                                        #   in Loop: Header=BB31_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB31_154
.LBB31_151:                             # %if.end639
                                        #   in Loop: Header=BB31_147 Depth=3
	jmp	.LBB31_152
.LBB31_152:                             # %for.inc640
                                        #   in Loop: Header=BB31_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_147
.LBB31_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB31_145 Depth=2
	jmp	.LBB31_154
.LBB31_154:                             # %for.end642
                                        #   in Loop: Header=BB31_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB31_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB31_143 Depth=1
	jmp	.LBB31_159
.LBB31_156:                             # %if.end646
                                        #   in Loop: Header=BB31_145 Depth=2
	jmp	.LBB31_157
.LBB31_157:                             # %for.inc647
                                        #   in Loop: Header=BB31_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB31_145
.LBB31_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB31_143 Depth=1
	jmp	.LBB31_159
.LBB31_159:                             # %for.end649
                                        #   in Loop: Header=BB31_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB31_161
# %bb.160:                              # %if.then652
	jmp	.LBB31_164
.LBB31_161:                             # %if.end653
                                        #   in Loop: Header=BB31_143 Depth=1
	jmp	.LBB31_162
.LBB31_162:                             # %for.inc654
                                        #   in Loop: Header=BB31_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_143
.LBB31_163:                             # %for.end656.loopexit
	jmp	.LBB31_164
.LBB31_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1712486329, -76(%rbp)  # imm = 0x661277B9
	jne	.LBB31_166
.LBB31_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_165
.Lfunc_end31:
	.size	test_wp_B_slice.28, .Lfunc_end31-test_wp_B_slice.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.29
.LCPI32_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.29
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.29,@function
estimate_weighting_factor_B_slice.29:   # @estimate_weighting_factor_B_slice.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1549831454, -92(%rbp)  # imm = 0x5C608D1E
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB32_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB32_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB32_4
.LBB32_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB32_4
.LBB32_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB32_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB32_7
.LBB32_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB32_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB32_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_10 Depth 2
                                        #       Child Loop BB32_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB32_8 Depth=1
	movl	$0, -8(%rbp)
.LBB32_10:                              # %for.cond14
                                        #   Parent Loop BB32_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB32_10 Depth=2
	movl	$0, -16(%rbp)
.LBB32_12:                              # %for.cond19
                                        #   Parent Loop BB32_8 Depth=1
                                        #     Parent Loop BB32_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB32_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB32_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB32_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_12
.LBB32_15:                              # %for.end
                                        #   in Loop: Header=BB32_10 Depth=2
	jmp	.LBB32_16
.LBB32_16:                              # %for.inc50
                                        #   in Loop: Header=BB32_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_10
.LBB32_17:                              # %for.end52
                                        #   in Loop: Header=BB32_8 Depth=1
	jmp	.LBB32_18
.LBB32_18:                              # %for.inc53
                                        #   in Loop: Header=BB32_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_8
.LBB32_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB32_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_22 Depth 2
                                        #       Child Loop BB32_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB32_20 Depth=1
	movl	$0, -8(%rbp)
.LBB32_22:                              # %for.cond59
                                        #   Parent Loop BB32_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB32_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB32_29
.LBB32_25:                              # %cond.false70
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB32_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$127, %eax
	jmp	.LBB32_28
.LBB32_27:                              # %cond.false80
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB32_28:                              # %cond.end88
                                        #   in Loop: Header=BB32_22 Depth=2
.LBB32_29:                              # %cond.end90
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	%eax, -64(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB32_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB32_35
.LBB32_31:                              # %cond.false99
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB32_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	$127, %eax
	jmp	.LBB32_34
.LBB32_33:                              # %cond.false107
                                        #   in Loop: Header=BB32_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB32_34:                              # %cond.end113
                                        #   in Loop: Header=BB32_22 Depth=2
.LBB32_35:                              # %cond.end115
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB32_36:                              # %for.cond117
                                        #   Parent Loop BB32_20 Depth=1
                                        #     Parent Loop BB32_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB32_36 Depth=3
	cmpl	$0, -64(%rbp)
	jne	.LBB32_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB32_49
.LBB32_39:                              # %if.else154
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB32_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB32_45
.LBB32_41:                              # %cond.false160
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB32_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB32_44
.LBB32_43:                              # %cond.false166
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB32_44:                              # %cond.end170
                                        #   in Loop: Header=BB32_36 Depth=3
.LBB32_45:                              # %cond.end172
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB32_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB32_48
.LBB32_47:                              # %if.then198
                                        #   in Loop: Header=BB32_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB32_48:                              # %if.end208
                                        #   in Loop: Header=BB32_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB32_49:                              # %if.end238
                                        #   in Loop: Header=BB32_36 Depth=3
	jmp	.LBB32_50
.LBB32_50:                              # %for.inc239
                                        #   in Loop: Header=BB32_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_36
.LBB32_51:                              # %for.end241
                                        #   in Loop: Header=BB32_22 Depth=2
	jmp	.LBB32_52
.LBB32_52:                              # %for.inc242
                                        #   in Loop: Header=BB32_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_22
.LBB32_53:                              # %for.end244
                                        #   in Loop: Header=BB32_20 Depth=1
	jmp	.LBB32_54
.LBB32_54:                              # %for.inc245
                                        #   in Loop: Header=BB32_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_20
.LBB32_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB32_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB32_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_59 Depth 2
                                        #       Child Loop BB32_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB32_57 Depth=1
	movl	$0, -8(%rbp)
.LBB32_59:                              # %for.cond254
                                        #   Parent Loop BB32_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB32_59 Depth=2
	movl	$0, -20(%rbp)
.LBB32_61:                              # %for.cond257
                                        #   Parent Loop BB32_57 Depth=1
                                        #     Parent Loop BB32_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB32_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB32_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB32_65
.LBB32_64:                              # %cond.false262
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB32_65:                              # %cond.end263
                                        #   in Loop: Header=BB32_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -84(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB32_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_61
.LBB32_67:                              # %for.end295
                                        #   in Loop: Header=BB32_59 Depth=2
	jmp	.LBB32_68
.LBB32_68:                              # %for.inc296
                                        #   in Loop: Header=BB32_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_59
.LBB32_69:                              # %for.end298
                                        #   in Loop: Header=BB32_57 Depth=1
	jmp	.LBB32_70
.LBB32_70:                              # %for.inc299
                                        #   in Loop: Header=BB32_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_57
.LBB32_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB32_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB32_72 Depth=1
	movl	$0, -24(%rbp)
.LBB32_74:                              # %for.cond306
                                        #   Parent Loop BB32_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB32_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB32_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_74
.LBB32_77:                              # %for.end346
                                        #   in Loop: Header=BB32_72 Depth=1
	jmp	.LBB32_78
.LBB32_78:                              # %for.inc347
                                        #   in Loop: Header=BB32_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_72
.LBB32_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB32_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_82 Depth 2
                                        #       Child Loop BB32_84 Depth 3
                                        #       Child Loop BB32_88 Depth 3
                                        #         Child Loop BB32_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	$0, -8(%rbp)
.LBB32_82:                              # %for.cond353
                                        #   Parent Loop BB32_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_84 Depth 3
                                        #       Child Loop BB32_88 Depth 3
                                        #         Child Loop BB32_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	$0, -16(%rbp)
.LBB32_84:                              # %for.cond356
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB32_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB32_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_84
.LBB32_87:                              # %for.end380
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	$0, -16(%rbp)
.LBB32_88:                              # %for.cond381
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB32_88 Depth=3
	movl	$0, -32(%rbp)
.LBB32_90:                              # %for.cond387
                                        #   Parent Loop BB32_80 Depth=1
                                        #     Parent Loop BB32_82 Depth=2
                                        #       Parent Loop BB32_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB32_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB32_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB32_90
.LBB32_93:                              # %for.end421
                                        #   in Loop: Header=BB32_88 Depth=3
	jmp	.LBB32_94
.LBB32_94:                              # %for.inc422
                                        #   in Loop: Header=BB32_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_88
.LBB32_95:                              # %for.end424
                                        #   in Loop: Header=BB32_82 Depth=2
	jmp	.LBB32_96
.LBB32_96:                              # %for.inc425
                                        #   in Loop: Header=BB32_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_82
.LBB32_97:                              # %for.end427
                                        #   in Loop: Header=BB32_80 Depth=1
	jmp	.LBB32_98
.LBB32_98:                              # %for.inc428
                                        #   in Loop: Header=BB32_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_80
.LBB32_99:                              # %for.end430
	jmp	.LBB32_189
.LBB32_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB32_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB32_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB32_101 Depth=1
	movl	$0, -8(%rbp)
.LBB32_103:                             # %for.cond436
                                        #   Parent Loop BB32_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB32_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB32_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB32_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_103
.LBB32_106:                             # %for.end447
                                        #   in Loop: Header=BB32_101 Depth=1
	jmp	.LBB32_107
.LBB32_107:                             # %for.inc448
                                        #   in Loop: Header=BB32_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_101
.LBB32_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB32_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_111 Depth 2
                                        #       Child Loop BB32_113 Depth 3
                                        #       Child Loop BB32_123 Depth 3
                                        #       Child Loop BB32_133 Depth 3
                                        #         Child Loop BB32_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB32_109 Depth=1
	movl	$0, -16(%rbp)
.LBB32_111:                             # %for.cond456
                                        #   Parent Loop BB32_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_113 Depth 3
                                        #       Child Loop BB32_123 Depth 3
                                        #       Child Loop BB32_133 Depth 3
                                        #         Child Loop BB32_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB32_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB32_113:                             # %for.cond476
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB32_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB32_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_113
.LBB32_116:                             # %for.end493
                                        #   in Loop: Header=BB32_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB32_117
	jp	.LBB32_117
	jmp	.LBB32_118
.LBB32_117:                             # %if.then500
                                        #   in Loop: Header=BB32_111 Depth=2
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB32_119
.LBB32_118:                             # %if.else511
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB32_119:                             # %if.end513
                                        #   in Loop: Header=BB32_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB32_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB32_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB32_122
.LBB32_121:                             # %if.then519
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB32_122:                             # %if.end521
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB32_123:                             # %for.cond554
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB32_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB32_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB32_130
.LBB32_126:                             # %cond.false571
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_129
.LBB32_128:                             # %cond.false583
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB32_129:                             # %cond.end591
                                        #   in Loop: Header=BB32_123 Depth=3
.LBB32_130:                             # %cond.end593
                                        #   in Loop: Header=BB32_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB32_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_123
.LBB32_132:                             # %for.end600
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	$0, -4(%rbp)
.LBB32_133:                             # %for.cond601
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB32_133 Depth=3
	movl	$0, -8(%rbp)
.LBB32_135:                             # %for.cond608
                                        #   Parent Loop BB32_109 Depth=1
                                        #     Parent Loop BB32_111 Depth=2
                                        #       Parent Loop BB32_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB32_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB32_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB32_142
.LBB32_138:                             # %cond.false630
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB32_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB32_141
.LBB32_140:                             # %cond.false648
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB32_141:                             # %cond.end661
                                        #   in Loop: Header=BB32_135 Depth=4
.LBB32_142:                             # %cond.end663
                                        #   in Loop: Header=BB32_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB32_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_135
.LBB32_144:                             # %for.end675
                                        #   in Loop: Header=BB32_133 Depth=3
	jmp	.LBB32_145
.LBB32_145:                             # %for.inc676
                                        #   in Loop: Header=BB32_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_133
.LBB32_146:                             # %for.end678
                                        #   in Loop: Header=BB32_111 Depth=2
	jmp	.LBB32_147
.LBB32_147:                             # %for.inc679
                                        #   in Loop: Header=BB32_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_111
.LBB32_148:                             # %for.end681
                                        #   in Loop: Header=BB32_109 Depth=1
	jmp	.LBB32_149
.LBB32_149:                             # %for.inc682
                                        #   in Loop: Header=BB32_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_109
.LBB32_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB32_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB32_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_154 Depth 2
                                        #       Child Loop BB32_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB32_152 Depth=1
	movl	$0, -24(%rbp)
.LBB32_154:                             # %for.cond694
                                        #   Parent Loop BB32_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB32_154 Depth=2
	movl	$0, -20(%rbp)
.LBB32_156:                             # %for.cond700
                                        #   Parent Loop BB32_152 Depth=1
                                        #     Parent Loop BB32_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB32_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB32_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_156
.LBB32_159:                             # %for.end730
                                        #   in Loop: Header=BB32_154 Depth=2
	jmp	.LBB32_160
.LBB32_160:                             # %for.inc731
                                        #   in Loop: Header=BB32_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_154
.LBB32_161:                             # %for.end733
                                        #   in Loop: Header=BB32_152 Depth=1
	jmp	.LBB32_162
.LBB32_162:                             # %for.inc734
                                        #   in Loop: Header=BB32_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_152
.LBB32_163:                             # %for.end736
	jmp	.LBB32_173
.LBB32_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB32_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB32_165 Depth=1
	movl	$0, -24(%rbp)
.LBB32_167:                             # %for.cond743
                                        #   Parent Loop BB32_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB32_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB32_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB32_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB32_167
.LBB32_170:                             # %for.end784
                                        #   in Loop: Header=BB32_165 Depth=1
	jmp	.LBB32_171
.LBB32_171:                             # %for.inc785
                                        #   in Loop: Header=BB32_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_165
.LBB32_172:                             # %for.end787
	jmp	.LBB32_173
.LBB32_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB32_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_176 Depth 2
                                        #       Child Loop BB32_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB32_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB32_174 Depth=1
	movl	$0, -8(%rbp)
.LBB32_176:                             # %for.cond793
                                        #   Parent Loop BB32_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB32_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB32_176 Depth=2
	movl	$0, -20(%rbp)
.LBB32_178:                             # %for.cond797
                                        #   Parent Loop BB32_174 Depth=1
                                        #     Parent Loop BB32_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB32_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB32_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB32_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB32_182
.LBB32_181:                             # %cond.false804
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB32_182:                             # %cond.end805
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	%eax, -84(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB32_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB32_178
.LBB32_184:                             # %for.end833
                                        #   in Loop: Header=BB32_176 Depth=2
	jmp	.LBB32_185
.LBB32_185:                             # %for.inc834
                                        #   in Loop: Header=BB32_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_176
.LBB32_186:                             # %for.end836
                                        #   in Loop: Header=BB32_174 Depth=1
	jmp	.LBB32_187
.LBB32_187:                             # %for.inc837
                                        #   in Loop: Header=BB32_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_174
.LBB32_188:                             # %for.end839
	jmp	.LBB32_189
.LBB32_189:                             # %if.end840
	cmpl	$1549831454, -92(%rbp)  # imm = 0x5C608D1E
	jne	.LBB32_191
.LBB32_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_190
.Lfunc_end32:
	.size	estimate_weighting_factor_B_slice.29, .Lfunc_end32-estimate_weighting_factor_B_slice.29
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.30
.LCPI33_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.30
	.p2align	4, 0x90
	.type	test_wp_P_slice.30,@function
test_wp_P_slice.30:                     # @test_wp_P_slice.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$969223855, -60(%rbp)   # imm = 0x39C52EAF
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB33_4
.LBB33_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB33_4
.LBB33_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB33_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_7 Depth 2
                                        #       Child Loop BB33_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	$0, -24(%rbp)
.LBB33_7:                               # %for.cond9
                                        #   Parent Loop BB33_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	$0, -12(%rbp)
.LBB33_9:                               # %for.cond14
                                        #   Parent Loop BB33_5 Depth=1
                                        #     Parent Loop BB33_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB33_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB33_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB33_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_9
.LBB33_12:                              # %for.end
                                        #   in Loop: Header=BB33_7 Depth=2
	jmp	.LBB33_13
.LBB33_13:                              # %for.inc41
                                        #   in Loop: Header=BB33_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB33_7
.LBB33_14:                              # %for.end43
                                        #   in Loop: Header=BB33_5 Depth=1
	jmp	.LBB33_15
.LBB33_15:                              # %for.inc44
                                        #   in Loop: Header=BB33_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_5
.LBB33_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB33_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB33_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	$0, -24(%rbp)
.LBB33_19:                              # %for.cond50
                                        #   Parent Loop BB33_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB33_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB33_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB33_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB33_19
.LBB33_22:                              # %for.end60
                                        #   in Loop: Header=BB33_17 Depth=1
	jmp	.LBB33_23
.LBB33_23:                              # %for.inc61
                                        #   in Loop: Header=BB33_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_17
.LBB33_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB33_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_27 Depth 2
                                        #       Child Loop BB33_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	$0, -12(%rbp)
.LBB33_27:                              # %for.cond69
                                        #   Parent Loop BB33_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB33_29:                              # %for.cond85
                                        #   Parent Loop BB33_25 Depth=1
                                        #     Parent Loop BB33_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB33_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB33_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB33_29
.LBB33_32:                              # %for.end99
                                        #   in Loop: Header=BB33_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB33_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB33_34
	jp	.LBB33_34
	jmp	.LBB33_35
.LBB33_34:                              # %if.then106
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB33_36
.LBB33_35:                              # %if.else
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_36:                              # %if.end
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB33_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_39
.LBB33_38:                              # %if.then137
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB33_39:                              # %if.end143
                                        #   in Loop: Header=BB33_27 Depth=2
	jmp	.LBB33_47
.LBB33_40:                              # %if.else144
                                        #   in Loop: Header=BB33_27 Depth=2
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB33_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB33_46
.LBB33_42:                              # %cond.false168
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB33_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	$127, %eax
	jmp	.LBB33_45
.LBB33_44:                              # %cond.false177
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB33_45:                              # %cond.end183
                                        #   in Loop: Header=BB33_27 Depth=2
.LBB33_46:                              # %cond.end185
                                        #   in Loop: Header=BB33_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB33_47:                              # %if.end197
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB33_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_27
.LBB33_49:                              # %for.end210
                                        #   in Loop: Header=BB33_25 Depth=1
	jmp	.LBB33_50
.LBB33_50:                              # %for.inc211
                                        #   in Loop: Header=BB33_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_25
.LBB33_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB33_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_54 Depth 2
                                        #       Child Loop BB33_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB33_52 Depth=1
	movl	$0, -32(%rbp)
.LBB33_54:                              # %for.cond219
                                        #   Parent Loop BB33_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB33_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB33_54 Depth=2
	movl	$0, -36(%rbp)
.LBB33_56:                              # %for.cond225
                                        #   Parent Loop BB33_52 Depth=1
                                        #     Parent Loop BB33_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB33_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB33_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB33_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB33_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB33_60
.LBB33_59:                              # %if.then246
                                        #   in Loop: Header=BB33_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB33_63
.LBB33_60:                              # %if.end247
                                        #   in Loop: Header=BB33_56 Depth=3
	jmp	.LBB33_61
.LBB33_61:                              # %for.inc248
                                        #   in Loop: Header=BB33_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB33_56
.LBB33_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB33_54 Depth=2
	jmp	.LBB33_63
.LBB33_63:                              # %for.end250
                                        #   in Loop: Header=BB33_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB33_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB33_52 Depth=1
	jmp	.LBB33_68
.LBB33_65:                              # %if.end254
                                        #   in Loop: Header=BB33_54 Depth=2
	jmp	.LBB33_66
.LBB33_66:                              # %for.inc255
                                        #   in Loop: Header=BB33_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_54
.LBB33_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB33_52 Depth=1
	jmp	.LBB33_68
.LBB33_68:                              # %for.end257
                                        #   in Loop: Header=BB33_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB33_70
# %bb.69:                               # %if.then260
	jmp	.LBB33_73
.LBB33_70:                              # %if.end261
                                        #   in Loop: Header=BB33_52 Depth=1
	jmp	.LBB33_71
.LBB33_71:                              # %for.inc262
                                        #   in Loop: Header=BB33_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_52
.LBB33_72:                              # %for.end264.loopexit
	jmp	.LBB33_73
.LBB33_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$969223855, -60(%rbp)   # imm = 0x39C52EAF
	jne	.LBB33_75
.LBB33_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_74
.Lfunc_end33:
	.size	test_wp_P_slice.30, .Lfunc_end33-test_wp_P_slice.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.31
.LCPI34_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.31
	.p2align	4, 0x90
	.type	test_wp_B_slice.31,@function
test_wp_B_slice.31:                     # @test_wp_B_slice.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$1748140657, -80(%rbp)  # imm = 0x68328271
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB34_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB34_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB34_4
.LBB34_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB34_4
.LBB34_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB34_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_7 Depth 2
                                        #       Child Loop BB34_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	$0, -24(%rbp)
.LBB34_7:                               # %for.cond9
                                        #   Parent Loop BB34_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	$0, -32(%rbp)
.LBB34_9:                               # %for.cond14
                                        #   Parent Loop BB34_5 Depth=1
                                        #     Parent Loop BB34_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB34_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB34_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_9
.LBB34_12:                              # %for.end
                                        #   in Loop: Header=BB34_7 Depth=2
	jmp	.LBB34_13
.LBB34_13:                              # %for.inc41
                                        #   in Loop: Header=BB34_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_7
.LBB34_14:                              # %for.end43
                                        #   in Loop: Header=BB34_5 Depth=1
	jmp	.LBB34_15
.LBB34_15:                              # %for.inc44
                                        #   in Loop: Header=BB34_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_5
.LBB34_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB34_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_19 Depth 2
                                        #       Child Loop BB34_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	$0, -24(%rbp)
.LBB34_19:                              # %for.cond50
                                        #   Parent Loop BB34_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_26
.LBB34_22:                              # %cond.false61
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_25
.LBB34_24:                              # %cond.false71
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_25:                              # %cond.end79
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_26:                              # %cond.end81
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB34_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB34_32
.LBB34_28:                              # %cond.false90
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB34_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	$127, %eax
	jmp	.LBB34_31
.LBB34_30:                              # %cond.false98
                                        #   in Loop: Header=BB34_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB34_31:                              # %cond.end104
                                        #   in Loop: Header=BB34_19 Depth=2
.LBB34_32:                              # %cond.end106
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB34_33:                              # %for.cond108
                                        #   Parent Loop BB34_17 Depth=1
                                        #     Parent Loop BB34_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB34_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB34_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB34_46
.LBB34_36:                              # %if.else
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB34_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB34_42
.LBB34_38:                              # %cond.false145
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB34_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB34_41
.LBB34_40:                              # %cond.false151
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB34_41:                              # %cond.end155
                                        #   in Loop: Header=BB34_33 Depth=3
.LBB34_42:                              # %cond.end157
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB34_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB34_45
.LBB34_44:                              # %if.then183
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB34_45:                              # %if.end
                                        #   in Loop: Header=BB34_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB34_46:                              # %if.end220
                                        #   in Loop: Header=BB34_33 Depth=3
	jmp	.LBB34_47
.LBB34_47:                              # %for.inc221
                                        #   in Loop: Header=BB34_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_33
.LBB34_48:                              # %for.end223
                                        #   in Loop: Header=BB34_19 Depth=2
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc224
                                        #   in Loop: Header=BB34_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_19
.LBB34_50:                              # %for.end226
                                        #   in Loop: Header=BB34_17 Depth=1
	jmp	.LBB34_51
.LBB34_51:                              # %for.inc227
                                        #   in Loop: Header=BB34_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_17
.LBB34_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB34_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB34_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_56 Depth 2
                                        #       Child Loop BB34_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	$0, -24(%rbp)
.LBB34_56:                              # %for.cond235
                                        #   Parent Loop BB34_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	$0, -20(%rbp)
.LBB34_58:                              # %for.cond238
                                        #   Parent Loop BB34_54 Depth=1
                                        #     Parent Loop BB34_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB34_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_62
.LBB34_61:                              # %cond.false243
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_62:                              # %cond.end244
                                        #   in Loop: Header=BB34_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB34_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_58
.LBB34_64:                              # %for.end276
                                        #   in Loop: Header=BB34_56 Depth=2
	jmp	.LBB34_65
.LBB34_65:                              # %for.inc277
                                        #   in Loop: Header=BB34_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_56
.LBB34_66:                              # %for.end279
                                        #   in Loop: Header=BB34_54 Depth=1
	jmp	.LBB34_67
.LBB34_67:                              # %for.inc280
                                        #   in Loop: Header=BB34_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_54
.LBB34_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB34_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	$0, -28(%rbp)
.LBB34_71:                              # %for.cond287
                                        #   Parent Loop BB34_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB34_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_71
.LBB34_74:                              # %for.end327
                                        #   in Loop: Header=BB34_69 Depth=1
	jmp	.LBB34_75
.LBB34_75:                              # %for.inc328
                                        #   in Loop: Header=BB34_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_76:                              # %for.end330
	jmp	.LBB34_142
.LBB34_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB34_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB34_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	$0, -24(%rbp)
.LBB34_80:                              # %for.cond335
                                        #   Parent Loop BB34_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB34_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB34_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB34_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_80
.LBB34_83:                              # %for.end345
                                        #   in Loop: Header=BB34_78 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc346
                                        #   in Loop: Header=BB34_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_78
.LBB34_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB34_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_88 Depth 2
                                        #       Child Loop BB34_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	$0, -32(%rbp)
.LBB34_88:                              # %for.cond354
                                        #   Parent Loop BB34_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB34_90:                              # %for.cond372
                                        #   Parent Loop BB34_86 Depth=1
                                        #     Parent Loop BB34_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB34_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB34_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_90
.LBB34_93:                              # %for.end389
                                        #   in Loop: Header=BB34_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB34_94
	jp	.LBB34_94
	jmp	.LBB34_95
.LBB34_94:                              # %if.then396
                                        #   in Loop: Header=BB34_88 Depth=2
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB34_96
.LBB34_95:                              # %if.else406
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_96:                              # %if.end407
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB34_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB34_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB34_99
.LBB34_98:                              # %if.then413
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB34_99:                              # %if.end414
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB34_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_88
.LBB34_101:                             # %for.end447
                                        #   in Loop: Header=BB34_86 Depth=1
	jmp	.LBB34_102
.LBB34_102:                             # %for.inc448
                                        #   in Loop: Header=BB34_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_86
.LBB34_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB34_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB34_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_107 Depth 2
                                        #       Child Loop BB34_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	$0, -28(%rbp)
.LBB34_107:                             # %for.cond459
                                        #   Parent Loop BB34_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	$0, -20(%rbp)
.LBB34_109:                             # %for.cond465
                                        #   Parent Loop BB34_105 Depth=1
                                        #     Parent Loop BB34_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB34_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB34_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_109
.LBB34_112:                             # %for.end495
                                        #   in Loop: Header=BB34_107 Depth=2
	jmp	.LBB34_113
.LBB34_113:                             # %for.inc496
                                        #   in Loop: Header=BB34_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_107
.LBB34_114:                             # %for.end498
                                        #   in Loop: Header=BB34_105 Depth=1
	jmp	.LBB34_115
.LBB34_115:                             # %for.inc499
                                        #   in Loop: Header=BB34_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_105
.LBB34_116:                             # %for.end501
	jmp	.LBB34_126
.LBB34_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB34_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	$0, -28(%rbp)
.LBB34_120:                             # %for.cond508
                                        #   Parent Loop BB34_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB34_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_120
.LBB34_123:                             # %for.end549
                                        #   in Loop: Header=BB34_118 Depth=1
	jmp	.LBB34_124
.LBB34_124:                             # %for.inc550
                                        #   in Loop: Header=BB34_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_118
.LBB34_125:                             # %for.end552
	jmp	.LBB34_126
.LBB34_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB34_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_129 Depth 2
                                        #       Child Loop BB34_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB34_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	$0, -24(%rbp)
.LBB34_129:                             # %for.cond558
                                        #   Parent Loop BB34_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB34_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	$0, -20(%rbp)
.LBB34_131:                             # %for.cond562
                                        #   Parent Loop BB34_127 Depth=1
                                        #     Parent Loop BB34_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB34_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB34_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB34_135
.LBB34_134:                             # %cond.false569
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB34_135:                             # %cond.end570
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB34_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_131
.LBB34_137:                             # %for.end598
                                        #   in Loop: Header=BB34_129 Depth=2
	jmp	.LBB34_138
.LBB34_138:                             # %for.inc599
                                        #   in Loop: Header=BB34_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB34_129
.LBB34_139:                             # %for.end601
                                        #   in Loop: Header=BB34_127 Depth=1
	jmp	.LBB34_140
.LBB34_140:                             # %for.inc602
                                        #   in Loop: Header=BB34_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_127
.LBB34_141:                             # %for.end604
	jmp	.LBB34_142
.LBB34_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB34_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_145 Depth 2
                                        #       Child Loop BB34_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	$0, -28(%rbp)
.LBB34_145:                             # %for.cond611
                                        #   Parent Loop BB34_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB34_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$0, -20(%rbp)
.LBB34_147:                             # %for.cond617
                                        #   Parent Loop BB34_143 Depth=1
                                        #     Parent Loop BB34_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB34_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB34_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB34_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_151
.LBB34_150:                             # %if.then638
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB34_154
.LBB34_151:                             # %if.end639
                                        #   in Loop: Header=BB34_147 Depth=3
	jmp	.LBB34_152
.LBB34_152:                             # %for.inc640
                                        #   in Loop: Header=BB34_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_147
.LBB34_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_154
.LBB34_154:                             # %for.end642
                                        #   in Loop: Header=BB34_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB34_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_156:                             # %if.end646
                                        #   in Loop: Header=BB34_145 Depth=2
	jmp	.LBB34_157
.LBB34_157:                             # %for.inc647
                                        #   in Loop: Header=BB34_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_145
.LBB34_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_159
.LBB34_159:                             # %for.end649
                                        #   in Loop: Header=BB34_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB34_161
# %bb.160:                              # %if.then652
	jmp	.LBB34_164
.LBB34_161:                             # %if.end653
                                        #   in Loop: Header=BB34_143 Depth=1
	jmp	.LBB34_162
.LBB34_162:                             # %for.inc654
                                        #   in Loop: Header=BB34_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_143
.LBB34_163:                             # %for.end656.loopexit
	jmp	.LBB34_164
.LBB34_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$1748140657, -80(%rbp)  # imm = 0x68328271
	jne	.LBB34_166
.LBB34_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_165
.Lfunc_end34:
	.size	test_wp_B_slice.31, .Lfunc_end34-test_wp_B_slice.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.32
.LCPI35_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.32
	.p2align	4, 0x90
	.type	test_wp_P_slice.32,@function
test_wp_P_slice.32:                     # @test_wp_P_slice.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1344094508, -60(%rbp)  # imm = 0x501D412C
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB35_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB35_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB35_4
.LBB35_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB35_4
.LBB35_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB35_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_7 Depth 2
                                        #       Child Loop BB35_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB35_5 Depth=1
	movl	$0, -24(%rbp)
.LBB35_7:                               # %for.cond9
                                        #   Parent Loop BB35_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB35_7 Depth=2
	movl	$0, -12(%rbp)
.LBB35_9:                               # %for.cond14
                                        #   Parent Loop BB35_5 Depth=1
                                        #     Parent Loop BB35_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB35_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB35_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB35_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_9
.LBB35_12:                              # %for.end
                                        #   in Loop: Header=BB35_7 Depth=2
	jmp	.LBB35_13
.LBB35_13:                              # %for.inc41
                                        #   in Loop: Header=BB35_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_7
.LBB35_14:                              # %for.end43
                                        #   in Loop: Header=BB35_5 Depth=1
	jmp	.LBB35_15
.LBB35_15:                              # %for.inc44
                                        #   in Loop: Header=BB35_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_5
.LBB35_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB35_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB35_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	$0, -24(%rbp)
.LBB35_19:                              # %for.cond50
                                        #   Parent Loop BB35_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB35_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB35_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB35_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB35_19
.LBB35_22:                              # %for.end60
                                        #   in Loop: Header=BB35_17 Depth=1
	jmp	.LBB35_23
.LBB35_23:                              # %for.inc61
                                        #   in Loop: Header=BB35_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_17
.LBB35_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB35_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_27 Depth 2
                                        #       Child Loop BB35_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	$0, -12(%rbp)
.LBB35_27:                              # %for.cond69
                                        #   Parent Loop BB35_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB35_29:                              # %for.cond85
                                        #   Parent Loop BB35_25 Depth=1
                                        #     Parent Loop BB35_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB35_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB35_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_29
.LBB35_32:                              # %for.end99
                                        #   in Loop: Header=BB35_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB35_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB35_34
	jp	.LBB35_34
	jmp	.LBB35_35
.LBB35_34:                              # %if.then106
                                        #   in Loop: Header=BB35_27 Depth=2
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB35_36
.LBB35_35:                              # %if.else
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB35_36:                              # %if.end
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB35_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB35_39
.LBB35_38:                              # %if.then137
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB35_39:                              # %if.end143
                                        #   in Loop: Header=BB35_27 Depth=2
	jmp	.LBB35_47
.LBB35_40:                              # %if.else144
                                        #   in Loop: Header=BB35_27 Depth=2
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB35_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB35_46
.LBB35_42:                              # %cond.false168
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB35_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	$127, %eax
	jmp	.LBB35_45
.LBB35_44:                              # %cond.false177
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB35_45:                              # %cond.end183
                                        #   in Loop: Header=BB35_27 Depth=2
.LBB35_46:                              # %cond.end185
                                        #   in Loop: Header=BB35_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB35_47:                              # %if.end197
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB35_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_27
.LBB35_49:                              # %for.end210
                                        #   in Loop: Header=BB35_25 Depth=1
	jmp	.LBB35_50
.LBB35_50:                              # %for.inc211
                                        #   in Loop: Header=BB35_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_25
.LBB35_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB35_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_54 Depth 2
                                        #       Child Loop BB35_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB35_52 Depth=1
	movl	$0, -36(%rbp)
.LBB35_54:                              # %for.cond219
                                        #   Parent Loop BB35_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB35_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	$0, -32(%rbp)
.LBB35_56:                              # %for.cond225
                                        #   Parent Loop BB35_52 Depth=1
                                        #     Parent Loop BB35_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB35_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB35_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB35_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB35_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB35_60
.LBB35_59:                              # %if.then246
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB35_63
.LBB35_60:                              # %if.end247
                                        #   in Loop: Header=BB35_56 Depth=3
	jmp	.LBB35_61
.LBB35_61:                              # %for.inc248
                                        #   in Loop: Header=BB35_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_56
.LBB35_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB35_54 Depth=2
	jmp	.LBB35_63
.LBB35_63:                              # %for.end250
                                        #   in Loop: Header=BB35_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB35_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB35_52 Depth=1
	jmp	.LBB35_68
.LBB35_65:                              # %if.end254
                                        #   in Loop: Header=BB35_54 Depth=2
	jmp	.LBB35_66
.LBB35_66:                              # %for.inc255
                                        #   in Loop: Header=BB35_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB35_54
.LBB35_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB35_52 Depth=1
	jmp	.LBB35_68
.LBB35_68:                              # %for.end257
                                        #   in Loop: Header=BB35_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB35_70
# %bb.69:                               # %if.then260
	jmp	.LBB35_73
.LBB35_70:                              # %if.end261
                                        #   in Loop: Header=BB35_52 Depth=1
	jmp	.LBB35_71
.LBB35_71:                              # %for.inc262
                                        #   in Loop: Header=BB35_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_52
.LBB35_72:                              # %for.end264.loopexit
	jmp	.LBB35_73
.LBB35_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1344094508, -60(%rbp)  # imm = 0x501D412C
	jne	.LBB35_75
.LBB35_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_74
.Lfunc_end35:
	.size	test_wp_P_slice.32, .Lfunc_end35-test_wp_P_slice.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.33
.LCPI36_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.33
	.p2align	4, 0x90
	.type	test_wp_P_slice.33,@function
test_wp_P_slice.33:                     # @test_wp_P_slice.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1943594635, -60(%rbp)  # imm = 0x73D8E68B
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB36_4
.LBB36_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB36_4
.LBB36_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB36_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_7 Depth 2
                                        #       Child Loop BB36_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB36_5 Depth=1
	movl	$0, -24(%rbp)
.LBB36_7:                               # %for.cond9
                                        #   Parent Loop BB36_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB36_7 Depth=2
	movl	$0, -12(%rbp)
.LBB36_9:                               # %for.cond14
                                        #   Parent Loop BB36_5 Depth=1
                                        #     Parent Loop BB36_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB36_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB36_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB36_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_9
.LBB36_12:                              # %for.end
                                        #   in Loop: Header=BB36_7 Depth=2
	jmp	.LBB36_13
.LBB36_13:                              # %for.inc41
                                        #   in Loop: Header=BB36_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_7
.LBB36_14:                              # %for.end43
                                        #   in Loop: Header=BB36_5 Depth=1
	jmp	.LBB36_15
.LBB36_15:                              # %for.inc44
                                        #   in Loop: Header=BB36_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_5
.LBB36_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB36_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB36_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	$0, -24(%rbp)
.LBB36_19:                              # %for.cond50
                                        #   Parent Loop BB36_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB36_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB36_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB36_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB36_19
.LBB36_22:                              # %for.end60
                                        #   in Loop: Header=BB36_17 Depth=1
	jmp	.LBB36_23
.LBB36_23:                              # %for.inc61
                                        #   in Loop: Header=BB36_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_17
.LBB36_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB36_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_27 Depth 2
                                        #       Child Loop BB36_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	$0, -12(%rbp)
.LBB36_27:                              # %for.cond69
                                        #   Parent Loop BB36_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB36_29:                              # %for.cond85
                                        #   Parent Loop BB36_25 Depth=1
                                        #     Parent Loop BB36_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB36_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB36_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB36_29
.LBB36_32:                              # %for.end99
                                        #   in Loop: Header=BB36_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB36_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB36_34
	jp	.LBB36_34
	jmp	.LBB36_35
.LBB36_34:                              # %if.then106
                                        #   in Loop: Header=BB36_27 Depth=2
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB36_36
.LBB36_35:                              # %if.else
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB36_36:                              # %if.end
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB36_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB36_39
.LBB36_38:                              # %if.then137
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB36_39:                              # %if.end143
                                        #   in Loop: Header=BB36_27 Depth=2
	jmp	.LBB36_47
.LBB36_40:                              # %if.else144
                                        #   in Loop: Header=BB36_27 Depth=2
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB36_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB36_46
.LBB36_42:                              # %cond.false168
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB36_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	$127, %eax
	jmp	.LBB36_45
.LBB36_44:                              # %cond.false177
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB36_45:                              # %cond.end183
                                        #   in Loop: Header=BB36_27 Depth=2
.LBB36_46:                              # %cond.end185
                                        #   in Loop: Header=BB36_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB36_47:                              # %if.end197
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB36_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_27
.LBB36_49:                              # %for.end210
                                        #   in Loop: Header=BB36_25 Depth=1
	jmp	.LBB36_50
.LBB36_50:                              # %for.inc211
                                        #   in Loop: Header=BB36_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_25
.LBB36_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB36_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_54 Depth 2
                                        #       Child Loop BB36_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	$0, -32(%rbp)
.LBB36_54:                              # %for.cond219
                                        #   Parent Loop BB36_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB36_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	$0, -36(%rbp)
.LBB36_56:                              # %for.cond225
                                        #   Parent Loop BB36_52 Depth=1
                                        #     Parent Loop BB36_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB36_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB36_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB36_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB36_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB36_60
.LBB36_59:                              # %if.then246
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB36_63
.LBB36_60:                              # %if.end247
                                        #   in Loop: Header=BB36_56 Depth=3
	jmp	.LBB36_61
.LBB36_61:                              # %for.inc248
                                        #   in Loop: Header=BB36_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB36_56
.LBB36_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB36_54 Depth=2
	jmp	.LBB36_63
.LBB36_63:                              # %for.end250
                                        #   in Loop: Header=BB36_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB36_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_68
.LBB36_65:                              # %if.end254
                                        #   in Loop: Header=BB36_54 Depth=2
	jmp	.LBB36_66
.LBB36_66:                              # %for.inc255
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB36_54
.LBB36_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_68
.LBB36_68:                              # %for.end257
                                        #   in Loop: Header=BB36_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB36_70
# %bb.69:                               # %if.then260
	jmp	.LBB36_73
.LBB36_70:                              # %if.end261
                                        #   in Loop: Header=BB36_52 Depth=1
	jmp	.LBB36_71
.LBB36_71:                              # %for.inc262
                                        #   in Loop: Header=BB36_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB36_52
.LBB36_72:                              # %for.end264.loopexit
	jmp	.LBB36_73
.LBB36_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1943594635, -60(%rbp)  # imm = 0x73D8E68B
	jne	.LBB36_75
.LBB36_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_74
.Lfunc_end36:
	.size	test_wp_P_slice.33, .Lfunc_end36-test_wp_P_slice.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.34
.LCPI37_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.34
	.p2align	4, 0x90
	.type	test_wp_P_slice.34,@function
test_wp_P_slice.34:                     # @test_wp_P_slice.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$631114023, -60(%rbp)   # imm = 0x259E0927
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB37_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB37_4
.LBB37_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB37_4
.LBB37_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB37_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_7 Depth 2
                                        #       Child Loop BB37_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB37_5 Depth=1
	movl	$0, -24(%rbp)
.LBB37_7:                               # %for.cond9
                                        #   Parent Loop BB37_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	$0, -12(%rbp)
.LBB37_9:                               # %for.cond14
                                        #   Parent Loop BB37_5 Depth=1
                                        #     Parent Loop BB37_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB37_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB37_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB37_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_9
.LBB37_12:                              # %for.end
                                        #   in Loop: Header=BB37_7 Depth=2
	jmp	.LBB37_13
.LBB37_13:                              # %for.inc41
                                        #   in Loop: Header=BB37_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_7
.LBB37_14:                              # %for.end43
                                        #   in Loop: Header=BB37_5 Depth=1
	jmp	.LBB37_15
.LBB37_15:                              # %for.inc44
                                        #   in Loop: Header=BB37_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_5
.LBB37_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB37_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB37_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	$0, -24(%rbp)
.LBB37_19:                              # %for.cond50
                                        #   Parent Loop BB37_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB37_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB37_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB37_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_19
.LBB37_22:                              # %for.end60
                                        #   in Loop: Header=BB37_17 Depth=1
	jmp	.LBB37_23
.LBB37_23:                              # %for.inc61
                                        #   in Loop: Header=BB37_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_17
.LBB37_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB37_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_27 Depth 2
                                        #       Child Loop BB37_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	$0, -12(%rbp)
.LBB37_27:                              # %for.cond69
                                        #   Parent Loop BB37_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB37_29:                              # %for.cond85
                                        #   Parent Loop BB37_25 Depth=1
                                        #     Parent Loop BB37_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB37_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB37_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end99
                                        #   in Loop: Header=BB37_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB37_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB37_34
	jp	.LBB37_34
	jmp	.LBB37_35
.LBB37_34:                              # %if.then106
                                        #   in Loop: Header=BB37_27 Depth=2
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB37_36
.LBB37_35:                              # %if.else
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB37_36:                              # %if.end
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB37_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB37_39
.LBB37_38:                              # %if.then137
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB37_39:                              # %if.end143
                                        #   in Loop: Header=BB37_27 Depth=2
	jmp	.LBB37_47
.LBB37_40:                              # %if.else144
                                        #   in Loop: Header=BB37_27 Depth=2
	vmovsd	.LCPI37_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB37_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB37_46
.LBB37_42:                              # %cond.false168
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB37_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	$127, %eax
	jmp	.LBB37_45
.LBB37_44:                              # %cond.false177
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB37_45:                              # %cond.end183
                                        #   in Loop: Header=BB37_27 Depth=2
.LBB37_46:                              # %cond.end185
                                        #   in Loop: Header=BB37_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB37_47:                              # %if.end197
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB37_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_27
.LBB37_49:                              # %for.end210
                                        #   in Loop: Header=BB37_25 Depth=1
	jmp	.LBB37_50
.LBB37_50:                              # %for.inc211
                                        #   in Loop: Header=BB37_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_25
.LBB37_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB37_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_54 Depth 2
                                        #       Child Loop BB37_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	$0, -36(%rbp)
.LBB37_54:                              # %for.cond219
                                        #   Parent Loop BB37_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB37_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	$0, -32(%rbp)
.LBB37_56:                              # %for.cond225
                                        #   Parent Loop BB37_52 Depth=1
                                        #     Parent Loop BB37_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB37_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB37_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB37_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB37_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB37_60
.LBB37_59:                              # %if.then246
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB37_63
.LBB37_60:                              # %if.end247
                                        #   in Loop: Header=BB37_56 Depth=3
	jmp	.LBB37_61
.LBB37_61:                              # %for.inc248
                                        #   in Loop: Header=BB37_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB37_56
.LBB37_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB37_54 Depth=2
	jmp	.LBB37_63
.LBB37_63:                              # %for.end250
                                        #   in Loop: Header=BB37_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB37_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_68
.LBB37_65:                              # %if.end254
                                        #   in Loop: Header=BB37_54 Depth=2
	jmp	.LBB37_66
.LBB37_66:                              # %for.inc255
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB37_54
.LBB37_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_68
.LBB37_68:                              # %for.end257
                                        #   in Loop: Header=BB37_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB37_70
# %bb.69:                               # %if.then260
	jmp	.LBB37_73
.LBB37_70:                              # %if.end261
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %for.inc262
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_52
.LBB37_72:                              # %for.end264.loopexit
	jmp	.LBB37_73
.LBB37_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$631114023, -60(%rbp)   # imm = 0x259E0927
	jne	.LBB37_75
.LBB37_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_74
.Lfunc_end37:
	.size	test_wp_P_slice.34, .Lfunc_end37-test_wp_P_slice.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.35
.LCPI38_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.35
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.35,@function
estimate_weighting_factor_B_slice.35:   # @estimate_weighting_factor_B_slice.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1186524829, -92(%rbp)  # imm = 0x46B8EE9D
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB38_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB38_4
.LBB38_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB38_4
.LBB38_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB38_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB38_7
.LBB38_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB38_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB38_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_10 Depth 2
                                        #       Child Loop BB38_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	$0, -8(%rbp)
.LBB38_10:                              # %for.cond14
                                        #   Parent Loop BB38_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB38_10 Depth=2
	movl	$0, -16(%rbp)
.LBB38_12:                              # %for.cond19
                                        #   Parent Loop BB38_8 Depth=1
                                        #     Parent Loop BB38_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB38_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB38_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB38_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_12
.LBB38_15:                              # %for.end
                                        #   in Loop: Header=BB38_10 Depth=2
	jmp	.LBB38_16
.LBB38_16:                              # %for.inc50
                                        #   in Loop: Header=BB38_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_10
.LBB38_17:                              # %for.end52
                                        #   in Loop: Header=BB38_8 Depth=1
	jmp	.LBB38_18
.LBB38_18:                              # %for.inc53
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_8
.LBB38_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB38_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_22 Depth 2
                                        #       Child Loop BB38_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB38_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB38_20 Depth=1
	movl	$0, -8(%rbp)
.LBB38_22:                              # %for.cond59
                                        #   Parent Loop BB38_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB38_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB38_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB38_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB38_29
.LBB38_25:                              # %cond.false70
                                        #   in Loop: Header=BB38_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB38_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	$127, %eax
	jmp	.LBB38_28
.LBB38_27:                              # %cond.false80
                                        #   in Loop: Header=BB38_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB38_28:                              # %cond.end88
                                        #   in Loop: Header=BB38_22 Depth=2
.LBB38_29:                              # %cond.end90
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB38_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB38_35
.LBB38_31:                              # %cond.false99
                                        #   in Loop: Header=BB38_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB38_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	$127, %eax
	jmp	.LBB38_34
.LBB38_33:                              # %cond.false107
                                        #   in Loop: Header=BB38_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB38_34:                              # %cond.end113
                                        #   in Loop: Header=BB38_22 Depth=2
.LBB38_35:                              # %cond.end115
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB38_36:                              # %for.cond117
                                        #   Parent Loop BB38_20 Depth=1
                                        #     Parent Loop BB38_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB38_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB38_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB38_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB38_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB38_49
.LBB38_39:                              # %if.else154
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB38_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB38_45
.LBB38_41:                              # %cond.false160
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB38_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB38_44
.LBB38_43:                              # %cond.false166
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB38_44:                              # %cond.end170
                                        #   in Loop: Header=BB38_36 Depth=3
.LBB38_45:                              # %cond.end172
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB38_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB38_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB38_48
.LBB38_47:                              # %if.then198
                                        #   in Loop: Header=BB38_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB38_48:                              # %if.end208
                                        #   in Loop: Header=BB38_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB38_49:                              # %if.end238
                                        #   in Loop: Header=BB38_36 Depth=3
	jmp	.LBB38_50
.LBB38_50:                              # %for.inc239
                                        #   in Loop: Header=BB38_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_36
.LBB38_51:                              # %for.end241
                                        #   in Loop: Header=BB38_22 Depth=2
	jmp	.LBB38_52
.LBB38_52:                              # %for.inc242
                                        #   in Loop: Header=BB38_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_22
.LBB38_53:                              # %for.end244
                                        #   in Loop: Header=BB38_20 Depth=1
	jmp	.LBB38_54
.LBB38_54:                              # %for.inc245
                                        #   in Loop: Header=BB38_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_20
.LBB38_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB38_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB38_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_59 Depth 2
                                        #       Child Loop BB38_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB38_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB38_57 Depth=1
	movl	$0, -8(%rbp)
.LBB38_59:                              # %for.cond254
                                        #   Parent Loop BB38_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB38_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB38_59 Depth=2
	movl	$0, -20(%rbp)
.LBB38_61:                              # %for.cond257
                                        #   Parent Loop BB38_57 Depth=1
                                        #     Parent Loop BB38_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB38_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB38_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB38_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB38_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB38_65
.LBB38_64:                              # %cond.false262
                                        #   in Loop: Header=BB38_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB38_65:                              # %cond.end263
                                        #   in Loop: Header=BB38_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB38_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_61
.LBB38_67:                              # %for.end295
                                        #   in Loop: Header=BB38_59 Depth=2
	jmp	.LBB38_68
.LBB38_68:                              # %for.inc296
                                        #   in Loop: Header=BB38_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_59
.LBB38_69:                              # %for.end298
                                        #   in Loop: Header=BB38_57 Depth=1
	jmp	.LBB38_70
.LBB38_70:                              # %for.inc299
                                        #   in Loop: Header=BB38_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_57
.LBB38_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB38_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB38_72 Depth=1
	movl	$0, -24(%rbp)
.LBB38_74:                              # %for.cond306
                                        #   Parent Loop BB38_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB38_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB38_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_74
.LBB38_77:                              # %for.end346
                                        #   in Loop: Header=BB38_72 Depth=1
	jmp	.LBB38_78
.LBB38_78:                              # %for.inc347
                                        #   in Loop: Header=BB38_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_72
.LBB38_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB38_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_82 Depth 2
                                        #       Child Loop BB38_84 Depth 3
                                        #       Child Loop BB38_88 Depth 3
                                        #         Child Loop BB38_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB38_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB38_80 Depth=1
	movl	$0, -8(%rbp)
.LBB38_82:                              # %for.cond353
                                        #   Parent Loop BB38_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_84 Depth 3
                                        #       Child Loop BB38_88 Depth 3
                                        #         Child Loop BB38_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB38_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	$0, -16(%rbp)
.LBB38_84:                              # %for.cond356
                                        #   Parent Loop BB38_80 Depth=1
                                        #     Parent Loop BB38_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB38_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB38_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_84
.LBB38_87:                              # %for.end380
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	$0, -16(%rbp)
.LBB38_88:                              # %for.cond381
                                        #   Parent Loop BB38_80 Depth=1
                                        #     Parent Loop BB38_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB38_88 Depth=3
	movl	$0, -32(%rbp)
.LBB38_90:                              # %for.cond387
                                        #   Parent Loop BB38_80 Depth=1
                                        #     Parent Loop BB38_82 Depth=2
                                        #       Parent Loop BB38_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB38_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB38_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB38_90
.LBB38_93:                              # %for.end421
                                        #   in Loop: Header=BB38_88 Depth=3
	jmp	.LBB38_94
.LBB38_94:                              # %for.inc422
                                        #   in Loop: Header=BB38_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_88
.LBB38_95:                              # %for.end424
                                        #   in Loop: Header=BB38_82 Depth=2
	jmp	.LBB38_96
.LBB38_96:                              # %for.inc425
                                        #   in Loop: Header=BB38_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_82
.LBB38_97:                              # %for.end427
                                        #   in Loop: Header=BB38_80 Depth=1
	jmp	.LBB38_98
.LBB38_98:                              # %for.inc428
                                        #   in Loop: Header=BB38_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_80
.LBB38_99:                              # %for.end430
	jmp	.LBB38_189
.LBB38_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB38_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB38_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB38_101 Depth=1
	movl	$0, -8(%rbp)
.LBB38_103:                             # %for.cond436
                                        #   Parent Loop BB38_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB38_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB38_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB38_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_103
.LBB38_106:                             # %for.end447
                                        #   in Loop: Header=BB38_101 Depth=1
	jmp	.LBB38_107
.LBB38_107:                             # %for.inc448
                                        #   in Loop: Header=BB38_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_101
.LBB38_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB38_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_111 Depth 2
                                        #       Child Loop BB38_113 Depth 3
                                        #       Child Loop BB38_123 Depth 3
                                        #       Child Loop BB38_133 Depth 3
                                        #         Child Loop BB38_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB38_109 Depth=1
	movl	$0, -16(%rbp)
.LBB38_111:                             # %for.cond456
                                        #   Parent Loop BB38_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_113 Depth 3
                                        #       Child Loop BB38_123 Depth 3
                                        #       Child Loop BB38_133 Depth 3
                                        #         Child Loop BB38_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB38_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB38_113:                             # %for.cond476
                                        #   Parent Loop BB38_109 Depth=1
                                        #     Parent Loop BB38_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB38_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB38_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_113
.LBB38_116:                             # %for.end493
                                        #   in Loop: Header=BB38_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB38_117
	jp	.LBB38_117
	jmp	.LBB38_118
.LBB38_117:                             # %if.then500
                                        #   in Loop: Header=BB38_111 Depth=2
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB38_119
.LBB38_118:                             # %if.else511
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB38_119:                             # %if.end513
                                        #   in Loop: Header=BB38_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB38_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB38_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB38_122
.LBB38_121:                             # %if.then519
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB38_122:                             # %if.end521
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB38_123:                             # %for.cond554
                                        #   Parent Loop BB38_109 Depth=1
                                        #     Parent Loop BB38_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB38_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB38_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB38_130
.LBB38_126:                             # %cond.false571
                                        #   in Loop: Header=BB38_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB38_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_129
.LBB38_128:                             # %cond.false583
                                        #   in Loop: Header=BB38_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB38_129:                             # %cond.end591
                                        #   in Loop: Header=BB38_123 Depth=3
.LBB38_130:                             # %cond.end593
                                        #   in Loop: Header=BB38_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB38_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_123
.LBB38_132:                             # %for.end600
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	$0, -4(%rbp)
.LBB38_133:                             # %for.cond601
                                        #   Parent Loop BB38_109 Depth=1
                                        #     Parent Loop BB38_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB38_133 Depth=3
	movl	$0, -8(%rbp)
.LBB38_135:                             # %for.cond608
                                        #   Parent Loop BB38_109 Depth=1
                                        #     Parent Loop BB38_111 Depth=2
                                        #       Parent Loop BB38_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB38_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB38_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB38_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB38_142
.LBB38_138:                             # %cond.false630
                                        #   in Loop: Header=BB38_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB38_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB38_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB38_141
.LBB38_140:                             # %cond.false648
                                        #   in Loop: Header=BB38_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB38_141:                             # %cond.end661
                                        #   in Loop: Header=BB38_135 Depth=4
.LBB38_142:                             # %cond.end663
                                        #   in Loop: Header=BB38_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB38_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_135
.LBB38_144:                             # %for.end675
                                        #   in Loop: Header=BB38_133 Depth=3
	jmp	.LBB38_145
.LBB38_145:                             # %for.inc676
                                        #   in Loop: Header=BB38_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_133
.LBB38_146:                             # %for.end678
                                        #   in Loop: Header=BB38_111 Depth=2
	jmp	.LBB38_147
.LBB38_147:                             # %for.inc679
                                        #   in Loop: Header=BB38_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_111
.LBB38_148:                             # %for.end681
                                        #   in Loop: Header=BB38_109 Depth=1
	jmp	.LBB38_149
.LBB38_149:                             # %for.inc682
                                        #   in Loop: Header=BB38_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_109
.LBB38_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB38_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB38_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_154 Depth 2
                                        #       Child Loop BB38_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB38_152 Depth=1
	movl	$0, -24(%rbp)
.LBB38_154:                             # %for.cond694
                                        #   Parent Loop BB38_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB38_154 Depth=2
	movl	$0, -20(%rbp)
.LBB38_156:                             # %for.cond700
                                        #   Parent Loop BB38_152 Depth=1
                                        #     Parent Loop BB38_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB38_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB38_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB38_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_156
.LBB38_159:                             # %for.end730
                                        #   in Loop: Header=BB38_154 Depth=2
	jmp	.LBB38_160
.LBB38_160:                             # %for.inc731
                                        #   in Loop: Header=BB38_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_154
.LBB38_161:                             # %for.end733
                                        #   in Loop: Header=BB38_152 Depth=1
	jmp	.LBB38_162
.LBB38_162:                             # %for.inc734
                                        #   in Loop: Header=BB38_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_152
.LBB38_163:                             # %for.end736
	jmp	.LBB38_173
.LBB38_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB38_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB38_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB38_165 Depth=1
	movl	$0, -24(%rbp)
.LBB38_167:                             # %for.cond743
                                        #   Parent Loop BB38_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB38_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB38_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB38_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB38_167
.LBB38_170:                             # %for.end784
                                        #   in Loop: Header=BB38_165 Depth=1
	jmp	.LBB38_171
.LBB38_171:                             # %for.inc785
                                        #   in Loop: Header=BB38_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_165
.LBB38_172:                             # %for.end787
	jmp	.LBB38_173
.LBB38_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB38_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_176 Depth 2
                                        #       Child Loop BB38_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB38_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB38_174 Depth=1
	movl	$0, -8(%rbp)
.LBB38_176:                             # %for.cond793
                                        #   Parent Loop BB38_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB38_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB38_176 Depth=2
	movl	$0, -20(%rbp)
.LBB38_178:                             # %for.cond797
                                        #   Parent Loop BB38_174 Depth=1
                                        #     Parent Loop BB38_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB38_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB38_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB38_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB38_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB38_182
.LBB38_181:                             # %cond.false804
                                        #   in Loop: Header=BB38_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB38_182:                             # %cond.end805
                                        #   in Loop: Header=BB38_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB38_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB38_178
.LBB38_184:                             # %for.end833
                                        #   in Loop: Header=BB38_176 Depth=2
	jmp	.LBB38_185
.LBB38_185:                             # %for.inc834
                                        #   in Loop: Header=BB38_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_176
.LBB38_186:                             # %for.end836
                                        #   in Loop: Header=BB38_174 Depth=1
	jmp	.LBB38_187
.LBB38_187:                             # %for.inc837
                                        #   in Loop: Header=BB38_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_174
.LBB38_188:                             # %for.end839
	jmp	.LBB38_189
.LBB38_189:                             # %if.end840
	cmpl	$1186524829, -92(%rbp)  # imm = 0x46B8EE9D
	jne	.LBB38_191
.LBB38_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_190
.Lfunc_end38:
	.size	estimate_weighting_factor_B_slice.35, .Lfunc_end38-estimate_weighting_factor_B_slice.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.36
.LCPI39_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.36
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.36,@function
estimate_weighting_factor_P_slice.36:   # @estimate_weighting_factor_P_slice.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1237004138, -60(%rbp)  # imm = 0x49BB2F6A
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB39_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB39_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB39_4
.LBB39_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB39_4
.LBB39_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB39_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_7 Depth 2
                                        #       Child Loop BB39_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	$0, -16(%rbp)
.LBB39_7:                               # %for.cond12
                                        #   Parent Loop BB39_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB39_7 Depth=2
	movl	$0, -4(%rbp)
.LBB39_9:                               # %for.cond17
                                        #   Parent Loop BB39_5 Depth=1
                                        #     Parent Loop BB39_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB39_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB39_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB39_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_9
.LBB39_12:                              # %for.end
                                        #   in Loop: Header=BB39_7 Depth=2
	jmp	.LBB39_13
.LBB39_13:                              # %for.inc48
                                        #   in Loop: Header=BB39_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_7
.LBB39_14:                              # %for.end50
                                        #   in Loop: Header=BB39_5 Depth=1
	jmp	.LBB39_15
.LBB39_15:                              # %for.inc51
                                        #   in Loop: Header=BB39_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_5
.LBB39_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB39_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB39_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	$0, -16(%rbp)
.LBB39_19:                              # %for.cond57
                                        #   Parent Loop BB39_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB39_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB39_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB39_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_19
.LBB39_22:                              # %for.end67
                                        #   in Loop: Header=BB39_17 Depth=1
	jmp	.LBB39_23
.LBB39_23:                              # %for.inc68
                                        #   in Loop: Header=BB39_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_17
.LBB39_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB39_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_27 Depth 2
                                        #       Child Loop BB39_29 Depth 3
                                        #       Child Loop BB39_48 Depth 3
                                        #       Child Loop BB39_58 Depth 3
                                        #         Child Loop BB39_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	$0, -4(%rbp)
.LBB39_27:                              # %for.cond76
                                        #   Parent Loop BB39_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_29 Depth 3
                                        #       Child Loop BB39_48 Depth 3
                                        #       Child Loop BB39_58 Depth 3
                                        #         Child Loop BB39_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB39_29:                              # %for.cond92
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB39_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB39_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_29
.LBB39_32:                              # %for.end106
                                        #   in Loop: Header=BB39_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB39_40
	jp	.LBB39_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB39_34
	jp	.LBB39_34
	jmp	.LBB39_35
.LBB39_34:                              # %if.then114
                                        #   in Loop: Header=BB39_27 Depth=2
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB39_36
.LBB39_35:                              # %if.else
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_36:                              # %if.end
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB39_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB39_39
.LBB39_38:                              # %if.then147
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_39:                              # %if.end154
                                        #   in Loop: Header=BB39_27 Depth=2
	jmp	.LBB39_47
.LBB39_40:                              # %if.else155
                                        #   in Loop: Header=BB39_27 Depth=2
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB39_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB39_46
.LBB39_42:                              # %cond.false179
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB39_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$127, %eax
	jmp	.LBB39_45
.LBB39_44:                              # %cond.false188
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB39_45:                              # %cond.end194
                                        #   in Loop: Header=BB39_27 Depth=2
.LBB39_46:                              # %cond.end196
                                        #   in Loop: Header=BB39_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB39_47:                              # %if.end209
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB39_48:                              # %for.cond222
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB39_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB39_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB39_55
.LBB39_51:                              # %cond.false248
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB39_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_54
.LBB39_53:                              # %cond.false270
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB39_54:                              # %cond.end288
                                        #   in Loop: Header=BB39_48 Depth=3
.LBB39_55:                              # %cond.end290
                                        #   in Loop: Header=BB39_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB39_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_48
.LBB39_57:                              # %for.end297
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	$0, -12(%rbp)
.LBB39_58:                              # %for.cond298
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB39_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB39_58 Depth=3
	movl	$0, -16(%rbp)
.LBB39_60:                              # %for.cond305
                                        #   Parent Loop BB39_25 Depth=1
                                        #     Parent Loop BB39_27 Depth=2
                                        #       Parent Loop BB39_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB39_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB39_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB39_67
.LBB39_63:                              # %cond.false336
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB39_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB39_66
.LBB39_65:                              # %cond.false364
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB39_66:                              # %cond.end387
                                        #   in Loop: Header=BB39_60 Depth=4
.LBB39_67:                              # %cond.end389
                                        #   in Loop: Header=BB39_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB39_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB39_60
.LBB39_69:                              # %for.end400
                                        #   in Loop: Header=BB39_58 Depth=3
	jmp	.LBB39_70
.LBB39_70:                              # %for.inc401
                                        #   in Loop: Header=BB39_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_58
.LBB39_71:                              # %for.end403
                                        #   in Loop: Header=BB39_27 Depth=2
	jmp	.LBB39_72
.LBB39_72:                              # %for.inc404
                                        #   in Loop: Header=BB39_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_27
.LBB39_73:                              # %for.end406
                                        #   in Loop: Header=BB39_25 Depth=1
	jmp	.LBB39_74
.LBB39_74:                              # %for.inc407
                                        #   in Loop: Header=BB39_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_25
.LBB39_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB39_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_78 Depth 2
                                        #       Child Loop BB39_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB39_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB39_76 Depth=1
	movl	$0, -20(%rbp)
.LBB39_78:                              # %for.cond415
                                        #   Parent Loop BB39_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB39_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB39_78 Depth=2
	movl	$0, -24(%rbp)
.LBB39_80:                              # %for.cond421
                                        #   Parent Loop BB39_76 Depth=1
                                        #     Parent Loop BB39_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB39_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB39_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB39_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_80
.LBB39_83:                              # %for.end451
                                        #   in Loop: Header=BB39_78 Depth=2
	jmp	.LBB39_84
.LBB39_84:                              # %for.inc452
                                        #   in Loop: Header=BB39_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_78
.LBB39_85:                              # %for.end454
                                        #   in Loop: Header=BB39_76 Depth=1
	jmp	.LBB39_86
.LBB39_86:                              # %for.inc455
                                        #   in Loop: Header=BB39_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_76
.LBB39_87:                              # %for.end457
	cmpl	$1237004138, -60(%rbp)  # imm = 0x49BB2F6A
	jne	.LBB39_89
.LBB39_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_88
.Lfunc_end39:
	.size	estimate_weighting_factor_P_slice.36, .Lfunc_end39-estimate_weighting_factor_P_slice.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.37
.LCPI40_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.37
	.p2align	4, 0x90
	.type	test_wp_P_slice.37,@function
test_wp_P_slice.37:                     # @test_wp_P_slice.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1556950178, -64(%rbp)  # imm = 0x5CCD2CA2
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB40_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB40_4
.LBB40_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB40_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_7 Depth 2
                                        #       Child Loop BB40_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB40_5 Depth=1
	movl	$0, -24(%rbp)
.LBB40_7:                               # %for.cond9
                                        #   Parent Loop BB40_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB40_7 Depth=2
	movl	$0, -12(%rbp)
.LBB40_9:                               # %for.cond14
                                        #   Parent Loop BB40_5 Depth=1
                                        #     Parent Loop BB40_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB40_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB40_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB40_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_9
.LBB40_12:                              # %for.end
                                        #   in Loop: Header=BB40_7 Depth=2
	jmp	.LBB40_13
.LBB40_13:                              # %for.inc41
                                        #   in Loop: Header=BB40_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB40_7
.LBB40_14:                              # %for.end43
                                        #   in Loop: Header=BB40_5 Depth=1
	jmp	.LBB40_15
.LBB40_15:                              # %for.inc44
                                        #   in Loop: Header=BB40_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_5
.LBB40_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB40_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB40_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	$0, -24(%rbp)
.LBB40_19:                              # %for.cond50
                                        #   Parent Loop BB40_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB40_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB40_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB40_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB40_19
.LBB40_22:                              # %for.end60
                                        #   in Loop: Header=BB40_17 Depth=1
	jmp	.LBB40_23
.LBB40_23:                              # %for.inc61
                                        #   in Loop: Header=BB40_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_17
.LBB40_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB40_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_27 Depth 2
                                        #       Child Loop BB40_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	$0, -12(%rbp)
.LBB40_27:                              # %for.cond69
                                        #   Parent Loop BB40_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB40_29:                              # %for.cond85
                                        #   Parent Loop BB40_25 Depth=1
                                        #     Parent Loop BB40_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB40_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB40_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB40_29
.LBB40_32:                              # %for.end99
                                        #   in Loop: Header=BB40_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB40_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB40_34
	jp	.LBB40_34
	jmp	.LBB40_35
.LBB40_34:                              # %if.then106
                                        #   in Loop: Header=BB40_27 Depth=2
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB40_36
.LBB40_35:                              # %if.else
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB40_36:                              # %if.end
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB40_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB40_39
.LBB40_38:                              # %if.then137
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB40_39:                              # %if.end143
                                        #   in Loop: Header=BB40_27 Depth=2
	jmp	.LBB40_47
.LBB40_40:                              # %if.else144
                                        #   in Loop: Header=BB40_27 Depth=2
	vmovsd	.LCPI40_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB40_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB40_46
.LBB40_42:                              # %cond.false168
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB40_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	$127, %eax
	jmp	.LBB40_45
.LBB40_44:                              # %cond.false177
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB40_45:                              # %cond.end183
                                        #   in Loop: Header=BB40_27 Depth=2
.LBB40_46:                              # %cond.end185
                                        #   in Loop: Header=BB40_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB40_47:                              # %if.end197
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB40_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_27
.LBB40_49:                              # %for.end210
                                        #   in Loop: Header=BB40_25 Depth=1
	jmp	.LBB40_50
.LBB40_50:                              # %for.inc211
                                        #   in Loop: Header=BB40_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_25
.LBB40_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB40_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_54 Depth 2
                                        #       Child Loop BB40_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	$0, -36(%rbp)
.LBB40_54:                              # %for.cond219
                                        #   Parent Loop BB40_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB40_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	$0, -32(%rbp)
.LBB40_56:                              # %for.cond225
                                        #   Parent Loop BB40_52 Depth=1
                                        #     Parent Loop BB40_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB40_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB40_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB40_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB40_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB40_60
.LBB40_59:                              # %if.then246
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB40_63
.LBB40_60:                              # %if.end247
                                        #   in Loop: Header=BB40_56 Depth=3
	jmp	.LBB40_61
.LBB40_61:                              # %for.inc248
                                        #   in Loop: Header=BB40_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB40_56
.LBB40_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB40_54 Depth=2
	jmp	.LBB40_63
.LBB40_63:                              # %for.end250
                                        #   in Loop: Header=BB40_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB40_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_68
.LBB40_65:                              # %if.end254
                                        #   in Loop: Header=BB40_54 Depth=2
	jmp	.LBB40_66
.LBB40_66:                              # %for.inc255
                                        #   in Loop: Header=BB40_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB40_54
.LBB40_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_68
.LBB40_68:                              # %for.end257
                                        #   in Loop: Header=BB40_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB40_70
# %bb.69:                               # %if.then260
	jmp	.LBB40_73
.LBB40_70:                              # %if.end261
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_71
.LBB40_71:                              # %for.inc262
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_52
.LBB40_72:                              # %for.end264.loopexit
	jmp	.LBB40_73
.LBB40_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1556950178, -64(%rbp)  # imm = 0x5CCD2CA2
	jne	.LBB40_75
.LBB40_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_74
.Lfunc_end40:
	.size	test_wp_P_slice.37, .Lfunc_end40-test_wp_P_slice.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.38
.LCPI41_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.38
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.38,@function
estimate_weighting_factor_B_slice.38:   # @estimate_weighting_factor_B_slice.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1828246055, -88(%rbp)  # imm = 0x6CF8D227
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB41_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB41_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB41_4
.LBB41_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB41_4
.LBB41_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB41_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB41_7
.LBB41_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB41_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB41_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_10 Depth 2
                                        #       Child Loop BB41_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB41_8 Depth=1
	movl	$0, -8(%rbp)
.LBB41_10:                              # %for.cond14
                                        #   Parent Loop BB41_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB41_10 Depth=2
	movl	$0, -16(%rbp)
.LBB41_12:                              # %for.cond19
                                        #   Parent Loop BB41_8 Depth=1
                                        #     Parent Loop BB41_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB41_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB41_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB41_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_12
.LBB41_15:                              # %for.end
                                        #   in Loop: Header=BB41_10 Depth=2
	jmp	.LBB41_16
.LBB41_16:                              # %for.inc50
                                        #   in Loop: Header=BB41_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_10
.LBB41_17:                              # %for.end52
                                        #   in Loop: Header=BB41_8 Depth=1
	jmp	.LBB41_18
.LBB41_18:                              # %for.inc53
                                        #   in Loop: Header=BB41_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_8
.LBB41_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB41_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_22 Depth 2
                                        #       Child Loop BB41_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB41_20 Depth=1
	movl	$0, -8(%rbp)
.LBB41_22:                              # %for.cond59
                                        #   Parent Loop BB41_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB41_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB41_29
.LBB41_25:                              # %cond.false70
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB41_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$127, %eax
	jmp	.LBB41_28
.LBB41_27:                              # %cond.false80
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB41_28:                              # %cond.end88
                                        #   in Loop: Header=BB41_22 Depth=2
.LBB41_29:                              # %cond.end90
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB41_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB41_35
.LBB41_31:                              # %cond.false99
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB41_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	$127, %eax
	jmp	.LBB41_34
.LBB41_33:                              # %cond.false107
                                        #   in Loop: Header=BB41_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB41_34:                              # %cond.end113
                                        #   in Loop: Header=BB41_22 Depth=2
.LBB41_35:                              # %cond.end115
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB41_36:                              # %for.cond117
                                        #   Parent Loop BB41_20 Depth=1
                                        #     Parent Loop BB41_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB41_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB41_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB41_49
.LBB41_39:                              # %if.else154
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB41_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB41_45
.LBB41_41:                              # %cond.false160
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB41_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB41_44
.LBB41_43:                              # %cond.false166
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB41_44:                              # %cond.end170
                                        #   in Loop: Header=BB41_36 Depth=3
.LBB41_45:                              # %cond.end172
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB41_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB41_48
.LBB41_47:                              # %if.then198
                                        #   in Loop: Header=BB41_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB41_48:                              # %if.end208
                                        #   in Loop: Header=BB41_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB41_49:                              # %if.end238
                                        #   in Loop: Header=BB41_36 Depth=3
	jmp	.LBB41_50
.LBB41_50:                              # %for.inc239
                                        #   in Loop: Header=BB41_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_36
.LBB41_51:                              # %for.end241
                                        #   in Loop: Header=BB41_22 Depth=2
	jmp	.LBB41_52
.LBB41_52:                              # %for.inc242
                                        #   in Loop: Header=BB41_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_22
.LBB41_53:                              # %for.end244
                                        #   in Loop: Header=BB41_20 Depth=1
	jmp	.LBB41_54
.LBB41_54:                              # %for.inc245
                                        #   in Loop: Header=BB41_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_20
.LBB41_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB41_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB41_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_59 Depth 2
                                        #       Child Loop BB41_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB41_57 Depth=1
	movl	$0, -8(%rbp)
.LBB41_59:                              # %for.cond254
                                        #   Parent Loop BB41_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB41_59 Depth=2
	movl	$0, -20(%rbp)
.LBB41_61:                              # %for.cond257
                                        #   Parent Loop BB41_57 Depth=1
                                        #     Parent Loop BB41_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB41_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB41_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB41_65
.LBB41_64:                              # %cond.false262
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB41_65:                              # %cond.end263
                                        #   in Loop: Header=BB41_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB41_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_61
.LBB41_67:                              # %for.end295
                                        #   in Loop: Header=BB41_59 Depth=2
	jmp	.LBB41_68
.LBB41_68:                              # %for.inc296
                                        #   in Loop: Header=BB41_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_59
.LBB41_69:                              # %for.end298
                                        #   in Loop: Header=BB41_57 Depth=1
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc299
                                        #   in Loop: Header=BB41_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_57
.LBB41_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB41_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	$0, -24(%rbp)
.LBB41_74:                              # %for.cond306
                                        #   Parent Loop BB41_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB41_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB41_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_74
.LBB41_77:                              # %for.end346
                                        #   in Loop: Header=BB41_72 Depth=1
	jmp	.LBB41_78
.LBB41_78:                              # %for.inc347
                                        #   in Loop: Header=BB41_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_72
.LBB41_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB41_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_82 Depth 2
                                        #       Child Loop BB41_84 Depth 3
                                        #       Child Loop BB41_88 Depth 3
                                        #         Child Loop BB41_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	$0, -8(%rbp)
.LBB41_82:                              # %for.cond353
                                        #   Parent Loop BB41_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_84 Depth 3
                                        #       Child Loop BB41_88 Depth 3
                                        #         Child Loop BB41_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	$0, -16(%rbp)
.LBB41_84:                              # %for.cond356
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB41_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB41_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_84
.LBB41_87:                              # %for.end380
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	$0, -16(%rbp)
.LBB41_88:                              # %for.cond381
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB41_88 Depth=3
	movl	$0, -32(%rbp)
.LBB41_90:                              # %for.cond387
                                        #   Parent Loop BB41_80 Depth=1
                                        #     Parent Loop BB41_82 Depth=2
                                        #       Parent Loop BB41_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB41_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB41_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB41_90
.LBB41_93:                              # %for.end421
                                        #   in Loop: Header=BB41_88 Depth=3
	jmp	.LBB41_94
.LBB41_94:                              # %for.inc422
                                        #   in Loop: Header=BB41_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_88
.LBB41_95:                              # %for.end424
                                        #   in Loop: Header=BB41_82 Depth=2
	jmp	.LBB41_96
.LBB41_96:                              # %for.inc425
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_82
.LBB41_97:                              # %for.end427
                                        #   in Loop: Header=BB41_80 Depth=1
	jmp	.LBB41_98
.LBB41_98:                              # %for.inc428
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_80
.LBB41_99:                              # %for.end430
	jmp	.LBB41_189
.LBB41_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB41_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB41_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB41_101 Depth=1
	movl	$0, -8(%rbp)
.LBB41_103:                             # %for.cond436
                                        #   Parent Loop BB41_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB41_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB41_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB41_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_103
.LBB41_106:                             # %for.end447
                                        #   in Loop: Header=BB41_101 Depth=1
	jmp	.LBB41_107
.LBB41_107:                             # %for.inc448
                                        #   in Loop: Header=BB41_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_101
.LBB41_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB41_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_111 Depth 2
                                        #       Child Loop BB41_113 Depth 3
                                        #       Child Loop BB41_123 Depth 3
                                        #       Child Loop BB41_133 Depth 3
                                        #         Child Loop BB41_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB41_109 Depth=1
	movl	$0, -16(%rbp)
.LBB41_111:                             # %for.cond456
                                        #   Parent Loop BB41_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_113 Depth 3
                                        #       Child Loop BB41_123 Depth 3
                                        #       Child Loop BB41_133 Depth 3
                                        #         Child Loop BB41_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB41_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB41_113:                             # %for.cond476
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB41_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB41_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_113
.LBB41_116:                             # %for.end493
                                        #   in Loop: Header=BB41_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB41_117
	jp	.LBB41_117
	jmp	.LBB41_118
.LBB41_117:                             # %if.then500
                                        #   in Loop: Header=BB41_111 Depth=2
	vmovsd	.LCPI41_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_119
.LBB41_118:                             # %if.else511
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB41_119:                             # %if.end513
                                        #   in Loop: Header=BB41_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB41_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB41_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB41_122
.LBB41_121:                             # %if.then519
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB41_122:                             # %if.end521
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB41_123:                             # %for.cond554
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB41_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_130
.LBB41_126:                             # %cond.false571
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_129
.LBB41_128:                             # %cond.false583
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB41_129:                             # %cond.end591
                                        #   in Loop: Header=BB41_123 Depth=3
.LBB41_130:                             # %cond.end593
                                        #   in Loop: Header=BB41_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB41_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_123
.LBB41_132:                             # %for.end600
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	$0, -4(%rbp)
.LBB41_133:                             # %for.cond601
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	$0, -8(%rbp)
.LBB41_135:                             # %for.cond608
                                        #   Parent Loop BB41_109 Depth=1
                                        #     Parent Loop BB41_111 Depth=2
                                        #       Parent Loop BB41_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB41_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB41_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB41_142
.LBB41_138:                             # %cond.false630
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB41_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_141
.LBB41_140:                             # %cond.false648
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB41_141:                             # %cond.end661
                                        #   in Loop: Header=BB41_135 Depth=4
.LBB41_142:                             # %cond.end663
                                        #   in Loop: Header=BB41_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB41_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_135
.LBB41_144:                             # %for.end675
                                        #   in Loop: Header=BB41_133 Depth=3
	jmp	.LBB41_145
.LBB41_145:                             # %for.inc676
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_133
.LBB41_146:                             # %for.end678
                                        #   in Loop: Header=BB41_111 Depth=2
	jmp	.LBB41_147
.LBB41_147:                             # %for.inc679
                                        #   in Loop: Header=BB41_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_111
.LBB41_148:                             # %for.end681
                                        #   in Loop: Header=BB41_109 Depth=1
	jmp	.LBB41_149
.LBB41_149:                             # %for.inc682
                                        #   in Loop: Header=BB41_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_109
.LBB41_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB41_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB41_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_154 Depth 2
                                        #       Child Loop BB41_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB41_152 Depth=1
	movl	$0, -24(%rbp)
.LBB41_154:                             # %for.cond694
                                        #   Parent Loop BB41_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB41_154 Depth=2
	movl	$0, -20(%rbp)
.LBB41_156:                             # %for.cond700
                                        #   Parent Loop BB41_152 Depth=1
                                        #     Parent Loop BB41_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB41_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB41_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_156
.LBB41_159:                             # %for.end730
                                        #   in Loop: Header=BB41_154 Depth=2
	jmp	.LBB41_160
.LBB41_160:                             # %for.inc731
                                        #   in Loop: Header=BB41_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_154
.LBB41_161:                             # %for.end733
                                        #   in Loop: Header=BB41_152 Depth=1
	jmp	.LBB41_162
.LBB41_162:                             # %for.inc734
                                        #   in Loop: Header=BB41_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_152
.LBB41_163:                             # %for.end736
	jmp	.LBB41_173
.LBB41_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB41_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB41_165 Depth=1
	movl	$0, -24(%rbp)
.LBB41_167:                             # %for.cond743
                                        #   Parent Loop BB41_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB41_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB41_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB41_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_167
.LBB41_170:                             # %for.end784
                                        #   in Loop: Header=BB41_165 Depth=1
	jmp	.LBB41_171
.LBB41_171:                             # %for.inc785
                                        #   in Loop: Header=BB41_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_165
.LBB41_172:                             # %for.end787
	jmp	.LBB41_173
.LBB41_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB41_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_176 Depth 2
                                        #       Child Loop BB41_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB41_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	$0, -8(%rbp)
.LBB41_176:                             # %for.cond793
                                        #   Parent Loop BB41_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB41_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB41_176 Depth=2
	movl	$0, -20(%rbp)
.LBB41_178:                             # %for.cond797
                                        #   Parent Loop BB41_174 Depth=1
                                        #     Parent Loop BB41_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB41_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB41_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB41_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB41_182
.LBB41_181:                             # %cond.false804
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB41_182:                             # %cond.end805
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB41_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_178
.LBB41_184:                             # %for.end833
                                        #   in Loop: Header=BB41_176 Depth=2
	jmp	.LBB41_185
.LBB41_185:                             # %for.inc834
                                        #   in Loop: Header=BB41_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_176
.LBB41_186:                             # %for.end836
                                        #   in Loop: Header=BB41_174 Depth=1
	jmp	.LBB41_187
.LBB41_187:                             # %for.inc837
                                        #   in Loop: Header=BB41_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_174
.LBB41_188:                             # %for.end839
	jmp	.LBB41_189
.LBB41_189:                             # %if.end840
	cmpl	$1828246055, -88(%rbp)  # imm = 0x6CF8D227
	jne	.LBB41_191
.LBB41_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_190
.Lfunc_end41:
	.size	estimate_weighting_factor_B_slice.38, .Lfunc_end41-estimate_weighting_factor_B_slice.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.39
.LCPI42_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.39
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.39,@function
estimate_weighting_factor_P_slice.39:   # @estimate_weighting_factor_P_slice.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1209281385, -64(%rbp)  # imm = 0x48142B69
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_4
.LBB42_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_4
.LBB42_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB42_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_7 Depth 2
                                        #       Child Loop BB42_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB42_5 Depth=1
	movl	$0, -16(%rbp)
.LBB42_7:                               # %for.cond12
                                        #   Parent Loop BB42_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB42_7 Depth=2
	movl	$0, -4(%rbp)
.LBB42_9:                               # %for.cond17
                                        #   Parent Loop BB42_5 Depth=1
                                        #     Parent Loop BB42_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB42_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB42_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB42_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_9
.LBB42_12:                              # %for.end
                                        #   in Loop: Header=BB42_7 Depth=2
	jmp	.LBB42_13
.LBB42_13:                              # %for.inc48
                                        #   in Loop: Header=BB42_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_7
.LBB42_14:                              # %for.end50
                                        #   in Loop: Header=BB42_5 Depth=1
	jmp	.LBB42_15
.LBB42_15:                              # %for.inc51
                                        #   in Loop: Header=BB42_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_5
.LBB42_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB42_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB42_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	$0, -16(%rbp)
.LBB42_19:                              # %for.cond57
                                        #   Parent Loop BB42_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB42_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB42_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB42_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_19
.LBB42_22:                              # %for.end67
                                        #   in Loop: Header=BB42_17 Depth=1
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc68
                                        #   in Loop: Header=BB42_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_17
.LBB42_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB42_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_27 Depth 2
                                        #       Child Loop BB42_29 Depth 3
                                        #       Child Loop BB42_48 Depth 3
                                        #       Child Loop BB42_58 Depth 3
                                        #         Child Loop BB42_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	$0, -4(%rbp)
.LBB42_27:                              # %for.cond76
                                        #   Parent Loop BB42_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_29 Depth 3
                                        #       Child Loop BB42_48 Depth 3
                                        #       Child Loop BB42_58 Depth 3
                                        #         Child Loop BB42_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB42_29:                              # %for.cond92
                                        #   Parent Loop BB42_25 Depth=1
                                        #     Parent Loop BB42_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB42_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB42_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_29
.LBB42_32:                              # %for.end106
                                        #   in Loop: Header=BB42_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB42_40
	jp	.LBB42_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB42_34
	jp	.LBB42_34
	jmp	.LBB42_35
.LBB42_34:                              # %if.then114
                                        #   in Loop: Header=BB42_27 Depth=2
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB42_36
.LBB42_35:                              # %if.else
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB42_36:                              # %if.end
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB42_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB42_39
.LBB42_38:                              # %if.then147
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB42_39:                              # %if.end154
                                        #   in Loop: Header=BB42_27 Depth=2
	jmp	.LBB42_47
.LBB42_40:                              # %if.else155
                                        #   in Loop: Header=BB42_27 Depth=2
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB42_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB42_46
.LBB42_42:                              # %cond.false179
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB42_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$127, %eax
	jmp	.LBB42_45
.LBB42_44:                              # %cond.false188
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB42_45:                              # %cond.end194
                                        #   in Loop: Header=BB42_27 Depth=2
.LBB42_46:                              # %cond.end196
                                        #   in Loop: Header=BB42_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB42_47:                              # %if.end209
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB42_48:                              # %for.cond222
                                        #   Parent Loop BB42_25 Depth=1
                                        #     Parent Loop BB42_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB42_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB42_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB42_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB42_55
.LBB42_51:                              # %cond.false248
                                        #   in Loop: Header=BB42_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB42_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_54
.LBB42_53:                              # %cond.false270
                                        #   in Loop: Header=BB42_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB42_54:                              # %cond.end288
                                        #   in Loop: Header=BB42_48 Depth=3
.LBB42_55:                              # %cond.end290
                                        #   in Loop: Header=BB42_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB42_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_48
.LBB42_57:                              # %for.end297
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	$0, -12(%rbp)
.LBB42_58:                              # %for.cond298
                                        #   Parent Loop BB42_25 Depth=1
                                        #     Parent Loop BB42_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB42_58 Depth=3
	movl	$0, -16(%rbp)
.LBB42_60:                              # %for.cond305
                                        #   Parent Loop BB42_25 Depth=1
                                        #     Parent Loop BB42_27 Depth=2
                                        #       Parent Loop BB42_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB42_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB42_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB42_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB42_67
.LBB42_63:                              # %cond.false336
                                        #   in Loop: Header=BB42_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB42_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_66
.LBB42_65:                              # %cond.false364
                                        #   in Loop: Header=BB42_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB42_66:                              # %cond.end387
                                        #   in Loop: Header=BB42_60 Depth=4
.LBB42_67:                              # %cond.end389
                                        #   in Loop: Header=BB42_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB42_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_60
.LBB42_69:                              # %for.end400
                                        #   in Loop: Header=BB42_58 Depth=3
	jmp	.LBB42_70
.LBB42_70:                              # %for.inc401
                                        #   in Loop: Header=BB42_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_58
.LBB42_71:                              # %for.end403
                                        #   in Loop: Header=BB42_27 Depth=2
	jmp	.LBB42_72
.LBB42_72:                              # %for.inc404
                                        #   in Loop: Header=BB42_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_27
.LBB42_73:                              # %for.end406
                                        #   in Loop: Header=BB42_25 Depth=1
	jmp	.LBB42_74
.LBB42_74:                              # %for.inc407
                                        #   in Loop: Header=BB42_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_25
.LBB42_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB42_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_78 Depth 2
                                        #       Child Loop BB42_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB42_76 Depth=1
	movl	$0, -24(%rbp)
.LBB42_78:                              # %for.cond415
                                        #   Parent Loop BB42_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB42_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB42_78 Depth=2
	movl	$0, -20(%rbp)
.LBB42_80:                              # %for.cond421
                                        #   Parent Loop BB42_76 Depth=1
                                        #     Parent Loop BB42_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB42_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB42_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB42_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB42_80
.LBB42_83:                              # %for.end451
                                        #   in Loop: Header=BB42_78 Depth=2
	jmp	.LBB42_84
.LBB42_84:                              # %for.inc452
                                        #   in Loop: Header=BB42_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB42_78
.LBB42_85:                              # %for.end454
                                        #   in Loop: Header=BB42_76 Depth=1
	jmp	.LBB42_86
.LBB42_86:                              # %for.inc455
                                        #   in Loop: Header=BB42_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_76
.LBB42_87:                              # %for.end457
	cmpl	$1209281385, -64(%rbp)  # imm = 0x48142B69
	jne	.LBB42_89
.LBB42_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_88
.Lfunc_end42:
	.size	estimate_weighting_factor_P_slice.39, .Lfunc_end42-estimate_weighting_factor_P_slice.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.40
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.40
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.40,@function
estimate_weighting_factor_B_slice.40:   # @estimate_weighting_factor_B_slice.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$2131725481, -92(%rbp)  # imm = 0x7F0F8CA9
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB43_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB43_7
.LBB43_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB43_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB43_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_10 Depth 2
                                        #       Child Loop BB43_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$0, -8(%rbp)
.LBB43_10:                              # %for.cond14
                                        #   Parent Loop BB43_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB43_10 Depth=2
	movl	$0, -16(%rbp)
.LBB43_12:                              # %for.cond19
                                        #   Parent Loop BB43_8 Depth=1
                                        #     Parent Loop BB43_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB43_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB43_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB43_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_12
.LBB43_15:                              # %for.end
                                        #   in Loop: Header=BB43_10 Depth=2
	jmp	.LBB43_16
.LBB43_16:                              # %for.inc50
                                        #   in Loop: Header=BB43_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_10
.LBB43_17:                              # %for.end52
                                        #   in Loop: Header=BB43_8 Depth=1
	jmp	.LBB43_18
.LBB43_18:                              # %for.inc53
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_8
.LBB43_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB43_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_22 Depth 2
                                        #       Child Loop BB43_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB43_20 Depth=1
	movl	$0, -8(%rbp)
.LBB43_22:                              # %for.cond59
                                        #   Parent Loop BB43_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB43_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB43_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB43_29
.LBB43_25:                              # %cond.false70
                                        #   in Loop: Header=BB43_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB43_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	$127, %eax
	jmp	.LBB43_28
.LBB43_27:                              # %cond.false80
                                        #   in Loop: Header=BB43_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB43_28:                              # %cond.end88
                                        #   in Loop: Header=BB43_22 Depth=2
.LBB43_29:                              # %cond.end90
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB43_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB43_35
.LBB43_31:                              # %cond.false99
                                        #   in Loop: Header=BB43_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB43_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	$127, %eax
	jmp	.LBB43_34
.LBB43_33:                              # %cond.false107
                                        #   in Loop: Header=BB43_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB43_34:                              # %cond.end113
                                        #   in Loop: Header=BB43_22 Depth=2
.LBB43_35:                              # %cond.end115
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB43_36:                              # %for.cond117
                                        #   Parent Loop BB43_20 Depth=1
                                        #     Parent Loop BB43_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB43_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB43_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB43_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB43_49
.LBB43_39:                              # %if.else154
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB43_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB43_45
.LBB43_41:                              # %cond.false160
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB43_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB43_44
.LBB43_43:                              # %cond.false166
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	-56(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB43_44:                              # %cond.end170
                                        #   in Loop: Header=BB43_36 Depth=3
.LBB43_45:                              # %cond.end172
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB43_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB43_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB43_48
.LBB43_47:                              # %if.then198
                                        #   in Loop: Header=BB43_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB43_48:                              # %if.end208
                                        #   in Loop: Header=BB43_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB43_49:                              # %if.end238
                                        #   in Loop: Header=BB43_36 Depth=3
	jmp	.LBB43_50
.LBB43_50:                              # %for.inc239
                                        #   in Loop: Header=BB43_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_36
.LBB43_51:                              # %for.end241
                                        #   in Loop: Header=BB43_22 Depth=2
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc242
                                        #   in Loop: Header=BB43_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_22
.LBB43_53:                              # %for.end244
                                        #   in Loop: Header=BB43_20 Depth=1
	jmp	.LBB43_54
.LBB43_54:                              # %for.inc245
                                        #   in Loop: Header=BB43_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_20
.LBB43_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB43_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB43_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_59 Depth 2
                                        #       Child Loop BB43_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	$0, -8(%rbp)
.LBB43_59:                              # %for.cond254
                                        #   Parent Loop BB43_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB43_59 Depth=2
	movl	$0, -20(%rbp)
.LBB43_61:                              # %for.cond257
                                        #   Parent Loop BB43_57 Depth=1
                                        #     Parent Loop BB43_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB43_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB43_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB43_65
.LBB43_64:                              # %cond.false262
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB43_65:                              # %cond.end263
                                        #   in Loop: Header=BB43_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB43_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_61
.LBB43_67:                              # %for.end295
                                        #   in Loop: Header=BB43_59 Depth=2
	jmp	.LBB43_68
.LBB43_68:                              # %for.inc296
                                        #   in Loop: Header=BB43_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_59
.LBB43_69:                              # %for.end298
                                        #   in Loop: Header=BB43_57 Depth=1
	jmp	.LBB43_70
.LBB43_70:                              # %for.inc299
                                        #   in Loop: Header=BB43_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_57
.LBB43_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB43_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB43_72 Depth=1
	movl	$0, -24(%rbp)
.LBB43_74:                              # %for.cond306
                                        #   Parent Loop BB43_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB43_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB43_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_74
.LBB43_77:                              # %for.end346
                                        #   in Loop: Header=BB43_72 Depth=1
	jmp	.LBB43_78
.LBB43_78:                              # %for.inc347
                                        #   in Loop: Header=BB43_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_72
.LBB43_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB43_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_82 Depth 2
                                        #       Child Loop BB43_84 Depth 3
                                        #       Child Loop BB43_88 Depth 3
                                        #         Child Loop BB43_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	$0, -8(%rbp)
.LBB43_82:                              # %for.cond353
                                        #   Parent Loop BB43_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_84 Depth 3
                                        #       Child Loop BB43_88 Depth 3
                                        #         Child Loop BB43_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	$0, -16(%rbp)
.LBB43_84:                              # %for.cond356
                                        #   Parent Loop BB43_80 Depth=1
                                        #     Parent Loop BB43_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB43_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB43_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_84
.LBB43_87:                              # %for.end380
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	$0, -16(%rbp)
.LBB43_88:                              # %for.cond381
                                        #   Parent Loop BB43_80 Depth=1
                                        #     Parent Loop BB43_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB43_88 Depth=3
	movl	$0, -32(%rbp)
.LBB43_90:                              # %for.cond387
                                        #   Parent Loop BB43_80 Depth=1
                                        #     Parent Loop BB43_82 Depth=2
                                        #       Parent Loop BB43_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB43_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB43_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_90
.LBB43_93:                              # %for.end421
                                        #   in Loop: Header=BB43_88 Depth=3
	jmp	.LBB43_94
.LBB43_94:                              # %for.inc422
                                        #   in Loop: Header=BB43_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_88
.LBB43_95:                              # %for.end424
                                        #   in Loop: Header=BB43_82 Depth=2
	jmp	.LBB43_96
.LBB43_96:                              # %for.inc425
                                        #   in Loop: Header=BB43_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_82
.LBB43_97:                              # %for.end427
                                        #   in Loop: Header=BB43_80 Depth=1
	jmp	.LBB43_98
.LBB43_98:                              # %for.inc428
                                        #   in Loop: Header=BB43_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_80
.LBB43_99:                              # %for.end430
	jmp	.LBB43_189
.LBB43_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB43_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB43_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB43_101 Depth=1
	movl	$0, -8(%rbp)
.LBB43_103:                             # %for.cond436
                                        #   Parent Loop BB43_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB43_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB43_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB43_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_103
.LBB43_106:                             # %for.end447
                                        #   in Loop: Header=BB43_101 Depth=1
	jmp	.LBB43_107
.LBB43_107:                             # %for.inc448
                                        #   in Loop: Header=BB43_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_101
.LBB43_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB43_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_111 Depth 2
                                        #       Child Loop BB43_113 Depth 3
                                        #       Child Loop BB43_123 Depth 3
                                        #       Child Loop BB43_133 Depth 3
                                        #         Child Loop BB43_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB43_109 Depth=1
	movl	$0, -16(%rbp)
.LBB43_111:                             # %for.cond456
                                        #   Parent Loop BB43_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_113 Depth 3
                                        #       Child Loop BB43_123 Depth 3
                                        #       Child Loop BB43_133 Depth 3
                                        #         Child Loop BB43_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB43_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB43_113:                             # %for.cond476
                                        #   Parent Loop BB43_109 Depth=1
                                        #     Parent Loop BB43_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB43_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB43_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_113
.LBB43_116:                             # %for.end493
                                        #   in Loop: Header=BB43_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB43_117
	jp	.LBB43_117
	jmp	.LBB43_118
.LBB43_117:                             # %if.then500
                                        #   in Loop: Header=BB43_111 Depth=2
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB43_119
.LBB43_118:                             # %if.else511
                                        #   in Loop: Header=BB43_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB43_119:                             # %if.end513
                                        #   in Loop: Header=BB43_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB43_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB43_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB43_122
.LBB43_121:                             # %if.then519
                                        #   in Loop: Header=BB43_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB43_122:                             # %if.end521
                                        #   in Loop: Header=BB43_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB43_123:                             # %for.cond554
                                        #   Parent Loop BB43_109 Depth=1
                                        #     Parent Loop BB43_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB43_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB43_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB43_130
.LBB43_126:                             # %cond.false571
                                        #   in Loop: Header=BB43_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB43_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_129
.LBB43_128:                             # %cond.false583
                                        #   in Loop: Header=BB43_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB43_129:                             # %cond.end591
                                        #   in Loop: Header=BB43_123 Depth=3
.LBB43_130:                             # %cond.end593
                                        #   in Loop: Header=BB43_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB43_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_123
.LBB43_132:                             # %for.end600
                                        #   in Loop: Header=BB43_111 Depth=2
	movl	$0, -4(%rbp)
.LBB43_133:                             # %for.cond601
                                        #   Parent Loop BB43_109 Depth=1
                                        #     Parent Loop BB43_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB43_133 Depth=3
	movl	$0, -8(%rbp)
.LBB43_135:                             # %for.cond608
                                        #   Parent Loop BB43_109 Depth=1
                                        #     Parent Loop BB43_111 Depth=2
                                        #       Parent Loop BB43_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB43_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB43_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB43_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB43_142
.LBB43_138:                             # %cond.false630
                                        #   in Loop: Header=BB43_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB43_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB43_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_141
.LBB43_140:                             # %cond.false648
                                        #   in Loop: Header=BB43_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB43_141:                             # %cond.end661
                                        #   in Loop: Header=BB43_135 Depth=4
.LBB43_142:                             # %cond.end663
                                        #   in Loop: Header=BB43_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB43_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_135
.LBB43_144:                             # %for.end675
                                        #   in Loop: Header=BB43_133 Depth=3
	jmp	.LBB43_145
.LBB43_145:                             # %for.inc676
                                        #   in Loop: Header=BB43_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_133
.LBB43_146:                             # %for.end678
                                        #   in Loop: Header=BB43_111 Depth=2
	jmp	.LBB43_147
.LBB43_147:                             # %for.inc679
                                        #   in Loop: Header=BB43_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_111
.LBB43_148:                             # %for.end681
                                        #   in Loop: Header=BB43_109 Depth=1
	jmp	.LBB43_149
.LBB43_149:                             # %for.inc682
                                        #   in Loop: Header=BB43_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_109
.LBB43_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB43_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB43_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_154 Depth 2
                                        #       Child Loop BB43_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB43_152 Depth=1
	movl	$0, -24(%rbp)
.LBB43_154:                             # %for.cond694
                                        #   Parent Loop BB43_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB43_154 Depth=2
	movl	$0, -20(%rbp)
.LBB43_156:                             # %for.cond700
                                        #   Parent Loop BB43_152 Depth=1
                                        #     Parent Loop BB43_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB43_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB43_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_156
.LBB43_159:                             # %for.end730
                                        #   in Loop: Header=BB43_154 Depth=2
	jmp	.LBB43_160
.LBB43_160:                             # %for.inc731
                                        #   in Loop: Header=BB43_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_154
.LBB43_161:                             # %for.end733
                                        #   in Loop: Header=BB43_152 Depth=1
	jmp	.LBB43_162
.LBB43_162:                             # %for.inc734
                                        #   in Loop: Header=BB43_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_152
.LBB43_163:                             # %for.end736
	jmp	.LBB43_173
.LBB43_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB43_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB43_165 Depth=1
	movl	$0, -24(%rbp)
.LBB43_167:                             # %for.cond743
                                        #   Parent Loop BB43_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB43_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB43_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB43_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB43_167
.LBB43_170:                             # %for.end784
                                        #   in Loop: Header=BB43_165 Depth=1
	jmp	.LBB43_171
.LBB43_171:                             # %for.inc785
                                        #   in Loop: Header=BB43_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_165
.LBB43_172:                             # %for.end787
	jmp	.LBB43_173
.LBB43_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB43_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_176 Depth 2
                                        #       Child Loop BB43_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB43_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB43_174 Depth=1
	movl	$0, -8(%rbp)
.LBB43_176:                             # %for.cond793
                                        #   Parent Loop BB43_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB43_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB43_176 Depth=2
	movl	$0, -20(%rbp)
.LBB43_178:                             # %for.cond797
                                        #   Parent Loop BB43_174 Depth=1
                                        #     Parent Loop BB43_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB43_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB43_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB43_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB43_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB43_182
.LBB43_181:                             # %cond.false804
                                        #   in Loop: Header=BB43_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB43_182:                             # %cond.end805
                                        #   in Loop: Header=BB43_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB43_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_178
.LBB43_184:                             # %for.end833
                                        #   in Loop: Header=BB43_176 Depth=2
	jmp	.LBB43_185
.LBB43_185:                             # %for.inc834
                                        #   in Loop: Header=BB43_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_176
.LBB43_186:                             # %for.end836
                                        #   in Loop: Header=BB43_174 Depth=1
	jmp	.LBB43_187
.LBB43_187:                             # %for.inc837
                                        #   in Loop: Header=BB43_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_174
.LBB43_188:                             # %for.end839
	jmp	.LBB43_189
.LBB43_189:                             # %if.end840
	cmpl	$2131725481, -92(%rbp)  # imm = 0x7F0F8CA9
	jne	.LBB43_191
.LBB43_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_190
.Lfunc_end43:
	.size	estimate_weighting_factor_B_slice.40, .Lfunc_end43-estimate_weighting_factor_B_slice.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.41
.LCPI44_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.41
	.p2align	4, 0x90
	.type	test_wp_B_slice.41,@function
test_wp_B_slice.41:                     # @test_wp_B_slice.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$533264066, -76(%rbp)   # imm = 0x1FC8F6C2
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB44_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB44_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB44_4
.LBB44_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB44_4
.LBB44_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB44_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_7 Depth 2
                                        #       Child Loop BB44_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	$0, -24(%rbp)
.LBB44_7:                               # %for.cond9
                                        #   Parent Loop BB44_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB44_7 Depth=2
	movl	$0, -32(%rbp)
.LBB44_9:                               # %for.cond14
                                        #   Parent Loop BB44_5 Depth=1
                                        #     Parent Loop BB44_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB44_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB44_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB44_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_9
.LBB44_12:                              # %for.end
                                        #   in Loop: Header=BB44_7 Depth=2
	jmp	.LBB44_13
.LBB44_13:                              # %for.inc41
                                        #   in Loop: Header=BB44_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_7
.LBB44_14:                              # %for.end43
                                        #   in Loop: Header=BB44_5 Depth=1
	jmp	.LBB44_15
.LBB44_15:                              # %for.inc44
                                        #   in Loop: Header=BB44_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_5
.LBB44_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB44_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_19 Depth 2
                                        #       Child Loop BB44_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	$0, -24(%rbp)
.LBB44_19:                              # %for.cond50
                                        #   Parent Loop BB44_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB44_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB44_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB44_26
.LBB44_22:                              # %cond.false61
                                        #   in Loop: Header=BB44_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB44_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$127, %eax
	jmp	.LBB44_25
.LBB44_24:                              # %cond.false71
                                        #   in Loop: Header=BB44_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB44_25:                              # %cond.end79
                                        #   in Loop: Header=BB44_19 Depth=2
.LBB44_26:                              # %cond.end81
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB44_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB44_32
.LBB44_28:                              # %cond.false90
                                        #   in Loop: Header=BB44_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB44_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	$127, %eax
	jmp	.LBB44_31
.LBB44_30:                              # %cond.false98
                                        #   in Loop: Header=BB44_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB44_31:                              # %cond.end104
                                        #   in Loop: Header=BB44_19 Depth=2
.LBB44_32:                              # %cond.end106
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB44_33:                              # %for.cond108
                                        #   Parent Loop BB44_17 Depth=1
                                        #     Parent Loop BB44_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB44_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB44_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB44_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB44_46
.LBB44_36:                              # %if.else
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB44_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB44_42
.LBB44_38:                              # %cond.false145
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB44_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB44_41
.LBB44_40:                              # %cond.false151
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB44_41:                              # %cond.end155
                                        #   in Loop: Header=BB44_33 Depth=3
.LBB44_42:                              # %cond.end157
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB44_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB44_45
.LBB44_44:                              # %if.then183
                                        #   in Loop: Header=BB44_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB44_45:                              # %if.end
                                        #   in Loop: Header=BB44_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB44_46:                              # %if.end220
                                        #   in Loop: Header=BB44_33 Depth=3
	jmp	.LBB44_47
.LBB44_47:                              # %for.inc221
                                        #   in Loop: Header=BB44_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_33
.LBB44_48:                              # %for.end223
                                        #   in Loop: Header=BB44_19 Depth=2
	jmp	.LBB44_49
.LBB44_49:                              # %for.inc224
                                        #   in Loop: Header=BB44_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_19
.LBB44_50:                              # %for.end226
                                        #   in Loop: Header=BB44_17 Depth=1
	jmp	.LBB44_51
.LBB44_51:                              # %for.inc227
                                        #   in Loop: Header=BB44_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_17
.LBB44_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB44_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB44_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_56 Depth 2
                                        #       Child Loop BB44_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB44_54 Depth=1
	movl	$0, -24(%rbp)
.LBB44_56:                              # %for.cond235
                                        #   Parent Loop BB44_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB44_56 Depth=2
	movl	$0, -20(%rbp)
.LBB44_58:                              # %for.cond238
                                        #   Parent Loop BB44_54 Depth=1
                                        #     Parent Loop BB44_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB44_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB44_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB44_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB44_62
.LBB44_61:                              # %cond.false243
                                        #   in Loop: Header=BB44_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB44_62:                              # %cond.end244
                                        #   in Loop: Header=BB44_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB44_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_58
.LBB44_64:                              # %for.end276
                                        #   in Loop: Header=BB44_56 Depth=2
	jmp	.LBB44_65
.LBB44_65:                              # %for.inc277
                                        #   in Loop: Header=BB44_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_56
.LBB44_66:                              # %for.end279
                                        #   in Loop: Header=BB44_54 Depth=1
	jmp	.LBB44_67
.LBB44_67:                              # %for.inc280
                                        #   in Loop: Header=BB44_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_54
.LBB44_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB44_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB44_69 Depth=1
	movl	$0, -28(%rbp)
.LBB44_71:                              # %for.cond287
                                        #   Parent Loop BB44_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB44_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB44_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_71
.LBB44_74:                              # %for.end327
                                        #   in Loop: Header=BB44_69 Depth=1
	jmp	.LBB44_75
.LBB44_75:                              # %for.inc328
                                        #   in Loop: Header=BB44_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_69
.LBB44_76:                              # %for.end330
	jmp	.LBB44_142
.LBB44_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB44_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB44_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB44_78 Depth=1
	movl	$0, -24(%rbp)
.LBB44_80:                              # %for.cond335
                                        #   Parent Loop BB44_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB44_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB44_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB44_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_80
.LBB44_83:                              # %for.end345
                                        #   in Loop: Header=BB44_78 Depth=1
	jmp	.LBB44_84
.LBB44_84:                              # %for.inc346
                                        #   in Loop: Header=BB44_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_78
.LBB44_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB44_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_88 Depth 2
                                        #       Child Loop BB44_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB44_86 Depth=1
	movl	$0, -32(%rbp)
.LBB44_88:                              # %for.cond354
                                        #   Parent Loop BB44_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB44_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB44_90:                              # %for.cond372
                                        #   Parent Loop BB44_86 Depth=1
                                        #     Parent Loop BB44_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB44_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB44_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_90
.LBB44_93:                              # %for.end389
                                        #   in Loop: Header=BB44_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB44_94
	jp	.LBB44_94
	jmp	.LBB44_95
.LBB44_94:                              # %if.then396
                                        #   in Loop: Header=BB44_88 Depth=2
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB44_96
.LBB44_95:                              # %if.else406
                                        #   in Loop: Header=BB44_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB44_96:                              # %if.end407
                                        #   in Loop: Header=BB44_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB44_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB44_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB44_99
.LBB44_98:                              # %if.then413
                                        #   in Loop: Header=BB44_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB44_99:                              # %if.end414
                                        #   in Loop: Header=BB44_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB44_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_88
.LBB44_101:                             # %for.end447
                                        #   in Loop: Header=BB44_86 Depth=1
	jmp	.LBB44_102
.LBB44_102:                             # %for.inc448
                                        #   in Loop: Header=BB44_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_86
.LBB44_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB44_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB44_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_107 Depth 2
                                        #       Child Loop BB44_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB44_105 Depth=1
	movl	$0, -28(%rbp)
.LBB44_107:                             # %for.cond459
                                        #   Parent Loop BB44_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB44_107 Depth=2
	movl	$0, -20(%rbp)
.LBB44_109:                             # %for.cond465
                                        #   Parent Loop BB44_105 Depth=1
                                        #     Parent Loop BB44_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB44_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB44_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_109
.LBB44_112:                             # %for.end495
                                        #   in Loop: Header=BB44_107 Depth=2
	jmp	.LBB44_113
.LBB44_113:                             # %for.inc496
                                        #   in Loop: Header=BB44_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_107
.LBB44_114:                             # %for.end498
                                        #   in Loop: Header=BB44_105 Depth=1
	jmp	.LBB44_115
.LBB44_115:                             # %for.inc499
                                        #   in Loop: Header=BB44_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_105
.LBB44_116:                             # %for.end501
	jmp	.LBB44_126
.LBB44_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB44_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB44_118 Depth=1
	movl	$0, -28(%rbp)
.LBB44_120:                             # %for.cond508
                                        #   Parent Loop BB44_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB44_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB44_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_120
.LBB44_123:                             # %for.end549
                                        #   in Loop: Header=BB44_118 Depth=1
	jmp	.LBB44_124
.LBB44_124:                             # %for.inc550
                                        #   in Loop: Header=BB44_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_118
.LBB44_125:                             # %for.end552
	jmp	.LBB44_126
.LBB44_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB44_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_129 Depth 2
                                        #       Child Loop BB44_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB44_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB44_127 Depth=1
	movl	$0, -24(%rbp)
.LBB44_129:                             # %for.cond558
                                        #   Parent Loop BB44_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB44_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB44_129 Depth=2
	movl	$0, -20(%rbp)
.LBB44_131:                             # %for.cond562
                                        #   Parent Loop BB44_127 Depth=1
                                        #     Parent Loop BB44_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB44_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB44_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB44_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB44_135
.LBB44_134:                             # %cond.false569
                                        #   in Loop: Header=BB44_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB44_135:                             # %cond.end570
                                        #   in Loop: Header=BB44_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB44_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_131
.LBB44_137:                             # %for.end598
                                        #   in Loop: Header=BB44_129 Depth=2
	jmp	.LBB44_138
.LBB44_138:                             # %for.inc599
                                        #   in Loop: Header=BB44_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB44_129
.LBB44_139:                             # %for.end601
                                        #   in Loop: Header=BB44_127 Depth=1
	jmp	.LBB44_140
.LBB44_140:                             # %for.inc602
                                        #   in Loop: Header=BB44_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_127
.LBB44_141:                             # %for.end604
	jmp	.LBB44_142
.LBB44_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB44_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_145 Depth 2
                                        #       Child Loop BB44_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB44_143 Depth=1
	movl	$0, -28(%rbp)
.LBB44_145:                             # %for.cond611
                                        #   Parent Loop BB44_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB44_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB44_145 Depth=2
	movl	$0, -20(%rbp)
.LBB44_147:                             # %for.cond617
                                        #   Parent Loop BB44_143 Depth=1
                                        #     Parent Loop BB44_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB44_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB44_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB44_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB44_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB44_151
.LBB44_150:                             # %if.then638
                                        #   in Loop: Header=BB44_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB44_154
.LBB44_151:                             # %if.end639
                                        #   in Loop: Header=BB44_147 Depth=3
	jmp	.LBB44_152
.LBB44_152:                             # %for.inc640
                                        #   in Loop: Header=BB44_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_147
.LBB44_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB44_145 Depth=2
	jmp	.LBB44_154
.LBB44_154:                             # %for.end642
                                        #   in Loop: Header=BB44_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB44_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB44_143 Depth=1
	jmp	.LBB44_159
.LBB44_156:                             # %if.end646
                                        #   in Loop: Header=BB44_145 Depth=2
	jmp	.LBB44_157
.LBB44_157:                             # %for.inc647
                                        #   in Loop: Header=BB44_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_145
.LBB44_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB44_143 Depth=1
	jmp	.LBB44_159
.LBB44_159:                             # %for.end649
                                        #   in Loop: Header=BB44_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB44_161
# %bb.160:                              # %if.then652
	jmp	.LBB44_164
.LBB44_161:                             # %if.end653
                                        #   in Loop: Header=BB44_143 Depth=1
	jmp	.LBB44_162
.LBB44_162:                             # %for.inc654
                                        #   in Loop: Header=BB44_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_143
.LBB44_163:                             # %for.end656.loopexit
	jmp	.LBB44_164
.LBB44_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$533264066, -76(%rbp)   # imm = 0x1FC8F6C2
	jne	.LBB44_166
.LBB44_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_165
.Lfunc_end44:
	.size	test_wp_B_slice.41, .Lfunc_end44-test_wp_B_slice.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.42
.LCPI45_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.42
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.42,@function
estimate_weighting_factor_B_slice.42:   # @estimate_weighting_factor_B_slice.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$218309566, -88(%rbp)   # imm = 0xD0323BE
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_4
.LBB45_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_4
.LBB45_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB45_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB45_7
.LBB45_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB45_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB45_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_10 Depth 2
                                        #       Child Loop BB45_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB45_8 Depth=1
	movl	$0, -8(%rbp)
.LBB45_10:                              # %for.cond14
                                        #   Parent Loop BB45_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB45_10 Depth=2
	movl	$0, -16(%rbp)
.LBB45_12:                              # %for.cond19
                                        #   Parent Loop BB45_8 Depth=1
                                        #     Parent Loop BB45_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB45_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB45_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB45_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_12
.LBB45_15:                              # %for.end
                                        #   in Loop: Header=BB45_10 Depth=2
	jmp	.LBB45_16
.LBB45_16:                              # %for.inc50
                                        #   in Loop: Header=BB45_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_10
.LBB45_17:                              # %for.end52
                                        #   in Loop: Header=BB45_8 Depth=1
	jmp	.LBB45_18
.LBB45_18:                              # %for.inc53
                                        #   in Loop: Header=BB45_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_8
.LBB45_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB45_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_22 Depth 2
                                        #       Child Loop BB45_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB45_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	$0, -8(%rbp)
.LBB45_22:                              # %for.cond59
                                        #   Parent Loop BB45_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB45_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB45_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB45_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB45_29
.LBB45_25:                              # %cond.false70
                                        #   in Loop: Header=BB45_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB45_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$127, %eax
	jmp	.LBB45_28
.LBB45_27:                              # %cond.false80
                                        #   in Loop: Header=BB45_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB45_28:                              # %cond.end88
                                        #   in Loop: Header=BB45_22 Depth=2
.LBB45_29:                              # %cond.end90
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB45_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB45_35
.LBB45_31:                              # %cond.false99
                                        #   in Loop: Header=BB45_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB45_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	$127, %eax
	jmp	.LBB45_34
.LBB45_33:                              # %cond.false107
                                        #   in Loop: Header=BB45_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB45_34:                              # %cond.end113
                                        #   in Loop: Header=BB45_22 Depth=2
.LBB45_35:                              # %cond.end115
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB45_36:                              # %for.cond117
                                        #   Parent Loop BB45_20 Depth=1
                                        #     Parent Loop BB45_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB45_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB45_36 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB45_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB45_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB45_49
.LBB45_39:                              # %if.else154
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB45_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB45_45
.LBB45_41:                              # %cond.false160
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB45_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB45_44
.LBB45_43:                              # %cond.false166
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB45_44:                              # %cond.end170
                                        #   in Loop: Header=BB45_36 Depth=3
.LBB45_45:                              # %cond.end172
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB45_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB45_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB45_48
.LBB45_47:                              # %if.then198
                                        #   in Loop: Header=BB45_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB45_48:                              # %if.end208
                                        #   in Loop: Header=BB45_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB45_49:                              # %if.end238
                                        #   in Loop: Header=BB45_36 Depth=3
	jmp	.LBB45_50
.LBB45_50:                              # %for.inc239
                                        #   in Loop: Header=BB45_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_36
.LBB45_51:                              # %for.end241
                                        #   in Loop: Header=BB45_22 Depth=2
	jmp	.LBB45_52
.LBB45_52:                              # %for.inc242
                                        #   in Loop: Header=BB45_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_22
.LBB45_53:                              # %for.end244
                                        #   in Loop: Header=BB45_20 Depth=1
	jmp	.LBB45_54
.LBB45_54:                              # %for.inc245
                                        #   in Loop: Header=BB45_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_20
.LBB45_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB45_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB45_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_59 Depth 2
                                        #       Child Loop BB45_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB45_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB45_57 Depth=1
	movl	$0, -8(%rbp)
.LBB45_59:                              # %for.cond254
                                        #   Parent Loop BB45_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB45_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB45_59 Depth=2
	movl	$0, -20(%rbp)
.LBB45_61:                              # %for.cond257
                                        #   Parent Loop BB45_57 Depth=1
                                        #     Parent Loop BB45_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB45_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB45_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB45_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB45_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB45_65
.LBB45_64:                              # %cond.false262
                                        #   in Loop: Header=BB45_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB45_65:                              # %cond.end263
                                        #   in Loop: Header=BB45_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB45_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_61
.LBB45_67:                              # %for.end295
                                        #   in Loop: Header=BB45_59 Depth=2
	jmp	.LBB45_68
.LBB45_68:                              # %for.inc296
                                        #   in Loop: Header=BB45_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_59
.LBB45_69:                              # %for.end298
                                        #   in Loop: Header=BB45_57 Depth=1
	jmp	.LBB45_70
.LBB45_70:                              # %for.inc299
                                        #   in Loop: Header=BB45_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_57
.LBB45_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB45_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB45_72 Depth=1
	movl	$0, -24(%rbp)
.LBB45_74:                              # %for.cond306
                                        #   Parent Loop BB45_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB45_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB45_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_74
.LBB45_77:                              # %for.end346
                                        #   in Loop: Header=BB45_72 Depth=1
	jmp	.LBB45_78
.LBB45_78:                              # %for.inc347
                                        #   in Loop: Header=BB45_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_72
.LBB45_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB45_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_82 Depth 2
                                        #       Child Loop BB45_84 Depth 3
                                        #       Child Loop BB45_88 Depth 3
                                        #         Child Loop BB45_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB45_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB45_80 Depth=1
	movl	$0, -8(%rbp)
.LBB45_82:                              # %for.cond353
                                        #   Parent Loop BB45_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_84 Depth 3
                                        #       Child Loop BB45_88 Depth 3
                                        #         Child Loop BB45_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB45_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB45_82 Depth=2
	movl	$0, -16(%rbp)
.LBB45_84:                              # %for.cond356
                                        #   Parent Loop BB45_80 Depth=1
                                        #     Parent Loop BB45_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB45_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB45_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_84
.LBB45_87:                              # %for.end380
                                        #   in Loop: Header=BB45_82 Depth=2
	movl	$0, -16(%rbp)
.LBB45_88:                              # %for.cond381
                                        #   Parent Loop BB45_80 Depth=1
                                        #     Parent Loop BB45_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB45_88 Depth=3
	movl	$0, -32(%rbp)
.LBB45_90:                              # %for.cond387
                                        #   Parent Loop BB45_80 Depth=1
                                        #     Parent Loop BB45_82 Depth=2
                                        #       Parent Loop BB45_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB45_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB45_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_90
.LBB45_93:                              # %for.end421
                                        #   in Loop: Header=BB45_88 Depth=3
	jmp	.LBB45_94
.LBB45_94:                              # %for.inc422
                                        #   in Loop: Header=BB45_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_88
.LBB45_95:                              # %for.end424
                                        #   in Loop: Header=BB45_82 Depth=2
	jmp	.LBB45_96
.LBB45_96:                              # %for.inc425
                                        #   in Loop: Header=BB45_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_82
.LBB45_97:                              # %for.end427
                                        #   in Loop: Header=BB45_80 Depth=1
	jmp	.LBB45_98
.LBB45_98:                              # %for.inc428
                                        #   in Loop: Header=BB45_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_80
.LBB45_99:                              # %for.end430
	jmp	.LBB45_189
.LBB45_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB45_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB45_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB45_101 Depth=1
	movl	$0, -8(%rbp)
.LBB45_103:                             # %for.cond436
                                        #   Parent Loop BB45_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB45_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB45_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB45_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_103
.LBB45_106:                             # %for.end447
                                        #   in Loop: Header=BB45_101 Depth=1
	jmp	.LBB45_107
.LBB45_107:                             # %for.inc448
                                        #   in Loop: Header=BB45_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_101
.LBB45_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB45_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_111 Depth 2
                                        #       Child Loop BB45_113 Depth 3
                                        #       Child Loop BB45_123 Depth 3
                                        #       Child Loop BB45_133 Depth 3
                                        #         Child Loop BB45_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB45_109 Depth=1
	movl	$0, -16(%rbp)
.LBB45_111:                             # %for.cond456
                                        #   Parent Loop BB45_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_113 Depth 3
                                        #       Child Loop BB45_123 Depth 3
                                        #       Child Loop BB45_133 Depth 3
                                        #         Child Loop BB45_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB45_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB45_113:                             # %for.cond476
                                        #   Parent Loop BB45_109 Depth=1
                                        #     Parent Loop BB45_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB45_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB45_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_113
.LBB45_116:                             # %for.end493
                                        #   in Loop: Header=BB45_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB45_117
	jp	.LBB45_117
	jmp	.LBB45_118
.LBB45_117:                             # %if.then500
                                        #   in Loop: Header=BB45_111 Depth=2
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_119
.LBB45_118:                             # %if.else511
                                        #   in Loop: Header=BB45_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB45_119:                             # %if.end513
                                        #   in Loop: Header=BB45_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB45_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB45_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB45_122
.LBB45_121:                             # %if.then519
                                        #   in Loop: Header=BB45_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB45_122:                             # %if.end521
                                        #   in Loop: Header=BB45_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB45_123:                             # %for.cond554
                                        #   Parent Loop BB45_109 Depth=1
                                        #     Parent Loop BB45_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB45_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB45_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB45_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB45_130
.LBB45_126:                             # %cond.false571
                                        #   in Loop: Header=BB45_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB45_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_129
.LBB45_128:                             # %cond.false583
                                        #   in Loop: Header=BB45_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB45_129:                             # %cond.end591
                                        #   in Loop: Header=BB45_123 Depth=3
.LBB45_130:                             # %cond.end593
                                        #   in Loop: Header=BB45_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB45_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_123
.LBB45_132:                             # %for.end600
                                        #   in Loop: Header=BB45_111 Depth=2
	movl	$0, -4(%rbp)
.LBB45_133:                             # %for.cond601
                                        #   Parent Loop BB45_109 Depth=1
                                        #     Parent Loop BB45_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB45_133 Depth=3
	movl	$0, -8(%rbp)
.LBB45_135:                             # %for.cond608
                                        #   Parent Loop BB45_109 Depth=1
                                        #     Parent Loop BB45_111 Depth=2
                                        #       Parent Loop BB45_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB45_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB45_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB45_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB45_142
.LBB45_138:                             # %cond.false630
                                        #   in Loop: Header=BB45_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB45_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB45_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB45_141
.LBB45_140:                             # %cond.false648
                                        #   in Loop: Header=BB45_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB45_141:                             # %cond.end661
                                        #   in Loop: Header=BB45_135 Depth=4
.LBB45_142:                             # %cond.end663
                                        #   in Loop: Header=BB45_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB45_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_135
.LBB45_144:                             # %for.end675
                                        #   in Loop: Header=BB45_133 Depth=3
	jmp	.LBB45_145
.LBB45_145:                             # %for.inc676
                                        #   in Loop: Header=BB45_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_133
.LBB45_146:                             # %for.end678
                                        #   in Loop: Header=BB45_111 Depth=2
	jmp	.LBB45_147
.LBB45_147:                             # %for.inc679
                                        #   in Loop: Header=BB45_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_111
.LBB45_148:                             # %for.end681
                                        #   in Loop: Header=BB45_109 Depth=1
	jmp	.LBB45_149
.LBB45_149:                             # %for.inc682
                                        #   in Loop: Header=BB45_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_109
.LBB45_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB45_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB45_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_154 Depth 2
                                        #       Child Loop BB45_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB45_152 Depth=1
	movl	$0, -24(%rbp)
.LBB45_154:                             # %for.cond694
                                        #   Parent Loop BB45_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB45_154 Depth=2
	movl	$0, -20(%rbp)
.LBB45_156:                             # %for.cond700
                                        #   Parent Loop BB45_152 Depth=1
                                        #     Parent Loop BB45_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB45_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB45_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB45_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_156
.LBB45_159:                             # %for.end730
                                        #   in Loop: Header=BB45_154 Depth=2
	jmp	.LBB45_160
.LBB45_160:                             # %for.inc731
                                        #   in Loop: Header=BB45_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_154
.LBB45_161:                             # %for.end733
                                        #   in Loop: Header=BB45_152 Depth=1
	jmp	.LBB45_162
.LBB45_162:                             # %for.inc734
                                        #   in Loop: Header=BB45_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_152
.LBB45_163:                             # %for.end736
	jmp	.LBB45_173
.LBB45_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB45_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB45_165 Depth=1
	movl	$0, -24(%rbp)
.LBB45_167:                             # %for.cond743
                                        #   Parent Loop BB45_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB45_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB45_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB45_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB45_167
.LBB45_170:                             # %for.end784
                                        #   in Loop: Header=BB45_165 Depth=1
	jmp	.LBB45_171
.LBB45_171:                             # %for.inc785
                                        #   in Loop: Header=BB45_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_165
.LBB45_172:                             # %for.end787
	jmp	.LBB45_173
.LBB45_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB45_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_176 Depth 2
                                        #       Child Loop BB45_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB45_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB45_174 Depth=1
	movl	$0, -8(%rbp)
.LBB45_176:                             # %for.cond793
                                        #   Parent Loop BB45_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB45_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB45_176 Depth=2
	movl	$0, -20(%rbp)
.LBB45_178:                             # %for.cond797
                                        #   Parent Loop BB45_174 Depth=1
                                        #     Parent Loop BB45_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB45_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB45_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB45_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB45_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB45_182
.LBB45_181:                             # %cond.false804
                                        #   in Loop: Header=BB45_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB45_182:                             # %cond.end805
                                        #   in Loop: Header=BB45_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB45_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_178
.LBB45_184:                             # %for.end833
                                        #   in Loop: Header=BB45_176 Depth=2
	jmp	.LBB45_185
.LBB45_185:                             # %for.inc834
                                        #   in Loop: Header=BB45_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_176
.LBB45_186:                             # %for.end836
                                        #   in Loop: Header=BB45_174 Depth=1
	jmp	.LBB45_187
.LBB45_187:                             # %for.inc837
                                        #   in Loop: Header=BB45_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_174
.LBB45_188:                             # %for.end839
	jmp	.LBB45_189
.LBB45_189:                             # %if.end840
	cmpl	$218309566, -88(%rbp)   # imm = 0xD0323BE
	jne	.LBB45_191
.LBB45_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_190
.Lfunc_end45:
	.size	estimate_weighting_factor_B_slice.42, .Lfunc_end45-estimate_weighting_factor_B_slice.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.43
.LCPI46_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.43
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.43,@function
estimate_weighting_factor_B_slice.43:   # @estimate_weighting_factor_B_slice.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1852870688, -84(%rbp)  # imm = 0x6E709020
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB46_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB46_7
.LBB46_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB46_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB46_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_10 Depth 2
                                        #       Child Loop BB46_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	$0, -8(%rbp)
.LBB46_10:                              # %for.cond14
                                        #   Parent Loop BB46_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB46_10 Depth=2
	movl	$0, -16(%rbp)
.LBB46_12:                              # %for.cond19
                                        #   Parent Loop BB46_8 Depth=1
                                        #     Parent Loop BB46_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB46_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB46_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB46_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_12
.LBB46_15:                              # %for.end
                                        #   in Loop: Header=BB46_10 Depth=2
	jmp	.LBB46_16
.LBB46_16:                              # %for.inc50
                                        #   in Loop: Header=BB46_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_10
.LBB46_17:                              # %for.end52
                                        #   in Loop: Header=BB46_8 Depth=1
	jmp	.LBB46_18
.LBB46_18:                              # %for.inc53
                                        #   in Loop: Header=BB46_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_8
.LBB46_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB46_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_22 Depth 2
                                        #       Child Loop BB46_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB46_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB46_20 Depth=1
	movl	$0, -8(%rbp)
.LBB46_22:                              # %for.cond59
                                        #   Parent Loop BB46_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB46_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB46_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB46_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB46_29
.LBB46_25:                              # %cond.false70
                                        #   in Loop: Header=BB46_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB46_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	$127, %eax
	jmp	.LBB46_28
.LBB46_27:                              # %cond.false80
                                        #   in Loop: Header=BB46_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB46_28:                              # %cond.end88
                                        #   in Loop: Header=BB46_22 Depth=2
.LBB46_29:                              # %cond.end90
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB46_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB46_35
.LBB46_31:                              # %cond.false99
                                        #   in Loop: Header=BB46_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB46_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	$127, %eax
	jmp	.LBB46_34
.LBB46_33:                              # %cond.false107
                                        #   in Loop: Header=BB46_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB46_34:                              # %cond.end113
                                        #   in Loop: Header=BB46_22 Depth=2
.LBB46_35:                              # %cond.end115
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB46_36:                              # %for.cond117
                                        #   Parent Loop BB46_20 Depth=1
                                        #     Parent Loop BB46_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB46_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB46_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB46_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB46_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB46_49
.LBB46_39:                              # %if.else154
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB46_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB46_45
.LBB46_41:                              # %cond.false160
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB46_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB46_44
.LBB46_43:                              # %cond.false166
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB46_44:                              # %cond.end170
                                        #   in Loop: Header=BB46_36 Depth=3
.LBB46_45:                              # %cond.end172
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB46_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB46_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB46_48
.LBB46_47:                              # %if.then198
                                        #   in Loop: Header=BB46_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB46_48:                              # %if.end208
                                        #   in Loop: Header=BB46_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB46_49:                              # %if.end238
                                        #   in Loop: Header=BB46_36 Depth=3
	jmp	.LBB46_50
.LBB46_50:                              # %for.inc239
                                        #   in Loop: Header=BB46_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_36
.LBB46_51:                              # %for.end241
                                        #   in Loop: Header=BB46_22 Depth=2
	jmp	.LBB46_52
.LBB46_52:                              # %for.inc242
                                        #   in Loop: Header=BB46_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_22
.LBB46_53:                              # %for.end244
                                        #   in Loop: Header=BB46_20 Depth=1
	jmp	.LBB46_54
.LBB46_54:                              # %for.inc245
                                        #   in Loop: Header=BB46_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_20
.LBB46_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB46_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB46_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_59 Depth 2
                                        #       Child Loop BB46_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB46_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	$0, -8(%rbp)
.LBB46_59:                              # %for.cond254
                                        #   Parent Loop BB46_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB46_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB46_59 Depth=2
	movl	$0, -20(%rbp)
.LBB46_61:                              # %for.cond257
                                        #   Parent Loop BB46_57 Depth=1
                                        #     Parent Loop BB46_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB46_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB46_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB46_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB46_65
.LBB46_64:                              # %cond.false262
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB46_65:                              # %cond.end263
                                        #   in Loop: Header=BB46_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB46_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_61
.LBB46_67:                              # %for.end295
                                        #   in Loop: Header=BB46_59 Depth=2
	jmp	.LBB46_68
.LBB46_68:                              # %for.inc296
                                        #   in Loop: Header=BB46_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_59
.LBB46_69:                              # %for.end298
                                        #   in Loop: Header=BB46_57 Depth=1
	jmp	.LBB46_70
.LBB46_70:                              # %for.inc299
                                        #   in Loop: Header=BB46_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_57
.LBB46_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB46_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB46_72 Depth=1
	movl	$0, -24(%rbp)
.LBB46_74:                              # %for.cond306
                                        #   Parent Loop BB46_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB46_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB46_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_74
.LBB46_77:                              # %for.end346
                                        #   in Loop: Header=BB46_72 Depth=1
	jmp	.LBB46_78
.LBB46_78:                              # %for.inc347
                                        #   in Loop: Header=BB46_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_72
.LBB46_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB46_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_82 Depth 2
                                        #       Child Loop BB46_84 Depth 3
                                        #       Child Loop BB46_88 Depth 3
                                        #         Child Loop BB46_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB46_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	$0, -8(%rbp)
.LBB46_82:                              # %for.cond353
                                        #   Parent Loop BB46_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_84 Depth 3
                                        #       Child Loop BB46_88 Depth 3
                                        #         Child Loop BB46_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB46_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	$0, -16(%rbp)
.LBB46_84:                              # %for.cond356
                                        #   Parent Loop BB46_80 Depth=1
                                        #     Parent Loop BB46_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB46_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB46_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_84
.LBB46_87:                              # %for.end380
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	$0, -16(%rbp)
.LBB46_88:                              # %for.cond381
                                        #   Parent Loop BB46_80 Depth=1
                                        #     Parent Loop BB46_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB46_88 Depth=3
	movl	$0, -32(%rbp)
.LBB46_90:                              # %for.cond387
                                        #   Parent Loop BB46_80 Depth=1
                                        #     Parent Loop BB46_82 Depth=2
                                        #       Parent Loop BB46_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB46_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB46_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_90
.LBB46_93:                              # %for.end421
                                        #   in Loop: Header=BB46_88 Depth=3
	jmp	.LBB46_94
.LBB46_94:                              # %for.inc422
                                        #   in Loop: Header=BB46_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_88
.LBB46_95:                              # %for.end424
                                        #   in Loop: Header=BB46_82 Depth=2
	jmp	.LBB46_96
.LBB46_96:                              # %for.inc425
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_82
.LBB46_97:                              # %for.end427
                                        #   in Loop: Header=BB46_80 Depth=1
	jmp	.LBB46_98
.LBB46_98:                              # %for.inc428
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_80
.LBB46_99:                              # %for.end430
	jmp	.LBB46_189
.LBB46_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB46_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB46_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB46_101 Depth=1
	movl	$0, -8(%rbp)
.LBB46_103:                             # %for.cond436
                                        #   Parent Loop BB46_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB46_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB46_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB46_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_103
.LBB46_106:                             # %for.end447
                                        #   in Loop: Header=BB46_101 Depth=1
	jmp	.LBB46_107
.LBB46_107:                             # %for.inc448
                                        #   in Loop: Header=BB46_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_101
.LBB46_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB46_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_111 Depth 2
                                        #       Child Loop BB46_113 Depth 3
                                        #       Child Loop BB46_123 Depth 3
                                        #       Child Loop BB46_133 Depth 3
                                        #         Child Loop BB46_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB46_109 Depth=1
	movl	$0, -16(%rbp)
.LBB46_111:                             # %for.cond456
                                        #   Parent Loop BB46_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_113 Depth 3
                                        #       Child Loop BB46_123 Depth 3
                                        #       Child Loop BB46_133 Depth 3
                                        #         Child Loop BB46_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB46_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB46_113:                             # %for.cond476
                                        #   Parent Loop BB46_109 Depth=1
                                        #     Parent Loop BB46_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB46_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB46_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_113
.LBB46_116:                             # %for.end493
                                        #   in Loop: Header=BB46_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB46_117
	jp	.LBB46_117
	jmp	.LBB46_118
.LBB46_117:                             # %if.then500
                                        #   in Loop: Header=BB46_111 Depth=2
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB46_119
.LBB46_118:                             # %if.else511
                                        #   in Loop: Header=BB46_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB46_119:                             # %if.end513
                                        #   in Loop: Header=BB46_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB46_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB46_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB46_122
.LBB46_121:                             # %if.then519
                                        #   in Loop: Header=BB46_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB46_122:                             # %if.end521
                                        #   in Loop: Header=BB46_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB46_123:                             # %for.cond554
                                        #   Parent Loop BB46_109 Depth=1
                                        #     Parent Loop BB46_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB46_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB46_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB46_130
.LBB46_126:                             # %cond.false571
                                        #   in Loop: Header=BB46_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB46_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB46_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_129
.LBB46_128:                             # %cond.false583
                                        #   in Loop: Header=BB46_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB46_129:                             # %cond.end591
                                        #   in Loop: Header=BB46_123 Depth=3
.LBB46_130:                             # %cond.end593
                                        #   in Loop: Header=BB46_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB46_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_123
.LBB46_132:                             # %for.end600
                                        #   in Loop: Header=BB46_111 Depth=2
	movl	$0, -4(%rbp)
.LBB46_133:                             # %for.cond601
                                        #   Parent Loop BB46_109 Depth=1
                                        #     Parent Loop BB46_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB46_133 Depth=3
	movl	$0, -8(%rbp)
.LBB46_135:                             # %for.cond608
                                        #   Parent Loop BB46_109 Depth=1
                                        #     Parent Loop BB46_111 Depth=2
                                        #       Parent Loop BB46_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB46_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB46_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB46_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB46_142
.LBB46_138:                             # %cond.false630
                                        #   in Loop: Header=BB46_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB46_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB46_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB46_141
.LBB46_140:                             # %cond.false648
                                        #   in Loop: Header=BB46_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB46_141:                             # %cond.end661
                                        #   in Loop: Header=BB46_135 Depth=4
.LBB46_142:                             # %cond.end663
                                        #   in Loop: Header=BB46_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB46_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_135
.LBB46_144:                             # %for.end675
                                        #   in Loop: Header=BB46_133 Depth=3
	jmp	.LBB46_145
.LBB46_145:                             # %for.inc676
                                        #   in Loop: Header=BB46_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_133
.LBB46_146:                             # %for.end678
                                        #   in Loop: Header=BB46_111 Depth=2
	jmp	.LBB46_147
.LBB46_147:                             # %for.inc679
                                        #   in Loop: Header=BB46_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_111
.LBB46_148:                             # %for.end681
                                        #   in Loop: Header=BB46_109 Depth=1
	jmp	.LBB46_149
.LBB46_149:                             # %for.inc682
                                        #   in Loop: Header=BB46_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_109
.LBB46_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB46_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB46_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_154 Depth 2
                                        #       Child Loop BB46_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB46_152 Depth=1
	movl	$0, -24(%rbp)
.LBB46_154:                             # %for.cond694
                                        #   Parent Loop BB46_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB46_154 Depth=2
	movl	$0, -20(%rbp)
.LBB46_156:                             # %for.cond700
                                        #   Parent Loop BB46_152 Depth=1
                                        #     Parent Loop BB46_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB46_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB46_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB46_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_156
.LBB46_159:                             # %for.end730
                                        #   in Loop: Header=BB46_154 Depth=2
	jmp	.LBB46_160
.LBB46_160:                             # %for.inc731
                                        #   in Loop: Header=BB46_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_154
.LBB46_161:                             # %for.end733
                                        #   in Loop: Header=BB46_152 Depth=1
	jmp	.LBB46_162
.LBB46_162:                             # %for.inc734
                                        #   in Loop: Header=BB46_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_152
.LBB46_163:                             # %for.end736
	jmp	.LBB46_173
.LBB46_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB46_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB46_165 Depth=1
	movl	$0, -24(%rbp)
.LBB46_167:                             # %for.cond743
                                        #   Parent Loop BB46_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB46_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB46_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB46_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_167
.LBB46_170:                             # %for.end784
                                        #   in Loop: Header=BB46_165 Depth=1
	jmp	.LBB46_171
.LBB46_171:                             # %for.inc785
                                        #   in Loop: Header=BB46_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_165
.LBB46_172:                             # %for.end787
	jmp	.LBB46_173
.LBB46_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB46_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_176 Depth 2
                                        #       Child Loop BB46_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB46_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB46_174 Depth=1
	movl	$0, -8(%rbp)
.LBB46_176:                             # %for.cond793
                                        #   Parent Loop BB46_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB46_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB46_176 Depth=2
	movl	$0, -20(%rbp)
.LBB46_178:                             # %for.cond797
                                        #   Parent Loop BB46_174 Depth=1
                                        #     Parent Loop BB46_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB46_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB46_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB46_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB46_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB46_182
.LBB46_181:                             # %cond.false804
                                        #   in Loop: Header=BB46_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB46_182:                             # %cond.end805
                                        #   in Loop: Header=BB46_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB46_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_178
.LBB46_184:                             # %for.end833
                                        #   in Loop: Header=BB46_176 Depth=2
	jmp	.LBB46_185
.LBB46_185:                             # %for.inc834
                                        #   in Loop: Header=BB46_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_176
.LBB46_186:                             # %for.end836
                                        #   in Loop: Header=BB46_174 Depth=1
	jmp	.LBB46_187
.LBB46_187:                             # %for.inc837
                                        #   in Loop: Header=BB46_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_174
.LBB46_188:                             # %for.end839
	jmp	.LBB46_189
.LBB46_189:                             # %if.end840
	cmpl	$1852870688, -84(%rbp)  # imm = 0x6E709020
	jne	.LBB46_191
.LBB46_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_190
.Lfunc_end46:
	.size	estimate_weighting_factor_B_slice.43, .Lfunc_end46-estimate_weighting_factor_B_slice.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.44
.LCPI47_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.44
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.44,@function
estimate_weighting_factor_P_slice.44:   # @estimate_weighting_factor_P_slice.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$1853896710, -60(%rbp)  # imm = 0x6E803806
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB47_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB47_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB47_4
.LBB47_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB47_4
.LBB47_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB47_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_7 Depth 2
                                        #       Child Loop BB47_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB47_5 Depth=1
	movl	$0, -16(%rbp)
.LBB47_7:                               # %for.cond12
                                        #   Parent Loop BB47_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB47_7 Depth=2
	movl	$0, -4(%rbp)
.LBB47_9:                               # %for.cond17
                                        #   Parent Loop BB47_5 Depth=1
                                        #     Parent Loop BB47_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB47_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB47_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB47_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_9
.LBB47_12:                              # %for.end
                                        #   in Loop: Header=BB47_7 Depth=2
	jmp	.LBB47_13
.LBB47_13:                              # %for.inc48
                                        #   in Loop: Header=BB47_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_7
.LBB47_14:                              # %for.end50
                                        #   in Loop: Header=BB47_5 Depth=1
	jmp	.LBB47_15
.LBB47_15:                              # %for.inc51
                                        #   in Loop: Header=BB47_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_5
.LBB47_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB47_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB47_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB47_17 Depth=1
	movl	$0, -16(%rbp)
.LBB47_19:                              # %for.cond57
                                        #   Parent Loop BB47_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB47_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB47_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB47_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_19
.LBB47_22:                              # %for.end67
                                        #   in Loop: Header=BB47_17 Depth=1
	jmp	.LBB47_23
.LBB47_23:                              # %for.inc68
                                        #   in Loop: Header=BB47_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_17
.LBB47_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB47_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_27 Depth 2
                                        #       Child Loop BB47_29 Depth 3
                                        #       Child Loop BB47_48 Depth 3
                                        #       Child Loop BB47_58 Depth 3
                                        #         Child Loop BB47_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB47_25 Depth=1
	movl	$0, -4(%rbp)
.LBB47_27:                              # %for.cond76
                                        #   Parent Loop BB47_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_29 Depth 3
                                        #       Child Loop BB47_48 Depth 3
                                        #       Child Loop BB47_58 Depth 3
                                        #         Child Loop BB47_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB47_29:                              # %for.cond92
                                        #   Parent Loop BB47_25 Depth=1
                                        #     Parent Loop BB47_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB47_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB47_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_29
.LBB47_32:                              # %for.end106
                                        #   in Loop: Header=BB47_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB47_40
	jp	.LBB47_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB47_34
	jp	.LBB47_34
	jmp	.LBB47_35
.LBB47_34:                              # %if.then114
                                        #   in Loop: Header=BB47_27 Depth=2
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB47_36
.LBB47_35:                              # %if.else
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB47_36:                              # %if.end
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB47_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB47_39
.LBB47_38:                              # %if.then147
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB47_39:                              # %if.end154
                                        #   in Loop: Header=BB47_27 Depth=2
	jmp	.LBB47_47
.LBB47_40:                              # %if.else155
                                        #   in Loop: Header=BB47_27 Depth=2
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB47_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB47_46
.LBB47_42:                              # %cond.false179
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB47_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	$127, %eax
	jmp	.LBB47_45
.LBB47_44:                              # %cond.false188
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB47_45:                              # %cond.end194
                                        #   in Loop: Header=BB47_27 Depth=2
.LBB47_46:                              # %cond.end196
                                        #   in Loop: Header=BB47_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB47_47:                              # %if.end209
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB47_48:                              # %for.cond222
                                        #   Parent Loop BB47_25 Depth=1
                                        #     Parent Loop BB47_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB47_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB47_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB47_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB47_55
.LBB47_51:                              # %cond.false248
                                        #   in Loop: Header=BB47_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB47_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_54
.LBB47_53:                              # %cond.false270
                                        #   in Loop: Header=BB47_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB47_54:                              # %cond.end288
                                        #   in Loop: Header=BB47_48 Depth=3
.LBB47_55:                              # %cond.end290
                                        #   in Loop: Header=BB47_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB47_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_48
.LBB47_57:                              # %for.end297
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	$0, -12(%rbp)
.LBB47_58:                              # %for.cond298
                                        #   Parent Loop BB47_25 Depth=1
                                        #     Parent Loop BB47_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB47_58 Depth=3
	movl	$0, -16(%rbp)
.LBB47_60:                              # %for.cond305
                                        #   Parent Loop BB47_25 Depth=1
                                        #     Parent Loop BB47_27 Depth=2
                                        #       Parent Loop BB47_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB47_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB47_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB47_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB47_67
.LBB47_63:                              # %cond.false336
                                        #   in Loop: Header=BB47_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB47_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB47_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_66
.LBB47_65:                              # %cond.false364
                                        #   in Loop: Header=BB47_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB47_66:                              # %cond.end387
                                        #   in Loop: Header=BB47_60 Depth=4
.LBB47_67:                              # %cond.end389
                                        #   in Loop: Header=BB47_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB47_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_60
.LBB47_69:                              # %for.end400
                                        #   in Loop: Header=BB47_58 Depth=3
	jmp	.LBB47_70
.LBB47_70:                              # %for.inc401
                                        #   in Loop: Header=BB47_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_58
.LBB47_71:                              # %for.end403
                                        #   in Loop: Header=BB47_27 Depth=2
	jmp	.LBB47_72
.LBB47_72:                              # %for.inc404
                                        #   in Loop: Header=BB47_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_27
.LBB47_73:                              # %for.end406
                                        #   in Loop: Header=BB47_25 Depth=1
	jmp	.LBB47_74
.LBB47_74:                              # %for.inc407
                                        #   in Loop: Header=BB47_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_25
.LBB47_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB47_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_78 Depth 2
                                        #       Child Loop BB47_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB47_76 Depth=1
	movl	$0, -20(%rbp)
.LBB47_78:                              # %for.cond415
                                        #   Parent Loop BB47_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB47_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB47_78 Depth=2
	movl	$0, -24(%rbp)
.LBB47_80:                              # %for.cond421
                                        #   Parent Loop BB47_76 Depth=1
                                        #     Parent Loop BB47_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB47_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB47_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB47_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB47_80
.LBB47_83:                              # %for.end451
                                        #   in Loop: Header=BB47_78 Depth=2
	jmp	.LBB47_84
.LBB47_84:                              # %for.inc452
                                        #   in Loop: Header=BB47_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_78
.LBB47_85:                              # %for.end454
                                        #   in Loop: Header=BB47_76 Depth=1
	jmp	.LBB47_86
.LBB47_86:                              # %for.inc455
                                        #   in Loop: Header=BB47_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_76
.LBB47_87:                              # %for.end457
	cmpl	$1853896710, -60(%rbp)  # imm = 0x6E803806
	jne	.LBB47_89
.LBB47_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_88
.Lfunc_end47:
	.size	estimate_weighting_factor_P_slice.44, .Lfunc_end47-estimate_weighting_factor_P_slice.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.45
.LCPI48_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.45
	.p2align	4, 0x90
	.type	test_wp_P_slice.45,@function
test_wp_P_slice.45:                     # @test_wp_P_slice.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1235063250, -60(%rbp)  # imm = 0x499D91D2
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB48_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB48_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB48_4
.LBB48_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB48_4
.LBB48_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB48_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_7 Depth 2
                                        #       Child Loop BB48_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB48_5 Depth=1
	movl	$0, -24(%rbp)
.LBB48_7:                               # %for.cond9
                                        #   Parent Loop BB48_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	$0, -12(%rbp)
.LBB48_9:                               # %for.cond14
                                        #   Parent Loop BB48_5 Depth=1
                                        #     Parent Loop BB48_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB48_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB48_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB48_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_9
.LBB48_12:                              # %for.end
                                        #   in Loop: Header=BB48_7 Depth=2
	jmp	.LBB48_13
.LBB48_13:                              # %for.inc41
                                        #   in Loop: Header=BB48_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_7
.LBB48_14:                              # %for.end43
                                        #   in Loop: Header=BB48_5 Depth=1
	jmp	.LBB48_15
.LBB48_15:                              # %for.inc44
                                        #   in Loop: Header=BB48_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_5
.LBB48_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB48_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB48_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	$0, -24(%rbp)
.LBB48_19:                              # %for.cond50
                                        #   Parent Loop BB48_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB48_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB48_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB48_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_19
.LBB48_22:                              # %for.end60
                                        #   in Loop: Header=BB48_17 Depth=1
	jmp	.LBB48_23
.LBB48_23:                              # %for.inc61
                                        #   in Loop: Header=BB48_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_17
.LBB48_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB48_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_27 Depth 2
                                        #       Child Loop BB48_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	$0, -12(%rbp)
.LBB48_27:                              # %for.cond69
                                        #   Parent Loop BB48_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB48_29:                              # %for.cond85
                                        #   Parent Loop BB48_25 Depth=1
                                        #     Parent Loop BB48_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB48_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB48_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_29
.LBB48_32:                              # %for.end99
                                        #   in Loop: Header=BB48_27 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB48_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB48_34
	jp	.LBB48_34
	jmp	.LBB48_35
.LBB48_34:                              # %if.then106
                                        #   in Loop: Header=BB48_27 Depth=2
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB48_36
.LBB48_35:                              # %if.else
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB48_36:                              # %if.end
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB48_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB48_39
.LBB48_38:                              # %if.then137
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB48_39:                              # %if.end143
                                        #   in Loop: Header=BB48_27 Depth=2
	jmp	.LBB48_47
.LBB48_40:                              # %if.else144
                                        #   in Loop: Header=BB48_27 Depth=2
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB48_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB48_46
.LBB48_42:                              # %cond.false168
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB48_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	$127, %eax
	jmp	.LBB48_45
.LBB48_44:                              # %cond.false177
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB48_45:                              # %cond.end183
                                        #   in Loop: Header=BB48_27 Depth=2
.LBB48_46:                              # %cond.end185
                                        #   in Loop: Header=BB48_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB48_47:                              # %if.end197
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB48_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_27
.LBB48_49:                              # %for.end210
                                        #   in Loop: Header=BB48_25 Depth=1
	jmp	.LBB48_50
.LBB48_50:                              # %for.inc211
                                        #   in Loop: Header=BB48_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_25
.LBB48_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB48_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_54 Depth 2
                                        #       Child Loop BB48_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	$0, -36(%rbp)
.LBB48_54:                              # %for.cond219
                                        #   Parent Loop BB48_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB48_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	$0, -32(%rbp)
.LBB48_56:                              # %for.cond225
                                        #   Parent Loop BB48_52 Depth=1
                                        #     Parent Loop BB48_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB48_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB48_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB48_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB48_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB48_60
.LBB48_59:                              # %if.then246
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB48_63
.LBB48_60:                              # %if.end247
                                        #   in Loop: Header=BB48_56 Depth=3
	jmp	.LBB48_61
.LBB48_61:                              # %for.inc248
                                        #   in Loop: Header=BB48_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_56
.LBB48_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB48_54 Depth=2
	jmp	.LBB48_63
.LBB48_63:                              # %for.end250
                                        #   in Loop: Header=BB48_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB48_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_68
.LBB48_65:                              # %if.end254
                                        #   in Loop: Header=BB48_54 Depth=2
	jmp	.LBB48_66
.LBB48_66:                              # %for.inc255
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB48_54
.LBB48_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_68
.LBB48_68:                              # %for.end257
                                        #   in Loop: Header=BB48_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB48_70
# %bb.69:                               # %if.then260
	jmp	.LBB48_73
.LBB48_70:                              # %if.end261
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_71
.LBB48_71:                              # %for.inc262
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_52
.LBB48_72:                              # %for.end264.loopexit
	jmp	.LBB48_73
.LBB48_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1235063250, -60(%rbp)  # imm = 0x499D91D2
	jne	.LBB48_75
.LBB48_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_74
.Lfunc_end48:
	.size	test_wp_P_slice.45, .Lfunc_end48-test_wp_P_slice.45
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.46
.LCPI49_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.46
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.46,@function
estimate_weighting_factor_P_slice.46:   # @estimate_weighting_factor_P_slice.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$884949212, -60(%rbp)   # imm = 0x34BF40DC
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB49_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB49_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB49_4
.LBB49_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB49_4
.LBB49_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB49_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_7 Depth 2
                                        #       Child Loop BB49_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB49_5 Depth=1
	movl	$0, -16(%rbp)
.LBB49_7:                               # %for.cond12
                                        #   Parent Loop BB49_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	$0, -4(%rbp)
.LBB49_9:                               # %for.cond17
                                        #   Parent Loop BB49_5 Depth=1
                                        #     Parent Loop BB49_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB49_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB49_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB49_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_9
.LBB49_12:                              # %for.end
                                        #   in Loop: Header=BB49_7 Depth=2
	jmp	.LBB49_13
.LBB49_13:                              # %for.inc48
                                        #   in Loop: Header=BB49_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_7
.LBB49_14:                              # %for.end50
                                        #   in Loop: Header=BB49_5 Depth=1
	jmp	.LBB49_15
.LBB49_15:                              # %for.inc51
                                        #   in Loop: Header=BB49_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_5
.LBB49_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB49_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	$0, -16(%rbp)
.LBB49_19:                              # %for.cond57
                                        #   Parent Loop BB49_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB49_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB49_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB49_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_19
.LBB49_22:                              # %for.end67
                                        #   in Loop: Header=BB49_17 Depth=1
	jmp	.LBB49_23
.LBB49_23:                              # %for.inc68
                                        #   in Loop: Header=BB49_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_17
.LBB49_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB49_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_27 Depth 2
                                        #       Child Loop BB49_29 Depth 3
                                        #       Child Loop BB49_48 Depth 3
                                        #       Child Loop BB49_58 Depth 3
                                        #         Child Loop BB49_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	$0, -4(%rbp)
.LBB49_27:                              # %for.cond76
                                        #   Parent Loop BB49_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_29 Depth 3
                                        #       Child Loop BB49_48 Depth 3
                                        #       Child Loop BB49_58 Depth 3
                                        #         Child Loop BB49_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -48(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB49_29:                              # %for.cond92
                                        #   Parent Loop BB49_25 Depth=1
                                        #     Parent Loop BB49_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB49_29 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB49_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_29
.LBB49_32:                              # %for.end106
                                        #   in Loop: Header=BB49_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB49_40
	jp	.LBB49_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB49_34
	jp	.LBB49_34
	jmp	.LBB49_35
.LBB49_34:                              # %if.then114
                                        #   in Loop: Header=BB49_27 Depth=2
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB49_36
.LBB49_35:                              # %if.else
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB49_36:                              # %if.end
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB49_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB49_39
.LBB49_38:                              # %if.then147
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB49_39:                              # %if.end154
                                        #   in Loop: Header=BB49_27 Depth=2
	jmp	.LBB49_47
.LBB49_40:                              # %if.else155
                                        #   in Loop: Header=BB49_27 Depth=2
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB49_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB49_46
.LBB49_42:                              # %cond.false179
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB49_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	$127, %eax
	jmp	.LBB49_45
.LBB49_44:                              # %cond.false188
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB49_45:                              # %cond.end194
                                        #   in Loop: Header=BB49_27 Depth=2
.LBB49_46:                              # %cond.end196
                                        #   in Loop: Header=BB49_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB49_47:                              # %if.end209
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB49_48:                              # %for.cond222
                                        #   Parent Loop BB49_25 Depth=1
                                        #     Parent Loop BB49_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB49_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB49_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB49_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB49_55
.LBB49_51:                              # %cond.false248
                                        #   in Loop: Header=BB49_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB49_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB49_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_54
.LBB49_53:                              # %cond.false270
                                        #   in Loop: Header=BB49_48 Depth=3
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB49_54:                              # %cond.end288
                                        #   in Loop: Header=BB49_48 Depth=3
.LBB49_55:                              # %cond.end290
                                        #   in Loop: Header=BB49_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB49_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_48
.LBB49_57:                              # %for.end297
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	$0, -12(%rbp)
.LBB49_58:                              # %for.cond298
                                        #   Parent Loop BB49_25 Depth=1
                                        #     Parent Loop BB49_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB49_58 Depth=3
	movl	$0, -16(%rbp)
.LBB49_60:                              # %for.cond305
                                        #   Parent Loop BB49_25 Depth=1
                                        #     Parent Loop BB49_27 Depth=2
                                        #       Parent Loop BB49_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB49_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB49_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB49_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB49_67
.LBB49_63:                              # %cond.false336
                                        #   in Loop: Header=BB49_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB49_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB49_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB49_66
.LBB49_65:                              # %cond.false364
                                        #   in Loop: Header=BB49_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB49_66:                              # %cond.end387
                                        #   in Loop: Header=BB49_60 Depth=4
.LBB49_67:                              # %cond.end389
                                        #   in Loop: Header=BB49_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB49_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_60
.LBB49_69:                              # %for.end400
                                        #   in Loop: Header=BB49_58 Depth=3
	jmp	.LBB49_70
.LBB49_70:                              # %for.inc401
                                        #   in Loop: Header=BB49_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_58
.LBB49_71:                              # %for.end403
                                        #   in Loop: Header=BB49_27 Depth=2
	jmp	.LBB49_72
.LBB49_72:                              # %for.inc404
                                        #   in Loop: Header=BB49_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_27
.LBB49_73:                              # %for.end406
                                        #   in Loop: Header=BB49_25 Depth=1
	jmp	.LBB49_74
.LBB49_74:                              # %for.inc407
                                        #   in Loop: Header=BB49_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_25
.LBB49_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB49_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_78 Depth 2
                                        #       Child Loop BB49_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB49_76 Depth=1
	movl	$0, -24(%rbp)
.LBB49_78:                              # %for.cond415
                                        #   Parent Loop BB49_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB49_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB49_78 Depth=2
	movl	$0, -20(%rbp)
.LBB49_80:                              # %for.cond421
                                        #   Parent Loop BB49_76 Depth=1
                                        #     Parent Loop BB49_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB49_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB49_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB49_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_80
.LBB49_83:                              # %for.end451
                                        #   in Loop: Header=BB49_78 Depth=2
	jmp	.LBB49_84
.LBB49_84:                              # %for.inc452
                                        #   in Loop: Header=BB49_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_78
.LBB49_85:                              # %for.end454
                                        #   in Loop: Header=BB49_76 Depth=1
	jmp	.LBB49_86
.LBB49_86:                              # %for.inc455
                                        #   in Loop: Header=BB49_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_76
.LBB49_87:                              # %for.end457
	cmpl	$884949212, -60(%rbp)   # imm = 0x34BF40DC
	jne	.LBB49_89
.LBB49_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_88
.Lfunc_end49:
	.size	estimate_weighting_factor_P_slice.46, .Lfunc_end49-estimate_weighting_factor_P_slice.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.47
.LCPI50_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.47
	.p2align	4, 0x90
	.type	test_wp_P_slice.47,@function
test_wp_P_slice.47:                     # @test_wp_P_slice.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1433733948, -64(%rbp)  # imm = 0x55750B3C
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB50_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB50_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB50_4
.LBB50_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB50_4
.LBB50_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB50_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_7 Depth 2
                                        #       Child Loop BB50_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB50_5 Depth=1
	movl	$0, -24(%rbp)
.LBB50_7:                               # %for.cond9
                                        #   Parent Loop BB50_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	$0, -12(%rbp)
.LBB50_9:                               # %for.cond14
                                        #   Parent Loop BB50_5 Depth=1
                                        #     Parent Loop BB50_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB50_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB50_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB50_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_9
.LBB50_12:                              # %for.end
                                        #   in Loop: Header=BB50_7 Depth=2
	jmp	.LBB50_13
.LBB50_13:                              # %for.inc41
                                        #   in Loop: Header=BB50_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_7
.LBB50_14:                              # %for.end43
                                        #   in Loop: Header=BB50_5 Depth=1
	jmp	.LBB50_15
.LBB50_15:                              # %for.inc44
                                        #   in Loop: Header=BB50_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_5
.LBB50_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB50_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB50_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	$0, -24(%rbp)
.LBB50_19:                              # %for.cond50
                                        #   Parent Loop BB50_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB50_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB50_19
.LBB50_22:                              # %for.end60
                                        #   in Loop: Header=BB50_17 Depth=1
	jmp	.LBB50_23
.LBB50_23:                              # %for.inc61
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_17
.LBB50_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB50_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_27 Depth 2
                                        #       Child Loop BB50_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	$0, -12(%rbp)
.LBB50_27:                              # %for.cond69
                                        #   Parent Loop BB50_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB50_29:                              # %for.cond85
                                        #   Parent Loop BB50_25 Depth=1
                                        #     Parent Loop BB50_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB50_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB50_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_29
.LBB50_32:                              # %for.end99
                                        #   in Loop: Header=BB50_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB50_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB50_34
	jp	.LBB50_34
	jmp	.LBB50_35
.LBB50_34:                              # %if.then106
                                        #   in Loop: Header=BB50_27 Depth=2
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB50_36
.LBB50_35:                              # %if.else
                                        #   in Loop: Header=BB50_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB50_36:                              # %if.end
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB50_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB50_39
.LBB50_38:                              # %if.then137
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB50_39:                              # %if.end143
                                        #   in Loop: Header=BB50_27 Depth=2
	jmp	.LBB50_47
.LBB50_40:                              # %if.else144
                                        #   in Loop: Header=BB50_27 Depth=2
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB50_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB50_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB50_46
.LBB50_42:                              # %cond.false168
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB50_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB50_27 Depth=2
	movl	$127, %eax
	jmp	.LBB50_45
.LBB50_44:                              # %cond.false177
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB50_45:                              # %cond.end183
                                        #   in Loop: Header=BB50_27 Depth=2
.LBB50_46:                              # %cond.end185
                                        #   in Loop: Header=BB50_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB50_47:                              # %if.end197
                                        #   in Loop: Header=BB50_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB50_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_27
.LBB50_49:                              # %for.end210
                                        #   in Loop: Header=BB50_25 Depth=1
	jmp	.LBB50_50
.LBB50_50:                              # %for.inc211
                                        #   in Loop: Header=BB50_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_25
.LBB50_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB50_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_54 Depth 2
                                        #       Child Loop BB50_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB50_52 Depth=1
	movl	$0, -32(%rbp)
.LBB50_54:                              # %for.cond219
                                        #   Parent Loop BB50_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB50_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB50_54 Depth=2
	movl	$0, -36(%rbp)
.LBB50_56:                              # %for.cond225
                                        #   Parent Loop BB50_52 Depth=1
                                        #     Parent Loop BB50_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB50_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB50_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB50_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB50_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB50_60
.LBB50_59:                              # %if.then246
                                        #   in Loop: Header=BB50_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB50_63
.LBB50_60:                              # %if.end247
                                        #   in Loop: Header=BB50_56 Depth=3
	jmp	.LBB50_61
.LBB50_61:                              # %for.inc248
                                        #   in Loop: Header=BB50_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB50_56
.LBB50_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB50_54 Depth=2
	jmp	.LBB50_63
.LBB50_63:                              # %for.end250
                                        #   in Loop: Header=BB50_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB50_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB50_52 Depth=1
	jmp	.LBB50_68
.LBB50_65:                              # %if.end254
                                        #   in Loop: Header=BB50_54 Depth=2
	jmp	.LBB50_66
.LBB50_66:                              # %for.inc255
                                        #   in Loop: Header=BB50_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_54
.LBB50_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB50_52 Depth=1
	jmp	.LBB50_68
.LBB50_68:                              # %for.end257
                                        #   in Loop: Header=BB50_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB50_70
# %bb.69:                               # %if.then260
	jmp	.LBB50_73
.LBB50_70:                              # %if.end261
                                        #   in Loop: Header=BB50_52 Depth=1
	jmp	.LBB50_71
.LBB50_71:                              # %for.inc262
                                        #   in Loop: Header=BB50_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_52
.LBB50_72:                              # %for.end264.loopexit
	jmp	.LBB50_73
.LBB50_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1433733948, -64(%rbp)  # imm = 0x55750B3C
	jne	.LBB50_75
.LBB50_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_74
.Lfunc_end50:
	.size	test_wp_P_slice.47, .Lfunc_end50-test_wp_P_slice.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.48
.LCPI51_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.48
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.48,@function
estimate_weighting_factor_B_slice.48:   # @estimate_weighting_factor_B_slice.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$2013189439, -84(%rbp)  # imm = 0x77FED53F
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB51_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB51_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB51_4
.LBB51_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB51_4
.LBB51_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB51_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB51_7
.LBB51_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB51_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB51_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_10 Depth 2
                                        #       Child Loop BB51_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	$0, -8(%rbp)
.LBB51_10:                              # %for.cond14
                                        #   Parent Loop BB51_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB51_10 Depth=2
	movl	$0, -16(%rbp)
.LBB51_12:                              # %for.cond19
                                        #   Parent Loop BB51_8 Depth=1
                                        #     Parent Loop BB51_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB51_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB51_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB51_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_12
.LBB51_15:                              # %for.end
                                        #   in Loop: Header=BB51_10 Depth=2
	jmp	.LBB51_16
.LBB51_16:                              # %for.inc50
                                        #   in Loop: Header=BB51_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_10
.LBB51_17:                              # %for.end52
                                        #   in Loop: Header=BB51_8 Depth=1
	jmp	.LBB51_18
.LBB51_18:                              # %for.inc53
                                        #   in Loop: Header=BB51_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_8
.LBB51_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB51_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_22 Depth 2
                                        #       Child Loop BB51_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB51_20 Depth=1
	movl	$0, -8(%rbp)
.LBB51_22:                              # %for.cond59
                                        #   Parent Loop BB51_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB51_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB51_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB51_29
.LBB51_25:                              # %cond.false70
                                        #   in Loop: Header=BB51_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB51_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	$127, %eax
	jmp	.LBB51_28
.LBB51_27:                              # %cond.false80
                                        #   in Loop: Header=BB51_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB51_28:                              # %cond.end88
                                        #   in Loop: Header=BB51_22 Depth=2
.LBB51_29:                              # %cond.end90
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB51_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB51_35
.LBB51_31:                              # %cond.false99
                                        #   in Loop: Header=BB51_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB51_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	$127, %eax
	jmp	.LBB51_34
.LBB51_33:                              # %cond.false107
                                        #   in Loop: Header=BB51_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB51_34:                              # %cond.end113
                                        #   in Loop: Header=BB51_22 Depth=2
.LBB51_35:                              # %cond.end115
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB51_36:                              # %for.cond117
                                        #   Parent Loop BB51_20 Depth=1
                                        #     Parent Loop BB51_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB51_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB51_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB51_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB51_49
.LBB51_39:                              # %if.else154
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB51_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB51_45
.LBB51_41:                              # %cond.false160
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB51_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB51_44
.LBB51_43:                              # %cond.false166
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	-64(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB51_44:                              # %cond.end170
                                        #   in Loop: Header=BB51_36 Depth=3
.LBB51_45:                              # %cond.end172
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB51_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB51_48
.LBB51_47:                              # %if.then198
                                        #   in Loop: Header=BB51_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB51_48:                              # %if.end208
                                        #   in Loop: Header=BB51_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB51_49:                              # %if.end238
                                        #   in Loop: Header=BB51_36 Depth=3
	jmp	.LBB51_50
.LBB51_50:                              # %for.inc239
                                        #   in Loop: Header=BB51_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_36
.LBB51_51:                              # %for.end241
                                        #   in Loop: Header=BB51_22 Depth=2
	jmp	.LBB51_52
.LBB51_52:                              # %for.inc242
                                        #   in Loop: Header=BB51_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_22
.LBB51_53:                              # %for.end244
                                        #   in Loop: Header=BB51_20 Depth=1
	jmp	.LBB51_54
.LBB51_54:                              # %for.inc245
                                        #   in Loop: Header=BB51_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_20
.LBB51_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB51_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB51_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_59 Depth 2
                                        #       Child Loop BB51_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB51_57 Depth=1
	movl	$0, -8(%rbp)
.LBB51_59:                              # %for.cond254
                                        #   Parent Loop BB51_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB51_59 Depth=2
	movl	$0, -20(%rbp)
.LBB51_61:                              # %for.cond257
                                        #   Parent Loop BB51_57 Depth=1
                                        #     Parent Loop BB51_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB51_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB51_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB51_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB51_65
.LBB51_64:                              # %cond.false262
                                        #   in Loop: Header=BB51_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB51_65:                              # %cond.end263
                                        #   in Loop: Header=BB51_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -92(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB51_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_61
.LBB51_67:                              # %for.end295
                                        #   in Loop: Header=BB51_59 Depth=2
	jmp	.LBB51_68
.LBB51_68:                              # %for.inc296
                                        #   in Loop: Header=BB51_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_59
.LBB51_69:                              # %for.end298
                                        #   in Loop: Header=BB51_57 Depth=1
	jmp	.LBB51_70
.LBB51_70:                              # %for.inc299
                                        #   in Loop: Header=BB51_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_57
.LBB51_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB51_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB51_72 Depth=1
	movl	$0, -24(%rbp)
.LBB51_74:                              # %for.cond306
                                        #   Parent Loop BB51_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB51_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB51_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_74
.LBB51_77:                              # %for.end346
                                        #   in Loop: Header=BB51_72 Depth=1
	jmp	.LBB51_78
.LBB51_78:                              # %for.inc347
                                        #   in Loop: Header=BB51_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_72
.LBB51_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB51_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_82 Depth 2
                                        #       Child Loop BB51_84 Depth 3
                                        #       Child Loop BB51_88 Depth 3
                                        #         Child Loop BB51_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB51_80 Depth=1
	movl	$0, -8(%rbp)
.LBB51_82:                              # %for.cond353
                                        #   Parent Loop BB51_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_84 Depth 3
                                        #       Child Loop BB51_88 Depth 3
                                        #         Child Loop BB51_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	$0, -16(%rbp)
.LBB51_84:                              # %for.cond356
                                        #   Parent Loop BB51_80 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB51_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_84
.LBB51_87:                              # %for.end380
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	$0, -16(%rbp)
.LBB51_88:                              # %for.cond381
                                        #   Parent Loop BB51_80 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB51_88 Depth=3
	movl	$0, -32(%rbp)
.LBB51_90:                              # %for.cond387
                                        #   Parent Loop BB51_80 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        #       Parent Loop BB51_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB51_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB51_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_90
.LBB51_93:                              # %for.end421
                                        #   in Loop: Header=BB51_88 Depth=3
	jmp	.LBB51_94
.LBB51_94:                              # %for.inc422
                                        #   in Loop: Header=BB51_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_88
.LBB51_95:                              # %for.end424
                                        #   in Loop: Header=BB51_82 Depth=2
	jmp	.LBB51_96
.LBB51_96:                              # %for.inc425
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_82
.LBB51_97:                              # %for.end427
                                        #   in Loop: Header=BB51_80 Depth=1
	jmp	.LBB51_98
.LBB51_98:                              # %for.inc428
                                        #   in Loop: Header=BB51_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_80
.LBB51_99:                              # %for.end430
	jmp	.LBB51_189
.LBB51_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB51_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB51_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB51_101 Depth=1
	movl	$0, -8(%rbp)
.LBB51_103:                             # %for.cond436
                                        #   Parent Loop BB51_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB51_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB51_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB51_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_103
.LBB51_106:                             # %for.end447
                                        #   in Loop: Header=BB51_101 Depth=1
	jmp	.LBB51_107
.LBB51_107:                             # %for.inc448
                                        #   in Loop: Header=BB51_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_101
.LBB51_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB51_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_111 Depth 2
                                        #       Child Loop BB51_113 Depth 3
                                        #       Child Loop BB51_123 Depth 3
                                        #       Child Loop BB51_133 Depth 3
                                        #         Child Loop BB51_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB51_109 Depth=1
	movl	$0, -16(%rbp)
.LBB51_111:                             # %for.cond456
                                        #   Parent Loop BB51_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_113 Depth 3
                                        #       Child Loop BB51_123 Depth 3
                                        #       Child Loop BB51_133 Depth 3
                                        #         Child Loop BB51_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB51_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB51_113:                             # %for.cond476
                                        #   Parent Loop BB51_109 Depth=1
                                        #     Parent Loop BB51_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB51_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB51_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_113
.LBB51_116:                             # %for.end493
                                        #   in Loop: Header=BB51_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB51_117
	jp	.LBB51_117
	jmp	.LBB51_118
.LBB51_117:                             # %if.then500
                                        #   in Loop: Header=BB51_111 Depth=2
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_119
.LBB51_118:                             # %if.else511
                                        #   in Loop: Header=BB51_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB51_119:                             # %if.end513
                                        #   in Loop: Header=BB51_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB51_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB51_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB51_122
.LBB51_121:                             # %if.then519
                                        #   in Loop: Header=BB51_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB51_122:                             # %if.end521
                                        #   in Loop: Header=BB51_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB51_123:                             # %for.cond554
                                        #   Parent Loop BB51_109 Depth=1
                                        #     Parent Loop BB51_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB51_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB51_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB51_130
.LBB51_126:                             # %cond.false571
                                        #   in Loop: Header=BB51_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB51_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_129
.LBB51_128:                             # %cond.false583
                                        #   in Loop: Header=BB51_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB51_129:                             # %cond.end591
                                        #   in Loop: Header=BB51_123 Depth=3
.LBB51_130:                             # %cond.end593
                                        #   in Loop: Header=BB51_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB51_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_123
.LBB51_132:                             # %for.end600
                                        #   in Loop: Header=BB51_111 Depth=2
	movl	$0, -4(%rbp)
.LBB51_133:                             # %for.cond601
                                        #   Parent Loop BB51_109 Depth=1
                                        #     Parent Loop BB51_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB51_133 Depth=3
	movl	$0, -8(%rbp)
.LBB51_135:                             # %for.cond608
                                        #   Parent Loop BB51_109 Depth=1
                                        #     Parent Loop BB51_111 Depth=2
                                        #       Parent Loop BB51_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB51_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB51_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB51_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB51_142
.LBB51_138:                             # %cond.false630
                                        #   in Loop: Header=BB51_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB51_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB51_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_141
.LBB51_140:                             # %cond.false648
                                        #   in Loop: Header=BB51_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB51_141:                             # %cond.end661
                                        #   in Loop: Header=BB51_135 Depth=4
.LBB51_142:                             # %cond.end663
                                        #   in Loop: Header=BB51_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB51_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_135
.LBB51_144:                             # %for.end675
                                        #   in Loop: Header=BB51_133 Depth=3
	jmp	.LBB51_145
.LBB51_145:                             # %for.inc676
                                        #   in Loop: Header=BB51_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_133
.LBB51_146:                             # %for.end678
                                        #   in Loop: Header=BB51_111 Depth=2
	jmp	.LBB51_147
.LBB51_147:                             # %for.inc679
                                        #   in Loop: Header=BB51_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_111
.LBB51_148:                             # %for.end681
                                        #   in Loop: Header=BB51_109 Depth=1
	jmp	.LBB51_149
.LBB51_149:                             # %for.inc682
                                        #   in Loop: Header=BB51_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_109
.LBB51_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB51_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB51_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_154 Depth 2
                                        #       Child Loop BB51_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB51_152 Depth=1
	movl	$0, -24(%rbp)
.LBB51_154:                             # %for.cond694
                                        #   Parent Loop BB51_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB51_154 Depth=2
	movl	$0, -20(%rbp)
.LBB51_156:                             # %for.cond700
                                        #   Parent Loop BB51_152 Depth=1
                                        #     Parent Loop BB51_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB51_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB51_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_156
.LBB51_159:                             # %for.end730
                                        #   in Loop: Header=BB51_154 Depth=2
	jmp	.LBB51_160
.LBB51_160:                             # %for.inc731
                                        #   in Loop: Header=BB51_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_154
.LBB51_161:                             # %for.end733
                                        #   in Loop: Header=BB51_152 Depth=1
	jmp	.LBB51_162
.LBB51_162:                             # %for.inc734
                                        #   in Loop: Header=BB51_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_152
.LBB51_163:                             # %for.end736
	jmp	.LBB51_173
.LBB51_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB51_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB51_165 Depth=1
	movl	$0, -24(%rbp)
.LBB51_167:                             # %for.cond743
                                        #   Parent Loop BB51_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB51_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB51_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB51_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_167
.LBB51_170:                             # %for.end784
                                        #   in Loop: Header=BB51_165 Depth=1
	jmp	.LBB51_171
.LBB51_171:                             # %for.inc785
                                        #   in Loop: Header=BB51_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_165
.LBB51_172:                             # %for.end787
	jmp	.LBB51_173
.LBB51_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB51_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_176 Depth 2
                                        #       Child Loop BB51_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB51_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB51_174 Depth=1
	movl	$0, -8(%rbp)
.LBB51_176:                             # %for.cond793
                                        #   Parent Loop BB51_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB51_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB51_176 Depth=2
	movl	$0, -20(%rbp)
.LBB51_178:                             # %for.cond797
                                        #   Parent Loop BB51_174 Depth=1
                                        #     Parent Loop BB51_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB51_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB51_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB51_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB51_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB51_182
.LBB51_181:                             # %cond.false804
                                        #   in Loop: Header=BB51_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB51_182:                             # %cond.end805
                                        #   in Loop: Header=BB51_178 Depth=3
	movl	%eax, -92(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB51_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_178
.LBB51_184:                             # %for.end833
                                        #   in Loop: Header=BB51_176 Depth=2
	jmp	.LBB51_185
.LBB51_185:                             # %for.inc834
                                        #   in Loop: Header=BB51_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_176
.LBB51_186:                             # %for.end836
                                        #   in Loop: Header=BB51_174 Depth=1
	jmp	.LBB51_187
.LBB51_187:                             # %for.inc837
                                        #   in Loop: Header=BB51_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_174
.LBB51_188:                             # %for.end839
	jmp	.LBB51_189
.LBB51_189:                             # %if.end840
	cmpl	$2013189439, -84(%rbp)  # imm = 0x77FED53F
	jne	.LBB51_191
.LBB51_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_190
.Lfunc_end51:
	.size	estimate_weighting_factor_B_slice.48, .Lfunc_end51-estimate_weighting_factor_B_slice.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.49
.LCPI52_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.49
	.p2align	4, 0x90
	.type	test_wp_B_slice.49,@function
test_wp_B_slice.49:                     # @test_wp_B_slice.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$670983738, -80(%rbp)   # imm = 0x27FE663A
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB52_4
.LBB52_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB52_4
.LBB52_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB52_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_7 Depth 2
                                        #       Child Loop BB52_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB52_5 Depth=1
	movl	$0, -24(%rbp)
.LBB52_7:                               # %for.cond9
                                        #   Parent Loop BB52_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB52_7 Depth=2
	movl	$0, -32(%rbp)
.LBB52_9:                               # %for.cond14
                                        #   Parent Loop BB52_5 Depth=1
                                        #     Parent Loop BB52_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB52_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB52_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB52_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_9
.LBB52_12:                              # %for.end
                                        #   in Loop: Header=BB52_7 Depth=2
	jmp	.LBB52_13
.LBB52_13:                              # %for.inc41
                                        #   in Loop: Header=BB52_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_7
.LBB52_14:                              # %for.end43
                                        #   in Loop: Header=BB52_5 Depth=1
	jmp	.LBB52_15
.LBB52_15:                              # %for.inc44
                                        #   in Loop: Header=BB52_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_5
.LBB52_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB52_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_19 Depth 2
                                        #       Child Loop BB52_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB52_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	$0, -24(%rbp)
.LBB52_19:                              # %for.cond50
                                        #   Parent Loop BB52_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB52_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB52_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB52_26
.LBB52_22:                              # %cond.false61
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB52_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$127, %eax
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false71
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB52_25:                              # %cond.end79
                                        #   in Loop: Header=BB52_19 Depth=2
.LBB52_26:                              # %cond.end81
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB52_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB52_32
.LBB52_28:                              # %cond.false90
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB52_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	$127, %eax
	jmp	.LBB52_31
.LBB52_30:                              # %cond.false98
                                        #   in Loop: Header=BB52_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB52_31:                              # %cond.end104
                                        #   in Loop: Header=BB52_19 Depth=2
.LBB52_32:                              # %cond.end106
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB52_33:                              # %for.cond108
                                        #   Parent Loop BB52_17 Depth=1
                                        #     Parent Loop BB52_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB52_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB52_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB52_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB52_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB52_46
.LBB52_36:                              # %if.else
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB52_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB52_42
.LBB52_38:                              # %cond.false145
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB52_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB52_41
.LBB52_40:                              # %cond.false151
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB52_41:                              # %cond.end155
                                        #   in Loop: Header=BB52_33 Depth=3
.LBB52_42:                              # %cond.end157
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB52_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB52_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB52_45
.LBB52_44:                              # %if.then183
                                        #   in Loop: Header=BB52_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB52_45:                              # %if.end
                                        #   in Loop: Header=BB52_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB52_46:                              # %if.end220
                                        #   in Loop: Header=BB52_33 Depth=3
	jmp	.LBB52_47
.LBB52_47:                              # %for.inc221
                                        #   in Loop: Header=BB52_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_33
.LBB52_48:                              # %for.end223
                                        #   in Loop: Header=BB52_19 Depth=2
	jmp	.LBB52_49
.LBB52_49:                              # %for.inc224
                                        #   in Loop: Header=BB52_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_19
.LBB52_50:                              # %for.end226
                                        #   in Loop: Header=BB52_17 Depth=1
	jmp	.LBB52_51
.LBB52_51:                              # %for.inc227
                                        #   in Loop: Header=BB52_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_17
.LBB52_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB52_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB52_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_56 Depth 2
                                        #       Child Loop BB52_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB52_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB52_54 Depth=1
	movl	$0, -24(%rbp)
.LBB52_56:                              # %for.cond235
                                        #   Parent Loop BB52_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB52_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB52_56 Depth=2
	movl	$0, -20(%rbp)
.LBB52_58:                              # %for.cond238
                                        #   Parent Loop BB52_54 Depth=1
                                        #     Parent Loop BB52_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB52_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB52_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB52_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB52_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB52_62
.LBB52_61:                              # %cond.false243
                                        #   in Loop: Header=BB52_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB52_62:                              # %cond.end244
                                        #   in Loop: Header=BB52_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB52_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_58
.LBB52_64:                              # %for.end276
                                        #   in Loop: Header=BB52_56 Depth=2
	jmp	.LBB52_65
.LBB52_65:                              # %for.inc277
                                        #   in Loop: Header=BB52_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_56
.LBB52_66:                              # %for.end279
                                        #   in Loop: Header=BB52_54 Depth=1
	jmp	.LBB52_67
.LBB52_67:                              # %for.inc280
                                        #   in Loop: Header=BB52_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_54
.LBB52_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB52_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	$0, -28(%rbp)
.LBB52_71:                              # %for.cond287
                                        #   Parent Loop BB52_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB52_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB52_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_71
.LBB52_74:                              # %for.end327
                                        #   in Loop: Header=BB52_69 Depth=1
	jmp	.LBB52_75
.LBB52_75:                              # %for.inc328
                                        #   in Loop: Header=BB52_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_69
.LBB52_76:                              # %for.end330
	jmp	.LBB52_142
.LBB52_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB52_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB52_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB52_78 Depth=1
	movl	$0, -24(%rbp)
.LBB52_80:                              # %for.cond335
                                        #   Parent Loop BB52_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB52_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB52_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB52_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_80
.LBB52_83:                              # %for.end345
                                        #   in Loop: Header=BB52_78 Depth=1
	jmp	.LBB52_84
.LBB52_84:                              # %for.inc346
                                        #   in Loop: Header=BB52_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_78
.LBB52_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB52_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_88 Depth 2
                                        #       Child Loop BB52_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	$0, -32(%rbp)
.LBB52_88:                              # %for.cond354
                                        #   Parent Loop BB52_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB52_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB52_90:                              # %for.cond372
                                        #   Parent Loop BB52_86 Depth=1
                                        #     Parent Loop BB52_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB52_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB52_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_90
.LBB52_93:                              # %for.end389
                                        #   in Loop: Header=BB52_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB52_94
	jp	.LBB52_94
	jmp	.LBB52_95
.LBB52_94:                              # %if.then396
                                        #   in Loop: Header=BB52_88 Depth=2
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB52_96
.LBB52_95:                              # %if.else406
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB52_96:                              # %if.end407
                                        #   in Loop: Header=BB52_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB52_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB52_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB52_99
.LBB52_98:                              # %if.then413
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB52_99:                              # %if.end414
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB52_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB52_88
.LBB52_101:                             # %for.end447
                                        #   in Loop: Header=BB52_86 Depth=1
	jmp	.LBB52_102
.LBB52_102:                             # %for.inc448
                                        #   in Loop: Header=BB52_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_86
.LBB52_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB52_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB52_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_107 Depth 2
                                        #       Child Loop BB52_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB52_105 Depth=1
	movl	$0, -28(%rbp)
.LBB52_107:                             # %for.cond459
                                        #   Parent Loop BB52_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB52_107 Depth=2
	movl	$0, -20(%rbp)
.LBB52_109:                             # %for.cond465
                                        #   Parent Loop BB52_105 Depth=1
                                        #     Parent Loop BB52_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB52_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB52_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB52_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_109
.LBB52_112:                             # %for.end495
                                        #   in Loop: Header=BB52_107 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc496
                                        #   in Loop: Header=BB52_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_107
.LBB52_114:                             # %for.end498
                                        #   in Loop: Header=BB52_105 Depth=1
	jmp	.LBB52_115
.LBB52_115:                             # %for.inc499
                                        #   in Loop: Header=BB52_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_105
.LBB52_116:                             # %for.end501
	jmp	.LBB52_126
.LBB52_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB52_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB52_118 Depth=1
	movl	$0, -28(%rbp)
.LBB52_120:                             # %for.cond508
                                        #   Parent Loop BB52_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB52_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB52_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_120
.LBB52_123:                             # %for.end549
                                        #   in Loop: Header=BB52_118 Depth=1
	jmp	.LBB52_124
.LBB52_124:                             # %for.inc550
                                        #   in Loop: Header=BB52_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_118
.LBB52_125:                             # %for.end552
	jmp	.LBB52_126
.LBB52_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB52_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_129 Depth 2
                                        #       Child Loop BB52_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB52_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB52_127 Depth=1
	movl	$0, -24(%rbp)
.LBB52_129:                             # %for.cond558
                                        #   Parent Loop BB52_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB52_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB52_129 Depth=2
	movl	$0, -20(%rbp)
.LBB52_131:                             # %for.cond562
                                        #   Parent Loop BB52_127 Depth=1
                                        #     Parent Loop BB52_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB52_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB52_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB52_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB52_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB52_135
.LBB52_134:                             # %cond.false569
                                        #   in Loop: Header=BB52_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB52_135:                             # %cond.end570
                                        #   in Loop: Header=BB52_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB52_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_131
.LBB52_137:                             # %for.end598
                                        #   in Loop: Header=BB52_129 Depth=2
	jmp	.LBB52_138
.LBB52_138:                             # %for.inc599
                                        #   in Loop: Header=BB52_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB52_129
.LBB52_139:                             # %for.end601
                                        #   in Loop: Header=BB52_127 Depth=1
	jmp	.LBB52_140
.LBB52_140:                             # %for.inc602
                                        #   in Loop: Header=BB52_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_127
.LBB52_141:                             # %for.end604
	jmp	.LBB52_142
.LBB52_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB52_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_145 Depth 2
                                        #       Child Loop BB52_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB52_143 Depth=1
	movl	$0, -28(%rbp)
.LBB52_145:                             # %for.cond611
                                        #   Parent Loop BB52_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB52_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB52_145 Depth=2
	movl	$0, -20(%rbp)
.LBB52_147:                             # %for.cond617
                                        #   Parent Loop BB52_143 Depth=1
                                        #     Parent Loop BB52_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB52_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB52_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB52_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB52_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB52_151
.LBB52_150:                             # %if.then638
                                        #   in Loop: Header=BB52_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB52_154
.LBB52_151:                             # %if.end639
                                        #   in Loop: Header=BB52_147 Depth=3
	jmp	.LBB52_152
.LBB52_152:                             # %for.inc640
                                        #   in Loop: Header=BB52_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_147
.LBB52_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB52_145 Depth=2
	jmp	.LBB52_154
.LBB52_154:                             # %for.end642
                                        #   in Loop: Header=BB52_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB52_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB52_143 Depth=1
	jmp	.LBB52_159
.LBB52_156:                             # %if.end646
                                        #   in Loop: Header=BB52_145 Depth=2
	jmp	.LBB52_157
.LBB52_157:                             # %for.inc647
                                        #   in Loop: Header=BB52_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB52_145
.LBB52_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB52_143 Depth=1
	jmp	.LBB52_159
.LBB52_159:                             # %for.end649
                                        #   in Loop: Header=BB52_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB52_161
# %bb.160:                              # %if.then652
	jmp	.LBB52_164
.LBB52_161:                             # %if.end653
                                        #   in Loop: Header=BB52_143 Depth=1
	jmp	.LBB52_162
.LBB52_162:                             # %for.inc654
                                        #   in Loop: Header=BB52_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_143
.LBB52_163:                             # %for.end656.loopexit
	jmp	.LBB52_164
.LBB52_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$670983738, -80(%rbp)   # imm = 0x27FE663A
	jne	.LBB52_166
.LBB52_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_165
.Lfunc_end52:
	.size	test_wp_B_slice.49, .Lfunc_end52-test_wp_B_slice.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.50
.LCPI53_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.50
	.p2align	4, 0x90
	.type	test_wp_P_slice.50,@function
test_wp_P_slice.50:                     # @test_wp_P_slice.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1124331404, -64(%rbp)  # imm = 0x4303EF8C
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB53_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB53_4
.LBB53_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB53_4
.LBB53_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB53_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_7 Depth 2
                                        #       Child Loop BB53_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB53_5 Depth=1
	movl	$0, -24(%rbp)
.LBB53_7:                               # %for.cond9
                                        #   Parent Loop BB53_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB53_7 Depth=2
	movl	$0, -12(%rbp)
.LBB53_9:                               # %for.cond14
                                        #   Parent Loop BB53_5 Depth=1
                                        #     Parent Loop BB53_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB53_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB53_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB53_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_9
.LBB53_12:                              # %for.end
                                        #   in Loop: Header=BB53_7 Depth=2
	jmp	.LBB53_13
.LBB53_13:                              # %for.inc41
                                        #   in Loop: Header=BB53_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_7
.LBB53_14:                              # %for.end43
                                        #   in Loop: Header=BB53_5 Depth=1
	jmp	.LBB53_15
.LBB53_15:                              # %for.inc44
                                        #   in Loop: Header=BB53_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_5
.LBB53_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB53_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB53_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB53_17 Depth=1
	movl	$0, -24(%rbp)
.LBB53_19:                              # %for.cond50
                                        #   Parent Loop BB53_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB53_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB53_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB53_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_19
.LBB53_22:                              # %for.end60
                                        #   in Loop: Header=BB53_17 Depth=1
	jmp	.LBB53_23
.LBB53_23:                              # %for.inc61
                                        #   in Loop: Header=BB53_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_17
.LBB53_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB53_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_27 Depth 2
                                        #       Child Loop BB53_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	$0, -12(%rbp)
.LBB53_27:                              # %for.cond69
                                        #   Parent Loop BB53_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB53_29:                              # %for.cond85
                                        #   Parent Loop BB53_25 Depth=1
                                        #     Parent Loop BB53_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB53_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB53_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_29
.LBB53_32:                              # %for.end99
                                        #   in Loop: Header=BB53_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB53_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB53_34
	jp	.LBB53_34
	jmp	.LBB53_35
.LBB53_34:                              # %if.then106
                                        #   in Loop: Header=BB53_27 Depth=2
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB53_36
.LBB53_35:                              # %if.else
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB53_36:                              # %if.end
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB53_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB53_39
.LBB53_38:                              # %if.then137
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB53_39:                              # %if.end143
                                        #   in Loop: Header=BB53_27 Depth=2
	jmp	.LBB53_47
.LBB53_40:                              # %if.else144
                                        #   in Loop: Header=BB53_27 Depth=2
	vmovsd	.LCPI53_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB53_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB53_46
.LBB53_42:                              # %cond.false168
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB53_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	$127, %eax
	jmp	.LBB53_45
.LBB53_44:                              # %cond.false177
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB53_45:                              # %cond.end183
                                        #   in Loop: Header=BB53_27 Depth=2
.LBB53_46:                              # %cond.end185
                                        #   in Loop: Header=BB53_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB53_47:                              # %if.end197
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB53_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_27
.LBB53_49:                              # %for.end210
                                        #   in Loop: Header=BB53_25 Depth=1
	jmp	.LBB53_50
.LBB53_50:                              # %for.inc211
                                        #   in Loop: Header=BB53_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_25
.LBB53_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB53_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_54 Depth 2
                                        #       Child Loop BB53_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	$0, -32(%rbp)
.LBB53_54:                              # %for.cond219
                                        #   Parent Loop BB53_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_56 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB53_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	$0, -36(%rbp)
.LBB53_56:                              # %for.cond225
                                        #   Parent Loop BB53_52 Depth=1
                                        #     Parent Loop BB53_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -36(%rbp)
	jge	.LBB53_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB53_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB53_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB53_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB53_60
.LBB53_59:                              # %if.then246
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB53_63
.LBB53_60:                              # %if.end247
                                        #   in Loop: Header=BB53_56 Depth=3
	jmp	.LBB53_61
.LBB53_61:                              # %for.inc248
                                        #   in Loop: Header=BB53_56 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB53_56
.LBB53_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB53_54 Depth=2
	jmp	.LBB53_63
.LBB53_63:                              # %for.end250
                                        #   in Loop: Header=BB53_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB53_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_68
.LBB53_65:                              # %if.end254
                                        #   in Loop: Header=BB53_54 Depth=2
	jmp	.LBB53_66
.LBB53_66:                              # %for.inc255
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB53_54
.LBB53_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_68
.LBB53_68:                              # %for.end257
                                        #   in Loop: Header=BB53_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB53_70
# %bb.69:                               # %if.then260
	jmp	.LBB53_73
.LBB53_70:                              # %if.end261
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_71
.LBB53_71:                              # %for.inc262
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_52
.LBB53_72:                              # %for.end264.loopexit
	jmp	.LBB53_73
.LBB53_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1124331404, -64(%rbp)  # imm = 0x4303EF8C
	jne	.LBB53_75
.LBB53_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_74
.Lfunc_end53:
	.size	test_wp_P_slice.50, .Lfunc_end53-test_wp_P_slice.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.51
.LCPI54_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.51
	.p2align	4, 0x90
	.type	test_wp_P_slice.51,@function
test_wp_P_slice.51:                     # @test_wp_P_slice.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$1669136416, -64(%rbp)  # imm = 0x637D0020
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB54_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB54_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB54_4
.LBB54_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB54_4
.LBB54_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB54_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_7 Depth 2
                                        #       Child Loop BB54_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	$0, -24(%rbp)
.LBB54_7:                               # %for.cond9
                                        #   Parent Loop BB54_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB54_7 Depth=2
	movl	$0, -12(%rbp)
.LBB54_9:                               # %for.cond14
                                        #   Parent Loop BB54_5 Depth=1
                                        #     Parent Loop BB54_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB54_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB54_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB54_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_9
.LBB54_12:                              # %for.end
                                        #   in Loop: Header=BB54_7 Depth=2
	jmp	.LBB54_13
.LBB54_13:                              # %for.inc41
                                        #   in Loop: Header=BB54_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_7
.LBB54_14:                              # %for.end43
                                        #   in Loop: Header=BB54_5 Depth=1
	jmp	.LBB54_15
.LBB54_15:                              # %for.inc44
                                        #   in Loop: Header=BB54_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_5
.LBB54_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB54_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	$0, -24(%rbp)
.LBB54_19:                              # %for.cond50
                                        #   Parent Loop BB54_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB54_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB54_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB54_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB54_19
.LBB54_22:                              # %for.end60
                                        #   in Loop: Header=BB54_17 Depth=1
	jmp	.LBB54_23
.LBB54_23:                              # %for.inc61
                                        #   in Loop: Header=BB54_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_17
.LBB54_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB54_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_27 Depth 2
                                        #       Child Loop BB54_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB54_25 Depth=1
	movl	$0, -12(%rbp)
.LBB54_27:                              # %for.cond69
                                        #   Parent Loop BB54_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB54_29:                              # %for.cond85
                                        #   Parent Loop BB54_25 Depth=1
                                        #     Parent Loop BB54_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB54_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB54_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_29
.LBB54_32:                              # %for.end99
                                        #   in Loop: Header=BB54_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB54_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB54_34
	jp	.LBB54_34
	jmp	.LBB54_35
.LBB54_34:                              # %if.then106
                                        #   in Loop: Header=BB54_27 Depth=2
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB54_36
.LBB54_35:                              # %if.else
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB54_36:                              # %if.end
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB54_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB54_39
.LBB54_38:                              # %if.then137
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB54_39:                              # %if.end143
                                        #   in Loop: Header=BB54_27 Depth=2
	jmp	.LBB54_47
.LBB54_40:                              # %if.else144
                                        #   in Loop: Header=BB54_27 Depth=2
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB54_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB54_46
.LBB54_42:                              # %cond.false168
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB54_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	$127, %eax
	jmp	.LBB54_45
.LBB54_44:                              # %cond.false177
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB54_45:                              # %cond.end183
                                        #   in Loop: Header=BB54_27 Depth=2
.LBB54_46:                              # %cond.end185
                                        #   in Loop: Header=BB54_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB54_47:                              # %if.end197
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB54_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_27
.LBB54_49:                              # %for.end210
                                        #   in Loop: Header=BB54_25 Depth=1
	jmp	.LBB54_50
.LBB54_50:                              # %for.inc211
                                        #   in Loop: Header=BB54_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_25
.LBB54_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB54_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_54 Depth 2
                                        #       Child Loop BB54_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB54_52 Depth=1
	movl	$0, -36(%rbp)
.LBB54_54:                              # %for.cond219
                                        #   Parent Loop BB54_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB54_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB54_54 Depth=2
	movl	$0, -32(%rbp)
.LBB54_56:                              # %for.cond225
                                        #   Parent Loop BB54_52 Depth=1
                                        #     Parent Loop BB54_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB54_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB54_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB54_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB54_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB54_60
.LBB54_59:                              # %if.then246
                                        #   in Loop: Header=BB54_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB54_63
.LBB54_60:                              # %if.end247
                                        #   in Loop: Header=BB54_56 Depth=3
	jmp	.LBB54_61
.LBB54_61:                              # %for.inc248
                                        #   in Loop: Header=BB54_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB54_56
.LBB54_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB54_54 Depth=2
	jmp	.LBB54_63
.LBB54_63:                              # %for.end250
                                        #   in Loop: Header=BB54_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB54_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB54_52 Depth=1
	jmp	.LBB54_68
.LBB54_65:                              # %if.end254
                                        #   in Loop: Header=BB54_54 Depth=2
	jmp	.LBB54_66
.LBB54_66:                              # %for.inc255
                                        #   in Loop: Header=BB54_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB54_54
.LBB54_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB54_52 Depth=1
	jmp	.LBB54_68
.LBB54_68:                              # %for.end257
                                        #   in Loop: Header=BB54_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB54_70
# %bb.69:                               # %if.then260
	jmp	.LBB54_73
.LBB54_70:                              # %if.end261
                                        #   in Loop: Header=BB54_52 Depth=1
	jmp	.LBB54_71
.LBB54_71:                              # %for.inc262
                                        #   in Loop: Header=BB54_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_52
.LBB54_72:                              # %for.end264.loopexit
	jmp	.LBB54_73
.LBB54_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$1669136416, -64(%rbp)  # imm = 0x637D0020
	jne	.LBB54_75
.LBB54_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_74
.Lfunc_end54:
	.size	test_wp_P_slice.51, .Lfunc_end54-test_wp_P_slice.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.52
.LCPI55_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.52
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.52,@function
estimate_weighting_factor_P_slice.52:   # @estimate_weighting_factor_P_slice.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$816634600, -60(%rbp)   # imm = 0x30ACDAE8
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB55_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB55_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB55_4
.LBB55_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB55_4
.LBB55_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB55_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_7 Depth 2
                                        #       Child Loop BB55_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB55_5 Depth=1
	movl	$0, -16(%rbp)
.LBB55_7:                               # %for.cond12
                                        #   Parent Loop BB55_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB55_7 Depth=2
	movl	$0, -4(%rbp)
.LBB55_9:                               # %for.cond17
                                        #   Parent Loop BB55_5 Depth=1
                                        #     Parent Loop BB55_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB55_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB55_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB55_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_9
.LBB55_12:                              # %for.end
                                        #   in Loop: Header=BB55_7 Depth=2
	jmp	.LBB55_13
.LBB55_13:                              # %for.inc48
                                        #   in Loop: Header=BB55_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_7
.LBB55_14:                              # %for.end50
                                        #   in Loop: Header=BB55_5 Depth=1
	jmp	.LBB55_15
.LBB55_15:                              # %for.inc51
                                        #   in Loop: Header=BB55_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_5
.LBB55_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB55_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB55_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	$0, -16(%rbp)
.LBB55_19:                              # %for.cond57
                                        #   Parent Loop BB55_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB55_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB55_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB55_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_19
.LBB55_22:                              # %for.end67
                                        #   in Loop: Header=BB55_17 Depth=1
	jmp	.LBB55_23
.LBB55_23:                              # %for.inc68
                                        #   in Loop: Header=BB55_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_17
.LBB55_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB55_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_27 Depth 2
                                        #       Child Loop BB55_29 Depth 3
                                        #       Child Loop BB55_48 Depth 3
                                        #       Child Loop BB55_58 Depth 3
                                        #         Child Loop BB55_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	$0, -4(%rbp)
.LBB55_27:                              # %for.cond76
                                        #   Parent Loop BB55_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_29 Depth 3
                                        #       Child Loop BB55_48 Depth 3
                                        #       Child Loop BB55_58 Depth 3
                                        #         Child Loop BB55_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB55_29:                              # %for.cond92
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB55_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB55_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_29
.LBB55_32:                              # %for.end106
                                        #   in Loop: Header=BB55_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB55_40
	jp	.LBB55_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB55_34
	jp	.LBB55_34
	jmp	.LBB55_35
.LBB55_34:                              # %if.then114
                                        #   in Loop: Header=BB55_27 Depth=2
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB55_36
.LBB55_35:                              # %if.else
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_36:                              # %if.end
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB55_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB55_39
.LBB55_38:                              # %if.then147
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_39:                              # %if.end154
                                        #   in Loop: Header=BB55_27 Depth=2
	jmp	.LBB55_47
.LBB55_40:                              # %if.else155
                                        #   in Loop: Header=BB55_27 Depth=2
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB55_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB55_46
.LBB55_42:                              # %cond.false179
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB55_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$127, %eax
	jmp	.LBB55_45
.LBB55_44:                              # %cond.false188
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB55_45:                              # %cond.end194
                                        #   in Loop: Header=BB55_27 Depth=2
.LBB55_46:                              # %cond.end196
                                        #   in Loop: Header=BB55_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB55_47:                              # %if.end209
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB55_48:                              # %for.cond222
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB55_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB55_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB55_55
.LBB55_51:                              # %cond.false248
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB55_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_54
.LBB55_53:                              # %cond.false270
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB55_54:                              # %cond.end288
                                        #   in Loop: Header=BB55_48 Depth=3
.LBB55_55:                              # %cond.end290
                                        #   in Loop: Header=BB55_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB55_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_48
.LBB55_57:                              # %for.end297
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	$0, -12(%rbp)
.LBB55_58:                              # %for.cond298
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB55_58 Depth=3
	movl	$0, -16(%rbp)
.LBB55_60:                              # %for.cond305
                                        #   Parent Loop BB55_25 Depth=1
                                        #     Parent Loop BB55_27 Depth=2
                                        #       Parent Loop BB55_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB55_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB55_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB55_67
.LBB55_63:                              # %cond.false336
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB55_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_66
.LBB55_65:                              # %cond.false364
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB55_66:                              # %cond.end387
                                        #   in Loop: Header=BB55_60 Depth=4
.LBB55_67:                              # %cond.end389
                                        #   in Loop: Header=BB55_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB55_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_60
.LBB55_69:                              # %for.end400
                                        #   in Loop: Header=BB55_58 Depth=3
	jmp	.LBB55_70
.LBB55_70:                              # %for.inc401
                                        #   in Loop: Header=BB55_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_58
.LBB55_71:                              # %for.end403
                                        #   in Loop: Header=BB55_27 Depth=2
	jmp	.LBB55_72
.LBB55_72:                              # %for.inc404
                                        #   in Loop: Header=BB55_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_27
.LBB55_73:                              # %for.end406
                                        #   in Loop: Header=BB55_25 Depth=1
	jmp	.LBB55_74
.LBB55_74:                              # %for.inc407
                                        #   in Loop: Header=BB55_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_25
.LBB55_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB55_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_78 Depth 2
                                        #       Child Loop BB55_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB55_76 Depth=1
	movl	$0, -20(%rbp)
.LBB55_78:                              # %for.cond415
                                        #   Parent Loop BB55_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_80 Depth 3
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB55_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB55_78 Depth=2
	movl	$0, -24(%rbp)
.LBB55_80:                              # %for.cond421
                                        #   Parent Loop BB55_76 Depth=1
                                        #     Parent Loop BB55_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -24(%rbp)
	jge	.LBB55_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB55_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB55_80 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_80
.LBB55_83:                              # %for.end451
                                        #   in Loop: Header=BB55_78 Depth=2
	jmp	.LBB55_84
.LBB55_84:                              # %for.inc452
                                        #   in Loop: Header=BB55_78 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_78
.LBB55_85:                              # %for.end454
                                        #   in Loop: Header=BB55_76 Depth=1
	jmp	.LBB55_86
.LBB55_86:                              # %for.inc455
                                        #   in Loop: Header=BB55_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_76
.LBB55_87:                              # %for.end457
	cmpl	$816634600, -60(%rbp)   # imm = 0x30ACDAE8
	jne	.LBB55_89
.LBB55_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_88
.Lfunc_end55:
	.size	estimate_weighting_factor_P_slice.52, .Lfunc_end55-estimate_weighting_factor_P_slice.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.53
.LCPI56_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.53
	.p2align	4, 0x90
	.type	test_wp_B_slice.53,@function
test_wp_B_slice.53:                     # @test_wp_B_slice.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$544755592, -84(%rbp)   # imm = 0x20784F88
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB56_4
.LBB56_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB56_4
.LBB56_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB56_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_7 Depth 2
                                        #       Child Loop BB56_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB56_5 Depth=1
	movl	$0, -24(%rbp)
.LBB56_7:                               # %for.cond9
                                        #   Parent Loop BB56_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB56_7 Depth=2
	movl	$0, -32(%rbp)
.LBB56_9:                               # %for.cond14
                                        #   Parent Loop BB56_5 Depth=1
                                        #     Parent Loop BB56_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB56_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB56_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB56_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_9
.LBB56_12:                              # %for.end
                                        #   in Loop: Header=BB56_7 Depth=2
	jmp	.LBB56_13
.LBB56_13:                              # %for.inc41
                                        #   in Loop: Header=BB56_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_7
.LBB56_14:                              # %for.end43
                                        #   in Loop: Header=BB56_5 Depth=1
	jmp	.LBB56_15
.LBB56_15:                              # %for.inc44
                                        #   in Loop: Header=BB56_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_5
.LBB56_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB56_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_19 Depth 2
                                        #       Child Loop BB56_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB56_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	$0, -24(%rbp)
.LBB56_19:                              # %for.cond50
                                        #   Parent Loop BB56_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB56_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB56_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB56_26
.LBB56_22:                              # %cond.false61
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB56_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$127, %eax
	jmp	.LBB56_25
.LBB56_24:                              # %cond.false71
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB56_25:                              # %cond.end79
                                        #   in Loop: Header=BB56_19 Depth=2
.LBB56_26:                              # %cond.end81
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB56_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB56_32
.LBB56_28:                              # %cond.false90
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB56_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	$127, %eax
	jmp	.LBB56_31
.LBB56_30:                              # %cond.false98
                                        #   in Loop: Header=BB56_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB56_31:                              # %cond.end104
                                        #   in Loop: Header=BB56_19 Depth=2
.LBB56_32:                              # %cond.end106
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB56_33:                              # %for.cond108
                                        #   Parent Loop BB56_17 Depth=1
                                        #     Parent Loop BB56_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB56_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB56_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB56_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB56_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB56_46
.LBB56_36:                              # %if.else
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB56_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB56_42
.LBB56_38:                              # %cond.false145
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB56_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB56_41
.LBB56_40:                              # %cond.false151
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB56_41:                              # %cond.end155
                                        #   in Loop: Header=BB56_33 Depth=3
.LBB56_42:                              # %cond.end157
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB56_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB56_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB56_45
.LBB56_44:                              # %if.then183
                                        #   in Loop: Header=BB56_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB56_45:                              # %if.end
                                        #   in Loop: Header=BB56_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB56_46:                              # %if.end220
                                        #   in Loop: Header=BB56_33 Depth=3
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc221
                                        #   in Loop: Header=BB56_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_33
.LBB56_48:                              # %for.end223
                                        #   in Loop: Header=BB56_19 Depth=2
	jmp	.LBB56_49
.LBB56_49:                              # %for.inc224
                                        #   in Loop: Header=BB56_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_19
.LBB56_50:                              # %for.end226
                                        #   in Loop: Header=BB56_17 Depth=1
	jmp	.LBB56_51
.LBB56_51:                              # %for.inc227
                                        #   in Loop: Header=BB56_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_17
.LBB56_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB56_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB56_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_56 Depth 2
                                        #       Child Loop BB56_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB56_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB56_54 Depth=1
	movl	$0, -24(%rbp)
.LBB56_56:                              # %for.cond235
                                        #   Parent Loop BB56_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB56_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB56_56 Depth=2
	movl	$0, -20(%rbp)
.LBB56_58:                              # %for.cond238
                                        #   Parent Loop BB56_54 Depth=1
                                        #     Parent Loop BB56_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB56_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB56_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB56_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB56_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB56_62
.LBB56_61:                              # %cond.false243
                                        #   in Loop: Header=BB56_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB56_62:                              # %cond.end244
                                        #   in Loop: Header=BB56_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB56_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_58
.LBB56_64:                              # %for.end276
                                        #   in Loop: Header=BB56_56 Depth=2
	jmp	.LBB56_65
.LBB56_65:                              # %for.inc277
                                        #   in Loop: Header=BB56_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_56
.LBB56_66:                              # %for.end279
                                        #   in Loop: Header=BB56_54 Depth=1
	jmp	.LBB56_67
.LBB56_67:                              # %for.inc280
                                        #   in Loop: Header=BB56_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_54
.LBB56_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB56_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	$0, -28(%rbp)
.LBB56_71:                              # %for.cond287
                                        #   Parent Loop BB56_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB56_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB56_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_71
.LBB56_74:                              # %for.end327
                                        #   in Loop: Header=BB56_69 Depth=1
	jmp	.LBB56_75
.LBB56_75:                              # %for.inc328
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_69
.LBB56_76:                              # %for.end330
	jmp	.LBB56_142
.LBB56_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB56_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB56_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB56_78 Depth=1
	movl	$0, -24(%rbp)
.LBB56_80:                              # %for.cond335
                                        #   Parent Loop BB56_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB56_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB56_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB56_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_80
.LBB56_83:                              # %for.end345
                                        #   in Loop: Header=BB56_78 Depth=1
	jmp	.LBB56_84
.LBB56_84:                              # %for.inc346
                                        #   in Loop: Header=BB56_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_78
.LBB56_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB56_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_88 Depth 2
                                        #       Child Loop BB56_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	$0, -32(%rbp)
.LBB56_88:                              # %for.cond354
                                        #   Parent Loop BB56_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB56_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB56_90:                              # %for.cond372
                                        #   Parent Loop BB56_86 Depth=1
                                        #     Parent Loop BB56_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB56_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB56_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_90
.LBB56_93:                              # %for.end389
                                        #   in Loop: Header=BB56_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB56_94
	jp	.LBB56_94
	jmp	.LBB56_95
.LBB56_94:                              # %if.then396
                                        #   in Loop: Header=BB56_88 Depth=2
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB56_96
.LBB56_95:                              # %if.else406
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB56_96:                              # %if.end407
                                        #   in Loop: Header=BB56_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB56_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB56_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB56_99
.LBB56_98:                              # %if.then413
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB56_99:                              # %if.end414
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_88
.LBB56_101:                             # %for.end447
                                        #   in Loop: Header=BB56_86 Depth=1
	jmp	.LBB56_102
.LBB56_102:                             # %for.inc448
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_86
.LBB56_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB56_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB56_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_107 Depth 2
                                        #       Child Loop BB56_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB56_105 Depth=1
	movl	$0, -28(%rbp)
.LBB56_107:                             # %for.cond459
                                        #   Parent Loop BB56_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB56_107 Depth=2
	movl	$0, -20(%rbp)
.LBB56_109:                             # %for.cond465
                                        #   Parent Loop BB56_105 Depth=1
                                        #     Parent Loop BB56_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB56_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB56_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB56_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_109
.LBB56_112:                             # %for.end495
                                        #   in Loop: Header=BB56_107 Depth=2
	jmp	.LBB56_113
.LBB56_113:                             # %for.inc496
                                        #   in Loop: Header=BB56_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_107
.LBB56_114:                             # %for.end498
                                        #   in Loop: Header=BB56_105 Depth=1
	jmp	.LBB56_115
.LBB56_115:                             # %for.inc499
                                        #   in Loop: Header=BB56_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_105
.LBB56_116:                             # %for.end501
	jmp	.LBB56_126
.LBB56_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB56_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB56_118 Depth=1
	movl	$0, -28(%rbp)
.LBB56_120:                             # %for.cond508
                                        #   Parent Loop BB56_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB56_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB56_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_120
.LBB56_123:                             # %for.end549
                                        #   in Loop: Header=BB56_118 Depth=1
	jmp	.LBB56_124
.LBB56_124:                             # %for.inc550
                                        #   in Loop: Header=BB56_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_118
.LBB56_125:                             # %for.end552
	jmp	.LBB56_126
.LBB56_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB56_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_129 Depth 2
                                        #       Child Loop BB56_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB56_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB56_127 Depth=1
	movl	$0, -24(%rbp)
.LBB56_129:                             # %for.cond558
                                        #   Parent Loop BB56_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB56_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB56_129 Depth=2
	movl	$0, -20(%rbp)
.LBB56_131:                             # %for.cond562
                                        #   Parent Loop BB56_127 Depth=1
                                        #     Parent Loop BB56_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB56_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB56_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB56_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB56_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB56_135
.LBB56_134:                             # %cond.false569
                                        #   in Loop: Header=BB56_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB56_135:                             # %cond.end570
                                        #   in Loop: Header=BB56_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB56_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_131
.LBB56_137:                             # %for.end598
                                        #   in Loop: Header=BB56_129 Depth=2
	jmp	.LBB56_138
.LBB56_138:                             # %for.inc599
                                        #   in Loop: Header=BB56_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB56_129
.LBB56_139:                             # %for.end601
                                        #   in Loop: Header=BB56_127 Depth=1
	jmp	.LBB56_140
.LBB56_140:                             # %for.inc602
                                        #   in Loop: Header=BB56_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_127
.LBB56_141:                             # %for.end604
	jmp	.LBB56_142
.LBB56_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB56_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_145 Depth 2
                                        #       Child Loop BB56_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB56_143 Depth=1
	movl	$0, -28(%rbp)
.LBB56_145:                             # %for.cond611
                                        #   Parent Loop BB56_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB56_145 Depth=2
	movl	$0, -20(%rbp)
.LBB56_147:                             # %for.cond617
                                        #   Parent Loop BB56_143 Depth=1
                                        #     Parent Loop BB56_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB56_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB56_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB56_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB56_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB56_151
.LBB56_150:                             # %if.then638
                                        #   in Loop: Header=BB56_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB56_154
.LBB56_151:                             # %if.end639
                                        #   in Loop: Header=BB56_147 Depth=3
	jmp	.LBB56_152
.LBB56_152:                             # %for.inc640
                                        #   in Loop: Header=BB56_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_147
.LBB56_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB56_145 Depth=2
	jmp	.LBB56_154
.LBB56_154:                             # %for.end642
                                        #   in Loop: Header=BB56_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB56_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB56_143 Depth=1
	jmp	.LBB56_159
.LBB56_156:                             # %if.end646
                                        #   in Loop: Header=BB56_145 Depth=2
	jmp	.LBB56_157
.LBB56_157:                             # %for.inc647
                                        #   in Loop: Header=BB56_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_145
.LBB56_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB56_143 Depth=1
	jmp	.LBB56_159
.LBB56_159:                             # %for.end649
                                        #   in Loop: Header=BB56_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB56_161
# %bb.160:                              # %if.then652
	jmp	.LBB56_164
.LBB56_161:                             # %if.end653
                                        #   in Loop: Header=BB56_143 Depth=1
	jmp	.LBB56_162
.LBB56_162:                             # %for.inc654
                                        #   in Loop: Header=BB56_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_143
.LBB56_163:                             # %for.end656.loopexit
	jmp	.LBB56_164
.LBB56_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$544755592, -84(%rbp)   # imm = 0x20784F88
	jne	.LBB56_166
.LBB56_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_165
.Lfunc_end56:
	.size	test_wp_B_slice.53, .Lfunc_end56-test_wp_B_slice.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.54
.LCPI57_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.54
	.p2align	4, 0x90
	.type	test_wp_B_slice.54,@function
test_wp_B_slice.54:                     # @test_wp_B_slice.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$855039697, -80(%rbp)   # imm = 0x32F6DED1
	movl	%edi, -88(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB57_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB57_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB57_4
.LBB57_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB57_4
.LBB57_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB57_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_7 Depth 2
                                        #       Child Loop BB57_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	$0, -24(%rbp)
.LBB57_7:                               # %for.cond9
                                        #   Parent Loop BB57_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB57_7 Depth=2
	movl	$0, -32(%rbp)
.LBB57_9:                               # %for.cond14
                                        #   Parent Loop BB57_5 Depth=1
                                        #     Parent Loop BB57_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB57_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB57_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB57_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_9
.LBB57_12:                              # %for.end
                                        #   in Loop: Header=BB57_7 Depth=2
	jmp	.LBB57_13
.LBB57_13:                              # %for.inc41
                                        #   in Loop: Header=BB57_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_7
.LBB57_14:                              # %for.end43
                                        #   in Loop: Header=BB57_5 Depth=1
	jmp	.LBB57_15
.LBB57_15:                              # %for.inc44
                                        #   in Loop: Header=BB57_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB57_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_19 Depth 2
                                        #       Child Loop BB57_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB57_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	$0, -24(%rbp)
.LBB57_19:                              # %for.cond50
                                        #   Parent Loop BB57_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB57_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB57_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB57_26
.LBB57_22:                              # %cond.false61
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB57_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$127, %eax
	jmp	.LBB57_25
.LBB57_24:                              # %cond.false71
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB57_25:                              # %cond.end79
                                        #   in Loop: Header=BB57_19 Depth=2
.LBB57_26:                              # %cond.end81
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB57_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB57_32
.LBB57_28:                              # %cond.false90
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB57_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$127, %eax
	jmp	.LBB57_31
.LBB57_30:                              # %cond.false98
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB57_31:                              # %cond.end104
                                        #   in Loop: Header=BB57_19 Depth=2
.LBB57_32:                              # %cond.end106
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB57_33:                              # %for.cond108
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB57_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB57_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB57_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB57_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB57_46
.LBB57_36:                              # %if.else
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB57_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB57_42
.LBB57_38:                              # %cond.false145
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB57_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB57_41
.LBB57_40:                              # %cond.false151
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB57_41:                              # %cond.end155
                                        #   in Loop: Header=BB57_33 Depth=3
.LBB57_42:                              # %cond.end157
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB57_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB57_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB57_45
.LBB57_44:                              # %if.then183
                                        #   in Loop: Header=BB57_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB57_45:                              # %if.end
                                        #   in Loop: Header=BB57_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB57_46:                              # %if.end220
                                        #   in Loop: Header=BB57_33 Depth=3
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc221
                                        #   in Loop: Header=BB57_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_33
.LBB57_48:                              # %for.end223
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_49
.LBB57_49:                              # %for.inc224
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_19
.LBB57_50:                              # %for.end226
                                        #   in Loop: Header=BB57_17 Depth=1
	jmp	.LBB57_51
.LBB57_51:                              # %for.inc227
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_17
.LBB57_52:                              # %for.end229
	cmpl	$1, -88(%rbp)
	jne	.LBB57_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB57_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_56 Depth 2
                                        #       Child Loop BB57_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB57_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB57_54 Depth=1
	movl	$0, -24(%rbp)
.LBB57_56:                              # %for.cond235
                                        #   Parent Loop BB57_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB57_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB57_56 Depth=2
	movl	$0, -20(%rbp)
.LBB57_58:                              # %for.cond238
                                        #   Parent Loop BB57_54 Depth=1
                                        #     Parent Loop BB57_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB57_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB57_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB57_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB57_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB57_62
.LBB57_61:                              # %cond.false243
                                        #   in Loop: Header=BB57_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB57_62:                              # %cond.end244
                                        #   in Loop: Header=BB57_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB57_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_58
.LBB57_64:                              # %for.end276
                                        #   in Loop: Header=BB57_56 Depth=2
	jmp	.LBB57_65
.LBB57_65:                              # %for.inc277
                                        #   in Loop: Header=BB57_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_56
.LBB57_66:                              # %for.end279
                                        #   in Loop: Header=BB57_54 Depth=1
	jmp	.LBB57_67
.LBB57_67:                              # %for.inc280
                                        #   in Loop: Header=BB57_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_54
.LBB57_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB57_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	$0, -28(%rbp)
.LBB57_71:                              # %for.cond287
                                        #   Parent Loop BB57_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_71
.LBB57_74:                              # %for.end327
                                        #   in Loop: Header=BB57_69 Depth=1
	jmp	.LBB57_75
.LBB57_75:                              # %for.inc328
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_69
.LBB57_76:                              # %for.end330
	jmp	.LBB57_142
.LBB57_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB57_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB57_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB57_78 Depth=1
	movl	$0, -24(%rbp)
.LBB57_80:                              # %for.cond335
                                        #   Parent Loop BB57_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB57_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB57_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB57_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_80
.LBB57_83:                              # %for.end345
                                        #   in Loop: Header=BB57_78 Depth=1
	jmp	.LBB57_84
.LBB57_84:                              # %for.inc346
                                        #   in Loop: Header=BB57_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_78
.LBB57_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB57_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_88 Depth 2
                                        #       Child Loop BB57_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	$0, -32(%rbp)
.LBB57_88:                              # %for.cond354
                                        #   Parent Loop BB57_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB57_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB57_90:                              # %for.cond372
                                        #   Parent Loop BB57_86 Depth=1
                                        #     Parent Loop BB57_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB57_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB57_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_90
.LBB57_93:                              # %for.end389
                                        #   in Loop: Header=BB57_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB57_94
	jp	.LBB57_94
	jmp	.LBB57_95
.LBB57_94:                              # %if.then396
                                        #   in Loop: Header=BB57_88 Depth=2
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB57_96
.LBB57_95:                              # %if.else406
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB57_96:                              # %if.end407
                                        #   in Loop: Header=BB57_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB57_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB57_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB57_99
.LBB57_98:                              # %if.then413
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB57_99:                              # %if.end414
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_88
.LBB57_101:                             # %for.end447
                                        #   in Loop: Header=BB57_86 Depth=1
	jmp	.LBB57_102
.LBB57_102:                             # %for.inc448
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_86
.LBB57_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB57_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB57_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_107 Depth 2
                                        #       Child Loop BB57_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB57_105 Depth=1
	movl	$0, -28(%rbp)
.LBB57_107:                             # %for.cond459
                                        #   Parent Loop BB57_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB57_107 Depth=2
	movl	$0, -20(%rbp)
.LBB57_109:                             # %for.cond465
                                        #   Parent Loop BB57_105 Depth=1
                                        #     Parent Loop BB57_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB57_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB57_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB57_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_109
.LBB57_112:                             # %for.end495
                                        #   in Loop: Header=BB57_107 Depth=2
	jmp	.LBB57_113
.LBB57_113:                             # %for.inc496
                                        #   in Loop: Header=BB57_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_107
.LBB57_114:                             # %for.end498
                                        #   in Loop: Header=BB57_105 Depth=1
	jmp	.LBB57_115
.LBB57_115:                             # %for.inc499
                                        #   in Loop: Header=BB57_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_105
.LBB57_116:                             # %for.end501
	jmp	.LBB57_126
.LBB57_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB57_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB57_118 Depth=1
	movl	$0, -28(%rbp)
.LBB57_120:                             # %for.cond508
                                        #   Parent Loop BB57_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB57_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB57_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_120
.LBB57_123:                             # %for.end549
                                        #   in Loop: Header=BB57_118 Depth=1
	jmp	.LBB57_124
.LBB57_124:                             # %for.inc550
                                        #   in Loop: Header=BB57_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_118
.LBB57_125:                             # %for.end552
	jmp	.LBB57_126
.LBB57_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB57_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_129 Depth 2
                                        #       Child Loop BB57_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB57_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB57_127 Depth=1
	movl	$0, -24(%rbp)
.LBB57_129:                             # %for.cond558
                                        #   Parent Loop BB57_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB57_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB57_129 Depth=2
	movl	$0, -20(%rbp)
.LBB57_131:                             # %for.cond562
                                        #   Parent Loop BB57_127 Depth=1
                                        #     Parent Loop BB57_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB57_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB57_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB57_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB57_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB57_135
.LBB57_134:                             # %cond.false569
                                        #   in Loop: Header=BB57_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB57_135:                             # %cond.end570
                                        #   in Loop: Header=BB57_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB57_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_131
.LBB57_137:                             # %for.end598
                                        #   in Loop: Header=BB57_129 Depth=2
	jmp	.LBB57_138
.LBB57_138:                             # %for.inc599
                                        #   in Loop: Header=BB57_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB57_129
.LBB57_139:                             # %for.end601
                                        #   in Loop: Header=BB57_127 Depth=1
	jmp	.LBB57_140
.LBB57_140:                             # %for.inc602
                                        #   in Loop: Header=BB57_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_127
.LBB57_141:                             # %for.end604
	jmp	.LBB57_142
.LBB57_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB57_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_145 Depth 2
                                        #       Child Loop BB57_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB57_143 Depth=1
	movl	$0, -28(%rbp)
.LBB57_145:                             # %for.cond611
                                        #   Parent Loop BB57_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB57_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB57_145 Depth=2
	movl	$0, -20(%rbp)
.LBB57_147:                             # %for.cond617
                                        #   Parent Loop BB57_143 Depth=1
                                        #     Parent Loop BB57_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB57_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB57_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB57_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB57_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB57_151
.LBB57_150:                             # %if.then638
                                        #   in Loop: Header=BB57_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB57_154
.LBB57_151:                             # %if.end639
                                        #   in Loop: Header=BB57_147 Depth=3
	jmp	.LBB57_152
.LBB57_152:                             # %for.inc640
                                        #   in Loop: Header=BB57_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_147
.LBB57_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB57_145 Depth=2
	jmp	.LBB57_154
.LBB57_154:                             # %for.end642
                                        #   in Loop: Header=BB57_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB57_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB57_143 Depth=1
	jmp	.LBB57_159
.LBB57_156:                             # %if.end646
                                        #   in Loop: Header=BB57_145 Depth=2
	jmp	.LBB57_157
.LBB57_157:                             # %for.inc647
                                        #   in Loop: Header=BB57_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB57_145
.LBB57_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB57_143 Depth=1
	jmp	.LBB57_159
.LBB57_159:                             # %for.end649
                                        #   in Loop: Header=BB57_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB57_161
# %bb.160:                              # %if.then652
	jmp	.LBB57_164
.LBB57_161:                             # %if.end653
                                        #   in Loop: Header=BB57_143 Depth=1
	jmp	.LBB57_162
.LBB57_162:                             # %for.inc654
                                        #   in Loop: Header=BB57_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_143
.LBB57_163:                             # %for.end656.loopexit
	jmp	.LBB57_164
.LBB57_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$855039697, -80(%rbp)   # imm = 0x32F6DED1
	jne	.LBB57_166
.LBB57_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_165
.Lfunc_end57:
	.size	test_wp_B_slice.54, .Lfunc_end57-test_wp_B_slice.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.55
.LCPI58_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.55
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.55,@function
estimate_weighting_factor_P_slice.55:   # @estimate_weighting_factor_P_slice.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$249585557, -64(%rbp)   # imm = 0xEE05F95
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_4
.LBB58_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_4
.LBB58_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB58_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_7 Depth 2
                                        #       Child Loop BB58_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	$0, -16(%rbp)
.LBB58_7:                               # %for.cond12
                                        #   Parent Loop BB58_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB58_7 Depth=2
	movl	$0, -4(%rbp)
.LBB58_9:                               # %for.cond17
                                        #   Parent Loop BB58_5 Depth=1
                                        #     Parent Loop BB58_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB58_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB58_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB58_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_9
.LBB58_12:                              # %for.end
                                        #   in Loop: Header=BB58_7 Depth=2
	jmp	.LBB58_13
.LBB58_13:                              # %for.inc48
                                        #   in Loop: Header=BB58_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_7
.LBB58_14:                              # %for.end50
                                        #   in Loop: Header=BB58_5 Depth=1
	jmp	.LBB58_15
.LBB58_15:                              # %for.inc51
                                        #   in Loop: Header=BB58_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_5
.LBB58_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB58_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB58_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	$0, -16(%rbp)
.LBB58_19:                              # %for.cond57
                                        #   Parent Loop BB58_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB58_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB58_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB58_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_19
.LBB58_22:                              # %for.end67
                                        #   in Loop: Header=BB58_17 Depth=1
	jmp	.LBB58_23
.LBB58_23:                              # %for.inc68
                                        #   in Loop: Header=BB58_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_17
.LBB58_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB58_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_27 Depth 2
                                        #       Child Loop BB58_29 Depth 3
                                        #       Child Loop BB58_48 Depth 3
                                        #       Child Loop BB58_58 Depth 3
                                        #         Child Loop BB58_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	$0, -4(%rbp)
.LBB58_27:                              # %for.cond76
                                        #   Parent Loop BB58_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_29 Depth 3
                                        #       Child Loop BB58_48 Depth 3
                                        #       Child Loop BB58_58 Depth 3
                                        #         Child Loop BB58_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB58_29:                              # %for.cond92
                                        #   Parent Loop BB58_25 Depth=1
                                        #     Parent Loop BB58_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB58_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB58_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_29
.LBB58_32:                              # %for.end106
                                        #   in Loop: Header=BB58_27 Depth=2
	vcvtsi2sdl	-60(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB58_40
	jp	.LBB58_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB58_34
	jp	.LBB58_34
	jmp	.LBB58_35
.LBB58_34:                              # %if.then114
                                        #   in Loop: Header=BB58_27 Depth=2
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB58_36
.LBB58_35:                              # %if.else
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB58_36:                              # %if.end
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB58_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB58_39
.LBB58_38:                              # %if.then147
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB58_39:                              # %if.end154
                                        #   in Loop: Header=BB58_27 Depth=2
	jmp	.LBB58_47
.LBB58_40:                              # %if.else155
                                        #   in Loop: Header=BB58_27 Depth=2
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB58_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB58_46
.LBB58_42:                              # %cond.false179
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB58_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	$127, %eax
	jmp	.LBB58_45
.LBB58_44:                              # %cond.false188
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB58_45:                              # %cond.end194
                                        #   in Loop: Header=BB58_27 Depth=2
.LBB58_46:                              # %cond.end196
                                        #   in Loop: Header=BB58_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB58_47:                              # %if.end209
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB58_48:                              # %for.cond222
                                        #   Parent Loop BB58_25 Depth=1
                                        #     Parent Loop BB58_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB58_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB58_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB58_55
.LBB58_51:                              # %cond.false248
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_54
.LBB58_53:                              # %cond.false270
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB58_54:                              # %cond.end288
                                        #   in Loop: Header=BB58_48 Depth=3
.LBB58_55:                              # %cond.end290
                                        #   in Loop: Header=BB58_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB58_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_48
.LBB58_57:                              # %for.end297
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	$0, -12(%rbp)
.LBB58_58:                              # %for.cond298
                                        #   Parent Loop BB58_25 Depth=1
                                        #     Parent Loop BB58_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB58_58 Depth=3
	movl	$0, -16(%rbp)
.LBB58_60:                              # %for.cond305
                                        #   Parent Loop BB58_25 Depth=1
                                        #     Parent Loop BB58_27 Depth=2
                                        #       Parent Loop BB58_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB58_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB58_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB58_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB58_67
.LBB58_63:                              # %cond.false336
                                        #   in Loop: Header=BB58_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB58_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB58_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_66
.LBB58_65:                              # %cond.false364
                                        #   in Loop: Header=BB58_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB58_66:                              # %cond.end387
                                        #   in Loop: Header=BB58_60 Depth=4
.LBB58_67:                              # %cond.end389
                                        #   in Loop: Header=BB58_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB58_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_60
.LBB58_69:                              # %for.end400
                                        #   in Loop: Header=BB58_58 Depth=3
	jmp	.LBB58_70
.LBB58_70:                              # %for.inc401
                                        #   in Loop: Header=BB58_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_58
.LBB58_71:                              # %for.end403
                                        #   in Loop: Header=BB58_27 Depth=2
	jmp	.LBB58_72
.LBB58_72:                              # %for.inc404
                                        #   in Loop: Header=BB58_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_27
.LBB58_73:                              # %for.end406
                                        #   in Loop: Header=BB58_25 Depth=1
	jmp	.LBB58_74
.LBB58_74:                              # %for.inc407
                                        #   in Loop: Header=BB58_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_25
.LBB58_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB58_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_78 Depth 2
                                        #       Child Loop BB58_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB58_76 Depth=1
	movl	$0, -24(%rbp)
.LBB58_78:                              # %for.cond415
                                        #   Parent Loop BB58_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB58_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB58_78 Depth=2
	movl	$0, -20(%rbp)
.LBB58_80:                              # %for.cond421
                                        #   Parent Loop BB58_76 Depth=1
                                        #     Parent Loop BB58_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB58_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB58_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB58_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_80
.LBB58_83:                              # %for.end451
                                        #   in Loop: Header=BB58_78 Depth=2
	jmp	.LBB58_84
.LBB58_84:                              # %for.inc452
                                        #   in Loop: Header=BB58_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_78
.LBB58_85:                              # %for.end454
                                        #   in Loop: Header=BB58_76 Depth=1
	jmp	.LBB58_86
.LBB58_86:                              # %for.inc455
                                        #   in Loop: Header=BB58_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_76
.LBB58_87:                              # %for.end457
	cmpl	$249585557, -64(%rbp)   # imm = 0xEE05F95
	jne	.LBB58_89
.LBB58_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_88
.Lfunc_end58:
	.size	estimate_weighting_factor_P_slice.55, .Lfunc_end58-estimate_weighting_factor_P_slice.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.56
.LCPI59_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.56
	.p2align	4, 0x90
	.type	test_wp_B_slice.56,@function
test_wp_B_slice.56:                     # @test_wp_B_slice.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$966441792, -84(%rbp)   # imm = 0x399ABB40
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB59_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB59_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB59_4
.LBB59_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB59_4
.LBB59_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB59_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_7 Depth 2
                                        #       Child Loop BB59_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB59_5 Depth=1
	movl	$0, -24(%rbp)
.LBB59_7:                               # %for.cond9
                                        #   Parent Loop BB59_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	$0, -32(%rbp)
.LBB59_9:                               # %for.cond14
                                        #   Parent Loop BB59_5 Depth=1
                                        #     Parent Loop BB59_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB59_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB59_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB59_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_9
.LBB59_12:                              # %for.end
                                        #   in Loop: Header=BB59_7 Depth=2
	jmp	.LBB59_13
.LBB59_13:                              # %for.inc41
                                        #   in Loop: Header=BB59_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_7
.LBB59_14:                              # %for.end43
                                        #   in Loop: Header=BB59_5 Depth=1
	jmp	.LBB59_15
.LBB59_15:                              # %for.inc44
                                        #   in Loop: Header=BB59_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_5
.LBB59_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB59_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_19 Depth 2
                                        #       Child Loop BB59_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB59_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB59_17 Depth=1
	movl	$0, -24(%rbp)
.LBB59_19:                              # %for.cond50
                                        #   Parent Loop BB59_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB59_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB59_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB59_26
.LBB59_22:                              # %cond.false61
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB59_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	$127, %eax
	jmp	.LBB59_25
.LBB59_24:                              # %cond.false71
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB59_25:                              # %cond.end79
                                        #   in Loop: Header=BB59_19 Depth=2
.LBB59_26:                              # %cond.end81
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB59_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB59_32
.LBB59_28:                              # %cond.false90
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB59_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	$127, %eax
	jmp	.LBB59_31
.LBB59_30:                              # %cond.false98
                                        #   in Loop: Header=BB59_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB59_31:                              # %cond.end104
                                        #   in Loop: Header=BB59_19 Depth=2
.LBB59_32:                              # %cond.end106
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB59_33:                              # %for.cond108
                                        #   Parent Loop BB59_17 Depth=1
                                        #     Parent Loop BB59_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB59_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB59_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB59_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB59_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB59_46
.LBB59_36:                              # %if.else
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB59_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB59_42
.LBB59_38:                              # %cond.false145
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB59_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB59_41
.LBB59_40:                              # %cond.false151
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB59_41:                              # %cond.end155
                                        #   in Loop: Header=BB59_33 Depth=3
.LBB59_42:                              # %cond.end157
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB59_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB59_45
.LBB59_44:                              # %if.then183
                                        #   in Loop: Header=BB59_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB59_45:                              # %if.end
                                        #   in Loop: Header=BB59_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB59_46:                              # %if.end220
                                        #   in Loop: Header=BB59_33 Depth=3
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc221
                                        #   in Loop: Header=BB59_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_33
.LBB59_48:                              # %for.end223
                                        #   in Loop: Header=BB59_19 Depth=2
	jmp	.LBB59_49
.LBB59_49:                              # %for.inc224
                                        #   in Loop: Header=BB59_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_19
.LBB59_50:                              # %for.end226
                                        #   in Loop: Header=BB59_17 Depth=1
	jmp	.LBB59_51
.LBB59_51:                              # %for.inc227
                                        #   in Loop: Header=BB59_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_17
.LBB59_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB59_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB59_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_56 Depth 2
                                        #       Child Loop BB59_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB59_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB59_54 Depth=1
	movl	$0, -24(%rbp)
.LBB59_56:                              # %for.cond235
                                        #   Parent Loop BB59_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB59_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB59_56 Depth=2
	movl	$0, -20(%rbp)
.LBB59_58:                              # %for.cond238
                                        #   Parent Loop BB59_54 Depth=1
                                        #     Parent Loop BB59_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB59_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB59_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB59_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB59_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB59_62
.LBB59_61:                              # %cond.false243
                                        #   in Loop: Header=BB59_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB59_62:                              # %cond.end244
                                        #   in Loop: Header=BB59_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB59_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_58
.LBB59_64:                              # %for.end276
                                        #   in Loop: Header=BB59_56 Depth=2
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc277
                                        #   in Loop: Header=BB59_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_56
.LBB59_66:                              # %for.end279
                                        #   in Loop: Header=BB59_54 Depth=1
	jmp	.LBB59_67
.LBB59_67:                              # %for.inc280
                                        #   in Loop: Header=BB59_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_54
.LBB59_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB59_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	$0, -28(%rbp)
.LBB59_71:                              # %for.cond287
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB59_71
.LBB59_74:                              # %for.end327
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_75
.LBB59_75:                              # %for.inc328
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_76:                              # %for.end330
	jmp	.LBB59_142
.LBB59_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB59_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB59_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB59_78 Depth=1
	movl	$0, -24(%rbp)
.LBB59_80:                              # %for.cond335
                                        #   Parent Loop BB59_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB59_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB59_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB59_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_80
.LBB59_83:                              # %for.end345
                                        #   in Loop: Header=BB59_78 Depth=1
	jmp	.LBB59_84
.LBB59_84:                              # %for.inc346
                                        #   in Loop: Header=BB59_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_78
.LBB59_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB59_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
                                        #       Child Loop BB59_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -32(%rbp)
.LBB59_88:                              # %for.cond354
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB59_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB59_90:                              # %for.cond372
                                        #   Parent Loop BB59_86 Depth=1
                                        #     Parent Loop BB59_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB59_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB59_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_90
.LBB59_93:                              # %for.end389
                                        #   in Loop: Header=BB59_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB59_94
	jp	.LBB59_94
	jmp	.LBB59_95
.LBB59_94:                              # %if.then396
                                        #   in Loop: Header=BB59_88 Depth=2
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB59_96
.LBB59_95:                              # %if.else406
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB59_96:                              # %if.end407
                                        #   in Loop: Header=BB59_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB59_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB59_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB59_99
.LBB59_98:                              # %if.then413
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB59_99:                              # %if.end414
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_88
.LBB59_101:                             # %for.end447
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_102
.LBB59_102:                             # %for.inc448
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_86
.LBB59_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB59_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB59_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_107 Depth 2
                                        #       Child Loop BB59_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB59_105 Depth=1
	movl	$0, -28(%rbp)
.LBB59_107:                             # %for.cond459
                                        #   Parent Loop BB59_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB59_107 Depth=2
	movl	$0, -20(%rbp)
.LBB59_109:                             # %for.cond465
                                        #   Parent Loop BB59_105 Depth=1
                                        #     Parent Loop BB59_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB59_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB59_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB59_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_109
.LBB59_112:                             # %for.end495
                                        #   in Loop: Header=BB59_107 Depth=2
	jmp	.LBB59_113
.LBB59_113:                             # %for.inc496
                                        #   in Loop: Header=BB59_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB59_107
.LBB59_114:                             # %for.end498
                                        #   in Loop: Header=BB59_105 Depth=1
	jmp	.LBB59_115
.LBB59_115:                             # %for.inc499
                                        #   in Loop: Header=BB59_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_105
.LBB59_116:                             # %for.end501
	jmp	.LBB59_126
.LBB59_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB59_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB59_118 Depth=1
	movl	$0, -28(%rbp)
.LBB59_120:                             # %for.cond508
                                        #   Parent Loop BB59_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB59_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB59_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB59_120
.LBB59_123:                             # %for.end549
                                        #   in Loop: Header=BB59_118 Depth=1
	jmp	.LBB59_124
.LBB59_124:                             # %for.inc550
                                        #   in Loop: Header=BB59_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_118
.LBB59_125:                             # %for.end552
	jmp	.LBB59_126
.LBB59_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB59_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_129 Depth 2
                                        #       Child Loop BB59_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB59_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB59_127 Depth=1
	movl	$0, -24(%rbp)
.LBB59_129:                             # %for.cond558
                                        #   Parent Loop BB59_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB59_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB59_129 Depth=2
	movl	$0, -20(%rbp)
.LBB59_131:                             # %for.cond562
                                        #   Parent Loop BB59_127 Depth=1
                                        #     Parent Loop BB59_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB59_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB59_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB59_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB59_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB59_135
.LBB59_134:                             # %cond.false569
                                        #   in Loop: Header=BB59_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB59_135:                             # %cond.end570
                                        #   in Loop: Header=BB59_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB59_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_131
.LBB59_137:                             # %for.end598
                                        #   in Loop: Header=BB59_129 Depth=2
	jmp	.LBB59_138
.LBB59_138:                             # %for.inc599
                                        #   in Loop: Header=BB59_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_129
.LBB59_139:                             # %for.end601
                                        #   in Loop: Header=BB59_127 Depth=1
	jmp	.LBB59_140
.LBB59_140:                             # %for.inc602
                                        #   in Loop: Header=BB59_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_127
.LBB59_141:                             # %for.end604
	jmp	.LBB59_142
.LBB59_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB59_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_145 Depth 2
                                        #       Child Loop BB59_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB59_143 Depth=1
	movl	$0, -28(%rbp)
.LBB59_145:                             # %for.cond611
                                        #   Parent Loop BB59_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB59_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB59_145 Depth=2
	movl	$0, -20(%rbp)
.LBB59_147:                             # %for.cond617
                                        #   Parent Loop BB59_143 Depth=1
                                        #     Parent Loop BB59_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB59_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB59_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB59_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB59_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB59_151
.LBB59_150:                             # %if.then638
                                        #   in Loop: Header=BB59_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB59_154
.LBB59_151:                             # %if.end639
                                        #   in Loop: Header=BB59_147 Depth=3
	jmp	.LBB59_152
.LBB59_152:                             # %for.inc640
                                        #   in Loop: Header=BB59_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_147
.LBB59_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB59_145 Depth=2
	jmp	.LBB59_154
.LBB59_154:                             # %for.end642
                                        #   in Loop: Header=BB59_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB59_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB59_143 Depth=1
	jmp	.LBB59_159
.LBB59_156:                             # %if.end646
                                        #   in Loop: Header=BB59_145 Depth=2
	jmp	.LBB59_157
.LBB59_157:                             # %for.inc647
                                        #   in Loop: Header=BB59_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB59_145
.LBB59_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB59_143 Depth=1
	jmp	.LBB59_159
.LBB59_159:                             # %for.end649
                                        #   in Loop: Header=BB59_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB59_161
# %bb.160:                              # %if.then652
	jmp	.LBB59_164
.LBB59_161:                             # %if.end653
                                        #   in Loop: Header=BB59_143 Depth=1
	jmp	.LBB59_162
.LBB59_162:                             # %for.inc654
                                        #   in Loop: Header=BB59_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_143
.LBB59_163:                             # %for.end656.loopexit
	jmp	.LBB59_164
.LBB59_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$966441792, -84(%rbp)   # imm = 0x399ABB40
	jne	.LBB59_166
.LBB59_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_165
.Lfunc_end59:
	.size	test_wp_B_slice.56, .Lfunc_end59-test_wp_B_slice.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_P_slice.57
.LCPI60_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_P_slice.57
	.p2align	4, 0x90
	.type	test_wp_P_slice.57,@function
test_wp_P_slice.57:                     # @test_wp_P_slice.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$936, %rsp              # imm = 0x3A8
	.cfi_offset %rbx, -24
	movl	$593133949, -64(%rbp)   # imm = 0x235A817D
	movl	%edi, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB60_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB60_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB60_4
.LBB60_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB60_4
.LBB60_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movl	$0, -40(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -28(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -20(%rbp)
.LBB60_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_7 Depth 2
                                        #       Child Loop BB60_9 Depth 3
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB60_5 Depth=1
	movl	$0, -24(%rbp)
.LBB60_7:                               # %for.cond9
                                        #   Parent Loop BB60_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-20(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	$0, -12(%rbp)
.LBB60_9:                               # %for.cond14
                                        #   Parent Loop BB60_5 Depth=1
                                        #     Parent Loop BB60_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -12(%rbp)
	jge	.LBB60_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB60_9 Depth=3
	movl	-28(%rbp), %eax
	movslq	-20(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-28(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-20(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB60_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_9
.LBB60_12:                              # %for.end
                                        #   in Loop: Header=BB60_7 Depth=2
	jmp	.LBB60_13
.LBB60_13:                              # %for.inc41
                                        #   in Loop: Header=BB60_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_7
.LBB60_14:                              # %for.end43
                                        #   in Loop: Header=BB60_5 Depth=1
	jmp	.LBB60_15
.LBB60_15:                              # %for.inc44
                                        #   in Loop: Header=BB60_5 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_5
.LBB60_16:                              # %for.end46
	movl	$0, -20(%rbp)
.LBB60_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_19 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB60_24
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	$0, -24(%rbp)
.LBB60_19:                              # %for.cond50
                                        #   Parent Loop BB60_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB60_22
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB60_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-56(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
# %bb.21:                               # %for.inc58
                                        #   in Loop: Header=BB60_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_19
.LBB60_22:                              # %for.end60
                                        #   in Loop: Header=BB60_17 Depth=1
	jmp	.LBB60_23
.LBB60_23:                              # %for.inc61
                                        #   in Loop: Header=BB60_17 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_17
.LBB60_24:                              # %for.end63
	movl	$0, -16(%rbp)
.LBB60_25:                              # %for.cond64
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_27 Depth 2
                                        #       Child Loop BB60_29 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_51
# %bb.26:                               # %for.body68
                                        #   in Loop: Header=BB60_25 Depth=1
	movl	$0, -12(%rbp)
.LBB60_27:                              # %for.cond69
                                        #   Parent Loop BB60_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_29 Depth 3
	movl	-12(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_49
# %bb.28:                               # %for.body74
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-12(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -20(%rbp)
.LBB60_29:                              # %for.cond85
                                        #   Parent Loop BB60_25 Depth=1
                                        #     Parent Loop BB60_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_32
# %bb.30:                               # %for.body90
                                        #   in Loop: Header=BB60_29 Depth=3
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	vaddsd	-208(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -208(%rbp,%rax,8)
# %bb.31:                               # %for.inc97
                                        #   in Loop: Header=BB60_29 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_29
.LBB60_32:                              # %for.end99
                                        #   in Loop: Header=BB60_27 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB60_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-12(%rbp), %rax
	vmovsd	-208(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB60_34
	jp	.LBB60_34
	jmp	.LBB60_35
.LBB60_34:                              # %if.then106
                                        #   in Loop: Header=BB60_27 Depth=2
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm1
	vmulsd	-56(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	vdivsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB60_36
.LBB60_35:                              # %if.else
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB60_36:                              # %if.end
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB60_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB60_39
.LBB60_38:                              # %if.then137
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$32, (%rcx)
.LBB60_39:                              # %if.end143
                                        #   in Loop: Header=BB60_27 Depth=2
	jmp	.LBB60_47
.LBB60_40:                              # %if.else144
                                        #   in Loop: Header=BB60_27 Depth=2
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-12(%rbp), %rax
	vsubsd	-208(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB60_42
# %bb.41:                               # %cond.true167
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB60_46
.LBB60_42:                              # %cond.false168
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB60_44
# %bb.43:                               # %cond.true176
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	$127, %eax
	jmp	.LBB60_45
.LBB60_44:                              # %cond.false177
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB60_45:                              # %cond.end183
                                        #   in Loop: Header=BB60_27 Depth=2
.LBB60_46:                              # %cond.end185
                                        #   in Loop: Header=BB60_27 Depth=2
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-944(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB60_47:                              # %if.end197
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-576(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-48(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
# %bb.48:                               # %for.inc208
                                        #   in Loop: Header=BB60_27 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_27
.LBB60_49:                              # %for.end210
                                        #   in Loop: Header=BB60_25 Depth=1
	jmp	.LBB60_50
.LBB60_50:                              # %for.inc211
                                        #   in Loop: Header=BB60_25 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_25
.LBB60_51:                              # %for.end213
	movl	$0, -16(%rbp)
.LBB60_52:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_54 Depth 2
                                        #       Child Loop BB60_56 Depth 3
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_72
# %bb.53:                               # %for.body218
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	$0, -36(%rbp)
.LBB60_54:                              # %for.cond219
                                        #   Parent Loop BB60_52 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_56 Depth 3
	movl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB60_67
# %bb.55:                               # %for.body224
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	$0, -32(%rbp)
.LBB60_56:                              # %for.cond225
                                        #   Parent Loop BB60_52 Depth=1
                                        #     Parent Loop BB60_54 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB60_62
# %bb.57:                               # %for.body228
                                        #   in Loop: Header=BB60_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-576(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB60_59
# %bb.58:                               # %lor.lhs.false237
                                        #   in Loop: Header=BB60_56 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-944(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB60_60
.LBB60_59:                              # %if.then246
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	$1, -40(%rbp)
	jmp	.LBB60_63
.LBB60_60:                              # %if.end247
                                        #   in Loop: Header=BB60_56 Depth=3
	jmp	.LBB60_61
.LBB60_61:                              # %for.inc248
                                        #   in Loop: Header=BB60_56 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_56
.LBB60_62:                              # %for.end250.loopexit
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_63
.LBB60_63:                              # %for.end250
                                        #   in Loop: Header=BB60_54 Depth=2
	cmpl	$1, -40(%rbp)
	jne	.LBB60_65
# %bb.64:                               # %if.then253
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_68
.LBB60_65:                              # %if.end254
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_66
.LBB60_66:                              # %for.inc255
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB60_54
.LBB60_67:                              # %for.end257.loopexit
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_68
.LBB60_68:                              # %for.end257
                                        #   in Loop: Header=BB60_52 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB60_70
# %bb.69:                               # %if.then260
	jmp	.LBB60_73
.LBB60_70:                              # %if.end261
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_71
.LBB60_71:                              # %for.inc262
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_52
.LBB60_72:                              # %for.end264.loopexit
	jmp	.LBB60_73
.LBB60_73:                              # %for.end264
	movl	-40(%rbp), %ebx
	cmpl	$593133949, -64(%rbp)   # imm = 0x235A817D
	jne	.LBB60_75
.LBB60_74:
	movl	%ebx, %eax
	addq	$936, %rsp              # imm = 0x3A8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_74
.Lfunc_end60:
	.size	test_wp_P_slice.57, .Lfunc_end60-test_wp_P_slice.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.58
.LCPI61_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.58
	.p2align	4, 0x90
	.type	test_wp_B_slice.58,@function
test_wp_B_slice.58:                     # @test_wp_B_slice.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$68958177, -88(%rbp)    # imm = 0x41C37E1
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB61_4
.LBB61_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB61_4
.LBB61_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB61_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_7 Depth 2
                                        #       Child Loop BB61_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB61_5 Depth=1
	movl	$0, -24(%rbp)
.LBB61_7:                               # %for.cond9
                                        #   Parent Loop BB61_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	$0, -32(%rbp)
.LBB61_9:                               # %for.cond14
                                        #   Parent Loop BB61_5 Depth=1
                                        #     Parent Loop BB61_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB61_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB61_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB61_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_9
.LBB61_12:                              # %for.end
                                        #   in Loop: Header=BB61_7 Depth=2
	jmp	.LBB61_13
.LBB61_13:                              # %for.inc41
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_7
.LBB61_14:                              # %for.end43
                                        #   in Loop: Header=BB61_5 Depth=1
	jmp	.LBB61_15
.LBB61_15:                              # %for.inc44
                                        #   in Loop: Header=BB61_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_5
.LBB61_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB61_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_19 Depth 2
                                        #       Child Loop BB61_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB61_17 Depth=1
	movl	$0, -24(%rbp)
.LBB61_19:                              # %for.cond50
                                        #   Parent Loop BB61_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB61_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB61_26
.LBB61_22:                              # %cond.false61
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB61_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$127, %eax
	jmp	.LBB61_25
.LBB61_24:                              # %cond.false71
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB61_25:                              # %cond.end79
                                        #   in Loop: Header=BB61_19 Depth=2
.LBB61_26:                              # %cond.end81
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB61_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB61_32
.LBB61_28:                              # %cond.false90
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB61_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$127, %eax
	jmp	.LBB61_31
.LBB61_30:                              # %cond.false98
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB61_31:                              # %cond.end104
                                        #   in Loop: Header=BB61_19 Depth=2
.LBB61_32:                              # %cond.end106
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	%eax, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB61_33:                              # %for.cond108
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB61_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB61_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB61_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB61_46
.LBB61_36:                              # %if.else
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB61_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB61_42
.LBB61_38:                              # %cond.false145
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB61_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB61_41
.LBB61_40:                              # %cond.false151
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-56(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB61_41:                              # %cond.end155
                                        #   in Loop: Header=BB61_33 Depth=3
.LBB61_42:                              # %cond.end157
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB61_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB61_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB61_45
.LBB61_44:                              # %if.then183
                                        #   in Loop: Header=BB61_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB61_45:                              # %if.end
                                        #   in Loop: Header=BB61_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB61_46:                              # %if.end220
                                        #   in Loop: Header=BB61_33 Depth=3
	jmp	.LBB61_47
.LBB61_47:                              # %for.inc221
                                        #   in Loop: Header=BB61_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_33
.LBB61_48:                              # %for.end223
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc224
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_19
.LBB61_50:                              # %for.end226
                                        #   in Loop: Header=BB61_17 Depth=1
	jmp	.LBB61_51
.LBB61_51:                              # %for.inc227
                                        #   in Loop: Header=BB61_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_17
.LBB61_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB61_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB61_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_56 Depth 2
                                        #       Child Loop BB61_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB61_54 Depth=1
	movl	$0, -24(%rbp)
.LBB61_56:                              # %for.cond235
                                        #   Parent Loop BB61_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB61_56 Depth=2
	movl	$0, -20(%rbp)
.LBB61_58:                              # %for.cond238
                                        #   Parent Loop BB61_54 Depth=1
                                        #     Parent Loop BB61_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB61_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB61_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB61_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB61_62
.LBB61_61:                              # %cond.false243
                                        #   in Loop: Header=BB61_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB61_62:                              # %cond.end244
                                        #   in Loop: Header=BB61_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB61_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_58
.LBB61_64:                              # %for.end276
                                        #   in Loop: Header=BB61_56 Depth=2
	jmp	.LBB61_65
.LBB61_65:                              # %for.inc277
                                        #   in Loop: Header=BB61_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_56
.LBB61_66:                              # %for.end279
                                        #   in Loop: Header=BB61_54 Depth=1
	jmp	.LBB61_67
.LBB61_67:                              # %for.inc280
                                        #   in Loop: Header=BB61_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_54
.LBB61_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB61_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	$0, -28(%rbp)
.LBB61_71:                              # %for.cond287
                                        #   Parent Loop BB61_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB61_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB61_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_71
.LBB61_74:                              # %for.end327
                                        #   in Loop: Header=BB61_69 Depth=1
	jmp	.LBB61_75
.LBB61_75:                              # %for.inc328
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_69
.LBB61_76:                              # %for.end330
	jmp	.LBB61_142
.LBB61_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB61_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB61_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB61_78 Depth=1
	movl	$0, -24(%rbp)
.LBB61_80:                              # %for.cond335
                                        #   Parent Loop BB61_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB61_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB61_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB61_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_80
.LBB61_83:                              # %for.end345
                                        #   in Loop: Header=BB61_78 Depth=1
	jmp	.LBB61_84
.LBB61_84:                              # %for.inc346
                                        #   in Loop: Header=BB61_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_78
.LBB61_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB61_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_88 Depth 2
                                        #       Child Loop BB61_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB61_86 Depth=1
	movl	$0, -32(%rbp)
.LBB61_88:                              # %for.cond354
                                        #   Parent Loop BB61_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB61_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB61_90:                              # %for.cond372
                                        #   Parent Loop BB61_86 Depth=1
                                        #     Parent Loop BB61_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB61_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB61_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_90
.LBB61_93:                              # %for.end389
                                        #   in Loop: Header=BB61_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB61_94
	jp	.LBB61_94
	jmp	.LBB61_95
.LBB61_94:                              # %if.then396
                                        #   in Loop: Header=BB61_88 Depth=2
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB61_96
.LBB61_95:                              # %if.else406
                                        #   in Loop: Header=BB61_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB61_96:                              # %if.end407
                                        #   in Loop: Header=BB61_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB61_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB61_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB61_99
.LBB61_98:                              # %if.then413
                                        #   in Loop: Header=BB61_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB61_99:                              # %if.end414
                                        #   in Loop: Header=BB61_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB61_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_88
.LBB61_101:                             # %for.end447
                                        #   in Loop: Header=BB61_86 Depth=1
	jmp	.LBB61_102
.LBB61_102:                             # %for.inc448
                                        #   in Loop: Header=BB61_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_86
.LBB61_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB61_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB61_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_107 Depth 2
                                        #       Child Loop BB61_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB61_105 Depth=1
	movl	$0, -28(%rbp)
.LBB61_107:                             # %for.cond459
                                        #   Parent Loop BB61_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB61_107 Depth=2
	movl	$0, -20(%rbp)
.LBB61_109:                             # %for.cond465
                                        #   Parent Loop BB61_105 Depth=1
                                        #     Parent Loop BB61_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB61_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB61_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_109
.LBB61_112:                             # %for.end495
                                        #   in Loop: Header=BB61_107 Depth=2
	jmp	.LBB61_113
.LBB61_113:                             # %for.inc496
                                        #   in Loop: Header=BB61_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_107
.LBB61_114:                             # %for.end498
                                        #   in Loop: Header=BB61_105 Depth=1
	jmp	.LBB61_115
.LBB61_115:                             # %for.inc499
                                        #   in Loop: Header=BB61_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_105
.LBB61_116:                             # %for.end501
	jmp	.LBB61_126
.LBB61_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB61_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB61_118 Depth=1
	movl	$0, -28(%rbp)
.LBB61_120:                             # %for.cond508
                                        #   Parent Loop BB61_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB61_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB61_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_120
.LBB61_123:                             # %for.end549
                                        #   in Loop: Header=BB61_118 Depth=1
	jmp	.LBB61_124
.LBB61_124:                             # %for.inc550
                                        #   in Loop: Header=BB61_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_118
.LBB61_125:                             # %for.end552
	jmp	.LBB61_126
.LBB61_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB61_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_129 Depth 2
                                        #       Child Loop BB61_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB61_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB61_127 Depth=1
	movl	$0, -24(%rbp)
.LBB61_129:                             # %for.cond558
                                        #   Parent Loop BB61_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB61_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB61_129 Depth=2
	movl	$0, -20(%rbp)
.LBB61_131:                             # %for.cond562
                                        #   Parent Loop BB61_127 Depth=1
                                        #     Parent Loop BB61_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB61_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB61_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB61_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB61_135
.LBB61_134:                             # %cond.false569
                                        #   in Loop: Header=BB61_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB61_135:                             # %cond.end570
                                        #   in Loop: Header=BB61_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB61_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_131
.LBB61_137:                             # %for.end598
                                        #   in Loop: Header=BB61_129 Depth=2
	jmp	.LBB61_138
.LBB61_138:                             # %for.inc599
                                        #   in Loop: Header=BB61_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_129
.LBB61_139:                             # %for.end601
                                        #   in Loop: Header=BB61_127 Depth=1
	jmp	.LBB61_140
.LBB61_140:                             # %for.inc602
                                        #   in Loop: Header=BB61_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_127
.LBB61_141:                             # %for.end604
	jmp	.LBB61_142
.LBB61_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB61_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_145 Depth 2
                                        #       Child Loop BB61_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB61_143 Depth=1
	movl	$0, -28(%rbp)
.LBB61_145:                             # %for.cond611
                                        #   Parent Loop BB61_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB61_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB61_145 Depth=2
	movl	$0, -20(%rbp)
.LBB61_147:                             # %for.cond617
                                        #   Parent Loop BB61_143 Depth=1
                                        #     Parent Loop BB61_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB61_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB61_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB61_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB61_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB61_151
.LBB61_150:                             # %if.then638
                                        #   in Loop: Header=BB61_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB61_154
.LBB61_151:                             # %if.end639
                                        #   in Loop: Header=BB61_147 Depth=3
	jmp	.LBB61_152
.LBB61_152:                             # %for.inc640
                                        #   in Loop: Header=BB61_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_147
.LBB61_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB61_145 Depth=2
	jmp	.LBB61_154
.LBB61_154:                             # %for.end642
                                        #   in Loop: Header=BB61_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB61_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB61_143 Depth=1
	jmp	.LBB61_159
.LBB61_156:                             # %if.end646
                                        #   in Loop: Header=BB61_145 Depth=2
	jmp	.LBB61_157
.LBB61_157:                             # %for.inc647
                                        #   in Loop: Header=BB61_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_145
.LBB61_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB61_143 Depth=1
	jmp	.LBB61_159
.LBB61_159:                             # %for.end649
                                        #   in Loop: Header=BB61_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB61_161
# %bb.160:                              # %if.then652
	jmp	.LBB61_164
.LBB61_161:                             # %if.end653
                                        #   in Loop: Header=BB61_143 Depth=1
	jmp	.LBB61_162
.LBB61_162:                             # %for.inc654
                                        #   in Loop: Header=BB61_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_143
.LBB61_163:                             # %for.end656.loopexit
	jmp	.LBB61_164
.LBB61_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$68958177, -88(%rbp)    # imm = 0x41C37E1
	jne	.LBB61_166
.LBB61_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_165
.Lfunc_end61:
	.size	test_wp_B_slice.58, .Lfunc_end61-test_wp_B_slice.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.59
.LCPI62_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.59
	.p2align	4, 0x90
	.type	test_wp_B_slice.59,@function
test_wp_B_slice.59:                     # @test_wp_B_slice.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$619241380, -88(%rbp)   # imm = 0x24E8DFA4
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB62_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB62_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB62_4
.LBB62_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB62_4
.LBB62_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB62_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_7 Depth 2
                                        #       Child Loop BB62_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB62_5 Depth=1
	movl	$0, -24(%rbp)
.LBB62_7:                               # %for.cond9
                                        #   Parent Loop BB62_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB62_7 Depth=2
	movl	$0, -32(%rbp)
.LBB62_9:                               # %for.cond14
                                        #   Parent Loop BB62_5 Depth=1
                                        #     Parent Loop BB62_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB62_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB62_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB62_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_9
.LBB62_12:                              # %for.end
                                        #   in Loop: Header=BB62_7 Depth=2
	jmp	.LBB62_13
.LBB62_13:                              # %for.inc41
                                        #   in Loop: Header=BB62_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_7
.LBB62_14:                              # %for.end43
                                        #   in Loop: Header=BB62_5 Depth=1
	jmp	.LBB62_15
.LBB62_15:                              # %for.inc44
                                        #   in Loop: Header=BB62_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_5
.LBB62_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB62_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_19 Depth 2
                                        #       Child Loop BB62_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB62_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	$0, -24(%rbp)
.LBB62_19:                              # %for.cond50
                                        #   Parent Loop BB62_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB62_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB62_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB62_26
.LBB62_22:                              # %cond.false61
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB62_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$127, %eax
	jmp	.LBB62_25
.LBB62_24:                              # %cond.false71
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB62_25:                              # %cond.end79
                                        #   in Loop: Header=BB62_19 Depth=2
.LBB62_26:                              # %cond.end81
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB62_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB62_32
.LBB62_28:                              # %cond.false90
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB62_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	$127, %eax
	jmp	.LBB62_31
.LBB62_30:                              # %cond.false98
                                        #   in Loop: Header=BB62_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB62_31:                              # %cond.end104
                                        #   in Loop: Header=BB62_19 Depth=2
.LBB62_32:                              # %cond.end106
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB62_33:                              # %for.cond108
                                        #   Parent Loop BB62_17 Depth=1
                                        #     Parent Loop BB62_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB62_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB62_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB62_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB62_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB62_46
.LBB62_36:                              # %if.else
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB62_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB62_42
.LBB62_38:                              # %cond.false145
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB62_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB62_41
.LBB62_40:                              # %cond.false151
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB62_41:                              # %cond.end155
                                        #   in Loop: Header=BB62_33 Depth=3
.LBB62_42:                              # %cond.end157
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB62_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB62_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB62_45
.LBB62_44:                              # %if.then183
                                        #   in Loop: Header=BB62_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB62_45:                              # %if.end
                                        #   in Loop: Header=BB62_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB62_46:                              # %if.end220
                                        #   in Loop: Header=BB62_33 Depth=3
	jmp	.LBB62_47
.LBB62_47:                              # %for.inc221
                                        #   in Loop: Header=BB62_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_33
.LBB62_48:                              # %for.end223
                                        #   in Loop: Header=BB62_19 Depth=2
	jmp	.LBB62_49
.LBB62_49:                              # %for.inc224
                                        #   in Loop: Header=BB62_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_19
.LBB62_50:                              # %for.end226
                                        #   in Loop: Header=BB62_17 Depth=1
	jmp	.LBB62_51
.LBB62_51:                              # %for.inc227
                                        #   in Loop: Header=BB62_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_17
.LBB62_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB62_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB62_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_56 Depth 2
                                        #       Child Loop BB62_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB62_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB62_54 Depth=1
	movl	$0, -24(%rbp)
.LBB62_56:                              # %for.cond235
                                        #   Parent Loop BB62_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB62_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB62_56 Depth=2
	movl	$0, -20(%rbp)
.LBB62_58:                              # %for.cond238
                                        #   Parent Loop BB62_54 Depth=1
                                        #     Parent Loop BB62_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB62_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB62_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB62_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB62_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB62_62
.LBB62_61:                              # %cond.false243
                                        #   in Loop: Header=BB62_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB62_62:                              # %cond.end244
                                        #   in Loop: Header=BB62_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -80(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB62_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_58
.LBB62_64:                              # %for.end276
                                        #   in Loop: Header=BB62_56 Depth=2
	jmp	.LBB62_65
.LBB62_65:                              # %for.inc277
                                        #   in Loop: Header=BB62_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_56
.LBB62_66:                              # %for.end279
                                        #   in Loop: Header=BB62_54 Depth=1
	jmp	.LBB62_67
.LBB62_67:                              # %for.inc280
                                        #   in Loop: Header=BB62_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_54
.LBB62_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB62_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	$0, -28(%rbp)
.LBB62_71:                              # %for.cond287
                                        #   Parent Loop BB62_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB62_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB62_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_71
.LBB62_74:                              # %for.end327
                                        #   in Loop: Header=BB62_69 Depth=1
	jmp	.LBB62_75
.LBB62_75:                              # %for.inc328
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_69
.LBB62_76:                              # %for.end330
	jmp	.LBB62_142
.LBB62_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB62_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB62_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB62_78 Depth=1
	movl	$0, -24(%rbp)
.LBB62_80:                              # %for.cond335
                                        #   Parent Loop BB62_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB62_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB62_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB62_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_80
.LBB62_83:                              # %for.end345
                                        #   in Loop: Header=BB62_78 Depth=1
	jmp	.LBB62_84
.LBB62_84:                              # %for.inc346
                                        #   in Loop: Header=BB62_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_78
.LBB62_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB62_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_88 Depth 2
                                        #       Child Loop BB62_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	$0, -32(%rbp)
.LBB62_88:                              # %for.cond354
                                        #   Parent Loop BB62_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB62_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB62_90:                              # %for.cond372
                                        #   Parent Loop BB62_86 Depth=1
                                        #     Parent Loop BB62_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB62_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB62_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_90
.LBB62_93:                              # %for.end389
                                        #   in Loop: Header=BB62_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB62_94
	jp	.LBB62_94
	jmp	.LBB62_95
.LBB62_94:                              # %if.then396
                                        #   in Loop: Header=BB62_88 Depth=2
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_96
.LBB62_95:                              # %if.else406
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB62_96:                              # %if.end407
                                        #   in Loop: Header=BB62_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB62_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB62_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB62_99
.LBB62_98:                              # %if.then413
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB62_99:                              # %if.end414
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB62_88
.LBB62_101:                             # %for.end447
                                        #   in Loop: Header=BB62_86 Depth=1
	jmp	.LBB62_102
.LBB62_102:                             # %for.inc448
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_86
.LBB62_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB62_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB62_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_107 Depth 2
                                        #       Child Loop BB62_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB62_105 Depth=1
	movl	$0, -28(%rbp)
.LBB62_107:                             # %for.cond459
                                        #   Parent Loop BB62_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB62_107 Depth=2
	movl	$0, -20(%rbp)
.LBB62_109:                             # %for.cond465
                                        #   Parent Loop BB62_105 Depth=1
                                        #     Parent Loop BB62_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB62_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB62_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB62_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_109
.LBB62_112:                             # %for.end495
                                        #   in Loop: Header=BB62_107 Depth=2
	jmp	.LBB62_113
.LBB62_113:                             # %for.inc496
                                        #   in Loop: Header=BB62_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_107
.LBB62_114:                             # %for.end498
                                        #   in Loop: Header=BB62_105 Depth=1
	jmp	.LBB62_115
.LBB62_115:                             # %for.inc499
                                        #   in Loop: Header=BB62_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_105
.LBB62_116:                             # %for.end501
	jmp	.LBB62_126
.LBB62_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB62_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB62_118 Depth=1
	movl	$0, -28(%rbp)
.LBB62_120:                             # %for.cond508
                                        #   Parent Loop BB62_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB62_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB62_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_120
.LBB62_123:                             # %for.end549
                                        #   in Loop: Header=BB62_118 Depth=1
	jmp	.LBB62_124
.LBB62_124:                             # %for.inc550
                                        #   in Loop: Header=BB62_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_118
.LBB62_125:                             # %for.end552
	jmp	.LBB62_126
.LBB62_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB62_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_129 Depth 2
                                        #       Child Loop BB62_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB62_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB62_127 Depth=1
	movl	$0, -24(%rbp)
.LBB62_129:                             # %for.cond558
                                        #   Parent Loop BB62_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB62_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB62_129 Depth=2
	movl	$0, -20(%rbp)
.LBB62_131:                             # %for.cond562
                                        #   Parent Loop BB62_127 Depth=1
                                        #     Parent Loop BB62_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB62_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB62_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB62_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB62_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB62_135
.LBB62_134:                             # %cond.false569
                                        #   in Loop: Header=BB62_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB62_135:                             # %cond.end570
                                        #   in Loop: Header=BB62_131 Depth=3
	movl	%eax, -80(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB62_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_131
.LBB62_137:                             # %for.end598
                                        #   in Loop: Header=BB62_129 Depth=2
	jmp	.LBB62_138
.LBB62_138:                             # %for.inc599
                                        #   in Loop: Header=BB62_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB62_129
.LBB62_139:                             # %for.end601
                                        #   in Loop: Header=BB62_127 Depth=1
	jmp	.LBB62_140
.LBB62_140:                             # %for.inc602
                                        #   in Loop: Header=BB62_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_127
.LBB62_141:                             # %for.end604
	jmp	.LBB62_142
.LBB62_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB62_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_145 Depth 2
                                        #       Child Loop BB62_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB62_143 Depth=1
	movl	$0, -28(%rbp)
.LBB62_145:                             # %for.cond611
                                        #   Parent Loop BB62_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB62_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB62_145 Depth=2
	movl	$0, -20(%rbp)
.LBB62_147:                             # %for.cond617
                                        #   Parent Loop BB62_143 Depth=1
                                        #     Parent Loop BB62_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB62_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB62_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB62_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB62_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB62_151
.LBB62_150:                             # %if.then638
                                        #   in Loop: Header=BB62_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB62_154
.LBB62_151:                             # %if.end639
                                        #   in Loop: Header=BB62_147 Depth=3
	jmp	.LBB62_152
.LBB62_152:                             # %for.inc640
                                        #   in Loop: Header=BB62_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_147
.LBB62_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB62_145 Depth=2
	jmp	.LBB62_154
.LBB62_154:                             # %for.end642
                                        #   in Loop: Header=BB62_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB62_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB62_143 Depth=1
	jmp	.LBB62_159
.LBB62_156:                             # %if.end646
                                        #   in Loop: Header=BB62_145 Depth=2
	jmp	.LBB62_157
.LBB62_157:                             # %for.inc647
                                        #   in Loop: Header=BB62_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB62_145
.LBB62_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB62_143 Depth=1
	jmp	.LBB62_159
.LBB62_159:                             # %for.end649
                                        #   in Loop: Header=BB62_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB62_161
# %bb.160:                              # %if.then652
	jmp	.LBB62_164
.LBB62_161:                             # %if.end653
                                        #   in Loop: Header=BB62_143 Depth=1
	jmp	.LBB62_162
.LBB62_162:                             # %for.inc654
                                        #   in Loop: Header=BB62_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_143
.LBB62_163:                             # %for.end656.loopexit
	jmp	.LBB62_164
.LBB62_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$619241380, -88(%rbp)   # imm = 0x24E8DFA4
	jne	.LBB62_166
.LBB62_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_165
.Lfunc_end62:
	.size	test_wp_B_slice.59, .Lfunc_end62-test_wp_B_slice.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.60
.LCPI63_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.60
	.p2align	4, 0x90
	.type	test_wp_B_slice.60,@function
test_wp_B_slice.60:                     # @test_wp_B_slice.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$22488476, -76(%rbp)    # imm = 0x157259C
	movl	%edi, -80(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB63_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB63_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB63_4
.LBB63_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB63_4
.LBB63_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB63_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_7 Depth 2
                                        #       Child Loop BB63_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB63_5 Depth=1
	movl	$0, -24(%rbp)
.LBB63_7:                               # %for.cond9
                                        #   Parent Loop BB63_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB63_7 Depth=2
	movl	$0, -32(%rbp)
.LBB63_9:                               # %for.cond14
                                        #   Parent Loop BB63_5 Depth=1
                                        #     Parent Loop BB63_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB63_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB63_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB63_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_9
.LBB63_12:                              # %for.end
                                        #   in Loop: Header=BB63_7 Depth=2
	jmp	.LBB63_13
.LBB63_13:                              # %for.inc41
                                        #   in Loop: Header=BB63_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_7
.LBB63_14:                              # %for.end43
                                        #   in Loop: Header=BB63_5 Depth=1
	jmp	.LBB63_15
.LBB63_15:                              # %for.inc44
                                        #   in Loop: Header=BB63_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_5
.LBB63_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB63_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_19 Depth 2
                                        #       Child Loop BB63_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB63_17 Depth=1
	movl	$0, -24(%rbp)
.LBB63_19:                              # %for.cond50
                                        #   Parent Loop BB63_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB63_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB63_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB63_26
.LBB63_22:                              # %cond.false61
                                        #   in Loop: Header=BB63_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB63_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	$127, %eax
	jmp	.LBB63_25
.LBB63_24:                              # %cond.false71
                                        #   in Loop: Header=BB63_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB63_25:                              # %cond.end79
                                        #   in Loop: Header=BB63_19 Depth=2
.LBB63_26:                              # %cond.end81
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB63_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB63_32
.LBB63_28:                              # %cond.false90
                                        #   in Loop: Header=BB63_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB63_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	$127, %eax
	jmp	.LBB63_31
.LBB63_30:                              # %cond.false98
                                        #   in Loop: Header=BB63_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB63_31:                              # %cond.end104
                                        #   in Loop: Header=BB63_19 Depth=2
.LBB63_32:                              # %cond.end106
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	%eax, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB63_33:                              # %for.cond108
                                        #   Parent Loop BB63_17 Depth=1
                                        #     Parent Loop BB63_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB63_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB63_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB63_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB63_46
.LBB63_36:                              # %if.else
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB63_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB63_42
.LBB63_38:                              # %cond.false145
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB63_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB63_41
.LBB63_40:                              # %cond.false151
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	-52(%rbp), %eax
	imull	-60(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB63_41:                              # %cond.end155
                                        #   in Loop: Header=BB63_33 Depth=3
.LBB63_42:                              # %cond.end157
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB63_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB63_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB63_45
.LBB63_44:                              # %if.then183
                                        #   in Loop: Header=BB63_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB63_45:                              # %if.end
                                        #   in Loop: Header=BB63_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB63_46:                              # %if.end220
                                        #   in Loop: Header=BB63_33 Depth=3
	jmp	.LBB63_47
.LBB63_47:                              # %for.inc221
                                        #   in Loop: Header=BB63_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_33
.LBB63_48:                              # %for.end223
                                        #   in Loop: Header=BB63_19 Depth=2
	jmp	.LBB63_49
.LBB63_49:                              # %for.inc224
                                        #   in Loop: Header=BB63_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_19
.LBB63_50:                              # %for.end226
                                        #   in Loop: Header=BB63_17 Depth=1
	jmp	.LBB63_51
.LBB63_51:                              # %for.inc227
                                        #   in Loop: Header=BB63_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_17
.LBB63_52:                              # %for.end229
	cmpl	$1, -80(%rbp)
	jne	.LBB63_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB63_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_56 Depth 2
                                        #       Child Loop BB63_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB63_54 Depth=1
	movl	$0, -24(%rbp)
.LBB63_56:                              # %for.cond235
                                        #   Parent Loop BB63_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB63_56 Depth=2
	movl	$0, -20(%rbp)
.LBB63_58:                              # %for.cond238
                                        #   Parent Loop BB63_54 Depth=1
                                        #     Parent Loop BB63_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB63_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB63_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB63_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB63_62
.LBB63_61:                              # %cond.false243
                                        #   in Loop: Header=BB63_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB63_62:                              # %cond.end244
                                        #   in Loop: Header=BB63_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB63_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_58
.LBB63_64:                              # %for.end276
                                        #   in Loop: Header=BB63_56 Depth=2
	jmp	.LBB63_65
.LBB63_65:                              # %for.inc277
                                        #   in Loop: Header=BB63_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_56
.LBB63_66:                              # %for.end279
                                        #   in Loop: Header=BB63_54 Depth=1
	jmp	.LBB63_67
.LBB63_67:                              # %for.inc280
                                        #   in Loop: Header=BB63_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_54
.LBB63_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB63_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB63_69 Depth=1
	movl	$0, -28(%rbp)
.LBB63_71:                              # %for.cond287
                                        #   Parent Loop BB63_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB63_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB63_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_71
.LBB63_74:                              # %for.end327
                                        #   in Loop: Header=BB63_69 Depth=1
	jmp	.LBB63_75
.LBB63_75:                              # %for.inc328
                                        #   in Loop: Header=BB63_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_69
.LBB63_76:                              # %for.end330
	jmp	.LBB63_142
.LBB63_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB63_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB63_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB63_78 Depth=1
	movl	$0, -24(%rbp)
.LBB63_80:                              # %for.cond335
                                        #   Parent Loop BB63_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB63_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB63_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB63_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_80
.LBB63_83:                              # %for.end345
                                        #   in Loop: Header=BB63_78 Depth=1
	jmp	.LBB63_84
.LBB63_84:                              # %for.inc346
                                        #   in Loop: Header=BB63_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_78
.LBB63_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB63_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_88 Depth 2
                                        #       Child Loop BB63_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB63_86 Depth=1
	movl	$0, -32(%rbp)
.LBB63_88:                              # %for.cond354
                                        #   Parent Loop BB63_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB63_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB63_90:                              # %for.cond372
                                        #   Parent Loop BB63_86 Depth=1
                                        #     Parent Loop BB63_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB63_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB63_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_90
.LBB63_93:                              # %for.end389
                                        #   in Loop: Header=BB63_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB63_94
	jp	.LBB63_94
	jmp	.LBB63_95
.LBB63_94:                              # %if.then396
                                        #   in Loop: Header=BB63_88 Depth=2
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_96
.LBB63_95:                              # %if.else406
                                        #   in Loop: Header=BB63_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB63_96:                              # %if.end407
                                        #   in Loop: Header=BB63_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB63_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB63_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB63_99
.LBB63_98:                              # %if.then413
                                        #   in Loop: Header=BB63_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB63_99:                              # %if.end414
                                        #   in Loop: Header=BB63_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB63_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_88
.LBB63_101:                             # %for.end447
                                        #   in Loop: Header=BB63_86 Depth=1
	jmp	.LBB63_102
.LBB63_102:                             # %for.inc448
                                        #   in Loop: Header=BB63_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_86
.LBB63_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB63_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB63_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_107 Depth 2
                                        #       Child Loop BB63_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB63_105 Depth=1
	movl	$0, -28(%rbp)
.LBB63_107:                             # %for.cond459
                                        #   Parent Loop BB63_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB63_107 Depth=2
	movl	$0, -20(%rbp)
.LBB63_109:                             # %for.cond465
                                        #   Parent Loop BB63_105 Depth=1
                                        #     Parent Loop BB63_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB63_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB63_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_109
.LBB63_112:                             # %for.end495
                                        #   in Loop: Header=BB63_107 Depth=2
	jmp	.LBB63_113
.LBB63_113:                             # %for.inc496
                                        #   in Loop: Header=BB63_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_107
.LBB63_114:                             # %for.end498
                                        #   in Loop: Header=BB63_105 Depth=1
	jmp	.LBB63_115
.LBB63_115:                             # %for.inc499
                                        #   in Loop: Header=BB63_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_105
.LBB63_116:                             # %for.end501
	jmp	.LBB63_126
.LBB63_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB63_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB63_118 Depth=1
	movl	$0, -28(%rbp)
.LBB63_120:                             # %for.cond508
                                        #   Parent Loop BB63_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB63_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB63_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_120
.LBB63_123:                             # %for.end549
                                        #   in Loop: Header=BB63_118 Depth=1
	jmp	.LBB63_124
.LBB63_124:                             # %for.inc550
                                        #   in Loop: Header=BB63_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_118
.LBB63_125:                             # %for.end552
	jmp	.LBB63_126
.LBB63_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB63_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_129 Depth 2
                                        #       Child Loop BB63_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB63_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB63_127 Depth=1
	movl	$0, -24(%rbp)
.LBB63_129:                             # %for.cond558
                                        #   Parent Loop BB63_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB63_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB63_129 Depth=2
	movl	$0, -20(%rbp)
.LBB63_131:                             # %for.cond562
                                        #   Parent Loop BB63_127 Depth=1
                                        #     Parent Loop BB63_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB63_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB63_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB63_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB63_135
.LBB63_134:                             # %cond.false569
                                        #   in Loop: Header=BB63_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB63_135:                             # %cond.end570
                                        #   in Loop: Header=BB63_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB63_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_131
.LBB63_137:                             # %for.end598
                                        #   in Loop: Header=BB63_129 Depth=2
	jmp	.LBB63_138
.LBB63_138:                             # %for.inc599
                                        #   in Loop: Header=BB63_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_129
.LBB63_139:                             # %for.end601
                                        #   in Loop: Header=BB63_127 Depth=1
	jmp	.LBB63_140
.LBB63_140:                             # %for.inc602
                                        #   in Loop: Header=BB63_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_127
.LBB63_141:                             # %for.end604
	jmp	.LBB63_142
.LBB63_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB63_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_145 Depth 2
                                        #       Child Loop BB63_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB63_143 Depth=1
	movl	$0, -28(%rbp)
.LBB63_145:                             # %for.cond611
                                        #   Parent Loop BB63_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB63_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB63_145 Depth=2
	movl	$0, -20(%rbp)
.LBB63_147:                             # %for.cond617
                                        #   Parent Loop BB63_143 Depth=1
                                        #     Parent Loop BB63_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB63_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB63_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB63_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB63_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB63_151
.LBB63_150:                             # %if.then638
                                        #   in Loop: Header=BB63_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB63_154
.LBB63_151:                             # %if.end639
                                        #   in Loop: Header=BB63_147 Depth=3
	jmp	.LBB63_152
.LBB63_152:                             # %for.inc640
                                        #   in Loop: Header=BB63_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_147
.LBB63_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB63_145 Depth=2
	jmp	.LBB63_154
.LBB63_154:                             # %for.end642
                                        #   in Loop: Header=BB63_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB63_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB63_143 Depth=1
	jmp	.LBB63_159
.LBB63_156:                             # %if.end646
                                        #   in Loop: Header=BB63_145 Depth=2
	jmp	.LBB63_157
.LBB63_157:                             # %for.inc647
                                        #   in Loop: Header=BB63_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_145
.LBB63_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB63_143 Depth=1
	jmp	.LBB63_159
.LBB63_159:                             # %for.end649
                                        #   in Loop: Header=BB63_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB63_161
# %bb.160:                              # %if.then652
	jmp	.LBB63_164
.LBB63_161:                             # %if.end653
                                        #   in Loop: Header=BB63_143 Depth=1
	jmp	.LBB63_162
.LBB63_162:                             # %for.inc654
                                        #   in Loop: Header=BB63_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_143
.LBB63_163:                             # %for.end656.loopexit
	jmp	.LBB63_164
.LBB63_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$22488476, -76(%rbp)    # imm = 0x157259C
	jne	.LBB63_166
.LBB63_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_165
.Lfunc_end63:
	.size	test_wp_B_slice.60, .Lfunc_end63-test_wp_B_slice.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_B_slice.61
.LCPI64_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_B_slice.61
	.p2align	4, 0x90
	.type	estimate_weighting_factor_B_slice.61,@function
estimate_weighting_factor_B_slice.61:   # @estimate_weighting_factor_B_slice.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$35424, %rsp            # imm = 0x8A60
	movl	$1162929758, -92(%rbp)  # imm = 0x4550E65E
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB64_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB64_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB64_4
.LBB64_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB64_4
.LBB64_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB64_6
# %bb.5:                                # %if.then
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	jmp	.LBB64_7
.LBB64_6:                               # %if.else
	movl	$6, luma_log_weight_denom
	movl	$6, chroma_log_weight_denom
.LBB64_7:                               # %if.end
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -52(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -48(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB64_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_10 Depth 2
                                        #       Child Loop BB64_12 Depth 3
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_19
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	$0, -8(%rbp)
.LBB64_10:                              # %for.cond14
                                        #   Parent Loop BB64_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_12 Depth 3
	movl	-8(%rbp), %eax
	movslq	-4(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_17
# %bb.11:                               # %for.body18
                                        #   in Loop: Header=BB64_10 Depth=2
	movl	$0, -16(%rbp)
.LBB64_12:                              # %for.cond19
                                        #   Parent Loop BB64_8 Depth=1
                                        #     Parent Loop BB64_10 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -16(%rbp)
	jge	.LBB64_15
# %bb.13:                               # %for.body21
                                        #   in Loop: Header=BB64_12 Depth=3
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movslq	-16(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB64_12 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_12
.LBB64_15:                              # %for.end
                                        #   in Loop: Header=BB64_10 Depth=2
	jmp	.LBB64_16
.LBB64_16:                              # %for.inc50
                                        #   in Loop: Header=BB64_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_10
.LBB64_17:                              # %for.end52
                                        #   in Loop: Header=BB64_8 Depth=1
	jmp	.LBB64_18
.LBB64_18:                              # %for.inc53
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_8
.LBB64_19:                              # %for.end55
	movl	$0, -4(%rbp)
.LBB64_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_22 Depth 2
                                        #       Child Loop BB64_36 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB64_55
# %bb.21:                               # %for.body58
                                        #   in Loop: Header=BB64_20 Depth=1
	movl	$0, -8(%rbp)
.LBB64_22:                              # %for.cond59
                                        #   Parent Loop BB64_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_36 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB64_53
# %bb.23:                               # %for.body61
                                        #   in Loop: Header=BB64_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB64_25
# %bb.24:                               # %cond.true69
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB64_29
.LBB64_25:                              # %cond.false70
                                        #   in Loop: Header=BB64_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB64_27
# %bb.26:                               # %cond.true79
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	$127, %eax
	jmp	.LBB64_28
.LBB64_27:                              # %cond.false80
                                        #   in Loop: Header=BB64_22 Depth=2
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB64_28:                              # %cond.end88
                                        #   in Loop: Header=BB64_22 Depth=2
.LBB64_29:                              # %cond.end90
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB64_31
# %bb.30:                               # %cond.true98
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB64_35
.LBB64_31:                              # %cond.false99
                                        #   in Loop: Header=BB64_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB64_33
# %bb.32:                               # %cond.true106
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	$127, %eax
	jmp	.LBB64_34
.LBB64_33:                              # %cond.false107
                                        #   in Loop: Header=BB64_22 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB64_34:                              # %cond.end113
                                        #   in Loop: Header=BB64_22 Depth=2
.LBB64_35:                              # %cond.end115
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	%eax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB64_36:                              # %for.cond117
                                        #   Parent Loop BB64_20 Depth=1
                                        #     Parent Loop BB64_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB64_51
# %bb.37:                               # %for.body119
                                        #   in Loop: Header=BB64_36 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB64_39
# %bb.38:                               # %if.then121
                                        #   in Loop: Header=BB64_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movq	%rcx, %rsi
	addq	$2700, %rsi             # imm = 0xA8C
	movslq	-4(%rbp), %rdi
	imulq	$180, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	imulq	$12, %rdi, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movl	%edx, (%rsi,%rdi,4)
	movslq	-20(%rbp), %rdx
	movl	-52(%rbp,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rcx
	movslq	-20(%rbp), %rsi
	movl	%edx, (%rcx,%rsi,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB64_49
.LBB64_39:                              # %if.else154
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB64_41
# %bb.40:                               # %cond.true159
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB64_45
.LBB64_41:                              # %cond.false160
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB64_43
# %bb.42:                               # %cond.true165
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB64_44
.LBB64_43:                              # %cond.false166
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB64_44:                              # %cond.end170
                                        #   in Loop: Header=BB64_36 Depth=3
.LBB64_45:                              # %cond.end172
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB64_47
# %bb.46:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_36 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB64_48
.LBB64_47:                              # %if.then198
                                        #   in Loop: Header=BB64_36 Depth=3
	movslq	-20(%rbp), %rax
	movl	-52(%rbp,%rax,4), %eax
	leaq	-19216(%rbp), %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_48:                              # %if.end208
                                        #   in Loop: Header=BB64_36 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-4(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-4(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB64_49:                              # %if.end238
                                        #   in Loop: Header=BB64_36 Depth=3
	jmp	.LBB64_50
.LBB64_50:                              # %for.inc239
                                        #   in Loop: Header=BB64_36 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_36
.LBB64_51:                              # %for.end241
                                        #   in Loop: Header=BB64_22 Depth=2
	jmp	.LBB64_52
.LBB64_52:                              # %for.inc242
                                        #   in Loop: Header=BB64_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_22
.LBB64_53:                              # %for.end244
                                        #   in Loop: Header=BB64_20 Depth=1
	jmp	.LBB64_54
.LBB64_54:                              # %for.inc245
                                        #   in Loop: Header=BB64_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_20
.LBB64_55:                              # %for.end247
	movq	active_pps, %rax
	cmpl	$2, 196(%rax)
	jne	.LBB64_100
# %bb.56:                               # %if.then250
	movl	$0, -4(%rbp)
.LBB64_57:                              # %for.cond251
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_59 Depth 2
                                        #       Child Loop BB64_61 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB64_71
# %bb.58:                               # %for.body253
                                        #   in Loop: Header=BB64_57 Depth=1
	movl	$0, -8(%rbp)
.LBB64_59:                              # %for.cond254
                                        #   Parent Loop BB64_57 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_61 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB64_69
# %bb.60:                               # %for.body256
                                        #   in Loop: Header=BB64_59 Depth=2
	movl	$0, -20(%rbp)
.LBB64_61:                              # %for.cond257
                                        #   Parent Loop BB64_57 Depth=1
                                        #     Parent Loop BB64_59 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB64_67
# %bb.62:                               # %for.body259
                                        #   in Loop: Header=BB64_61 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB64_64
# %bb.63:                               # %cond.true261
                                        #   in Loop: Header=BB64_61 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB64_65
.LBB64_64:                              # %cond.false262
                                        #   in Loop: Header=BB64_61 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB64_65:                              # %cond.end263
                                        #   in Loop: Header=BB64_61 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-4(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.66:                               # %for.inc293
                                        #   in Loop: Header=BB64_61 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_61
.LBB64_67:                              # %for.end295
                                        #   in Loop: Header=BB64_59 Depth=2
	jmp	.LBB64_68
.LBB64_68:                              # %for.inc296
                                        #   in Loop: Header=BB64_59 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_59
.LBB64_69:                              # %for.end298
                                        #   in Loop: Header=BB64_57 Depth=1
	jmp	.LBB64_70
.LBB64_70:                              # %for.inc299
                                        #   in Loop: Header=BB64_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_57
.LBB64_71:                              # %for.end301
	movl	$0, -12(%rbp)
.LBB64_72:                              # %for.cond302
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_74 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_79
# %bb.73:                               # %for.body305
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	$0, -24(%rbp)
.LBB64_74:                              # %for.cond306
                                        #   Parent Loop BB64_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_77
# %bb.75:                               # %for.body310
                                        #   in Loop: Header=BB64_74 Depth=2
	movl	-52(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	-48(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movl	-44(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.76:                               # %for.inc344
                                        #   in Loop: Header=BB64_74 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_74
.LBB64_77:                              # %for.end346
                                        #   in Loop: Header=BB64_72 Depth=1
	jmp	.LBB64_78
.LBB64_78:                              # %for.inc347
                                        #   in Loop: Header=BB64_72 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_72
.LBB64_79:                              # %for.end349
	movl	$0, -4(%rbp)
.LBB64_80:                              # %for.cond350
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_82 Depth 2
                                        #       Child Loop BB64_84 Depth 3
                                        #       Child Loop BB64_88 Depth 3
                                        #         Child Loop BB64_90 Depth 4
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB64_99
# %bb.81:                               # %for.body352
                                        #   in Loop: Header=BB64_80 Depth=1
	movl	$0, -8(%rbp)
.LBB64_82:                              # %for.cond353
                                        #   Parent Loop BB64_80 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_84 Depth 3
                                        #       Child Loop BB64_88 Depth 3
                                        #         Child Loop BB64_90 Depth 4
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB64_97
# %bb.83:                               # %for.body355
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	$0, -16(%rbp)
.LBB64_84:                              # %for.cond356
                                        #   Parent Loop BB64_80 Depth=1
                                        #     Parent Loop BB64_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_87
# %bb.85:                               # %for.body359
                                        #   in Loop: Header=BB64_84 Depth=3
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6440(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.86:                               # %for.inc378
                                        #   in Loop: Header=BB64_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_84
.LBB64_87:                              # %for.end380
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	$0, -16(%rbp)
.LBB64_88:                              # %for.cond381
                                        #   Parent Loop BB64_80 Depth=1
                                        #     Parent Loop BB64_82 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_90 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_95
# %bb.89:                               # %for.body386
                                        #   in Loop: Header=BB64_88 Depth=3
	movl	$0, -32(%rbp)
.LBB64_90:                              # %for.cond387
                                        #   Parent Loop BB64_80 Depth=1
                                        #     Parent Loop BB64_82 Depth=2
                                        #       Parent Loop BB64_88 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_93
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB64_90 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	listX+8, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	listX+8, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.92:                               # %for.inc419
                                        #   in Loop: Header=BB64_90 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB64_90
.LBB64_93:                              # %for.end421
                                        #   in Loop: Header=BB64_88 Depth=3
	jmp	.LBB64_94
.LBB64_94:                              # %for.inc422
                                        #   in Loop: Header=BB64_88 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_88
.LBB64_95:                              # %for.end424
                                        #   in Loop: Header=BB64_82 Depth=2
	jmp	.LBB64_96
.LBB64_96:                              # %for.inc425
                                        #   in Loop: Header=BB64_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_82
.LBB64_97:                              # %for.end427
                                        #   in Loop: Header=BB64_80 Depth=1
	jmp	.LBB64_98
.LBB64_98:                              # %for.inc428
                                        #   in Loop: Header=BB64_80 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_80
.LBB64_99:                              # %for.end430
	jmp	.LBB64_189
.LBB64_100:                             # %if.else431
	movl	$0, -4(%rbp)
.LBB64_101:                             # %for.cond432
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_103 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB64_108
# %bb.102:                              # %for.body435
                                        #   in Loop: Header=BB64_101 Depth=1
	movl	$0, -8(%rbp)
.LBB64_103:                             # %for.cond436
                                        #   Parent Loop BB64_101 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB64_106
# %bb.104:                              # %for.body439
                                        #   in Loop: Header=BB64_103 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-80(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -80(%rbp)
# %bb.105:                              # %for.inc445
                                        #   in Loop: Header=BB64_103 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_103
.LBB64_106:                             # %for.end447
                                        #   in Loop: Header=BB64_101 Depth=1
	jmp	.LBB64_107
.LBB64_107:                             # %for.inc448
                                        #   in Loop: Header=BB64_101 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_101
.LBB64_108:                             # %for.end450
	movl	$0, -12(%rbp)
.LBB64_109:                             # %for.cond451
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_111 Depth 2
                                        #       Child Loop BB64_113 Depth 3
                                        #       Child Loop BB64_123 Depth 3
                                        #       Child Loop BB64_133 Depth 3
                                        #         Child Loop BB64_135 Depth 4
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_150
# %bb.110:                              # %for.body455
                                        #   in Loop: Header=BB64_109 Depth=1
	movl	$0, -16(%rbp)
.LBB64_111:                             # %for.cond456
                                        #   Parent Loop BB64_109 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_113 Depth 3
                                        #       Child Loop BB64_123 Depth 3
                                        #       Child Loop BB64_133 Depth 3
                                        #         Child Loop BB64_135 Depth 4
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_148
# %bb.112:                              # %for.body461
                                        #   in Loop: Header=BB64_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -72(%rbp)
	movslq	-12(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -4(%rbp)
.LBB64_113:                             # %for.cond476
                                        #   Parent Loop BB64_109 Depth=1
                                        #     Parent Loop BB64_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_116
# %bb.114:                              # %for.body482
                                        #   in Loop: Header=BB64_113 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.115:                              # %for.inc491
                                        #   in Loop: Header=BB64_113 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_113
.LBB64_116:                             # %for.end493
                                        #   in Loop: Header=BB64_111 Depth=2
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB64_117
	jp	.LBB64_117
	jmp	.LBB64_118
.LBB64_117:                             # %if.then500
                                        #   in Loop: Header=BB64_111 Depth=2
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vmulsd	-80(%rbp), %xmm1, %xmm1
	movslq	-12(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB64_119
.LBB64_118:                             # %if.else511
                                        #   in Loop: Header=BB64_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB64_119:                             # %if.end513
                                        #   in Loop: Header=BB64_111 Depth=2
	cmpl	$-64, -28(%rbp)
	jl	.LBB64_121
# %bb.120:                              # %lor.lhs.false516
                                        #   in Loop: Header=BB64_111 Depth=2
	cmpl	$127, -28(%rbp)
	jle	.LBB64_122
.LBB64_121:                             # %if.then519
                                        #   in Loop: Header=BB64_111 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB64_122:                             # %if.end521
                                        #   in Loop: Header=BB64_111 Depth=2
	movl	$0, -36(%rbp)
	movl	-28(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-48(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-44(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
	movl	$0, -4(%rbp)
.LBB64_123:                             # %for.cond554
                                        #   Parent Loop BB64_109 Depth=1
                                        #     Parent Loop BB64_111 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_132
# %bb.124:                              # %for.body560
                                        #   in Loop: Header=BB64_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB64_126
# %bb.125:                              # %cond.true570
                                        #   in Loop: Header=BB64_123 Depth=3
	xorl	%eax, %eax
	jmp	.LBB64_130
.LBB64_126:                             # %cond.false571
                                        #   in Loop: Header=BB64_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_128
# %bb.127:                              # %cond.true581
                                        #   in Loop: Header=BB64_123 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_129
.LBB64_128:                             # %cond.false583
                                        #   in Loop: Header=BB64_123 Depth=3
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB64_129:                             # %cond.end591
                                        #   in Loop: Header=BB64_123 Depth=3
.LBB64_130:                             # %cond.end593
                                        #   in Loop: Header=BB64_123 Depth=3
	movq	-104(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.131:                              # %for.inc598
                                        #   in Loop: Header=BB64_123 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_123
.LBB64_132:                             # %for.end600
                                        #   in Loop: Header=BB64_111 Depth=2
	movl	$0, -4(%rbp)
.LBB64_133:                             # %for.cond601
                                        #   Parent Loop BB64_109 Depth=1
                                        #     Parent Loop BB64_111 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_135 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_146
# %bb.134:                              # %for.body607
                                        #   in Loop: Header=BB64_133 Depth=3
	movl	$0, -8(%rbp)
.LBB64_135:                             # %for.cond608
                                        #   Parent Loop BB64_109 Depth=1
                                        #     Parent Loop BB64_111 Depth=2
                                        #       Parent Loop BB64_133 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_144
# %bb.136:                              # %for.body614
                                        #   in Loop: Header=BB64_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB64_138
# %bb.137:                              # %cond.true629
                                        #   in Loop: Header=BB64_135 Depth=4
	xorl	%eax, %eax
	jmp	.LBB64_142
.LBB64_138:                             # %cond.false630
                                        #   in Loop: Header=BB64_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB64_140
# %bb.139:                              # %cond.true646
                                        #   in Loop: Header=BB64_135 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_141
.LBB64_140:                             # %cond.false648
                                        #   in Loop: Header=BB64_135 Depth=4
	movq	listX, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	imull	-28(%rbp), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	addl	-36(%rbp), %eax
.LBB64_141:                             # %cond.end661
                                        #   in Loop: Header=BB64_135 Depth=4
.LBB64_142:                             # %cond.end663
                                        #   in Loop: Header=BB64_135 Depth=4
	movq	listX, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.143:                              # %for.inc673
                                        #   in Loop: Header=BB64_135 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_135
.LBB64_144:                             # %for.end675
                                        #   in Loop: Header=BB64_133 Depth=3
	jmp	.LBB64_145
.LBB64_145:                             # %for.inc676
                                        #   in Loop: Header=BB64_133 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_133
.LBB64_146:                             # %for.end678
                                        #   in Loop: Header=BB64_111 Depth=2
	jmp	.LBB64_147
.LBB64_147:                             # %for.inc679
                                        #   in Loop: Header=BB64_111 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_111
.LBB64_148:                             # %for.end681
                                        #   in Loop: Header=BB64_109 Depth=1
	jmp	.LBB64_149
.LBB64_149:                             # %for.inc682
                                        #   in Loop: Header=BB64_109 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_109
.LBB64_150:                             # %for.end684
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB64_164
# %bb.151:                              # %if.then688
	movl	$0, -12(%rbp)
.LBB64_152:                             # %for.cond689
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_154 Depth 2
                                        #       Child Loop BB64_156 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_163
# %bb.153:                              # %for.body693
                                        #   in Loop: Header=BB64_152 Depth=1
	movl	$0, -24(%rbp)
.LBB64_154:                             # %for.cond694
                                        #   Parent Loop BB64_152 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_156 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_161
# %bb.155:                              # %for.body699
                                        #   in Loop: Header=BB64_154 Depth=2
	movl	$0, -20(%rbp)
.LBB64_156:                             # %for.cond700
                                        #   Parent Loop BB64_152 Depth=1
                                        #     Parent Loop BB64_154 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB64_159
# %bb.157:                              # %for.body703
                                        #   in Loop: Header=BB64_156 Depth=3
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.158:                              # %for.inc728
                                        #   in Loop: Header=BB64_156 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_156
.LBB64_159:                             # %for.end730
                                        #   in Loop: Header=BB64_154 Depth=2
	jmp	.LBB64_160
.LBB64_160:                             # %for.inc731
                                        #   in Loop: Header=BB64_154 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_154
.LBB64_161:                             # %for.end733
                                        #   in Loop: Header=BB64_152 Depth=1
	jmp	.LBB64_162
.LBB64_162:                             # %for.inc734
                                        #   in Loop: Header=BB64_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_152
.LBB64_163:                             # %for.end736
	jmp	.LBB64_173
.LBB64_164:                             # %if.else737
	movl	$0, -12(%rbp)
.LBB64_165:                             # %for.cond738
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_167 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_172
# %bb.166:                              # %for.body742
                                        #   in Loop: Header=BB64_165 Depth=1
	movl	$0, -24(%rbp)
.LBB64_167:                             # %for.cond743
                                        #   Parent Loop BB64_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB64_170
# %bb.168:                              # %for.body748
                                        #   in Loop: Header=BB64_167 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-24(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.169:                              # %for.inc782
                                        #   in Loop: Header=BB64_167 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_167
.LBB64_170:                             # %for.end784
                                        #   in Loop: Header=BB64_165 Depth=1
	jmp	.LBB64_171
.LBB64_171:                             # %for.inc785
                                        #   in Loop: Header=BB64_165 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_165
.LBB64_172:                             # %for.end787
	jmp	.LBB64_173
.LBB64_173:                             # %if.end788
	movl	$0, -4(%rbp)
.LBB64_174:                             # %for.cond789
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_176 Depth 2
                                        #       Child Loop BB64_178 Depth 3
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB64_188
# %bb.175:                              # %for.body792
                                        #   in Loop: Header=BB64_174 Depth=1
	movl	$0, -8(%rbp)
.LBB64_176:                             # %for.cond793
                                        #   Parent Loop BB64_174 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_178 Depth 3
	movl	-8(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB64_186
# %bb.177:                              # %for.body796
                                        #   in Loop: Header=BB64_176 Depth=2
	movl	$0, -20(%rbp)
.LBB64_178:                             # %for.cond797
                                        #   Parent Loop BB64_174 Depth=1
                                        #     Parent Loop BB64_176 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB64_184
# %bb.179:                              # %for.body800
                                        #   in Loop: Header=BB64_178 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB64_181
# %bb.180:                              # %cond.true803
                                        #   in Loop: Header=BB64_178 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB64_182
.LBB64_181:                             # %cond.false804
                                        #   in Loop: Header=BB64_178 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB64_182:                             # %cond.end805
                                        #   in Loop: Header=BB64_178 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.183:                              # %for.inc831
                                        #   in Loop: Header=BB64_178 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB64_178
.LBB64_184:                             # %for.end833
                                        #   in Loop: Header=BB64_176 Depth=2
	jmp	.LBB64_185
.LBB64_185:                             # %for.inc834
                                        #   in Loop: Header=BB64_176 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_176
.LBB64_186:                             # %for.end836
                                        #   in Loop: Header=BB64_174 Depth=1
	jmp	.LBB64_187
.LBB64_187:                             # %for.inc837
                                        #   in Loop: Header=BB64_174 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_174
.LBB64_188:                             # %for.end839
	jmp	.LBB64_189
.LBB64_189:                             # %if.end840
	cmpl	$1162929758, -92(%rbp)  # imm = 0x4550E65E
	jne	.LBB64_191
.LBB64_190:
	addq	$35424, %rsp            # imm = 0x8A60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_191:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_190
.Lfunc_end64:
	.size	estimate_weighting_factor_B_slice.61, .Lfunc_end64-estimate_weighting_factor_B_slice.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.62
.LCPI65_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.62
	.p2align	4, 0x90
	.type	test_wp_B_slice.62,@function
test_wp_B_slice.62:                     # @test_wp_B_slice.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$874207595, -84(%rbp)   # imm = 0x341B596B
	movl	%edi, -76(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB65_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB65_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB65_4
.LBB65_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB65_4
.LBB65_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -36(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB65_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_7 Depth 2
                                        #       Child Loop BB65_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB65_5 Depth=1
	movl	$0, -24(%rbp)
.LBB65_7:                               # %for.cond9
                                        #   Parent Loop BB65_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB65_7 Depth=2
	movl	$0, -32(%rbp)
.LBB65_9:                               # %for.cond14
                                        #   Parent Loop BB65_5 Depth=1
                                        #     Parent Loop BB65_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB65_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB65_9 Depth=3
	movl	-36(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-36(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB65_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_9
.LBB65_12:                              # %for.end
                                        #   in Loop: Header=BB65_7 Depth=2
	jmp	.LBB65_13
.LBB65_13:                              # %for.inc41
                                        #   in Loop: Header=BB65_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_7
.LBB65_14:                              # %for.end43
                                        #   in Loop: Header=BB65_5 Depth=1
	jmp	.LBB65_15
.LBB65_15:                              # %for.inc44
                                        #   in Loop: Header=BB65_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_5
.LBB65_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB65_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_19 Depth 2
                                        #       Child Loop BB65_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB65_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	$0, -24(%rbp)
.LBB65_19:                              # %for.cond50
                                        #   Parent Loop BB65_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB65_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB65_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB65_26
.LBB65_22:                              # %cond.false61
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB65_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	$127, %eax
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false71
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB65_25:                              # %cond.end79
                                        #   in Loop: Header=BB65_19 Depth=2
.LBB65_26:                              # %cond.end81
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	%eax, -60(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB65_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB65_32
.LBB65_28:                              # %cond.false90
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB65_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	$127, %eax
	jmp	.LBB65_31
.LBB65_30:                              # %cond.false98
                                        #   in Loop: Header=BB65_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB65_31:                              # %cond.end104
                                        #   in Loop: Header=BB65_19 Depth=2
.LBB65_32:                              # %cond.end106
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB65_33:                              # %for.cond108
                                        #   Parent Loop BB65_17 Depth=1
                                        #     Parent Loop BB65_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB65_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB65_33 Depth=3
	cmpl	$0, -60(%rbp)
	jne	.LBB65_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB65_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB65_46
.LBB65_36:                              # %if.else
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-60(%rbp)
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB65_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB65_42
.LBB65_38:                              # %cond.false145
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB65_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false151
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	-56(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB65_41:                              # %cond.end155
                                        #   in Loop: Header=BB65_33 Depth=3
.LBB65_42:                              # %cond.end157
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB65_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB65_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB65_45
.LBB65_44:                              # %if.then183
                                        #   in Loop: Header=BB65_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB65_45:                              # %if.end
                                        #   in Loop: Header=BB65_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB65_46:                              # %if.end220
                                        #   in Loop: Header=BB65_33 Depth=3
	jmp	.LBB65_47
.LBB65_47:                              # %for.inc221
                                        #   in Loop: Header=BB65_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_33
.LBB65_48:                              # %for.end223
                                        #   in Loop: Header=BB65_19 Depth=2
	jmp	.LBB65_49
.LBB65_49:                              # %for.inc224
                                        #   in Loop: Header=BB65_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_19
.LBB65_50:                              # %for.end226
                                        #   in Loop: Header=BB65_17 Depth=1
	jmp	.LBB65_51
.LBB65_51:                              # %for.inc227
                                        #   in Loop: Header=BB65_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_17
.LBB65_52:                              # %for.end229
	cmpl	$1, -76(%rbp)
	jne	.LBB65_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB65_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_56 Depth 2
                                        #       Child Loop BB65_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB65_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB65_54 Depth=1
	movl	$0, -24(%rbp)
.LBB65_56:                              # %for.cond235
                                        #   Parent Loop BB65_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB65_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB65_56 Depth=2
	movl	$0, -20(%rbp)
.LBB65_58:                              # %for.cond238
                                        #   Parent Loop BB65_54 Depth=1
                                        #     Parent Loop BB65_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB65_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB65_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB65_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB65_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB65_62
.LBB65_61:                              # %cond.false243
                                        #   in Loop: Header=BB65_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB65_62:                              # %cond.end244
                                        #   in Loop: Header=BB65_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -88(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB65_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_58
.LBB65_64:                              # %for.end276
                                        #   in Loop: Header=BB65_56 Depth=2
	jmp	.LBB65_65
.LBB65_65:                              # %for.inc277
                                        #   in Loop: Header=BB65_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_56
.LBB65_66:                              # %for.end279
                                        #   in Loop: Header=BB65_54 Depth=1
	jmp	.LBB65_67
.LBB65_67:                              # %for.inc280
                                        #   in Loop: Header=BB65_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_54
.LBB65_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB65_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB65_69 Depth=1
	movl	$0, -28(%rbp)
.LBB65_71:                              # %for.cond287
                                        #   Parent Loop BB65_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB65_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB65_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_71
.LBB65_74:                              # %for.end327
                                        #   in Loop: Header=BB65_69 Depth=1
	jmp	.LBB65_75
.LBB65_75:                              # %for.inc328
                                        #   in Loop: Header=BB65_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_69
.LBB65_76:                              # %for.end330
	jmp	.LBB65_142
.LBB65_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB65_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB65_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB65_78 Depth=1
	movl	$0, -24(%rbp)
.LBB65_80:                              # %for.cond335
                                        #   Parent Loop BB65_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB65_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB65_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB65_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_80
.LBB65_83:                              # %for.end345
                                        #   in Loop: Header=BB65_78 Depth=1
	jmp	.LBB65_84
.LBB65_84:                              # %for.inc346
                                        #   in Loop: Header=BB65_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_78
.LBB65_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB65_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_88 Depth 2
                                        #       Child Loop BB65_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB65_86 Depth=1
	movl	$0, -32(%rbp)
.LBB65_88:                              # %for.cond354
                                        #   Parent Loop BB65_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB65_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB65_90:                              # %for.cond372
                                        #   Parent Loop BB65_86 Depth=1
                                        #     Parent Loop BB65_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB65_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB65_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_90
.LBB65_93:                              # %for.end389
                                        #   in Loop: Header=BB65_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB65_94
	jp	.LBB65_94
	jmp	.LBB65_95
.LBB65_94:                              # %if.then396
                                        #   in Loop: Header=BB65_88 Depth=2
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_96
.LBB65_95:                              # %if.else406
                                        #   in Loop: Header=BB65_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB65_96:                              # %if.end407
                                        #   in Loop: Header=BB65_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB65_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB65_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB65_99
.LBB65_98:                              # %if.then413
                                        #   in Loop: Header=BB65_88 Depth=2
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB65_99:                              # %if.end414
                                        #   in Loop: Header=BB65_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-3008(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB65_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_88
.LBB65_101:                             # %for.end447
                                        #   in Loop: Header=BB65_86 Depth=1
	jmp	.LBB65_102
.LBB65_102:                             # %for.inc448
                                        #   in Loop: Header=BB65_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_86
.LBB65_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB65_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB65_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_107 Depth 2
                                        #       Child Loop BB65_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB65_105 Depth=1
	movl	$0, -28(%rbp)
.LBB65_107:                             # %for.cond459
                                        #   Parent Loop BB65_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB65_107 Depth=2
	movl	$0, -20(%rbp)
.LBB65_109:                             # %for.cond465
                                        #   Parent Loop BB65_105 Depth=1
                                        #     Parent Loop BB65_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB65_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB65_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB65_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_109
.LBB65_112:                             # %for.end495
                                        #   in Loop: Header=BB65_107 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc496
                                        #   in Loop: Header=BB65_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_107
.LBB65_114:                             # %for.end498
                                        #   in Loop: Header=BB65_105 Depth=1
	jmp	.LBB65_115
.LBB65_115:                             # %for.inc499
                                        #   in Loop: Header=BB65_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_105
.LBB65_116:                             # %for.end501
	jmp	.LBB65_126
.LBB65_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB65_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB65_118 Depth=1
	movl	$0, -28(%rbp)
.LBB65_120:                             # %for.cond508
                                        #   Parent Loop BB65_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB65_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB65_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_120
.LBB65_123:                             # %for.end549
                                        #   in Loop: Header=BB65_118 Depth=1
	jmp	.LBB65_124
.LBB65_124:                             # %for.inc550
                                        #   in Loop: Header=BB65_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_118
.LBB65_125:                             # %for.end552
	jmp	.LBB65_126
.LBB65_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB65_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_129 Depth 2
                                        #       Child Loop BB65_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB65_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB65_127 Depth=1
	movl	$0, -24(%rbp)
.LBB65_129:                             # %for.cond558
                                        #   Parent Loop BB65_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB65_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB65_129 Depth=2
	movl	$0, -20(%rbp)
.LBB65_131:                             # %for.cond562
                                        #   Parent Loop BB65_127 Depth=1
                                        #     Parent Loop BB65_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB65_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB65_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB65_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB65_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB65_135
.LBB65_134:                             # %cond.false569
                                        #   in Loop: Header=BB65_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB65_135:                             # %cond.end570
                                        #   in Loop: Header=BB65_131 Depth=3
	movl	%eax, -88(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB65_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_131
.LBB65_137:                             # %for.end598
                                        #   in Loop: Header=BB65_129 Depth=2
	jmp	.LBB65_138
.LBB65_138:                             # %for.inc599
                                        #   in Loop: Header=BB65_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_129
.LBB65_139:                             # %for.end601
                                        #   in Loop: Header=BB65_127 Depth=1
	jmp	.LBB65_140
.LBB65_140:                             # %for.inc602
                                        #   in Loop: Header=BB65_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_127
.LBB65_141:                             # %for.end604
	jmp	.LBB65_142
.LBB65_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB65_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_145 Depth 2
                                        #       Child Loop BB65_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB65_143 Depth=1
	movl	$0, -28(%rbp)
.LBB65_145:                             # %for.cond611
                                        #   Parent Loop BB65_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB65_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB65_145 Depth=2
	movl	$0, -20(%rbp)
.LBB65_147:                             # %for.cond617
                                        #   Parent Loop BB65_143 Depth=1
                                        #     Parent Loop BB65_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB65_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB65_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB65_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB65_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB65_151
.LBB65_150:                             # %if.then638
                                        #   in Loop: Header=BB65_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB65_154
.LBB65_151:                             # %if.end639
                                        #   in Loop: Header=BB65_147 Depth=3
	jmp	.LBB65_152
.LBB65_152:                             # %for.inc640
                                        #   in Loop: Header=BB65_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_147
.LBB65_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB65_145 Depth=2
	jmp	.LBB65_154
.LBB65_154:                             # %for.end642
                                        #   in Loop: Header=BB65_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB65_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB65_143 Depth=1
	jmp	.LBB65_159
.LBB65_156:                             # %if.end646
                                        #   in Loop: Header=BB65_145 Depth=2
	jmp	.LBB65_157
.LBB65_157:                             # %for.inc647
                                        #   in Loop: Header=BB65_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_145
.LBB65_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB65_143 Depth=1
	jmp	.LBB65_159
.LBB65_159:                             # %for.end649
                                        #   in Loop: Header=BB65_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB65_161
# %bb.160:                              # %if.then652
	jmp	.LBB65_164
.LBB65_161:                             # %if.end653
                                        #   in Loop: Header=BB65_143 Depth=1
	jmp	.LBB65_162
.LBB65_162:                             # %for.inc654
                                        #   in Loop: Header=BB65_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_143
.LBB65_163:                             # %for.end656.loopexit
	jmp	.LBB65_164
.LBB65_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$874207595, -84(%rbp)   # imm = 0x341B596B
	jne	.LBB65_166
.LBB65_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_165
.Lfunc_end65:
	.size	test_wp_B_slice.62, .Lfunc_end65-test_wp_B_slice.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function estimate_weighting_factor_P_slice.63
.LCPI66_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	estimate_weighting_factor_P_slice.63
	.p2align	4, 0x90
	.type	estimate_weighting_factor_P_slice.63,@function
estimate_weighting_factor_P_slice.63:   # @estimate_weighting_factor_P_slice.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              # imm = 0x3A0
	movl	$5775445, -60(%rbp)     # imm = 0x582055
	movl	%edi, -64(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB66_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB66_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_7 Depth 2
                                        #       Child Loop BB66_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	$0, -16(%rbp)
.LBB66_7:                               # %for.cond12
                                        #   Parent Loop BB66_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_9 Depth 3
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_14
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB66_7 Depth=2
	movl	$0, -4(%rbp)
.LBB66_9:                               # %for.cond17
                                        #   Parent Loop BB66_5 Depth=1
                                        #     Parent Loop BB66_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -4(%rbp)
	jge	.LBB66_12
# %bb.10:                               # %for.body19
                                        #   in Loop: Header=BB66_9 Depth=3
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	movl	-40(%rbp,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB66_9 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_9
.LBB66_12:                              # %for.end
                                        #   in Loop: Header=BB66_7 Depth=2
	jmp	.LBB66_13
.LBB66_13:                              # %for.inc48
                                        #   in Loop: Header=BB66_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_7
.LBB66_14:                              # %for.end50
                                        #   in Loop: Header=BB66_5 Depth=1
	jmp	.LBB66_15
.LBB66_15:                              # %for.inc51
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_5
.LBB66_16:                              # %for.end53
	movl	$0, -12(%rbp)
.LBB66_17:                              # %for.cond54
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_19 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB66_24
# %bb.18:                               # %for.body56
                                        #   in Loop: Header=BB66_17 Depth=1
	movl	$0, -16(%rbp)
.LBB66_19:                              # %for.cond57
                                        #   Parent Loop BB66_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB66_22
# %bb.20:                               # %for.body59
                                        #   in Loop: Header=BB66_19 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-48(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -48(%rbp)
# %bb.21:                               # %for.inc65
                                        #   in Loop: Header=BB66_19 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_19
.LBB66_22:                              # %for.end67
                                        #   in Loop: Header=BB66_17 Depth=1
	jmp	.LBB66_23
.LBB66_23:                              # %for.inc68
                                        #   in Loop: Header=BB66_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_17
.LBB66_24:                              # %for.end70
	movl	$0, -8(%rbp)
.LBB66_25:                              # %for.cond71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_27 Depth 2
                                        #       Child Loop BB66_29 Depth 3
                                        #       Child Loop BB66_48 Depth 3
                                        #       Child Loop BB66_58 Depth 3
                                        #         Child Loop BB66_60 Depth 4
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_75
# %bb.26:                               # %for.body75
                                        #   in Loop: Header=BB66_25 Depth=1
	movl	$0, -4(%rbp)
.LBB66_27:                              # %for.cond76
                                        #   Parent Loop BB66_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_29 Depth 3
                                        #       Child Loop BB66_48 Depth 3
                                        #       Child Loop BB66_58 Depth 3
                                        #         Child Loop BB66_60 Depth 4
	movl	-4(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_73
# %bb.28:                               # %for.body81
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-4(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -56(%rbp)
	movslq	-8(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB66_29:                              # %for.cond92
                                        #   Parent Loop BB66_25 Depth=1
                                        #     Parent Loop BB66_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_32
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB66_29 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vaddsd	-192(%rbp,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp,%rax,8)
# %bb.31:                               # %for.inc104
                                        #   in Loop: Header=BB66_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_29
.LBB66_32:                              # %for.end106
                                        #   in Loop: Header=BB66_27 Depth=2
	vcvtsi2sdl	-64(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB66_40
	jp	.LBB66_40
# %bb.33:                               # %if.then
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-4(%rbp), %rax
	vmovsd	-192(%rbp,%rax,8), %xmm0 # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB66_34
	jp	.LBB66_34
	jmp	.LBB66_35
.LBB66_34:                              # %if.then114
                                        #   in Loop: Header=BB66_27 Depth=2
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-48(%rbp), %xmm1, %xmm1
	movslq	-4(%rbp), %rax
	vdivsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	jmp	.LBB66_36
.LBB66_35:                              # %if.else
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB66_36:                              # %if.end
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$-64, (%rcx)
	jl	.LBB66_38
# %bb.37:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB66_39
.LBB66_38:                              # %if.then147
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB66_39:                              # %if.end154
                                        #   in Loop: Header=BB66_27 Depth=2
	jmp	.LBB66_47
.LBB66_40:                              # %if.else155
                                        #   in Loop: Header=BB66_27 Depth=2
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-48(%rbp), %xmm1        # xmm1 = mem[0],zero
	movslq	-4(%rbp), %rax
	vsubsd	-192(%rbp,%rax,8), %xmm1, %xmm1
	movq	img, %rax
	movl	60(%rax), %eax
	movq	img, %rcx
	imull	52(%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	cmpl	$-128, (%rdx)
	jge	.LBB66_42
# %bb.41:                               # %cond.true178
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB66_46
.LBB66_42:                              # %cond.false179
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	cmpl	$127, (%rcx)
	jle	.LBB66_44
# %bb.43:                               # %cond.true187
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	$127, %eax
	jmp	.LBB66_45
.LBB66_44:                              # %cond.false188
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	(%rcx), %eax
.LBB66_45:                              # %cond.end194
                                        #   in Loop: Header=BB66_27 Depth=2
.LBB66_46:                              # %cond.end196
                                        #   in Loop: Header=BB66_27 Depth=2
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
	movl	-40(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, (%rdx)
.LBB66_47:                              # %if.end209
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movl	$0, -12(%rbp)
.LBB66_48:                              # %for.cond222
                                        #   Parent Loop BB66_25 Depth=1
                                        #     Parent Loop BB66_27 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_57
# %bb.49:                               # %for.body228
                                        #   in Loop: Header=BB66_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB66_51
# %bb.50:                               # %cond.true247
                                        #   in Loop: Header=BB66_48 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_55
.LBB66_51:                              # %cond.false248
                                        #   in Loop: Header=BB66_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB66_53
# %bb.52:                               # %cond.true268
                                        #   in Loop: Header=BB66_48 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_54
.LBB66_53:                              # %cond.false270
                                        #   in Loop: Header=BB66_48 Depth=3
	movq	-56(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB66_54:                              # %cond.end288
                                        #   in Loop: Header=BB66_48 Depth=3
.LBB66_55:                              # %cond.end290
                                        #   in Loop: Header=BB66_48 Depth=3
	movq	-72(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc295
                                        #   in Loop: Header=BB66_48 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_48
.LBB66_57:                              # %for.end297
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	$0, -12(%rbp)
.LBB66_58:                              # %for.cond298
                                        #   Parent Loop BB66_25 Depth=1
                                        #     Parent Loop BB66_27 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_60 Depth 4
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_71
# %bb.59:                               # %for.body304
                                        #   in Loop: Header=BB66_58 Depth=3
	movl	$0, -16(%rbp)
.LBB66_60:                              # %for.cond305
                                        #   Parent Loop BB66_25 Depth=1
                                        #     Parent Loop BB66_27 Depth=2
                                        #       Parent Loop BB66_58 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	addl	$8, %ecx
	shll	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_69
# %bb.61:                               # %for.body311
                                        #   in Loop: Header=BB66_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	cmpl	$0, %eax
	jge	.LBB66_63
# %bb.62:                               # %cond.true335
                                        #   in Loop: Header=BB66_60 Depth=4
	xorl	%eax, %eax
	jmp	.LBB66_67
.LBB66_63:                              # %cond.false336
                                        #   in Loop: Header=BB66_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB66_65
# %bb.64:                               # %cond.true362
                                        #   in Loop: Header=BB66_60 Depth=4
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_66
.LBB66_65:                              # %cond.false364
                                        #   in Loop: Header=BB66_60 Depth=4
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-560(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	imull	(%rdx), %eax
	addl	wp_luma_round, %eax
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movslq	-8(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-928(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	addl	(%rdx), %eax
.LBB66_66:                              # %cond.end387
                                        #   in Loop: Header=BB66_60 Depth=4
.LBB66_67:                              # %cond.end389
                                        #   in Loop: Header=BB66_60 Depth=4
	movq	listX, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6456(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.68:                               # %for.inc398
                                        #   in Loop: Header=BB66_60 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_60
.LBB66_69:                              # %for.end400
                                        #   in Loop: Header=BB66_58 Depth=3
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc401
                                        #   in Loop: Header=BB66_58 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_58
.LBB66_71:                              # %for.end403
                                        #   in Loop: Header=BB66_27 Depth=2
	jmp	.LBB66_72
.LBB66_72:                              # %for.inc404
                                        #   in Loop: Header=BB66_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_27
.LBB66_73:                              # %for.end406
                                        #   in Loop: Header=BB66_25 Depth=1
	jmp	.LBB66_74
.LBB66_74:                              # %for.inc407
                                        #   in Loop: Header=BB66_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_25
.LBB66_75:                              # %for.end409
	movl	$0, -8(%rbp)
.LBB66_76:                              # %for.cond410
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_78 Depth 2
                                        #       Child Loop BB66_80 Depth 3
	movl	-8(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_87
# %bb.77:                               # %for.body414
                                        #   in Loop: Header=BB66_76 Depth=1
	movl	$0, -24(%rbp)
.LBB66_78:                              # %for.cond415
                                        #   Parent Loop BB66_76 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_80 Depth 3
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB66_85
# %bb.79:                               # %for.body420
                                        #   in Loop: Header=BB66_78 Depth=2
	movl	$0, -20(%rbp)
.LBB66_80:                              # %for.cond421
                                        #   Parent Loop BB66_76 Depth=1
                                        #     Parent Loop BB66_78 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB66_83
# %bb.81:                               # %for.body424
                                        #   in Loop: Header=BB66_80 Depth=3
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-560(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-928(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.82:                               # %for.inc449
                                        #   in Loop: Header=BB66_80 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_80
.LBB66_83:                              # %for.end451
                                        #   in Loop: Header=BB66_78 Depth=2
	jmp	.LBB66_84
.LBB66_84:                              # %for.inc452
                                        #   in Loop: Header=BB66_78 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_78
.LBB66_85:                              # %for.end454
                                        #   in Loop: Header=BB66_76 Depth=1
	jmp	.LBB66_86
.LBB66_86:                              # %for.inc455
                                        #   in Loop: Header=BB66_76 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_76
.LBB66_87:                              # %for.end457
	cmpl	$5775445, -60(%rbp)     # imm = 0x582055
	jne	.LBB66_89
.LBB66_88:
	addq	$928, %rsp              # imm = 0x3A0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_88
.Lfunc_end66:
	.size	estimate_weighting_factor_P_slice.63, .Lfunc_end66-estimate_weighting_factor_P_slice.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function test_wp_B_slice.64
.LCPI67_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	test_wp_B_slice.64
	.p2align	4, 0x90
	.type	test_wp_B_slice.64,@function
test_wp_B_slice.64:                     # @test_wp_B_slice.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$35416, %rsp            # imm = 0x8A58
	.cfi_offset %rbx, -24
	movl	$640964211, -88(%rbp)   # imm = 0x26345673
	movl	%edi, -84(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB67_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB67_4
.LBB67_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB67_4
.LBB67_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -48(%rbp)
	movl	$5, luma_log_weight_denom
	movl	$5, chroma_log_weight_denom
	movl	luma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_luma_round
	movl	chroma_log_weight_denom, %ecx
	subl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, wp_chroma_round
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movl	%edx, -40(%rbp)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -12(%rbp)
.LBB67_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_7 Depth 2
                                        #       Child Loop BB67_9 Depth 3
	movl	-12(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_16
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	$0, -24(%rbp)
.LBB67_7:                               # %for.cond9
                                        #   Parent Loop BB67_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_9 Depth 3
	movl	-24(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	$0, -32(%rbp)
.LBB67_9:                               # %for.cond14
                                        #   Parent Loop BB67_5 Depth=1
                                        #     Parent Loop BB67_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -32(%rbp)
	jge	.LBB67_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-40(%rbp), %eax
	movq	wp_weight, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_offset, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	movl	-40(%rbp), %eax
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB67_9 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_9
.LBB67_12:                              # %for.end
                                        #   in Loop: Header=BB67_7 Depth=2
	jmp	.LBB67_13
.LBB67_13:                              # %for.inc41
                                        #   in Loop: Header=BB67_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_7
.LBB67_14:                              # %for.end43
                                        #   in Loop: Header=BB67_5 Depth=1
	jmp	.LBB67_15
.LBB67_15:                              # %for.inc44
                                        #   in Loop: Header=BB67_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_5
.LBB67_16:                              # %for.end46
	movl	$0, -12(%rbp)
.LBB67_17:                              # %for.cond47
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_19 Depth 2
                                        #       Child Loop BB67_33 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB67_52
# %bb.18:                               # %for.body49
                                        #   in Loop: Header=BB67_17 Depth=1
	movl	$0, -24(%rbp)
.LBB67_19:                              # %for.cond50
                                        #   Parent Loop BB67_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_33 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB67_50
# %bb.20:                               # %for.body52
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB67_22
# %bb.21:                               # %cond.true60
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB67_26
.LBB67_22:                              # %cond.false61
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB67_24
# %bb.23:                               # %cond.true70
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	$127, %eax
	jmp	.LBB67_25
.LBB67_24:                              # %cond.false71
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	listX+8, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB67_25:                              # %cond.end79
                                        #   in Loop: Header=BB67_19 Depth=2
.LBB67_26:                              # %cond.end81
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	%eax, -56(%rbp)
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB67_28
# %bb.27:                               # %cond.true89
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB67_32
.LBB67_28:                              # %cond.false90
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB67_30
# %bb.29:                               # %cond.true97
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	$127, %eax
	jmp	.LBB67_31
.LBB67_30:                              # %cond.false98
                                        #   in Loop: Header=BB67_19 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	listX, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB67_31:                              # %cond.end104
                                        #   in Loop: Header=BB67_19 Depth=2
.LBB67_32:                              # %cond.end106
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	%eax, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB67_33:                              # %for.cond108
                                        #   Parent Loop BB67_17 Depth=1
                                        #     Parent Loop BB67_19 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB67_48
# %bb.34:                               # %for.body110
                                        #   in Loop: Header=BB67_33 Depth=3
	cmpl	$0, -56(%rbp)
	jne	.LBB67_36
# %bb.35:                               # %if.then
                                        #   in Loop: Header=BB67_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$32, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$32, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	jmp	.LBB67_46
.LBB67_36:                              # %if.else
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-56(%rbp)
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB67_38
# %bb.37:                               # %cond.true144
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB67_42
.LBB67_38:                              # %cond.false145
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB67_40
# %bb.39:                               # %cond.true150
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB67_41
.LBB67_40:                              # %cond.false151
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-60(%rbp), %eax
	imull	-52(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB67_41:                              # %cond.end155
                                        #   in Loop: Header=BB67_33 Depth=3
.LBB67_42:                              # %cond.end157
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$-64, (%rcx,%rax,4)
	jl	.LBB67_44
# %bb.43:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	cmpl	$128, (%rax,%rcx,4)
	jle	.LBB67_45
.LBB67_44:                              # %if.then183
                                        #   in Loop: Header=BB67_33 Depth=3
	leaq	-19216(%rbp), %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$32, (%rax,%rcx,4)
.LBB67_45:                              # %if.end
                                        #   in Loop: Header=BB67_33 Depth=3
	leaq	-35424(%rbp), %rax
	leaq	-19216(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2700, %rdx             # imm = 0xA8C
	movslq	-12(%rbp), %rsi
	imulq	$180, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	imulq	$12, %rsi, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	$64, %edi
	subl	(%rdx,%rsi,4), %edi
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%edi, (%rcx,%rdx,4)
	movq	%rax, %rcx
	addq	$2700, %rcx             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB67_46:                              # %if.end220
                                        #   in Loop: Header=BB67_33 Depth=3
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc221
                                        #   in Loop: Header=BB67_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_33
.LBB67_48:                              # %for.end223
                                        #   in Loop: Header=BB67_19 Depth=2
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc224
                                        #   in Loop: Header=BB67_19 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_19
.LBB67_50:                              # %for.end226
                                        #   in Loop: Header=BB67_17 Depth=1
	jmp	.LBB67_51
.LBB67_51:                              # %for.inc227
                                        #   in Loop: Header=BB67_17 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_17
.LBB67_52:                              # %for.end229
	cmpl	$1, -84(%rbp)
	jne	.LBB67_77
# %bb.53:                               # %if.then231
	movl	$0, -12(%rbp)
.LBB67_54:                              # %for.cond232
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_56 Depth 2
                                        #       Child Loop BB67_58 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB67_68
# %bb.55:                               # %for.body234
                                        #   in Loop: Header=BB67_54 Depth=1
	movl	$0, -24(%rbp)
.LBB67_56:                              # %for.cond235
                                        #   Parent Loop BB67_54 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_58 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB67_66
# %bb.57:                               # %for.body237
                                        #   in Loop: Header=BB67_56 Depth=2
	movl	$0, -20(%rbp)
.LBB67_58:                              # %for.cond238
                                        #   Parent Loop BB67_54 Depth=1
                                        #     Parent Loop BB67_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB67_64
# %bb.59:                               # %for.body240
                                        #   in Loop: Header=BB67_58 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB67_61
# %bb.60:                               # %cond.true242
                                        #   in Loop: Header=BB67_58 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB67_62
.LBB67_61:                              # %cond.false243
                                        #   in Loop: Header=BB67_58 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB67_62:                              # %cond.end244
                                        #   in Loop: Header=BB67_58 Depth=3
	leaq	-19216(%rbp), %rcx
	movl	%eax, -76(%rbp)
	movq	%rcx, %rax
	addq	$2700, %rax             # imm = 0xA8C
	movslq	-12(%rbp), %rdx
	imulq	$180, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	imulq	$12, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	movq	wbp_weight, %rdx
	movq	8(%rdx), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movslq	-12(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc274
                                        #   in Loop: Header=BB67_58 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_58
.LBB67_64:                              # %for.end276
                                        #   in Loop: Header=BB67_56 Depth=2
	jmp	.LBB67_65
.LBB67_65:                              # %for.inc277
                                        #   in Loop: Header=BB67_56 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_56
.LBB67_66:                              # %for.end279
                                        #   in Loop: Header=BB67_54 Depth=1
	jmp	.LBB67_67
.LBB67_67:                              # %for.inc280
                                        #   in Loop: Header=BB67_54 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_54
.LBB67_68:                              # %for.end282
	movl	$0, -16(%rbp)
.LBB67_69:                              # %for.cond283
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_71 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_76
# %bb.70:                               # %for.body286
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	$0, -28(%rbp)
.LBB67_71:                              # %for.cond287
                                        #   Parent Loop BB67_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_74
# %bb.72:                               # %for.body291
                                        #   in Loop: Header=BB67_71 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.73:                               # %for.inc325
                                        #   in Loop: Header=BB67_71 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_71
.LBB67_74:                              # %for.end327
                                        #   in Loop: Header=BB67_69 Depth=1
	jmp	.LBB67_75
.LBB67_75:                              # %for.inc328
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_69
.LBB67_76:                              # %for.end330
	jmp	.LBB67_142
.LBB67_77:                              # %if.else331
	movl	$0, -12(%rbp)
.LBB67_78:                              # %for.cond332
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_80 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB67_85
# %bb.79:                               # %for.body334
                                        #   in Loop: Header=BB67_78 Depth=1
	movl	$0, -24(%rbp)
.LBB67_80:                              # %for.cond335
                                        #   Parent Loop BB67_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB67_83
# %bb.81:                               # %for.body337
                                        #   in Loop: Header=BB67_80 Depth=2
	movq	imgY_org(%rip), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	vaddsd	-72(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -72(%rbp)
# %bb.82:                               # %for.inc343
                                        #   in Loop: Header=BB67_80 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_80
.LBB67_83:                              # %for.end345
                                        #   in Loop: Header=BB67_78 Depth=1
	jmp	.LBB67_84
.LBB67_84:                              # %for.inc346
                                        #   in Loop: Header=BB67_78 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_78
.LBB67_85:                              # %for.end348
	movl	$0, -16(%rbp)
.LBB67_86:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_88 Depth 2
                                        #       Child Loop BB67_90 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_103
# %bb.87:                               # %for.body353
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	$0, -32(%rbp)
.LBB67_88:                              # %for.cond354
                                        #   Parent Loop BB67_86 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_90 Depth 3
	movl	-32(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_101
# %bb.89:                               # %for.body359
                                        #   in Loop: Header=BB67_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-16(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -12(%rbp)
.LBB67_90:                              # %for.cond372
                                        #   Parent Loop BB67_86 Depth=1
                                        #     Parent Loop BB67_88 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	movq	img, %rdx
	imull	52(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_93
# %bb.91:                               # %for.body378
                                        #   in Loop: Header=BB67_90 Depth=3
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vaddsd	(%rcx,%rax,8), %xmm0, %xmm0
	vmovsd	%xmm0, (%rcx,%rax,8)
# %bb.92:                               # %for.inc387
                                        #   in Loop: Header=BB67_90 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_90
.LBB67_93:                              # %for.end389
                                        #   in Loop: Header=BB67_88 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vmovsd	(%rcx,%rax,8), %xmm0    # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB67_94
	jp	.LBB67_94
	jmp	.LBB67_95
.LBB67_94:                              # %if.then396
                                        #   in Loop: Header=BB67_88 Depth=2
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vmulsd	-72(%rbp), %xmm1, %xmm1
	movslq	-16(%rbp), %rax
	imulq	$120, %rax, %rax
	leaq	-832(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	vdivsd	(%rcx,%rax,8), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB67_96
.LBB67_95:                              # %if.else406
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB67_96:                              # %if.end407
                                        #   in Loop: Header=BB67_88 Depth=2
	cmpl	$-64, -44(%rbp)
	jl	.LBB67_98
# %bb.97:                               # %lor.lhs.false410
                                        #   in Loop: Header=BB67_88 Depth=2
	cmpl	$127, -44(%rbp)
	jle	.LBB67_99
.LBB67_98:                              # %if.then413
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB67_99:                              # %if.end414
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	$0, -100(%rbp)
	movl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	leaq	-1920(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, (%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rsi
	movl	%eax, 4(%rsi)
	movl	-64(%rbp), %eax
	movslq	-16(%rbp), %rcx
	imulq	$180, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	imulq	$12, %rcx, %rcx
	addq	%rcx, %rdx
	movl	%eax, 8(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, (%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rdx
	movl	$0, 4(%rdx)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movl	$0, 8(%rcx)
# %bb.100:                              # %for.inc445
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_88
.LBB67_101:                             # %for.end447
                                        #   in Loop: Header=BB67_86 Depth=1
	jmp	.LBB67_102
.LBB67_102:                             # %for.inc448
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_86
.LBB67_103:                             # %for.end450
	movq	active_pps, %rax
	cmpl	$1, 196(%rax)
	jne	.LBB67_117
# %bb.104:                              # %if.then453
	movl	$0, -16(%rbp)
.LBB67_105:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_107 Depth 2
                                        #       Child Loop BB67_109 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_116
# %bb.106:                              # %for.body458
                                        #   in Loop: Header=BB67_105 Depth=1
	movl	$0, -28(%rbp)
.LBB67_107:                             # %for.cond459
                                        #   Parent Loop BB67_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_109 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_114
# %bb.108:                              # %for.body464
                                        #   in Loop: Header=BB67_107 Depth=2
	movl	$0, -20(%rbp)
.LBB67_109:                             # %for.cond465
                                        #   Parent Loop BB67_105 Depth=1
                                        #     Parent Loop BB67_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB67_112
# %bb.110:                              # %for.body468
                                        #   in Loop: Header=BB67_109 Depth=3
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-1920(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rax
	imulq	$180, %rax, %rax
	leaq	-3008(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	wp_offset, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc493
                                        #   in Loop: Header=BB67_109 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_109
.LBB67_112:                             # %for.end495
                                        #   in Loop: Header=BB67_107 Depth=2
	jmp	.LBB67_113
.LBB67_113:                             # %for.inc496
                                        #   in Loop: Header=BB67_107 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_107
.LBB67_114:                             # %for.end498
                                        #   in Loop: Header=BB67_105 Depth=1
	jmp	.LBB67_115
.LBB67_115:                             # %for.inc499
                                        #   in Loop: Header=BB67_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_105
.LBB67_116:                             # %for.end501
	jmp	.LBB67_126
.LBB67_117:                             # %if.else502
	movl	$0, -16(%rbp)
.LBB67_118:                             # %for.cond503
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_120 Depth 2
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_125
# %bb.119:                              # %for.body507
                                        #   in Loop: Header=BB67_118 Depth=1
	movl	$0, -28(%rbp)
.LBB67_120:                             # %for.cond508
                                        #   Parent Loop BB67_118 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_123
# %bb.121:                              # %for.body513
                                        #   in Loop: Header=BB67_120 Depth=2
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, (%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movslq	-28(%rbp), %rsi
	movq	(%rcx,%rsi,8), %rcx
	movl	%edx, 4(%rcx)
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %eax
	movq	wp_weight, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, (%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 4(%rax)
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 8(%rax)
# %bb.122:                              # %for.inc547
                                        #   in Loop: Header=BB67_120 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_120
.LBB67_123:                             # %for.end549
                                        #   in Loop: Header=BB67_118 Depth=1
	jmp	.LBB67_124
.LBB67_124:                             # %for.inc550
                                        #   in Loop: Header=BB67_118 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_118
.LBB67_125:                             # %for.end552
	jmp	.LBB67_126
.LBB67_126:                             # %if.end553
	movl	$0, -12(%rbp)
.LBB67_127:                             # %for.cond554
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_129 Depth 2
                                        #       Child Loop BB67_131 Depth 3
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB67_141
# %bb.128:                              # %for.body557
                                        #   in Loop: Header=BB67_127 Depth=1
	movl	$0, -24(%rbp)
.LBB67_129:                             # %for.cond558
                                        #   Parent Loop BB67_127 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_131 Depth 3
	movl	-24(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB67_139
# %bb.130:                              # %for.body561
                                        #   in Loop: Header=BB67_129 Depth=2
	movl	$0, -20(%rbp)
.LBB67_131:                             # %for.cond562
                                        #   Parent Loop BB67_127 Depth=1
                                        #     Parent Loop BB67_129 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB67_137
# %bb.132:                              # %for.body565
                                        #   in Loop: Header=BB67_131 Depth=3
	cmpl	$0, -20(%rbp)
	jne	.LBB67_134
# %bb.133:                              # %cond.true568
                                        #   in Loop: Header=BB67_131 Depth=3
	movl	luma_log_weight_denom, %eax
	jmp	.LBB67_135
.LBB67_134:                             # %cond.false569
                                        #   in Loop: Header=BB67_131 Depth=3
	movl	chroma_log_weight_denom, %eax
.LBB67_135:                             # %cond.end570
                                        #   in Loop: Header=BB67_131 Depth=3
	movl	%eax, -76(%rbp)
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wbp_weight, %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.136:                              # %for.inc596
                                        #   in Loop: Header=BB67_131 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_131
.LBB67_137:                             # %for.end598
                                        #   in Loop: Header=BB67_129 Depth=2
	jmp	.LBB67_138
.LBB67_138:                             # %for.inc599
                                        #   in Loop: Header=BB67_129 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_129
.LBB67_139:                             # %for.end601
                                        #   in Loop: Header=BB67_127 Depth=1
	jmp	.LBB67_140
.LBB67_140:                             # %for.inc602
                                        #   in Loop: Header=BB67_127 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_127
.LBB67_141:                             # %for.end604
	jmp	.LBB67_142
.LBB67_142:                             # %if.end605
	movl	$0, -16(%rbp)
.LBB67_143:                             # %for.cond606
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_145 Depth 2
                                        #       Child Loop BB67_147 Depth 3
	movl	-16(%rbp), %eax
	movl	-36(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_163
# %bb.144:                              # %for.body610
                                        #   in Loop: Header=BB67_143 Depth=1
	movl	$0, -28(%rbp)
.LBB67_145:                             # %for.cond611
                                        #   Parent Loop BB67_143 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_147 Depth 3
	movl	-28(%rbp), %eax
	movslq	-16(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB67_158
# %bb.146:                              # %for.body616
                                        #   in Loop: Header=BB67_145 Depth=2
	movl	$0, -20(%rbp)
.LBB67_147:                             # %for.cond617
                                        #   Parent Loop BB67_143 Depth=1
                                        #     Parent Loop BB67_145 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$3, -20(%rbp)
	jge	.LBB67_153
# %bb.148:                              # %for.body620
                                        #   in Loop: Header=BB67_147 Depth=3
	movq	wp_weight, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cmpl	-40(%rbp), %eax
	jne	.LBB67_150
# %bb.149:                              # %lor.lhs.false629
                                        #   in Loop: Header=BB67_147 Depth=3
	movq	wp_offset, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_151
.LBB67_150:                             # %if.then638
                                        #   in Loop: Header=BB67_145 Depth=2
	movl	$1, -48(%rbp)
	jmp	.LBB67_154
.LBB67_151:                             # %if.end639
                                        #   in Loop: Header=BB67_147 Depth=3
	jmp	.LBB67_152
.LBB67_152:                             # %for.inc640
                                        #   in Loop: Header=BB67_147 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_147
.LBB67_153:                             # %for.end642.loopexit
                                        #   in Loop: Header=BB67_145 Depth=2
	jmp	.LBB67_154
.LBB67_154:                             # %for.end642
                                        #   in Loop: Header=BB67_145 Depth=2
	cmpl	$1, -48(%rbp)
	jne	.LBB67_156
# %bb.155:                              # %if.then645
                                        #   in Loop: Header=BB67_143 Depth=1
	jmp	.LBB67_159
.LBB67_156:                             # %if.end646
                                        #   in Loop: Header=BB67_145 Depth=2
	jmp	.LBB67_157
.LBB67_157:                             # %for.inc647
                                        #   in Loop: Header=BB67_145 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_145
.LBB67_158:                             # %for.end649.loopexit
                                        #   in Loop: Header=BB67_143 Depth=1
	jmp	.LBB67_159
.LBB67_159:                             # %for.end649
                                        #   in Loop: Header=BB67_143 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB67_161
# %bb.160:                              # %if.then652
	jmp	.LBB67_164
.LBB67_161:                             # %if.end653
                                        #   in Loop: Header=BB67_143 Depth=1
	jmp	.LBB67_162
.LBB67_162:                             # %for.inc654
                                        #   in Loop: Header=BB67_143 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_143
.LBB67_163:                             # %for.end656.loopexit
	jmp	.LBB67_164
.LBB67_164:                             # %for.end656
	movl	-48(%rbp), %ebx
	cmpl	$640964211, -88(%rbp)   # imm = 0x26345673
	jne	.LBB67_166
.LBB67_165:
	movl	%ebx, %eax
	addq	$35416, %rsp            # imm = 0x8A58
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_166:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_165
.Lfunc_end67:
	.size	test_wp_B_slice.64, .Lfunc_end67-test_wp_B_slice.64
	.cfi_endproc
                                        # -- End function
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
